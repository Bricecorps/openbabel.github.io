<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: obconversion.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>obconversion.h</h1><a href="obconversion_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obconversion.h - Handle file conversions. Declaration of OBFormat, OBConversion</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2004-2005 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"></span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_CONV_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_CONV_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;<a class="code" href="dlhandler_8h.shtml" title="Dynamic loader for file format modules.">openbabel/dlhandler.h</a>&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="oberror_8h.shtml" title="Handle error messages, warnings, notices, etc.">openbabel/oberror.h</a>&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="comment">// These macros are used in DLL builds. If they have not</span>
<a name="l00036"></a>00036 <span class="comment">// been set in babelconfig.h, define them as nothing.</span>
<a name="l00037"></a>00037 <span class="preprocessor">#ifndef OBCONV</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">        #define OBCONV</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="preprocessor">#ifndef OBDLL</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">        #define OBDLL</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span>
<a name="l00044"></a>00044 <span class="comment">//using namespace std;</span>
<a name="l00045"></a>00045 <span class="keyword">namespace </span>OpenBabel {
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 
<a name="l00048"></a>00048   <span class="keyword">class </span>OBBase;
<a name="l00049"></a>00049   <span class="keyword">class </span>OBConversion;
<a name="l00050"></a>00050   OBERROR <span class="keyword">extern</span>  OBMessageHandler <a class="code" href="namespaceOpenBabel.shtml#02dd5608cfe8883be0f788e2cd6488da" title="Global OBMessageHandler error handler.">obErrorLog</a>;
<a name="l00051"></a>00051 
<a name="l00052"></a>00052   <span class="comment">//*************************************************</span>
<a name="l00053"></a>00053 
<a name="l00055"></a>00055   <span class="comment">// class introduction in obconversion.cpp</span>
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml">00056</a>   <span class="keyword">class </span>OBCONV OBFormat
<a name="l00057"></a>00057     {
<a name="l00058"></a>00058     <span class="keyword">public</span>:
<a name="l00060"></a>00060 
<a name="l00064"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#1e309febfaef70cc3c8d98afc1540931">00064</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ReadMolecule(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00065"></a>00065         { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid input format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00066"></a>00066 
<a name="l00068"></a>00068 
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#6044ced825a2a83b7cfe7c45eea63c99">00072</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ReadChemObject(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00073"></a>00073         { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid input format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00074"></a>00074 
<a name="l00076"></a>00076 
<a name="l00081"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#663171ec9788e2d1621d374848b3888b">00081</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WriteMolecule(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00082"></a>00082         { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid output format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00083"></a>00083 
<a name="l00085"></a>00085 
<a name="l00089"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#5ea5d9623cd9594549a52e116caecaa2">00089</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WriteChemObject(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00090"></a>00090         { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid output format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00091"></a>00091 
<a name="l00093"></a>00093 
<a name="l00097"></a>00097       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description()=0;
<a name="l00098"></a>00098         
<a name="l00100"></a>00100 
<a name="l00102"></a>00102       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* TargetClassDescription();
<a name="l00103"></a>00103 
<a name="l00105"></a>00105 
<a name="l00108"></a>00108       <span class="keyword">virtual</span> <span class="keyword">const</span> std::type_info&amp; GetType();
<a name="l00109"></a>00109         
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#1d3a8785a0ad0c85b98fa3406a64d50f">00111</a>       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* SpecificationURL() { <span class="keywordflow">return</span> <span class="stringliteral">""</span>; }
<a name="l00112"></a>00112 
<a name="l00114"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#0e10219d8aedefa78ef16fc7fded85ec">00114</a>       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* GetMIMEType() { <span class="keywordflow">return</span> <span class="stringliteral">""</span>; }
<a name="l00115"></a>00115 
<a name="l00117"></a>00117    
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#94a94537cc5ba96b1876db1b612b91a3">00121</a>       <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Flags() { <span class="keywordflow">return</span> 0;}; 
<a name="l00122"></a>00122 
<a name="l00124"></a>00124 
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#1f0ee7ba19cc62b53a7ee06fa4f91509">00126</a>       <span class="keyword">virtual</span> <span class="keywordtype">int</span> SkipObjects(<span class="keywordtype">int</span> <span class="comment">/*n*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00127"></a>00127         {
<a name="l00128"></a>00128           <span class="keywordflow">return</span> 0; <span class="comment">//shows not implemented in the format class</span>
<a name="l00129"></a>00129         };
<a name="l00130"></a>00130 
<a name="l00132"></a>00132 
<a name="l00136"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#0924b1a442d147fa036bff23a4cf04ef">00136</a>       <span class="keyword">virtual</span> OBFormat* MakeNewInstance()
<a name="l00137"></a>00137         {
<a name="l00138"></a>00138           <span class="keywordflow">return</span> NULL; <span class="comment">//shows not implemented in the format class</span>
<a name="l00139"></a>00139         }
<a name="l00140"></a>00140 
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#ebe7951587dde866be926712693e285b">00142</a>       <span class="keyword">virtual</span> ~OBFormat(){};
<a name="l00143"></a>00143     };
<a name="l00144"></a>00144 
<a name="l00145"></a>00145   <span class="comment">//*************************************************</span>
<a name="l00148"></a><a class="code" href="structOpenBabel_1_1CharPtrLess.shtml">00148</a> <span class="comment"></span>        <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1CharPtrLess.shtml" title="Case insensitive string comparison for FormatsMap key.">CharPtrLess</a> : <span class="keyword">public</span> std::binary_function&lt;const char*,const char*, bool&gt;
<a name="l00149"></a>00149         {
<a name="l00150"></a><a class="code" href="structOpenBabel_1_1CharPtrLess.shtml#c2505b03ab30bfd419b570e0324743ab">00150</a>                 <span class="keywordtype">bool</span> <a class="code" href="structOpenBabel_1_1CharPtrLess.shtml#c2505b03ab30bfd419b570e0324743ab">operator()</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* p1,<span class="keyword">const</span> <span class="keywordtype">char</span>* p2)<span class="keyword"> const</span>
<a name="l00151"></a>00151 <span class="keyword">                </span>{ <span class="keywordflow">return</span> strcasecmp(p1,p2)&lt;0; }
<a name="l00152"></a>00152         };
<a name="l00153"></a>00153 
<a name="l00154"></a><a class="code" href="namespaceOpenBabel.shtml#92e73e2fb2bb989421e95ab53825a00b">00154</a>         <span class="keyword">typedef</span> std::map&lt;const char*,OBFormat*,CharPtrLess &gt; <a class="code" href="namespaceOpenBabel.shtml#92e73e2fb2bb989421e95ab53825a00b">FMapType</a>;
<a name="l00155"></a><a class="code" href="namespaceOpenBabel.shtml#5a287ebeb1e3d52f518c10409eb12bbd">00155</a>         <span class="keyword">typedef</span> FMapType::iterator <a class="code" href="namespaceOpenBabel.shtml#5a287ebeb1e3d52f518c10409eb12bbd">Formatpos</a>;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157   <span class="comment">//*************************************************</span>
<a name="l00159"></a>00159 <span class="comment"></span>  <span class="comment">// Class introduction in obconversion.cpp</span>
<a name="l00160"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml">00160</a>   <span class="keyword">class </span>OBCONV OBConversion
<a name="l00161"></a>00161     {
<a name="l00163"></a>00163     <span class="keyword">public</span>:
<a name="l00165"></a>00165 
<a name="l00166"></a>00166       OBConversion(std::istream* is=NULL, std::ostream* os=NULL);
<a name="l00168"></a>00168       OBConversion(<span class="keyword">const</span> OBConversion&amp; o);
<a name="l00169"></a>00169       <span class="keyword">virtual</span>     ~OBConversion(); 
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 
<a name="l00174"></a>00174       <span class="keyword">static</span> <span class="keywordtype">int</span>                                RegisterFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, OBFormat* pFormat, <span class="keyword">const</span> <span class="keywordtype">char</span>* MIME = NULL);
<a name="l00176"></a>00176       <span class="keyword">static</span> OBFormat*  FindFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID);
<a name="l00178"></a>00178       <span class="keyword">static</span> OBFormat*  FormatFromExt(<span class="keyword">const</span> <span class="keywordtype">char</span>* filename);
<a name="l00180"></a>00180       <span class="keyword">static</span> OBFormat*        FormatFromMIME(<span class="keyword">const</span> <span class="keywordtype">char</span>* MIME);
<a name="l00181"></a>00181 
<a name="l00183"></a>00183       <span class="keyword">static</span> <span class="keywordtype">bool</span>               GetNextFormat(<a class="code" href="namespaceOpenBabel.shtml#5a287ebeb1e3d52f518c10409eb12bbd">Formatpos</a>&amp; itr, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; str,OBFormat*&amp; pFormat);
<a name="l00185"></a>00185                 
<a name="l00187"></a>00187 
<a name="l00188"></a>00188       <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description(); <span class="comment">//generic conversion options</span>
<a name="l00190"></a>00190 <span class="comment"></span>
<a name="l00192"></a>00192 
<a name="l00193"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3d20fbc61e06b34c849384597ba8e0cc">00193</a>       std::istream* GetInStream()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pInStream;};
<a name="l00194"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#1784444b6d9c8a5f3c3d0514e2684ec6">00194</a>       std::ostream* GetOutStream()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pOutStream;};
<a name="l00195"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#be2cafdff8bf62ae36fbbfca3eb836bf">00195</a>       <span class="keywordtype">void</span>          SetInStream(std::istream* pIn)
<a name="l00196"></a>00196         { 
<a name="l00197"></a>00197           <span class="keywordflow">if</span> (pInStream &amp;&amp; NeedToFreeInStream) {
<a name="l00198"></a>00198             <span class="keyword">delete</span> pInStream; NeedToFreeInStream = <span class="keyword">false</span>;
<a name="l00199"></a>00199           }
<a name="l00200"></a>00200           pInStream=pIn;
<a name="l00201"></a>00201           CheckedForGzip = <span class="keyword">false</span>; <span class="comment">// haven't tried to gzip decode this stream</span>
<a name="l00202"></a>00202         };
<a name="l00203"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7520c6b17b3cf9c506738794baab99b1">00203</a>       <span class="keywordtype">void</span>          SetOutStream(std::ostream* pOut)
<a name="l00204"></a>00204         {
<a name="l00205"></a>00205           <span class="keywordflow">if</span> (pOutStream &amp;&amp; NeedToFreeOutStream) {
<a name="l00206"></a>00206             <span class="keyword">delete</span> pOutStream; NeedToFreeOutStream = <span class="keyword">false</span>;
<a name="l00207"></a>00207           }
<a name="l00208"></a>00208           pOutStream=pOut;
<a name="l00209"></a>00209         };
<a name="l00211"></a>00211       <span class="keywordtype">bool</span>        SetInAndOutFormats(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID, <span class="keyword">const</span> <span class="keywordtype">char</span>* outID);
<a name="l00212"></a>00212       <span class="keywordtype">bool</span>        SetInAndOutFormats(OBFormat* pIn, OBFormat* pOut);
<a name="l00214"></a>00214       <span class="keywordtype">bool</span>            SetInFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID);
<a name="l00215"></a>00215       <span class="keywordtype">bool</span>            SetInFormat(OBFormat* pIn);
<a name="l00217"></a>00217       <span class="keywordtype">bool</span>            SetOutFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* outID);
<a name="l00218"></a>00218       <span class="keywordtype">bool</span>            SetOutFormat(OBFormat* pOut);
<a name="l00219"></a>00219 
<a name="l00220"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#94e958a40abf04e41dde68b5e466bd31">00220</a>       OBFormat*   GetInFormat()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pInFormat;};
<a name="l00221"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#f3d45af23c80e2d89974ed5472ab187b">00221</a>       OBFormat*   GetOutFormat()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pOutFormat;};
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#cc8e32bcf9191debcf526f1b32e7b9dc">00222</a>       std::string GetInFilename()<span class="keyword"> const</span>{<span class="keywordflow">return</span> InFilename;};
<a name="l00223"></a>00223         
<a name="l00225"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#f867d03338ae3ab3f85fc614cb1a0591">00225</a>       std::streampos GetInPos()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInpos;}; 
<a name="l00226"></a>00226 
<a name="l00228"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#f646f7b39aeeefb64394aba10a85cfdf">00228</a>       <span class="keywordtype">size_t</span> GetInLen()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInlen;}; 
<a name="l00229"></a>00229 
<a name="l00231"></a>00231       <span class="keyword">const</span> <span class="keywordtype">char</span>* GetTitle() <span class="keyword">const</span>;
<a name="l00232"></a>00232 
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#8c0cb28a16189434c940a205ff8f3e99">00234</a>       OBConversion* GetAuxConv()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pAuxConv;};
<a name="l00235"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#53a1041e7803e63b9bca06ad18bea4fe">00235</a>       <span class="keywordtype">void</span>          SetAuxConv(OBConversion* pConv) {pAuxConv=pConv;};
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 
<a name="l00240"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116f37359059c64e43cab248066ca812206">00240</a>       <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116" title="Three types of options set on the the command line by -a? , -x? , or -?">Option_type</a> { INOPTIONS, OUTOPTIONS, GENOPTIONS };
<a name="l00241"></a>00241 
<a name="l00243"></a>00243       <span class="keyword">const</span> <span class="keywordtype">char</span>* IsOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt,Option_type opttyp=OUTOPTIONS);
<a name="l00244"></a>00244         
<a name="l00246"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7da66ef30fd0af867e9d3bd0df15f4a2">00246</a>       <span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* GetOptions(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116" title="Three types of options set on the the command line by -a? , -x? , or -?">Option_type</a> opttyp)
<a name="l00247"></a>00247         { <span class="keywordflow">return</span> &amp;OptionsArray[opttyp];};
<a name="l00248"></a>00248 
<a name="l00250"></a>00250       <span class="keywordtype">void</span> AddOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, Option_type opttyp, <span class="keyword">const</span> <span class="keywordtype">char</span>* txt=NULL);
<a name="l00251"></a>00251         
<a name="l00252"></a>00252       <span class="keywordtype">bool</span> RemoveOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, Option_type optype);
<a name="l00253"></a>00253 
<a name="l00255"></a>00255       <span class="keywordtype">void</span> SetOptions(<span class="keyword">const</span> <span class="keywordtype">char</span>* options, Option_type opttyp);
<a name="l00256"></a>00256 
<a name="l00258"></a>00258       <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterOptionParam(std::string name, OBFormat* pFormat,
<a name="l00259"></a>00259                                       <span class="keywordtype">int</span> numberParams=0, Option_type typ=OUTOPTIONS);
<a name="l00260"></a>00260 
<a name="l00262"></a>00262       <span class="keyword">static</span> <span class="keywordtype">int</span> GetOptionParams(std::string name, Option_type typ);
<a name="l00264"></a>00264 
<a name="l00266"></a>00266 
<a name="l00267"></a>00267       <span class="comment">// @brief Set and return the list of supported input format</span>
<a name="l00268"></a>00268       std::vector&lt;std::string&gt; GetSupportedInputFormat();
<a name="l00269"></a>00269       <span class="comment">// @brief Set and return the list of supported output format</span>
<a name="l00270"></a>00270       std::vector&lt;std::string&gt; GetSupportedOutputFormat();
<a name="l00272"></a>00272 
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 
<a name="l00276"></a>00276       <span class="keywordtype">int</span>         Convert(std::istream* is, std::ostream* os);
<a name="l00277"></a>00277 
<a name="l00279"></a>00279       <span class="keywordtype">int</span>         Convert();
<a name="l00280"></a>00280 
<a name="l00283"></a>00283       <span class="keywordtype">int</span>                                       FullConvert(std::vector&lt;std::string&gt;&amp; FileList,
<a name="l00284"></a>00284                               std::string&amp; OutputFileName, std::vector&lt;std::string&gt;&amp; OutputFileList);
<a name="l00286"></a>00286 
<a name="l00288"></a>00288 
<a name="l00289"></a>00289       <span class="keywordtype">bool</span>                              AddChemObject(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb);
<a name="l00290"></a>00290       <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*                   GetChemObject(); 
<a name="l00291"></a>00291       <span class="keywordtype">bool</span>                              IsLast();
<a name="l00292"></a>00292       <span class="keywordtype">bool</span>                              IsFirstInput();
<a name="l00293"></a>00293       <span class="keywordtype">int</span>         GetOutputIndex() <span class="keyword">const</span> ;
<a name="l00294"></a>00294       <span class="keywordtype">void</span>                              SetOutputIndex(<span class="keywordtype">int</span> indx);
<a name="l00295"></a>00295       <span class="keywordtype">void</span>                              SetMoreFilesToCome();
<a name="l00296"></a>00296       <span class="keywordtype">void</span>                              SetOneObjectOnly(<span class="keywordtype">bool</span> b=<span class="keyword">true</span>);
<a name="l00297"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#19dedcd05ee3ab11ed85c29ff1fef810">00297</a>       <span class="keywordtype">void</span>        SetLast(<span class="keywordtype">bool</span> b){SetOneObjectOnly(b);}
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 
<a name="l00301"></a>00301 
<a name="l00302"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#442b17995d84d654e33ede11a63d7f80">00302</a>       <span class="keyword">static</span> OBFormat* GetDefaultFormat(){<span class="keywordflow">return</span> pDefaultFormat;};
<a name="l00303"></a>00303 
<a name="l00305"></a>00305         
<a name="l00308"></a>00308       <span class="keywordtype">bool</span>                              Write(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::ostream* pout=NULL);
<a name="l00309"></a>00309 
<a name="l00311"></a>00311         
<a name="l00317"></a>00317       std::string                     WriteString(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, <span class="keywordtype">bool</span> trimWhitespace = <span class="keyword">false</span>);
<a name="l00318"></a>00318 
<a name="l00320"></a>00320         
<a name="l00325"></a>00325       <span class="keywordtype">bool</span>                            WriteFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::string filePath);
<a name="l00326"></a>00326 
<a name="l00331"></a>00331       <span class="keywordtype">void</span> CloseOutFile();
<a name="l00332"></a>00332 
<a name="l00334"></a>00334         
<a name="l00338"></a>00338       <span class="keywordtype">bool</span>      Read(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::istream* pin=NULL);
<a name="l00339"></a>00339 
<a name="l00341"></a>00341         
<a name="l00345"></a>00345       <span class="keywordtype">bool</span>      ReadString(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::string <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b837943061a284187ff6e555ac7093f528">input</a>);
<a name="l00346"></a>00346 
<a name="l00348"></a>00348         
<a name="l00354"></a>00354       <span class="keywordtype">bool</span>      ReadFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::string filePath);
<a name="l00355"></a>00355 
<a name="l00356"></a>00356 <span class="keyword">protected</span>:
<a name="l00358"></a>00358       <span class="keyword">static</span> std::string BatchFileName(std::string&amp; BaseName, std::string&amp; InFile);
<a name="l00360"></a>00360       <span class="keyword">static</span> std::string IncrementedFileName(std::string&amp; BaseName, <span class="keyword">const</span> <span class="keywordtype">int</span> Count);
<a name="l00362"></a>00362       <span class="keyword">static</span> <span class="keywordtype">bool</span> CheckForUnintendedBatch(<span class="keyword">const</span> std::string&amp; infile, <span class="keyword">const</span> std::string&amp; outfile);
<a name="l00363"></a>00363 
<a name="l00365"></a>00365 
<a name="l00366"></a>00366     <span class="keyword">protected</span>:
<a name="l00367"></a>00367       <span class="keywordtype">bool</span>             SetStartAndEnd();
<a name="l00368"></a>00368       <span class="keyword">static</span> <a class="code" href="namespaceOpenBabel.shtml#92e73e2fb2bb989421e95ab53825a00b">FMapType</a>&amp; FormatsMap();
<a name="l00369"></a>00369       <span class="keyword">static</span> <a class="code" href="namespaceOpenBabel.shtml#92e73e2fb2bb989421e95ab53825a00b">FMapType</a>&amp; FormatsMIMEMap();
<a name="l00370"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">00370</a>       <span class="keyword">typedef</span> std::map&lt;std::string,int&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">OPAMapType</a>;
<a name="l00371"></a>00371       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">OPAMapType</a>&amp; OptionParamArray(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116" title="Three types of options set on the the command line by -a? , -x? , or -?">Option_type</a> typ);
<a name="l00372"></a>00372       <span class="keyword">static</span> <span class="keywordtype">int</span>       LoadFormatFiles();
<a name="l00373"></a>00373       <span class="keywordtype">bool</span>             OpenAndSetFormat(<span class="keywordtype">bool</span> SetFormat, std::ifstream* is);
<a name="l00374"></a>00374 
<a name="l00375"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#20354c0458b4e08dc62db4a4e8717c61">00375</a>       std::string         InFilename;
<a name="l00376"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b965c6baeb6893dd15a2fefefce795df">00376</a>       std::istream*     pInStream;
<a name="l00377"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#efeab37b3ca85a70cef740bb1636b353">00377</a>       std::ostream*     pOutStream;
<a name="l00378"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3ccf12afddd45bc1777272f27c35cb48">00378</a>       <span class="keyword">static</span> OBFormat*  pDefaultFormat;
<a name="l00379"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#70c004d49155986bcc163bac07df0e4e">00379</a>       OBFormat*           pInFormat;
<a name="l00380"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#4d630735f21540de237cdcc32916bffb">00380</a>       OBFormat*   pOutFormat;
<a name="l00381"></a>00381 
<a name="l00382"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3d9e064f9e26ed2e52b140b7cc34a8d6">00382</a>       std::map&lt;std::string,std::string&gt; OptionsArray[3];
<a name="l00383"></a>00383 
<a name="l00384"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#075e1e3c9dd399cef584d7338cc37938">00384</a>       <span class="keywordtype">int</span>                 Index;
<a name="l00385"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#c52d6fdbe254370662cccd43af0248f2">00385</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        StartNumber;
<a name="l00386"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#db31d46cbf6e64e86bae6d24d90c9702">00386</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        EndNumber;
<a name="l00387"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ad462966ed963f892117056de1eba502">00387</a>       <span class="keywordtype">int</span>                 Count;
<a name="l00388"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#e14ad56a72461f3c598cb4dbd151cdc7">00388</a>       <span class="keywordtype">bool</span>                      m_IsFirstInput;
<a name="l00389"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#6025251d18641dab4058222b69d1a98c">00389</a>       <span class="keywordtype">bool</span>                m_IsLast;
<a name="l00390"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b4ec386870233b42d353a4d66d7b0cee">00390</a>       <span class="keywordtype">bool</span>                MoreFilesToCome;
<a name="l00391"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7002deaca76f3fc235c76be1fcc38dfa">00391</a>       <span class="keywordtype">bool</span>                OneObjectOnly;
<a name="l00392"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#9bdd5c815677e240cec9c2e4a71d73f2">00392</a>       <span class="keywordtype">bool</span>                ReadyToInput;
<a name="l00393"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#e0c8e3d58dc0c0d9713ca7a7d27b8c4d">00393</a>       <span class="keywordtype">bool</span>      CheckedForGzip;      
<a name="l00394"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#778a4d8f719010ac4adf6af2363af0a8">00394</a>       <span class="keywordtype">bool</span>      NeedToFreeInStream;
<a name="l00395"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#96fc7fb023ad66073434a206829c23bd">00395</a>       <span class="keywordtype">bool</span>      NeedToFreeOutStream;
<a name="l00396"></a>00396 
<a name="l00397"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#501b1ec0c0e4fe9e78398e3837a759ec">00397</a>       <span class="keyword">static</span> <span class="keywordtype">int</span> FormatFilesLoaded;
<a name="l00398"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#20a1d62cb932144d66e52d7c823fb0a1">00398</a>       <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*             pOb1;
<a name="l00399"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b77068f3bb4cb88694a6be653c00f04e">00399</a>       std::streampos wInpos; 
<a name="l00400"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#545a1341008a23c2dd0721c164a9ad89">00400</a>       std::streampos rInpos; 
<a name="l00401"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#fee7e5bffccd262faaff0417e5ae9af3">00401</a>       <span class="keywordtype">size_t</span> wInlen; 
<a name="l00402"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#1a897c3f35235e4ca7da37ca245db065">00402</a>       <span class="keywordtype">size_t</span> rInlen; 
<a name="l00403"></a>00403         
<a name="l00404"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3846aa2ce719d5820b66e302c6aeaa8a">00404</a>       OBConversion* pAuxConv;
<a name="l00405"></a>00405 
<a name="l00406"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#2322eb2aa14e8d954573abbda9c50e62">00406</a>       std::vector&lt;std::string&gt; SupportedInputFormat; 
<a name="l00407"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#50233a5c7c63d03056923f13c7acbb1b">00407</a>       std::vector&lt;std::string&gt; SupportedOutputFormat; 
<a name="l00408"></a>00408 
<a name="l00409"></a>00409     };
<a name="l00410"></a>00410 
<a name="l00412"></a><a class="code" href="obconversion_8h.shtml#5d766d529e097f852406cf0c434e54e0">00412</a> <span class="preprocessor">#define NOTREADABLE     0x01</span>
<a name="l00413"></a><a class="code" href="obconversion_8h.shtml#ec13538a29f6a7d630b3a59ccce0e03c">00413</a> <span class="preprocessor"></span><span class="preprocessor">#define READONEONLY     0x02</span>
<a name="l00414"></a><a class="code" href="obconversion_8h.shtml#95479d1fb64936c936077e47356bf6e2">00414</a> <span class="preprocessor"></span><span class="preprocessor">#define READBINARY      0x04</span>
<a name="l00415"></a><a class="code" href="obconversion_8h.shtml#0e12fffdb9815dc9bb44cb0635667146">00415</a> <span class="preprocessor"></span><span class="preprocessor">#define ZEROATOMSOK     0x08</span>
<a name="l00416"></a><a class="code" href="obconversion_8h.shtml#201c57b6b8e95558ead652e391d2e157">00416</a> <span class="preprocessor"></span><span class="preprocessor">#define NOTWRITABLE     0x10</span>
<a name="l00417"></a><a class="code" href="obconversion_8h.shtml#b95246c97f4ade91aee102631b6b8666">00417</a> <span class="preprocessor"></span><span class="preprocessor">#define WRITEONEONLY    0x20</span>
<a name="l00418"></a><a class="code" href="obconversion_8h.shtml#655ed7589181707a2c6d18d7777cb1c6">00418</a> <span class="preprocessor"></span><span class="preprocessor">#define WRITEBINARY     0x40</span>
<a name="l00419"></a><a class="code" href="obconversion_8h.shtml#c3cad6ca6aadd6aa9eccfc793e01b30e">00419</a> <span class="preprocessor"></span><span class="preprocessor">#define READXML         0x80</span>
<a name="l00420"></a><a class="code" href="obconversion_8h.shtml#114620de287b71102355c29edc4b0115">00420</a> <span class="preprocessor"></span><span class="preprocessor">#define DEFAULTFORMAT   0x4000</span>
<a name="l00421"></a>00421 <span class="preprocessor"></span>
<a name="l00422"></a>00422 } <span class="comment">//namespace OpenBabel</span>
<a name="l00423"></a>00423 <span class="preprocessor">#endif //OB_CONV_H</span>
<a name="l00424"></a>00424 <span class="preprocessor"></span>
<a name="l00427"></a>00427 
<a name="l00428"></a>00428  
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:05 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
