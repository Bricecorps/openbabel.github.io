<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: vector3.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>vector3.h</h1><a href="vector3_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">vector3.h - Handle 3D coordinates.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2006 by Benoit Jacob</span>
<a name="l00007"></a>00007 <span class="comment"> </span>
<a name="l00008"></a>00008 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00009"></a>00009 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00010"></a>00010 <span class="comment"> </span>
<a name="l00011"></a>00011 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00012"></a>00012 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00013"></a>00013 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00014"></a>00014 <span class="comment"> </span>
<a name="l00015"></a>00015 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00016"></a>00016 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00017"></a>00017 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00018"></a>00018 <span class="comment">GNU General Public License for more details.</span>
<a name="l00019"></a>00019 <span class="comment">***********************************************************************/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef OB_VECTOR_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define OB_VECTOR_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;ostream&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;<a class="code" href="rand_8h.shtml" title="Pseudo random number generator.">openbabel/rand.h</a>&gt;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#ifndef RAD_TO_DEG</span>
<a name="l00030"></a><a class="code" href="vector3_8h.shtml#89e47af0449640d4f15191aba5ca24c6">00030</a> <span class="preprocessor"></span><span class="preprocessor">#define RAD_TO_DEG (180.0/M_PI)</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span>
<a name="l00033"></a>00033 <span class="preprocessor">#ifndef DEG_TO_RAD</span>
<a name="l00034"></a><a class="code" href="vector3_8h.shtml#212460e743fecb084d717bb2180c5a56">00034</a> <span class="preprocessor"></span><span class="preprocessor">#define DEG_TO_RAD (M_PI/180.0)</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span>
<a name="l00037"></a>00037 <span class="keyword">namespace </span>OpenBabel
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039 
<a name="l00040"></a>00040   <span class="keyword">class </span>matrix3x3; <span class="comment">// declared in math/matrix3x3.h</span>
<a name="l00041"></a>00041   <span class="keyword">class </span>OBRandom; <span class="comment">// declared in rand.h</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043   <span class="comment">// class introduction in vector3.cpp</span>
<a name="l00044"></a><a class="code" href="classOpenBabel_1_1vector3.shtml">00044</a>   <span class="keyword">class </span>OBAPI vector3
<a name="l00045"></a>00045   {
<a name="l00046"></a>00046   <span class="keyword">private</span> :
<a name="l00047"></a>00047     <span class="keywordtype">double</span> _vx, _vy, _vz ;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049   <span class="keyword">public</span> :
<a name="l00051"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#28d983d20c9b3b395da7854fafae20f2">00051</a>     vector3 (<span class="keyword">const</span> <span class="keywordtype">double</span> inX=0.0, <span class="keyword">const</span> <span class="keywordtype">double</span> inY=0.0, <span class="keyword">const</span> <span class="keywordtype">double</span> inZ=0.0):
<a name="l00052"></a>00052       _vx(inX), _vy(inY), _vz(inZ)
<a name="l00053"></a>00053       {}
<a name="l00055"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#be84fe9749e73b1027baddb505fa189a">00055</a>     vector3 (<span class="keyword">const</span> vector3&amp; v):
<a name="l00056"></a>00056       _vx(v._vx), _vy(v._vy), _vz(v._vz)
<a name="l00057"></a>00057         { }
<a name="l00058"></a>00058 
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#685349dbc9e2d99a19616763811cbfba">00060</a>     <span class="keywordtype">void</span> Set(<span class="keyword">const</span> <span class="keywordtype">double</span> inX, <span class="keyword">const</span> <span class="keywordtype">double</span> inY, <span class="keyword">const</span> <span class="keywordtype">double</span> inZ)
<a name="l00061"></a>00061     {
<a name="l00062"></a>00062       _vx = inX;
<a name="l00063"></a>00063       _vy = inY;
<a name="l00064"></a>00064       _vz = inZ;
<a name="l00065"></a>00065     }
<a name="l00067"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#bfcb3c965a12bd0385f1fe1db3f7d3ac">00067</a>     <span class="keywordtype">void</span> Set(<span class="keyword">const</span> <span class="keywordtype">double</span> *c)
<a name="l00068"></a>00068     {
<a name="l00069"></a>00069       _vx = c[0];
<a name="l00070"></a>00070       _vy = c[1];
<a name="l00071"></a>00071       _vz = c[2];
<a name="l00072"></a>00072     }
<a name="l00074"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#b7cbeb9d9ec3d0d2714733d8bb4596eb">00074</a>     <span class="keywordtype">void</span> SetX(<span class="keyword">const</span> <span class="keywordtype">double</span> inX)
<a name="l00075"></a>00075     {
<a name="l00076"></a>00076       _vx = inX;
<a name="l00077"></a>00077     }
<a name="l00079"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#385f2320a91b6c182ecb45d16ffc6332">00079</a>     <span class="keywordtype">void</span> SetY(<span class="keyword">const</span> <span class="keywordtype">double</span> inY)
<a name="l00080"></a>00080     {
<a name="l00081"></a>00081       _vy = inY;
<a name="l00082"></a>00082     }
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#d1ac74f918d5ac48cb47426ca9ba2c09">00084</a>     <span class="keywordtype">void</span> SetZ(<span class="keyword">const</span> <span class="keywordtype">double</span> inZ)
<a name="l00085"></a>00085     {
<a name="l00086"></a>00086       _vz = inZ;
<a name="l00087"></a>00087     }
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#9345053a16ce83e130dc098fddf9af7a">00090</a>     <span class="keywordtype">void</span> Get(<span class="keywordtype">double</span> *c)
<a name="l00091"></a>00091     {
<a name="l00092"></a>00092       c[0]=_vx;
<a name="l00093"></a>00093       c[1]=_vy;
<a name="l00094"></a>00094       c[2]=_vz;
<a name="l00095"></a>00095     }
<a name="l00097"></a>00097     <span class="keywordtype">double</span> operator[] ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i);
<a name="l00098"></a>00098 
<a name="l00100"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#d2eee719d3706b71968f894c1179f4bb">00100</a>     vector3&amp; operator= ( <span class="keyword">const</span> vector3&amp; v)
<a name="l00101"></a>00101       {
<a name="l00102"></a>00102         _vx = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>;
<a name="l00103"></a>00103         _vy = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>;
<a name="l00104"></a>00104         _vz = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>;
<a name="l00105"></a>00105         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00106"></a>00106       }
<a name="l00107"></a>00107 
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#1eaa5b3b24423c15c8deb71a0c079707">00109</a>     <span class="keyword">const</span> <span class="keywordtype">double</span> *AsArray()<span class="keyword"> const</span>
<a name="l00110"></a>00110 <span class="keyword">    </span>{
<a name="l00111"></a>00111       <span class="keywordflow">return</span> &amp;_vx;
<a name="l00112"></a>00112     }
<a name="l00113"></a>00113 
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#e0541be714a6305dd3295655eea746d9">00116</a>     vector3&amp; operator+= ( <span class="keyword">const</span> vector3&amp; v)
<a name="l00117"></a>00117       {
<a name="l00118"></a>00118         _vx += v.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>;
<a name="l00119"></a>00119         _vy += v.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>;
<a name="l00120"></a>00120         _vz += v.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>;
<a name="l00121"></a>00121         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00122"></a>00122       };
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#c4b4980ccea5aa5184928ce40cf1acee">00125</a>     vector3&amp; operator-= ( <span class="keyword">const</span> vector3&amp; v)
<a name="l00126"></a>00126       {
<a name="l00127"></a>00127         _vx -= v.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>;
<a name="l00128"></a>00128         _vy -= v.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>;
<a name="l00129"></a>00129         _vz -= v.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>;
<a name="l00130"></a>00130         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00131"></a>00131       };
<a name="l00134"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#506884b50b92a33e92029b43f9b75bc9">00134</a>     vector3&amp; operator+= ( <span class="keyword">const</span> <span class="keywordtype">double</span>* f)
<a name="l00135"></a>00135       {
<a name="l00136"></a>00136         _vx += f[0];
<a name="l00137"></a>00137         _vy += f[1];
<a name="l00138"></a>00138         _vz += f[2];
<a name="l00139"></a>00139         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00140"></a>00140       };
<a name="l00143"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#322635480250ba0c08aa47a125eda3dd">00143</a>     vector3&amp; operator-= ( <span class="keyword">const</span> <span class="keywordtype">double</span>* f)
<a name="l00144"></a>00144       {
<a name="l00145"></a>00145         _vx -= f[0];
<a name="l00146"></a>00146         _vy -= f[1];
<a name="l00147"></a>00147         _vz -= f[2];
<a name="l00148"></a>00148         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00149"></a>00149       };
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#80e5f1c9af1aa63dfa46b7559bae27bc">00152</a>     vector3&amp; operator*= ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00153"></a>00153       {
<a name="l00154"></a>00154         _vx *= c;
<a name="l00155"></a>00155         _vy *= c;
<a name="l00156"></a>00156         _vz *= c;
<a name="l00157"></a>00157         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00158"></a>00158       };
<a name="l00159"></a>00159 
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#b5a7b18eeff279e5d850a9075d09f8a5">00162</a>     vector3&amp; operator/= ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00163"></a>00163       {
<a name="l00164"></a>00164         <span class="keywordtype">double</span> inv = 1.0 / c;
<a name="l00165"></a>00165         <span class="keywordflow">return</span>( (*<span class="keyword">this</span>) *= inv );
<a name="l00166"></a>00166       };
<a name="l00170"></a>00170     vector3&amp; operator*= ( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> &amp;);
<a name="l00171"></a>00171 
<a name="l00173"></a>00173     <span class="keywordtype">void</span> randomUnitVector(<a class="code" href="classOpenBabel_1_1OBRandom.shtml" title="Random number generator.">OBRandom</a> *oeRand= NULL);
<a name="l00174"></a>00174 
<a name="l00175"></a>00175     <span class="comment">//  Member Functions</span>
<a name="l00176"></a>00176 
<a name="l00179"></a>00179     vector3&amp; normalize () ;
<a name="l00180"></a>00180 
<a name="l00182"></a>00182     <span class="keywordtype">bool</span> CanBeNormalized () <span class="keyword">const</span>;
<a name="l00183"></a>00183 
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#47f7e7ecf0a38bc7ef50f21d90ba349b">00185</a>     <span class="keyword">inline</span> <span class="keywordtype">double</span> length_2 ()<span class="keyword"> const</span>
<a name="l00186"></a>00186 <span class="keyword">    </span>{
<a name="l00187"></a>00187       <span class="keywordflow">return</span> _vx*_vx + _vy*_vy + _vz*_vz;
<a name="l00188"></a>00188     };
<a name="l00190"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#80401d480f15e1418a3274a2b2b51649">00190</a>     <span class="keywordtype">double</span> length ()<span class="keyword"> const</span>
<a name="l00191"></a>00191 <span class="keyword">    </span>{
<a name="l00192"></a>00192       <span class="keywordflow">return</span> sqrt( length_2() );
<a name="l00193"></a>00193     };
<a name="l00195"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e">00195</a>     <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; x ()<span class="keyword"> const</span>
<a name="l00196"></a>00196 <span class="keyword">    </span>{
<a name="l00197"></a>00197       <span class="keywordflow">return</span> _vx ;
<a name="l00198"></a>00198     } ;
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee">00200</a>     <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; y ()<span class="keyword"> const</span>
<a name="l00201"></a>00201 <span class="keyword">    </span>{
<a name="l00202"></a>00202       <span class="keywordflow">return</span> _vy ;
<a name="l00203"></a>00203     } ;
<a name="l00205"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e">00205</a>     <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; z ()<span class="keyword"> const</span>
<a name="l00206"></a>00206 <span class="keyword">    </span>{
<a name="l00207"></a>00207       <span class="keywordflow">return</span> _vz ;
<a name="l00208"></a>00208     } ;
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#3b195b867437acf8de45f48c83e81932">00210</a>     <span class="keywordtype">double</span> &amp; x ()
<a name="l00211"></a>00211     {
<a name="l00212"></a>00212       <span class="keywordflow">return</span> _vx ;
<a name="l00213"></a>00213     } ;
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#d927d9808ded1fc49c05ae9e1a3ed2a6">00215</a>     <span class="keywordtype">double</span> &amp; y ()
<a name="l00216"></a>00216     {
<a name="l00217"></a>00217       <span class="keywordflow">return</span> _vy ;
<a name="l00218"></a>00218     } ;
<a name="l00220"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#2134ad02d68f29e9c7cd87e4cd4c75b8">00220</a>     <span class="keywordtype">double</span> &amp; z ()
<a name="l00221"></a>00221     {
<a name="l00222"></a>00222       <span class="keywordflow">return</span> _vz ;
<a name="l00223"></a>00223     } ;
<a name="l00224"></a>00224 
<a name="l00226"></a>00226     <span class="comment">// @{</span>
<a name="l00231"></a>00231 <span class="comment"></span>    <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#c001b331f648fbbd8590576f59d4d2ab">operator== </a>( <span class="keyword">const</span> vector3&amp; ) <span class="keyword">const</span>;
<a name="l00235"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#54bc009d3ca567251114c2a86c7753ff">00235</a>     <span class="keywordtype">int</span> operator!= ( <span class="keyword">const</span> vector3&amp; other )<span class="keyword"> const</span>
<a name="l00236"></a>00236 <span class="keyword">    </span>{
<a name="l00237"></a>00237       <span class="keywordflow">return</span> ! ( (*this) == other );
<a name="l00238"></a>00238     }
<a name="l00248"></a>00248     <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#f464b3279bc3db8c58ca552ddb0e8e79">IsApprox</a>( <span class="keyword">const</span> vector3 &amp; other, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; precision ) <span class="keyword">const</span>;
<a name="l00250"></a>00250 
<a name="l00252"></a>00252 
<a name="l00254"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#f0bb15d3c00f3ab71314513fa41fa548">00254</a>     <span class="keywordtype">double</span> distSq(<span class="keyword">const</span> vector3 &amp;vv)<span class="keyword"> const</span>
<a name="l00255"></a>00255 <span class="keyword">    </span>{
<a name="l00256"></a>00256       <span class="keywordtype">double</span> dx = x() - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>();
<a name="l00257"></a>00257       <span class="keywordtype">double</span> dy = y() - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>();
<a name="l00258"></a>00258       <span class="keywordtype">double</span> dz = z() - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>();
<a name="l00259"></a>00259       <span class="keywordflow">return</span>( dx*dx + dy*dy + dz*dz );
<a name="l00260"></a>00260     }
<a name="l00261"></a>00261 
<a name="l00264"></a>00264     <span class="keywordtype">bool</span> createOrthoVector(vector3 &amp;v) <span class="keyword">const</span>;
<a name="l00265"></a>00265 
<a name="l00266"></a>00266   };
<a name="l00267"></a>00267 
<a name="l00269"></a>00269   OBAPI std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#70c653ee69fdbd27f77d430e4aed3cad" title="Prints a representation of the vector as a row vector of the form "<0.1,1,2>".">operator&lt;&lt; </a>( std::ostream&amp;, <span class="keyword">const</span> vector3&amp; );
<a name="l00270"></a>00270 
<a name="l00271"></a>00271   <span class="comment">//  Sum, Difference, Scalar Product</span>
<a name="l00273"></a><a class="code" href="namespaceOpenBabel.shtml#dc7b25b0ba45ce8f90a2519c03322e4a">00273</a> <span class="comment"></span>  <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#dc7b25b0ba45ce8f90a2519c03322e4a" title="Vector addition.">operator+ </a>( <span class="keyword">const</span> vector3&amp; v1, <span class="keyword">const</span> vector3&amp; v2)
<a name="l00274"></a>00274   {
<a name="l00275"></a>00275     <span class="keywordflow">return</span> vector3(v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>()+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>()+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>()+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>());
<a name="l00276"></a>00276   };
<a name="l00278"></a><a class="code" href="namespaceOpenBabel.shtml#a2e0e5d4e59766809b5b61ab9b513a2e">00278</a>   <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#a2e0e5d4e59766809b5b61ab9b513a2e" title="Vector subtraction.">operator- </a>( <span class="keyword">const</span> vector3&amp; v1, <span class="keyword">const</span> vector3&amp; v2)
<a name="l00279"></a>00279   {
<a name="l00280"></a>00280     <span class="keywordflow">return</span> vector3(v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>()-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>()-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>()-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>());
<a name="l00281"></a>00281   };
<a name="l00283"></a><a class="code" href="namespaceOpenBabel.shtml#8bcf1e708be0fbc503f83952c3a99cd4">00283</a>   <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#a2e0e5d4e59766809b5b61ab9b513a2e" title="Vector subtraction.">operator- </a>( <span class="keyword">const</span> vector3&amp; v)
<a name="l00284"></a>00284   {
<a name="l00285"></a>00285     <span class="keywordflow">return</span> vector3(-v.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>(), -v.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>(), -v.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>());
<a name="l00286"></a>00286   };
<a name="l00288"></a><a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09">00288</a>   <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator* </a>( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c, <span class="keyword">const</span> vector3&amp; v)
<a name="l00289"></a>00289     {
<a name="l00290"></a>00290       <span class="keywordflow">return</span> vector3( c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>());
<a name="l00291"></a>00291     };
<a name="l00293"></a><a class="code" href="namespaceOpenBabel.shtml#986ca8c8f71f6290f55b2fd8beac87d1">00293</a>   <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator* </a>( <span class="keyword">const</span> vector3&amp; v, <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00294"></a>00294     {
<a name="l00295"></a>00295       <span class="keywordflow">return</span> vector3( c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>());
<a name="l00296"></a>00296     };
<a name="l00298"></a><a class="code" href="namespaceOpenBabel.shtml#f855844c28abaaafbf21c5835a8e81d4">00298</a>   <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#f855844c28abaaafbf21c5835a8e81d4" title="Division by a scalar.">operator/ </a>( <span class="keyword">const</span> vector3&amp; v, <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00299"></a>00299   {
<a name="l00300"></a>00300     <span class="keywordflow">return</span> vector3( v.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>()/c, v.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>()/c, v.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>()/c);
<a name="l00301"></a>00301   };
<a name="l00302"></a>00302   <span class="comment">// @removed@ misleading operation</span>
<a name="l00303"></a>00303   <span class="comment">// friend vector3 operator* ( const vector3 &amp;,const vector3 &amp;);</span>
<a name="l00304"></a>00304 
<a name="l00305"></a>00305   <span class="comment">//vector and matrix ops</span>
<a name="l00306"></a>00306   <span class="comment">// @removed@ misleading operation; matrix multiplication is not commutitative</span>
<a name="l00307"></a>00307   <span class="comment">//     friend vector3 operator *(const vector3 &amp;v,const matrix3x3 &amp;m);</span>
<a name="l00308"></a>00308 
<a name="l00310"></a>00310   OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator *</a>(<span class="keyword">const</span> matrix3x3 &amp;m, <span class="keyword">const</span> vector3 &amp;v);
<a name="l00311"></a>00311 
<a name="l00313"></a><a class="code" href="namespaceOpenBabel.shtml#32a70eb5e04f4e10a386089723f05b2a">00313</a>   <span class="keyword">inline</span> OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#32a70eb5e04f4e10a386089723f05b2a" title="Dot product of two vectors.">dot</a> ( <span class="keyword">const</span> vector3&amp; v1, <span class="keyword">const</span> vector3&amp; v2 )
<a name="l00314"></a>00314   {
<a name="l00315"></a>00315     <span class="keywordflow">return</span> v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>()*v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>() + v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>()*v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>() + v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>()*v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>() ;
<a name="l00316"></a>00316   }
<a name="l00318"></a>00318   OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#68dc2c35a1e58febaa9e13cd82e3a50f" title="Cross product of two vectors.">cross</a> ( <span class="keyword">const</span> vector3&amp;, <span class="keyword">const</span> vector3&amp; );
<a name="l00319"></a>00319 
<a name="l00321"></a>00321   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#00e2879019f2fb0fc689a7e5cb5d2008" title="Calculate the angle between vectors (in degrees).">vectorAngle</a> ( <span class="keyword">const</span> vector3&amp; v1, <span class="keyword">const</span> vector3&amp; v2 );
<a name="l00322"></a>00322 
<a name="l00324"></a>00324   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#62d62b3487ca8969bdfbd7c434da564e" title="Calculate the torsion angle between vectors (in degrees).">CalcTorsionAngle</a>(<span class="keyword">const</span> vector3 &amp;a, <span class="keyword">const</span> vector3 &amp;b,
<a name="l00325"></a>00325                                         <span class="keyword">const</span> vector3 &amp;c, <span class="keyword">const</span> vector3 &amp;d);
<a name="l00326"></a>00326 
<a name="l00328"></a>00328   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#d0e0c09ef7c92973447c46d3ad3f3f8d" title="Calculate the distance of point a to the plane determined by b,c,d.">Point2Plane</a>(vector3 a, vector3 b, vector3 c, vector3 d);
<a name="l00330"></a>00330   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#29227290e6e6931c009942836a21e5df" title="Calculate the angle between point a and the plane determined by b,c,d.">Point2PlaneAngle</a>(<span class="keyword">const</span> vector3 a, <span class="keyword">const</span> vector3 b, <span class="keyword">const</span> vector3 c, <span class="keyword">const</span> vector3 d);
<a name="l00331"></a>00331 
<a name="l00332"></a>00332   <span class="comment">//  The global constant vector3 objects</span>
<a name="l00334"></a>00334 <span class="comment"></span>  <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#3752b8b2cb2b0485307ec67623d7e2c5" title="The zero vector: &lt;0.0, 0.0, 0.0&gt;.">VZero</a>;
<a name="l00336"></a>00336   <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#79aa4a2ccde7b610aaafd56443df9caa" title="The x unit vector: &lt;1.0, 0.0, 0.0&gt;.">VX</a>;
<a name="l00338"></a>00338   <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#7a35811d97bde7af938e487190130adf" title="The y unit vector: &lt;0.0, 1.0, 0.0&gt;.">VY</a>;
<a name="l00340"></a>00340   <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#a43d198e9c7aa867c29bfe09a0ccab84" title="The z unit vector: &lt;0.0, 0.0, 1.0&gt;.">VZ</a>;
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 }
<a name="l00343"></a>00343 
<a name="l00344"></a>00344 <span class="preprocessor">#endif // OB_VECTOR_H</span>
<a name="l00345"></a>00345 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:06 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
