<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: pluginiter.h File Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>pluginiter.h File Reference</h1>Simplify 'plugin' classes to be discovered and/or loaded at runtime. <a href="#_details">More...</a>
<p>
<code>#include &lt;openbabel/babelconfig.h&gt;</code><br>

<p>
Include dependency graph for pluginiter.h:<p><center><img src="pluginiter_8h__incl.png" border="0" usemap="#pluginiter.h_map" alt=""></center>

<p>
This graph shows which files directly or indirectly include this file:<p><center><img src="pluginiter_8h__dep__incl.png" border="0" usemap="#pluginiter.hdep_map" alt=""></center>
<map name="pluginiter.hdep_map">
<area shape="rect" href="fingerprint_8h.shtml" title="Simplify &#39;plugin&#39; classes to be discovered and/or loaded at runtime." alt="" coords="148,7,241,34"><area shape="rect" href="forcefield_8h.shtml" title="Simplify &#39;plugin&#39; classes to be discovered and/or loaded at runtime." alt="" coords="150,58,238,85"><area shape="rect" href="fingerprint_8cpp.shtml" title="Declaration of OBFingerprint base class and fastsearch classes." alt="" coords="290,7,400,34"><area shape="rect" href="forcefield_8cpp.shtml" title="Handle forcefields." alt="" coords="293,58,397,85"></map>

<p>
<a href="pluginiter_8h-source.shtml">Go to the source code of this file.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Namespaces</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></td></tr>

<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1PluginIter.shtml">PluginIter</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Template class used to simplify dynamic classes discovered at runtime.  <a href="classOpenBabel_1_1PluginIter.shtml#_details">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="pluginiter_8h.shtml#e6da8d8a99e4b8364e0e951f01a87db0">FOR_EACH</a>(plugintype, f)&nbsp;&nbsp;&nbsp;for(PluginIter&lt;plugintype&gt;&amp; f=plugintype::Iter(); f; ++f )</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="pluginiter_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(BaseClass)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Simplify 'plugin' classes to be discovered and/or loaded at runtime. 
<p>
The code in this file makes it easy to make 'plugin' classes. These classes are derived from an abstract base class, like OBFingerprint. The derived classes ('sub-types' like fingerprint2) usually have a single instance. Plugin classes are only discovered at runtime, so no existing code needs to be changed when adding a new derived class. In some builds the new code can be added or removed by just moving a DLL or so file.<p>
<h2>Step-by-Step Instructions</h2>
<p>
1) In the header file for YourBaseClass. Make sure to include the plugininter.h header and in the definition of YourBaseClass add the MAKE_PLUGIN macro and a pure virtual function Description(). <div class="fragment"><pre class="fragment"><span class="preprocessor">#include &lt;openbabel/plugininter.h&gt;</span>
<span class="keyword">class </span>YourBaseClass
{
  <a class="code" href="pluginiter_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(YourBaseClass)
  virtual <span class="keywordtype">string</span> Description()=0;

  ...rest of implementation, probably involving virtual functions redefined
  in the sub-type classes
};
</pre></div> See below for what this macro contains.<p>
2) Declare each sub-type in a class derived from the base class and give it a constructor which calls the base class constructor as shown: <div class="fragment"><pre class="fragment"><span class="keyword">class </span>YourSubType1 : <span class="keyword">public</span> YourBaseClass
{
<span class="keyword">public</span>:
  YourSubtype1(<span class="keywordtype">string</span> ID, <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>) 
    : YourBaseClass(ID, IsDefault){}

  <span class="keyword">virtual</span> <span class="keywordtype">string</span> Description()
  { <span class="keywordflow">return</span> <span class="stringliteral">"A short useful description"</span>;};

  ...rest ofimplementation
};
</pre></div><p>
3) Declare a global instance of the sub-type class which specifies its ID. and, optionally, whether it is to be regarded as the default type of YourBaseClass. <div class="fragment"><pre class="fragment">YourSubType1 theType1(<span class="stringliteral">"FP2"</span>,<span class="keyword">true</span>);
</pre></div><p>
4) The following functions are available: YourBaseClass* YourBaseClass::FindType(const string&amp; ID); YourBaseClass* YourBaseClass::FindDefaultType();<p>
PluginIter&lt;YourBaseClass&gt;&amp; YourBaseClass::Iter(); This returns an object which looks like a pointer to YourBaseClass when used with * or -&gt; . It initially points to the first sub-type and can be subsequently made to point to all the rest using the prefix ++ operator. When tested as a bool it returns false when there are no more subtypes.<p>
But the easiest way to access all the subtypes is to use the macro FOR_EACH. For example to print out all the subtypes with their descriptions: <div class="fragment"><pre class="fragment"><a class="code" href="pluginiter_8h.shtml#e6da8d8a99e4b8364e0e951f01a87db0">FOR_EACH</a>(YourBaseClass, iter)
{
   cout &lt;&lt; iter.ID() &lt;&lt; <span class="charliteral">' '</span> &lt;&lt; iter-&gt;Description() &lt;&lt; endl;
}
</pre></div> Note the . for the ID and the -&gt; for the Description.<p>
<h2>How it works</h2>
<p>
<a class="el" href="pluginiter_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN(YourBaseClass)</a> inserts the following code into YourBaseClass:<div class="fragment"><pre class="fragment"><span class="comment">//This static function returns a reference to the PluginIter object,</span>
<span class="comment">//which contains the map of sub-types and the default sub-type.</span>
<span class="comment">//Because it is a static local variable it is constructed only once.</span>
<span class="comment">//This avoids the "static initialization order fiasco",</span>
<span class="comment">//see www.parashift.com/c++-faq-lite/.</span>
<span class="comment">//Every time this function is used it sets the iterator to the start of the map.</span>
<span class="keyword">static</span> PluginIter&lt;YourBaseClass&gt;&amp; Iter()
{
  <span class="keyword">static</span> PluginIter&lt;YourBaseClass&gt;* p = NULL;
  <span class="keywordflow">if</span>(!p)
    p = <span class="keyword">new</span> PluginIter&lt;YourBaseClass&gt;*;
  p-&gt;ToStart();
  <span class="keywordflow">return</span> *p;
}

Each sub-type is registered from its constructor as it is loaded, which 
could be at program start up, or later.
YourBaseClass(std::string ID, <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>)
{
  Iter().Register(<span class="keyword">this</span>, ID, IsDefault);
}

<span class="comment">//The following just pass on the work to the PluginIter object.</span>
YourBaseClass* FindDefaultType(){ <span class="keywordflow">return</span> Iter().FindDefault();}
YourBaseClass* FindType(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; ID){ <span class="keywordflow">return</span> Iter().FindType(<span class="keyword">const</span> <span class="keywordtype">string</span>&amp; ID);}
</pre></div> <hr><h2>Define Documentation</h2>
<a class="anchor" name="e6da8d8a99e4b8364e0e951f01a87db0"></a><!-- doxytag: member="pluginiter.h::FOR_EACH" ref="e6da8d8a99e4b8364e0e951f01a87db0" args="(plugintype, f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define FOR_EACH          </td>
          <td>(</td>
          <td class="paramtype">plugintype,         <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">f&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%">&nbsp;&nbsp;&nbsp;for(PluginIter&lt;plugintype&gt;&amp; f=plugintype::Iter(); f; ++f )</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="dd740e2a386b7db3e1f0e271cbe8a3f1"></a><!-- doxytag: member="pluginiter.h::MAKE_PLUGIN" ref="dd740e2a386b7db3e1f0e271cbe8a3f1" args="(BaseClass)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MAKE_PLUGIN          </td>
          <td>(</td>
          <td class="paramtype">BaseClass&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keyword">public</span>:\
BaseClass(std::string ID, <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>)\
{Iter().Register(<span class="keyword">this</span>, ID, IsDefault);}\
<span class="keyword">static</span> PluginIter&lt;BaseClass&gt;&amp; Iter()\
{<span class="keyword">static</span> PluginIter&lt;BaseClass&gt;* p = NULL;\
<span class="keywordflow">if</span>(!p) p = <span class="keyword">new</span> PluginIter&lt;BaseClass&gt;;\
p-&gt;ToStart();\
<span class="keywordflow">return</span> *p;}\
<span class="keyword">static</span> BaseClass* FindDefaultType(){ <span class="keywordflow">return</span> Iter().FindDefaultType();}\
  <span class="keyword">static</span> BaseClass* FindType(<span class="keyword">const</span> std::string&amp; ID){ <span class="keywordflow">return</span> Iter().FindType(ID);}
</pre></div>
</div>
</div><p>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:11 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
