<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBFormat Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul>
</div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a></div>
<h1>OBFormat Class Reference</h1><!-- doxytag: class="OpenBabel::OBFormat" -->Base class for file formats.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="obconversion_8h-source.shtml">openbabel/obconversion.h</a>&gt;</code>
<p>
Inheritance diagram for OBFormat:<p><center><img src="classOpenBabel_1_1OBFormat__inherit__graph.png" border="0" usemap="#OBFormat__inherit__map" alt="Inheritance graph"></center>
<map name="OBFormat__inherit__map">
<area shape="rect" href="classOpenBabel_1_1OBMoleculeFormat.shtml" title="An OBFormat convenience subclass for conversion to/from OBMol data." alt="" coords="8,82,146,109"><area shape="rect" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats." alt="" coords="170,82,296,109"><area shape="rect" href="classOpenBabel_1_1XMLMoleculeFormat.shtml" title="Abstract class for XML formats which represent molecules." alt="" coords="158,157,308,184"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center><a href="classOpenBabel_1_1OBFormat-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1e309febfaef70cc3c8d98afc1540931">ReadMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#6044ced825a2a83b7cfe7c45eea63c99">ReadChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#663171ec9788e2d1621d374848b3888b">WriteMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#5ea5d9623cd9594549a52e116caecaa2">WriteChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#b87525f269e7819d8462f450d30d56a7">Description</a> ()=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1870e0d80a223ef4e1661be80029dbec">TargetClassDescription</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const std::type_info &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#73f632a573cbbfecf9e00f04c5ce73e9">GetType</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1d3a8785a0ad0c85b98fa3406a64d50f">SpecificationURL</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#0e10219d8aedefa78ef16fc7fded85ec">GetMIMEType</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#94a94537cc5ba96b1876db1b612b91a3">Flags</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1f0ee7ba19cc62b53a7ee06fa4f91509">SkipObjects</a> (int, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#0924b1a442d147fa036bff23a4cf04ef">MakeNewInstance</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#ebe7951587dde866be926712693e285b">~OBFormat</a> ()</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Base class for file formats. 
<p>
Two sets of Read and Write functions are specified for each format to handle two different requirements. The "Convert" interface is for use in file format conversion applications. The user interface, a console, a GUI, or another program is kept unaware of the details of the chemistry and does not need to #include <a class="el" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">mol.h</a>. It is then necessary to manipulate only pointers to <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> in <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> and the user interface, with all the construction and deletion of <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> etc objects being done in the Format classes or the OB core. The convention with "Covert" interface functions is that chemical objects are made on the heap with new in the ReadChemicalObject() functions and and deleted in WriteChemicalObject() functions<p>
The "API" interface is for programatic use of the OB routines in application programs where <a class="el" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">mol.h</a> is #included. There is generally no creation or destruction of objects in <a class="el" href="classOpenBabel_1_1OBFormat.shtml#1e309febfaef70cc3c8d98afc1540931" title="The "API" interface Read function.">ReadMolecule()</a> and <a class="el" href="classOpenBabel_1_1OBFormat.shtml#663171ec9788e2d1621d374848b3888b" title="The "API" interface Write function.">WriteMolecule()</a> and no restriction on whether the pointers are to the heap or the stack. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="ebe7951587dde866be926712693e285b"></a><!-- doxytag: member="OpenBabel::OBFormat::~OBFormat" ref="ebe7951587dde866be926712693e285b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Format classes do not have a destructor. 
<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="1e309febfaef70cc3c8d98afc1540931"></a><!-- doxytag: member="OpenBabel::OBFormat::ReadMolecule" ref="1e309febfaef70cc3c8d98afc1540931" args="(OBBase *, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadMolecule           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "API" interface Read function. 
<p>
Reads a single object. Does not make a new object on the heap; can be used with a pointer to an chem object on the heap or the stack. 
<p>
Reimplemented in <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#5a3cd5ffc0d21fe9b95d804c44e7d146">XMLMoleculeFormat</a>.
</div>
</div><p>
<a class="anchor" name="6044ced825a2a83b7cfe7c45eea63c99"></a><!-- doxytag: member="OpenBabel::OBFormat::ReadChemObject" ref="6044ced825a2a83b7cfe7c45eea63c99" args="(OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadChemObject           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "Convert" interface Read function. 
<p>
Possibly reads multiple new objects on the heap and subjects them to its DoTransformations() function, which may delete them again. Sends result to pConv-&gt;AddChemObject() 
<p>
Reimplemented in <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#9acd362b27e30c19a2c870ca71592723">OBMoleculeFormat</a>, and <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#9acd362b27e30c19a2c870ca71592723">XMLMoleculeFormat</a>.
</div>
</div><p>
<a class="anchor" name="663171ec9788e2d1621d374848b3888b"></a><!-- doxytag: member="OpenBabel::OBFormat::WriteMolecule" ref="663171ec9788e2d1621d374848b3888b" args="(OBBase *, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteMolecule           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "API" interface Write function. 
<p>
Writes a single object Does not delete the object; can be used with a pointer to an chem object on the heap or the stack. <dl class="return" compact><dt><b>Returns:</b></dt><dd>false on error. </dd></dl>

</div>
</div><p>
<a class="anchor" name="5ea5d9623cd9594549a52e116caecaa2"></a><!-- doxytag: member="OpenBabel::OBFormat::WriteChemObject" ref="5ea5d9623cd9594549a52e116caecaa2" args="(OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteChemObject           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "Convert" interface Write function. 
<p>
Writes a single object Deletes the object after writing <dl class="return" compact><dt><b>Returns:</b></dt><dd>false on error </dd></dl>

<p>
Reimplemented in <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#39c2aaf250dde6e85d05ff9357d8b003">OBMoleculeFormat</a>, and <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#39c2aaf250dde6e85d05ff9357d8b003">XMLMoleculeFormat</a>.
</div>
</div><p>
<a class="anchor" name="b87525f269e7819d8462f450d30d56a7"></a><!-- doxytag: member="OpenBabel::OBFormat::Description" ref="b87525f269e7819d8462f450d30d56a7" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* Description           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Information on this format. Printed out in response to -Hxxx option where xxx id the id of the format. 
<p>
Must be provided by each format class. Can include a list of command line Options. These may be used to construction check boxes, radio buttons etc for GUI interface. 
</div>
</div><p>
<a class="anchor" name="1870e0d80a223ef4e1661be80029dbec"></a><!-- doxytag: member="OpenBabel::OBFormat::TargetClassDescription" ref="1870e0d80a223ef4e1661be80029dbec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * TargetClassDescription           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
If not provided, the object type used by the default format is used (usually <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>). 
<p>

</div>
</div><p>
<a class="anchor" name="73f632a573cbbfecf9e00f04c5ce73e9"></a><!-- doxytag: member="OpenBabel::OBFormat::GetType" ref="73f632a573cbbfecf9e00f04c5ce73e9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const type_info &amp; GetType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the type of chemical object used by the format. </dd></dl>

<p>
Defaults to that used by the default format. Useful for checking that a format can handle a particular object. 
<p>
Reimplemented in <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#54e576034bd51c66256aa6a98f81d644">OBMoleculeFormat</a>, and <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#54e576034bd51c66256aa6a98f81d644">XMLMoleculeFormat</a>.
</div>
</div><p>
<a class="anchor" name="1d3a8785a0ad0c85b98fa3406a64d50f"></a><!-- doxytag: member="OpenBabel::OBFormat::SpecificationURL" ref="1d3a8785a0ad0c85b98fa3406a64d50f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* SpecificationURL           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Web address where the format is defined. 
<p>

</div>
</div><p>
<a class="anchor" name="0e10219d8aedefa78ef16fc7fded85ec"></a><!-- doxytag: member="OpenBabel::OBFormat::GetMIMEType" ref="0e10219d8aedefa78ef16fc7fded85ec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* GetMIMEType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Chemical MIME type associated with this file type (if any). 
<p>

</div>
</div><p>
<a class="anchor" name="94a94537cc5ba96b1876db1b612b91a3"></a><!-- doxytag: member="OpenBabel::OBFormat::Flags" ref="94a94537cc5ba96b1876db1b612b91a3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int Flags           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Decribes the capabilities of the format (Read only etc.). 
<p>
Currently, can be a bitwise OR of any of the following NOTREADABLE READONEONLY NOTWRITABLE WRITEONEONLY DEFAULTFORMAT READBINARY WRITEBINARY READXML 
</div>
</div><p>
<a class="anchor" name="1f0ee7ba19cc62b53a7ee06fa4f91509"></a><!-- doxytag: member="OpenBabel::OBFormat::SkipObjects" ref="1f0ee7ba19cc62b53a7ee06fa4f91509" args="(int, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual int SkipObjects           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>1 on success, -1 on error and 0 if not implemented </dd></dl>

<p>

<p>
Reimplemented in <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#dfcd8e84805c262d8cbca79a83f9d4cc">XMLBaseFormat</a>.
</div>
</div><p>
<a class="anchor" name="0924b1a442d147fa036bff23a4cf04ef"></a><!-- doxytag: member="OpenBabel::OBFormat::MakeNewInstance" ref="0924b1a442d147fa036bff23a4cf04ef" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* MakeNewInstance           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>a pointer to a new instance of the format, or NULL if fails. </dd></dl>

<p>
Normally a single global instance is used but this may cause problems if there are member variables and the format is used in more than one place in the program. 
</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="obconversion_8h-source.shtml">obconversion.h</a><li><a class="el" href="obconversion_8cpp.shtml">obconversion.cpp</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:17 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
