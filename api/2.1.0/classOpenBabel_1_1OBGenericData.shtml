<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBGenericData Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul>
</div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a></div>
<h1>OBGenericData Class Reference</h1><!-- doxytag: class="OpenBabel::OBGenericData" -->Base class for generic data.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="generic_8h-source.shtml">openbabel/generic.h</a>&gt;</code>
<p>
Inheritance diagram for OBGenericData:<p><center><img src="classOpenBabel_1_1OBGenericData__inherit__graph.png" border="0" usemap="#OBGenericData__inherit__map" alt="Inheritance graph"></center>
<map name="OBGenericData__inherit__map">
<area shape="rect" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol." alt="" coords="8,82,112,109"><area shape="rect" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData." alt="" coords="136,82,242,109"><area shape="rect" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long)." alt="" coords="266,82,394,109"><area shape="rect" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps." alt="" coords="418,82,554,109"><area shape="rect" href="classOpenBabel_1_1OBExternalBondData.shtml" title="Used to store information on external bonds (e.g., in SMILES fragments)." alt="" coords="578,82,730,109"><area shape="rect" href="classOpenBabel_1_1OBNasaThermoData.shtml" title="Thermodynamic data in old style NASA polynomial form for OBMol." alt="" coords="754,82,904,109"><area shape="rect" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships." alt="" coords="928,82,1021,109"><area shape="rect" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type." alt="" coords="1045,82,1168,109"><area shape="rect" href="classOpenBabel_1_1OBRateData.shtml" title="Holds rate constant data for OBReaction." alt="" coords="1192,82,1290,109"><area shape="rect" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR())." alt="" coords="1314,82,1413,109"><area shape="rect" href="classOpenBabel_1_1OBRotamerList.shtml" title="Supports a set of rotamer coordinate sets for some number of potentially rotatable..." alt="" coords="1437,82,1552,109"><area shape="rect" href="classOpenBabel_1_1OBSerialNums.shtml" title="Defines a map between serial numbers (e.g., in a PDB file) and OBAtom objects inside..." alt="" coords="1576,82,1688,109"><area shape="rect" href="classOpenBabel_1_1OBSetData.shtml" title="Used to store arbitrary attribute/set relationships. Should be used to store a set..." alt="" coords="1712,82,1802,109"><area shape="rect" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point&#45;group and/or space&#45;group symmetry." alt="" coords="1826,82,1957,109"><area shape="rect" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol." alt="" coords="1981,82,2098,109"><area shape="rect" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from..." alt="" coords="2122,82,2210,109"><area shape="rect" href="classOpenBabel_1_1OBVibrationData.shtml" title="Used to hold the normal modes of a molecule, etc." alt="" coords="2234,82,2360,109"><area shape="rect" href="classOpenBabel_1_1OBVirtualBond.shtml" title="Used to temporarily store bonds that reference an atom that has not yet been added..." alt="" coords="2384,82,2496,109"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center><a href="classOpenBabel_1_1OBGenericData-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#c1d123c6ea761d25e7b4066501eb3652">OBGenericData</a> (const std::string attr=&quot;undefined&quot;, const unsigned int type=OBGenericDataType::UndefinedData, const <a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source=any)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#67bda850335747e7ac5d66629bda0a67">Clone</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#cb834533508953a264ed93b74fddad8d">~OBGenericData</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ae3d15983201a2a115701b2c538fef77">SetAttribute</a> (const std::string &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#45613e34598a9584fb0120ef3fdab9e0">SetOrigin</a> (const <a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> s)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const std::string &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#c61fc66ef692e79290d6eaf7231db92c">GetAttribute</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#91834e24b299c63cdf2cb77795298446">GetDataType</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const std::string &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#6145f0df06364b6d58c728368db8f992">GetValue</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#df131b210114ba636246ffc8dcb2ea13">GetOrigin</a> () const</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#dceb77134f15418a66cf1124dcef1b51">_attr</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#31291823d487a4a47f24aae5870505ef">_type</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#239606b62a534e4df7626ea0cfdfb856">_source</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Base class for generic data. 
<p>
<a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> is an abstract base class which defines an interface for storage, retrieval, and indexing of arbitrary generic data. Subclasses of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> can be used to store custom data on a per-atom, per-bond, per-molecule, or per-residue basis. Open Babel currently supports a small subset of chemical functionality as <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> types, which will expand over time to support additional interconversion (e.g., spectroscopy, dynamics, surfaces...)<p>
For more information on currently supported types, please see the developer wiki: <a href="http://openbabel.sourceforge.net/wiki/Generic_Data">http://openbabel.sourceforge.net/wiki/Generic_Data</a><p>
For your own custom data, either define a custom subclass using an id from the <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bd4a188d7201f00f99ec649edead73c1e" title="Custom (user-defined data).">OBGenericDataType::CustomData0</a> to <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b8051d4056f7d8a89233dfa0ebc949bc1">OBGenericDataType::CustomData15</a> slots, or store your data as a string and use <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a> for key/value access. The latter is <b>highly</b> recommended for various text descriptors e.g., in QSAR, atom or bond labels, or other textual data.<p>
<b>New in Open Babel, version 2.1</b> is the template-based <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate</a>, which can be used to store arbitrary data types. There are predefined types OBPairInteger and OBPairFloatingPoint for storing integers and floating-point values without converting to a string representation.<p>
Also <b>new</b> is the "source" or "origin" of a data entry, enumerated by DataOrigin. This can be accessed by <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#45613e34598a9584fb0120ef3fdab9e0" title="Set the origin of this data, which can be used to filter the data.">SetOrigin()</a> and <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#df131b210114ba636246ffc8dcb2ea13">GetOrigin()</a>, as well as via "filtering" methods in <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>, allowing you to separate data read in from a file, added by a user, or assigned by Open Babel internally.<p>
While the library and import routines will set DataOrigin correctly, you should try to annotate data added by your code. Typically this would either be userAdded or external. The former refers to something the user requested as an annotation, while the latter refers to annotations your code adds automatically.<p>
Example code using <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>:<p>
<div class="fragment"><pre class="fragment">      <span class="keywordflow">if</span> (mol.HasData(<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b26d8504c2596c9ef59dab47c01a4dd1b" title="Crystallographic unit cell data, i.e., OBUnitCell.">OBGenericDataType::UnitCell</a>))
      {
         uc = (OBUnitCell*)mol.GetData(<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b26d8504c2596c9ef59dab47c01a4dd1b" title="Crystallographic unit cell data, i.e., OBUnitCell.">OBGenericDataType::UnitCell</a>);
         sprintf(buffer,
            <span class="stringliteral">"%10.5f%10.5f%10.5f%10.5f%10.5f%10.5f"</span>,
            uc-&gt;GetA(), uc-&gt;GetB(), uc-&gt;GetC(),
            uc-&gt;GetAlpha() , uc-&gt;GetBeta(), uc-&gt;GetGamma());
         ofs &lt;&lt; buffer &lt;&lt; endl;
      }

      ...

      vector&lt;OBGenericData*&gt;::iterator k;
      vector&lt;OBGenericData*&gt; vdata = mol.GetData();
      <span class="keywordflow">for</span> (k = vdata.begin();k != vdata.end();++k)
         <span class="keywordflow">if</span> ((*k)-&gt;GetDataType() == <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bf37b8c94a903cbf5fc45475c815c541a" title="Arbitrary key/value data, i.e., OBPairData.">OBGenericDataType::PairData</a>)
         {
            ofs &lt;&lt; <span class="stringliteral">"&gt;  &lt;"</span> &lt;&lt; (*k)-&gt;GetAttribute() &lt;&lt; <span class="stringliteral">"&gt;"</span> &lt;&lt; endl;
            ofs &lt;&lt; ((OBPairData*)(*k))-&gt;<a class="code" href="classOpenBabel_1_1OBGenericData.shtml#6145f0df06364b6d58c728368db8f992" title="Base class returns a default value (the attribute type) but should never be called...">GetValue</a>() &lt;&lt; endl &lt;&lt; endl;
         }
</pre></div><p>
Similar code also works for <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> stored in an <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> or <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> or <a class="el" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>. These examples show use of DataOrigin outside of the Open Babel library.<p>
<div class="fragment"><pre class="fragment">      <span class="keywordtype">string</span> atomLabel; <span class="comment">// e.g., from the user adding annotation to an atom</span>
      <span class="keywordflow">if</span> (!atom.HasData(<span class="stringliteral">"UserLabel"</span>)) <span class="comment">// stored textual data as an OBPairData</span>
      {
         OBPairData *label = <span class="keyword">new</span> OBPairData;
         label-&gt;SetAttribute(<span class="stringliteral">"UserLabel"</span>);
         label-&gt;SetValue(atomLabel);
         label-&gt;SetOrigin(<a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14928a3db32b4975c3d42d0ca5d8d9f44d" title="Added by the user.">userInput</a>); <span class="comment">// set by user, not by Open Babel</span>

         atom.SetData(label);
      }

      ...

      <span class="keywordflow">if</span> (bond.HasData(<span class="stringliteral">"DisplayType"</span>)) <span class="comment">// e.g. in a visualization tool</span>
      {
         OBPairData *display = dynamic_cast&lt;OBPairData *&gt; bond.GetData(<span class="stringliteral">"DisplayType"</span>);
         <span class="keywordflow">if</span> (display-&gt;GetValue() == <span class="stringliteral">"wireframe"</span>)
         {
            ... <span class="comment">// display a wireframe view</span>
         }
      }
</pre></div><p>
When designing a class derived from <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> you must add a <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#67bda850335747e7ac5d66629bda0a67">Clone()</a> function. For classes used with <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> this is used when an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object is copied. If your class member variables contain pointers to atoms or bonds then it will be necessary to ensure that these are updated in <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#67bda850335747e7ac5d66629bda0a67">Clone()</a> to refer to the new molecule. Without these and similar pointers it is more likely that the very simple clone function <div class="fragment"><pre class="fragment">      <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml#c1d123c6ea761d25e7b4066501eb3652">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBGenericData.shtml#67bda850335747e7ac5d66629bda0a67">Clone</a>(OBBase* parent)<span class="keyword"> const</span>
<span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> MyNewClass(*<span class="keyword">this</span>);}
</pre></div> and the compiler generated copy constructor would be sufficient.<p>
It is recommended that, if possible, <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> classes do not store atom and bond pointers. Using atom and bond indices instead would allow the simple version of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#67bda850335747e7ac5d66629bda0a67">Clone()</a> above. See OBRotameterData::Clone for an example of a more complicated version. For classes which are not intended to support copying, <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#67bda850335747e7ac5d66629bda0a67">Clone()</a> can return NULL <div class="fragment"><pre class="fragment">      <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml#c1d123c6ea761d25e7b4066501eb3652">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBGenericData.shtml#67bda850335747e7ac5d66629bda0a67">Clone</a>(OBBase* parent)<span class="keyword"> const </span>
<span class="keyword">         </span>{<span class="keywordflow">return</span> NULL;}
</pre></div> <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#67bda850335747e7ac5d66629bda0a67">Clone()</a> is a pure virtual function so that you need to decide what kind of function you need and include it explicitly. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="c1d123c6ea761d25e7b4066501eb3652"></a><!-- doxytag: member="OpenBabel::OBGenericData::OBGenericData" ref="c1d123c6ea761d25e7b4066501eb3652" args="(const std::string attr=&quot;undefined&quot;, const unsigned int type=OBGenericDataType::UndefinedData, const DataOrigin source=any)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>           </td>
          <td>(</td>
          <td class="paramtype">const std::string&nbsp;</td>
          <td class="paramname"> <em>attr</em> = <code>&quot;undefined&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&nbsp;</td>
          <td class="paramname"> <em>type</em> = <code>OBGenericDataType::UndefinedData</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&nbsp;</td>
          <td class="paramname"> <em>source</em> = <code>any</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="cb834533508953a264ed93b74fddad8d"></a><!-- doxytag: member="OpenBabel::OBGenericData::~OBGenericData" ref="cb834533508953a264ed93b74fddad8d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="67bda850335747e7ac5d66629bda0a67"></a><!-- doxytag: member="OpenBabel::OBGenericData::Clone" ref="67bda850335747e7ac5d66629bda0a67" args="(OBBase *) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>
Reimplemented in <a class="el" href="classOpenBabel_1_1OBCommentData.shtml#67bda850335747e7ac5d66629bda0a67">OBCommentData</a>, <a class="el" href="classOpenBabel_1_1OBExternalBondData.shtml#67bda850335747e7ac5d66629bda0a67">OBExternalBondData</a>, <a class="el" href="classOpenBabel_1_1OBPairData.shtml#67bda850335747e7ac5d66629bda0a67">OBPairData</a>, <a class="el" href="classOpenBabel_1_1OBSetData.shtml#67bda850335747e7ac5d66629bda0a67">OBSetData</a>, <a class="el" href="classOpenBabel_1_1OBVirtualBond.shtml#67bda850335747e7ac5d66629bda0a67">OBVirtualBond</a>, <a class="el" href="classOpenBabel_1_1OBRingData.shtml#67bda850335747e7ac5d66629bda0a67">OBRingData</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#67bda850335747e7ac5d66629bda0a67">OBUnitCell</a>, <a class="el" href="classOpenBabel_1_1OBConformerData.shtml#67bda850335747e7ac5d66629bda0a67">OBConformerData</a>, <a class="el" href="classOpenBabel_1_1OBSymmetryData.shtml#67bda850335747e7ac5d66629bda0a67">OBSymmetryData</a>, <a class="el" href="classOpenBabel_1_1OBTorsionData.shtml#67bda850335747e7ac5d66629bda0a67">OBTorsionData</a>, <a class="el" href="classOpenBabel_1_1OBAngleData.shtml#67bda850335747e7ac5d66629bda0a67">OBAngleData</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#67bda850335747e7ac5d66629bda0a67">OBChiralData</a>, <a class="el" href="classOpenBabel_1_1OBSerialNums.shtml#67bda850335747e7ac5d66629bda0a67">OBSerialNums</a>, <a class="el" href="classOpenBabel_1_1OBRateData.shtml#f0b8e0b15297bc82b44b17c06f1e2020">OBRateData</a>, <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#f0b8e0b15297bc82b44b17c06f1e2020">OBNasaThermoData</a>, and <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#5361d45ced4133323de80d61ae5ecf05">OBRotamerList</a>.
</div>
</div><p>
<a class="anchor" name="ae3d15983201a2a115701b2c538fef77"></a><!-- doxytag: member="OpenBabel::OBGenericData::SetAttribute" ref="ae3d15983201a2a115701b2c538fef77" args="(const std::string &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAttribute           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the attribute (key), which can be used to retrieve this data. 
<p>

</div>
</div><p>
<a class="anchor" name="45613e34598a9584fb0120ef3fdab9e0"></a><!-- doxytag: member="OpenBabel::OBGenericData::SetOrigin" ref="45613e34598a9584fb0120ef3fdab9e0" args="(const DataOrigin s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetOrigin           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the origin of this data, which can be used to filter the data. 
<p>

</div>
</div><p>
<a class="anchor" name="c61fc66ef692e79290d6eaf7231db92c"></a><!-- doxytag: member="OpenBabel::OBGenericData::GetAttribute" ref="c61fc66ef692e79290d6eaf7231db92c" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetAttribute           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The attribute (key), which can be used to retrieve this data </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="91834e24b299c63cdf2cb77795298446"></a><!-- doxytag: member="OpenBabel::OBGenericData::GetDataType" ref="91834e24b299c63cdf2cb77795298446" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetDataType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the data type for this object as defined in <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="6145f0df06364b6d58c728368db8f992"></a><!-- doxytag: member="OpenBabel::OBGenericData::GetValue" ref="6145f0df06364b6d58c728368db8f992" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetValue           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Base class returns a default value (the attribute type) but should never be called. 
<p>

<p>
Reimplemented in <a class="el" href="classOpenBabel_1_1OBCommentData.shtml#6145f0df06364b6d58c728368db8f992">OBCommentData</a>, <a class="el" href="classOpenBabel_1_1OBPairData.shtml#6145f0df06364b6d58c728368db8f992">OBPairData</a>, and <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml#5296b18feccede12ba2dd8fb80c6ef66">OBPairTemplate</a>.
</div>
</div><p>
<a class="anchor" name="df131b210114ba636246ffc8dcb2ea13"></a><!-- doxytag: member="OpenBabel::OBGenericData::GetOrigin" ref="df131b210114ba636246ffc8dcb2ea13" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> GetOrigin           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="dceb77134f15418a66cf1124dcef1b51"></a><!-- doxytag: member="OpenBabel::OBGenericData::_attr" ref="dceb77134f15418a66cf1124dcef1b51" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#dceb77134f15418a66cf1124dcef1b51">_attr</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
attribute tag (e.g., "UnitCell", "Comment" or "Author") 
<p>

</div>
</div><p>
<a class="anchor" name="31291823d487a4a47f24aae5870505ef"></a><!-- doxytag: member="OpenBabel::OBGenericData::_type" ref="31291823d487a4a47f24aae5870505ef" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#31291823d487a4a47f24aae5870505ef">_type</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
attribute type -- declared for each subclass 
<p>

</div>
</div><p>
<a class="anchor" name="239606b62a534e4df7626ea0cfdfb856"></a><!-- doxytag: member="OpenBabel::OBGenericData::_source" ref="239606b62a534e4df7626ea0cfdfb856" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#239606b62a534e4df7626ea0cfdfb856">_source</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
source of data for accounting 
<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="generic_8h-source.shtml">generic.h</a><li><a class="el" href="generic_8cpp.shtml">generic.cpp</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:15 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
