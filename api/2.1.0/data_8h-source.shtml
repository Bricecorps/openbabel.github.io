<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: data.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>data.h</h1><a href="data_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">data.h - Global data and resource file parsers.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_DATA_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_DATA_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">namespace </span>OpenBabel
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033 
<a name="l00034"></a>00034   <span class="keyword">class </span>OBAtom;
<a name="l00035"></a>00035   <span class="keyword">class </span>OBMol;
<a name="l00036"></a>00036   <span class="keyword">class </span>OBBitVec;
<a name="l00037"></a>00037 
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml">00048</a>   <span class="keyword">class </span>OBAPI OBGlobalDataBase
<a name="l00049"></a>00049     {
<a name="l00050"></a>00050     <span class="keyword">protected</span>:
<a name="l00051"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#40756214f69d1c40ad70b64ae9fdc08d">00051</a>       <span class="keywordtype">bool</span>         _init;               
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#45a08560f2b4885250c586c550f2d7af">00052</a>       <span class="keyword">const</span> <span class="keywordtype">char</span>  *_dataptr;
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#895aefe990ffe9af66bb5cd4e37d3579">00053</a>       std::string  _filename;
<a name="l00054"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#2c2f62a9907553e5feb1ecef65c6c386">00054</a>       std::string  _dir;                
<a name="l00055"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#5d93159b6eee0cb302451621106f61c7">00055</a>       std::string  _subdir;     
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#87d06c3aed77fb9e118b337bed557928">00056</a>       std::string  _envvar;     
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="keyword">public</span>:
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#36b81861b36e935bf0a39dee7745c3ed">00060</a>       OBGlobalDataBase(): _init(false), _dataptr(NULL) { }
<a name="l00062"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#8556118660d5608e1c18a8e67a93df4c">00062</a>       <span class="keyword">virtual</span> ~OBGlobalDataBase()                  {}
<a name="l00064"></a>00064       <span class="keywordtype">void</span>  Init();
<a name="l00066"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#79821726c4064984b8847a7bba55f6d3">00066</a>       <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize()                 { <span class="keywordflow">return</span> 0;}
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#49002f92ad6a1c71d7f9148271770b7a">00068</a>       <span class="keywordtype">void</span>  SetReadDirectory(<span class="keywordtype">char</span> *dir)            { _dir = dir;    }
<a name="l00070"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#2bd0630d27e20f38de4c753ca68e2282">00070</a>       <span class="keywordtype">void</span>  SetEnvironmentVariable(<span class="keywordtype">char</span> *var)      { _envvar = var; }
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#9a84dbfb089769dec48cd6f6eca1057b">00072</a>       <span class="keyword">virtual</span> <span class="keywordtype">void</span> ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*)          {}
<a name="l00073"></a>00073     };
<a name="l00074"></a>00074 
<a name="l00081"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml">00081</a>   <span class="keyword">class </span>OBAPI OBElement
<a name="l00082"></a>00082     {
<a name="l00083"></a>00083       <span class="keywordtype">int</span> _num;
<a name="l00084"></a>00084       <span class="keywordtype">char</span> _symbol[3];
<a name="l00085"></a>00085       std::string _name;
<a name="l00086"></a>00086       <span class="keywordtype">double</span> _Rcov,_Rvdw,_mass,_elNeg,_ionize,_elAffinity;
<a name="l00087"></a>00087       <span class="keywordtype">double</span> _red, _green, _blue;
<a name="l00088"></a>00088       <span class="keywordtype">int</span> _maxbonds;
<a name="l00089"></a>00089     <span class="keyword">public</span>:
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#dc9911e43430fd65726f393308db7e6e">00091</a>       OBElement()    {}
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#5fd3c5faa3351305351a255061d7be36">00107</a>       OBElement(<span class="keywordtype">int</span> num, <span class="keyword">const</span> <span class="keywordtype">char</span> *sym, <span class="keywordtype">double</span> rcov, <span class="keywordtype">double</span> rvdw,
<a name="l00108"></a>00108                 <span class="keywordtype">int</span> maxbo, <span class="keywordtype">double</span> mass, <span class="keywordtype">double</span> elNeg, <span class="keywordtype">double</span> ionize,
<a name="l00109"></a>00109                 <span class="keywordtype">double</span> elAffin, <span class="keywordtype">double</span> red, <span class="keywordtype">double</span> green, <span class="keywordtype">double</span> blue,
<a name="l00110"></a>00110                 std::string name) :
<a name="l00111"></a>00111         _num(num), _name(name), _Rcov(rcov), _Rvdw(rvdw), _mass(mass), 
<a name="l00112"></a>00112         _elNeg(elNeg), _ionize(ionize), _elAffinity(elAffin), 
<a name="l00113"></a>00113         _red(red), _green(green), _blue(blue),
<a name="l00114"></a>00114         _maxbonds(maxbo)
<a name="l00115"></a>00115         {
<a name="l00116"></a>00116           strncpy(_symbol, sym, 3);
<a name="l00117"></a>00117         }
<a name="l00118"></a>00118 
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#8f31c44517534e1f574a8863b62a3393">00120</a>       <span class="keywordtype">int</span> GetAtomicNum()         {       <span class="keywordflow">return</span>(_num);    }
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#3f7b436009a04eb1c6189e36fb46c243">00122</a>       <span class="keyword">const</span> <span class="keywordtype">char</span> *GetSymbol()    {       <span class="keywordflow">return</span>(_symbol); }
<a name="l00124"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#75c2e30ac7073faf1846c1d95f10477e">00124</a>       <span class="keywordtype">double</span> GetCovalentRad()    {       <span class="keywordflow">return</span>(_Rcov);   }
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#7efca557d66da627333df398980c6126">00126</a>       <span class="keywordtype">double</span> GetVdwRad()         {       <span class="keywordflow">return</span>(_Rvdw);   }
<a name="l00128"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#e10e5ef3968d6e55522d0480cea9c660">00128</a>       <span class="keywordtype">double</span> GetMass()           {       <span class="keywordflow">return</span>(_mass);   }
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#40026d51ab0e4e95dff002676ccac3b1">00130</a>       <span class="keywordtype">int</span> GetMaxBonds()          {       <span class="keywordflow">return</span>(_maxbonds);}
<a name="l00132"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#79b6be626237d9dba8525e2ed748dd43">00132</a>       <span class="keywordtype">double</span> GetElectroNeg()     {       <span class="keywordflow">return</span>(_elNeg);  }
<a name="l00134"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#440bfda6981c965bd3064ab806f6e8d2">00134</a>       <span class="keywordtype">double</span> GetIonization()     {       <span class="keywordflow">return</span>(_ionize);  }
<a name="l00136"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#aa8e88b8910a30ae9de3ef9b3aab921c">00136</a>       <span class="keywordtype">double</span> GetElectronAffinity(){      <span class="keywordflow">return</span>(_elAffinity);  }
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#8facce7acc5e95194c232b9bbd1363d5">00138</a>       std::string GetName()      {       <span class="keywordflow">return</span>(_name);    }
<a name="l00140"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#7b09cecd8e93a824444dd769ac756c0f">00140</a>       <span class="keywordtype">double</span> GetRed()            {       <span class="keywordflow">return</span>(_red);     }
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#d75a0aa975fc5c2b3228306e590ef399">00142</a>       <span class="keywordtype">double</span> GetGreen()          {       <span class="keywordflow">return</span>(_green);   }
<a name="l00144"></a><a class="code" href="classOpenBabel_1_1OBElement.shtml#9108d11a6d6f06fb9788b2fd10f2e9d0">00144</a>       <span class="keywordtype">double</span> GetBlue()           {       <span class="keywordflow">return</span>(_blue);    }
<a name="l00145"></a>00145     };
<a name="l00146"></a>00146 
<a name="l00147"></a>00147   <span class="comment">// class introduction in data.cpp</span>
<a name="l00148"></a><a class="code" href="classOpenBabel_1_1OBElementTable.shtml">00148</a>   <span class="keyword">class </span>OBAPI OBElementTable : <span class="keyword">public</span> OBGlobalDataBase
<a name="l00149"></a>00149     {
<a name="l00150"></a>00150       std::vector&lt;OBElement*&gt; _element;
<a name="l00151"></a>00151 
<a name="l00152"></a>00152     <span class="keyword">public</span>:
<a name="l00153"></a>00153 
<a name="l00154"></a>00154       OBElementTable(<span class="keywordtype">void</span>);
<a name="l00155"></a>00155       ~OBElementTable();
<a name="l00156"></a>00156 
<a name="l00157"></a>00157       <span class="keywordtype">void</span>  ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00158"></a>00158 
<a name="l00160"></a>00160       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>              GetNumberOfElements();
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1OBElementTable.shtml#93721b9b970ca9a8160f7b831ae7e9d4">00162</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    GetSize() { <span class="keywordflow">return</span> GetNumberOfElements(); }
<a name="l00163"></a>00163 
<a name="l00165"></a>00165       <span class="keywordtype">int</span>   GetAtomicNum(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00169"></a>00169       <span class="keywordtype">int</span>   GetAtomicNum(<span class="keyword">const</span> <span class="keywordtype">char</span> *, <span class="keywordtype">int</span> &amp;iso);
<a name="l00171"></a>00171       <span class="keyword">const</span> <span class="keywordtype">char</span> *GetSymbol(<span class="keywordtype">int</span>);
<a name="l00173"></a>00173       <span class="keywordtype">double</span> GetVdwRad(<span class="keywordtype">int</span>);
<a name="l00175"></a>00175       <span class="keywordtype">double</span> GetCovalentRad(<span class="keywordtype">int</span>);
<a name="l00178"></a>00178       <span class="keywordtype">double</span> GetMass(<span class="keywordtype">int</span>);
<a name="l00181"></a>00181       <span class="keywordtype">double</span> CorrectedBondRad(<span class="keywordtype">int</span>,<span class="keywordtype">int</span> = 3); <span class="comment">// atomic #, hybridization</span>
<a name="l00184"></a>00184 <span class="comment"></span>      <span class="keywordtype">double</span> CorrectedVdwRad(<span class="keywordtype">int</span>,<span class="keywordtype">int</span> = 3); <span class="comment">// atomic #, hybridization</span>
<a name="l00186"></a>00186 <span class="comment"></span>      <span class="keywordtype">int</span>       GetMaxBonds(<span class="keywordtype">int</span>);
<a name="l00188"></a>00188       <span class="keywordtype">double</span> GetElectroNeg(<span class="keywordtype">int</span>);
<a name="l00190"></a>00190       <span class="keywordtype">double</span> GetIonization(<span class="keywordtype">int</span>);
<a name="l00192"></a>00192       <span class="keywordtype">double</span> GetElectronAffinity(<span class="keywordtype">int</span>);
<a name="l00194"></a>00194       std::vector&lt;double&gt; GetRGB(<span class="keywordtype">int</span>);
<a name="l00196"></a>00196       std::string GetName(<span class="keywordtype">int</span>);
<a name="l00197"></a>00197     };
<a name="l00198"></a>00198 
<a name="l00199"></a>00199   <span class="comment">// class introduction in data.cpp</span>
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml">00200</a>   <span class="keyword">class </span>OBAPI OBIsotopeTable : <span class="keyword">public</span> OBGlobalDataBase
<a name="l00201"></a>00201     {
<a name="l00202"></a>00202       std::vector&lt;std::vector&lt;std::pair &lt;unsigned int, double&gt; &gt; &gt; _isotopes;
<a name="l00203"></a>00203 
<a name="l00204"></a>00204     <span class="keyword">public</span>:
<a name="l00205"></a>00205 
<a name="l00206"></a>00206       OBIsotopeTable(<span class="keywordtype">void</span>);
<a name="l00207"></a><a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml#509d31ff06b39b2db2a538be6eef77a1">00207</a>       ~OBIsotopeTable()    {}
<a name="l00208"></a>00208 
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml#93721b9b970ca9a8160f7b831ae7e9d4">00210</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize() { <span class="keywordflow">return</span> _isotopes.size(); }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212       <span class="keywordtype">void</span>      ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00215"></a>00215       <span class="keywordtype">double</span>    GetExactMass(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomicNum,
<a name="l00216"></a>00216                            <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> isotope = 0);
<a name="l00217"></a>00217     };
<a name="l00218"></a>00218 
<a name="l00219"></a>00219   <span class="comment">// class introduction in data.cpp</span>
<a name="l00220"></a><a class="code" href="classOpenBabel_1_1OBTypeTable.shtml">00220</a>   <span class="keyword">class </span>OBAPI OBTypeTable : <span class="keyword">public</span> OBGlobalDataBase
<a name="l00221"></a>00221     {
<a name="l00222"></a>00222       <span class="keywordtype">int</span>             _linecount;
<a name="l00223"></a>00223       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>    _ncols,_nrows;
<a name="l00224"></a>00224       <span class="keywordtype">int</span>             _from,_to;
<a name="l00225"></a>00225       std::vector&lt;std::string&gt; _colnames;
<a name="l00226"></a>00226       std::vector&lt;std::vector&lt;std::string&gt; &gt; _table;
<a name="l00227"></a>00227 
<a name="l00228"></a>00228     <span class="keyword">public</span>:
<a name="l00229"></a>00229 
<a name="l00230"></a>00230       OBTypeTable(<span class="keywordtype">void</span>);
<a name="l00231"></a><a class="code" href="classOpenBabel_1_1OBTypeTable.shtml#72cd4a33759982430a7db60c3d392fee">00231</a>       ~OBTypeTable() {}
<a name="l00232"></a>00232 
<a name="l00233"></a>00233       <span class="keywordtype">void</span> ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00234"></a>00234 
<a name="l00236"></a><a class="code" href="classOpenBabel_1_1OBTypeTable.shtml#93721b9b970ca9a8160f7b831ae7e9d4">00236</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize() { <span class="keywordflow">return</span> _table.size(); }
<a name="l00237"></a>00237 
<a name="l00239"></a>00239       <span class="keywordtype">bool</span> SetFromType(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00241"></a>00241       <span class="keywordtype">bool</span> SetToType(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00243"></a>00243       <span class="keywordtype">bool</span> Translate(<span class="keywordtype">char</span> *to, <span class="keyword">const</span> <span class="keywordtype">char</span> *from); <span class="comment">// to, from</span>
<a name="l00246"></a>00246 <span class="comment"></span>      <span class="keywordtype">bool</span> Translate(std::string &amp;to, <span class="keyword">const</span> std::string &amp;from); <span class="comment">// to, from</span>
<a name="l00249"></a>00249 <span class="comment"></span>      std::string Translate(<span class="keyword">const</span> std::string &amp;from);
<a name="l00250"></a>00250 
<a name="l00252"></a>00252       std::string GetFromType();
<a name="l00254"></a>00254       std::string GetToType();
<a name="l00255"></a>00255     };
<a name="l00256"></a>00256 
<a name="l00262"></a><a class="code" href="classOpenBabel_1_1OBResidueData.shtml">00262</a>   <span class="keyword">class </span>OBAPI OBResidueData : <span class="keyword">public</span> OBGlobalDataBase
<a name="l00263"></a>00263     {
<a name="l00264"></a>00264       <span class="keywordtype">int</span>                                               _resnum;
<a name="l00265"></a>00265       std::vector&lt;std::string&gt;                          _resname;
<a name="l00266"></a>00266       std::vector&lt;std::vector&lt;std::string&gt; &gt;            _resatoms;
<a name="l00267"></a>00267       std::vector&lt;std::vector&lt;std::pair&lt;std::string,int&gt; &gt; &gt; _resbonds;
<a name="l00268"></a>00268 
<a name="l00269"></a>00269       <span class="comment">//variables used only temporarily for parsing resdata.txt</span>
<a name="l00270"></a>00270       std::vector&lt;std::string&gt;                          _vatmtmp;
<a name="l00271"></a>00271       std::vector&lt;std::pair&lt;std::string,int&gt; &gt;          _vtmp;
<a name="l00272"></a>00272     <span class="keyword">public</span>:
<a name="l00273"></a>00273 
<a name="l00274"></a>00274       OBResidueData();
<a name="l00275"></a>00275       <span class="keywordtype">void</span> ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00276"></a>00276 
<a name="l00278"></a><a class="code" href="classOpenBabel_1_1OBResidueData.shtml#93721b9b970ca9a8160f7b831ae7e9d4">00278</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize() { <span class="keywordflow">return</span> _resname.size(); }
<a name="l00279"></a>00279 
<a name="l00283"></a>00283       <span class="keywordtype">bool</span> SetResName(<span class="keyword">const</span> std::string &amp;);
<a name="l00286"></a>00286       <span class="keywordtype">int</span>  LookupBO(<span class="keyword">const</span> std::string &amp;);
<a name="l00289"></a>00289       <span class="keywordtype">int</span>  LookupBO(<span class="keyword">const</span> std::string &amp;, <span class="keyword">const</span> std::string&amp;);
<a name="l00293"></a>00293       <span class="keywordtype">bool</span> LookupType(<span class="keyword">const</span> std::string &amp;,std::string&amp;,<span class="keywordtype">int</span>&amp;);
<a name="l00297"></a>00297       <span class="keywordtype">bool</span> AssignBonds(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;,<a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="Fast and efficient bitstring class.">OBBitVec</a> &amp;);
<a name="l00298"></a>00298     };
<a name="l00299"></a>00299 
<a name="l00301"></a>00301   <span class="comment">// full documentation in data.cpp</span>
<a name="l00302"></a>00302   OBAPI std::string <a class="code" href="namespaceOpenBabel.shtml#dd34ce6b9be332e5d87fd5087d4dc38d" title="Opens a datafile in a directory where OpenBabel expects to find it.">OpenDatafile</a>(std::ifstream&amp; fs, 
<a name="l00303"></a>00303                                  <span class="keyword">const</span> std::string&amp; filename,
<a name="l00304"></a>00304                                  <span class="keyword">const</span> std::string&amp; envvar = <span class="stringliteral">"BABEL_DATADIR"</span>);
<a name="l00305"></a>00305 
<a name="l00306"></a>00306   <span class="comment">// Used by other code for reading files</span>
<a name="l00307"></a>00307 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00308"></a>00308 <span class="preprocessor"></span><span class="preprocessor">#define FILE_SEP_CHAR "\\"</span>
<a name="l00309"></a>00309 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00310"></a><a class="code" href="data_8h.shtml#7fc937c3aac7b76870d56fdc867f065a">00310</a> <span class="preprocessor"></span><span class="preprocessor">#define FILE_SEP_CHAR "/"</span>
<a name="l00311"></a>00311 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00312"></a>00312 <span class="preprocessor"></span>
<a name="l00313"></a>00313 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00314"></a>00314 
<a name="l00315"></a>00315 <span class="preprocessor">#endif //DATA_H</span>
<a name="l00316"></a>00316 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:04 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
