<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: base.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>base.h</h1><a href="base_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">base.h - Base classes to build a graph</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_BASE_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_BASE_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="comment">// Needed for the OBGenericData handling in this class</span>
<a name="l00031"></a>00031 <span class="comment">// (can't just forward declare it.)</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;<a class="code" href="generic_8h.shtml" title="Handle generic data classes. Custom data for atoms, bonds, etc.">openbabel/generic.h</a>&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>OpenBabel
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036 
<a name="l00038"></a><a class="code" href="namespaceOpenBabel.shtml#d6fa5ee882f2b39a9101861b97267fec">00038</a>   <span class="keyword">typedef</span> std::vector&lt;OBGenericData*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#d6fa5ee882f2b39a9101861b97267fec" title="A standard iterator over vectors of OBGenericData (e.g., inherited from OBBase).">OBDataIterator</a>;
<a name="l00039"></a>00039   
<a name="l00041"></a>00041   <span class="comment">// introduction in base.cpp</span>
<a name="l00042"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml">00042</a>   <span class="keyword">class </span>OBAPI OBBase
<a name="l00043"></a>00043     {
<a name="l00044"></a>00044     <span class="keyword">public</span>:
<a name="l00045"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#7a58af02c4e2dd0d9b174b3032f1ffa3">00045</a>       <span class="keyword">virtual</span> ~OBBase()
<a name="l00046"></a>00046         {
<a name="l00047"></a>00047           <span class="keywordflow">if</span> (!_vdata.empty())
<a name="l00048"></a>00048             {
<a name="l00049"></a>00049               std::vector&lt;OBGenericData*&gt;::iterator m;
<a name="l00050"></a>00050               <span class="keywordflow">for</span> (m = _vdata.begin();m != _vdata.end();m++)
<a name="l00051"></a>00051                 <span class="keyword">delete</span> *m;
<a name="l00052"></a>00052               _vdata.clear();
<a name="l00053"></a>00053             }
<a name="l00054"></a>00054         }
<a name="l00055"></a>00055 
<a name="l00057"></a>00057       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Clear();
<a name="l00058"></a>00058 
<a name="l00063"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#c124224e62a72e842a6b61b1e5e3190d">00063</a>       <span class="keyword">virtual</span> OBBase* DoTransformations(<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* <span class="comment">/*pOptions*/</span>)
<a name="l00064"></a>00064         {
<a name="l00065"></a>00065           <span class="keywordflow">return</span> <span class="keyword">this</span>;
<a name="l00066"></a>00066         } 
<a name="l00067"></a>00067 
<a name="l00068"></a>00068       <span class="comment">//Base type does nothing</span>
<a name="l00070"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#6bb6ed5c064e3957d8dd03aba51e61f7">00070</a> <span class="comment"></span>      <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ClassDescription()
<a name="l00071"></a>00071         {
<a name="l00072"></a>00072           <span class="keywordflow">return</span> <span class="stringliteral">""</span>;
<a name="l00073"></a>00073         } 
<a name="l00074"></a>00074 
<a name="l00076"></a>00076       <span class="keyword">template</span>&lt; <span class="keyword">class</span> T &gt;
<a name="l00077"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#305f9b75226a0e4d51c769e3a7dd6f13">00077</a>       <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#385c44f6fb256e5716a2302a5b94038821f40778b7db9343a6ca75ec2c41ccce">T</a>* CastAndClear(<span class="keywordtype">bool</span> clear=<span class="keyword">true</span>)
<a name="l00078"></a>00078         {
<a name="l00079"></a>00079           <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#385c44f6fb256e5716a2302a5b94038821f40778b7db9343a6ca75ec2c41ccce">T</a>* pOb = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#385c44f6fb256e5716a2302a5b94038821f40778b7db9343a6ca75ec2c41ccce">T</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);
<a name="l00080"></a>00080           <span class="keywordflow">if</span>(pOb &amp;&amp; clear)<span class="comment">// Clear only if this is of target class</span>
<a name="l00081"></a>00081             Clear();
<a name="l00082"></a>00082           <span class="keywordflow">return</span> pOb;
<a name="l00083"></a>00083         };
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 
<a name="l00089"></a>00089       <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> std::string &amp;);
<a name="l00091"></a>00091       <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00093"></a>00093       <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00095"></a>00095       <span class="keywordtype">void</span>                              DeleteData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00097"></a>00097       <span class="keywordtype">void</span>                              DeleteData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>*);
<a name="l00099"></a>00099       <span class="keywordtype">void</span>                              DeleteData(std::vector&lt;OBGenericData*&gt;&amp;);
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#db6b0ec89bfea783825b3b466e4dbc00">00101</a>       <span class="keywordtype">void</span>                              <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> *d)
<a name="l00102"></a>00102         {
<a name="l00103"></a>00103           <span class="keywordflow">if</span>(d) _vdata.push_back(d);
<a name="l00104"></a>00104         }
<a name="l00106"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#51a30d2024bf4e9474564ca0a5203105">00106</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                      DataSize()<span class="keyword"> const </span>
<a name="l00107"></a>00107 <span class="keyword">        </span>{ <span class="keywordflow">return</span>(_vdata.size()); }
<a name="l00110"></a>00110       <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>                    *GetData(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00112"></a>00112       <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>                    *GetData(<span class="keyword">const</span> std::string&amp;);
<a name="l00114"></a>00114       <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>                    *GetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#90a551ff0a0ed3fa58745dff0ecacdaa">00116</a>       std::vector&lt;OBGenericData*&gt;      &amp;GetData() { <span class="keywordflow">return</span>(_vdata); }
<a name="l00118"></a>00118       std::vector&lt;OBGenericData*&gt;      GetData(<a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source);
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#15b47c65393d46fde62d1f0a19bcf9fa">00120</a>       <a class="code" href="namespaceOpenBabel.shtml#d6fa5ee882f2b39a9101861b97267fec" title="A standard iterator over vectors of OBGenericData (e.g., inherited from OBBase).">OBDataIterator</a>  BeginData()
<a name="l00121"></a>00121         { <span class="keywordflow">return</span>(_vdata.begin());        }
<a name="l00123"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#117c836710dd3aaa8748509262a5c280">00123</a>       <a class="code" href="namespaceOpenBabel.shtml#d6fa5ee882f2b39a9101861b97267fec" title="A standard iterator over vectors of OBGenericData (e.g., inherited from OBBase).">OBDataIterator</a>  EndData()
<a name="l00124"></a>00124         { <span class="keywordflow">return</span>(_vdata.end());          }
<a name="l00126"></a>00126     <span class="keyword">protected</span>:
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#f7811cf8aadbf3b3477c560b0ef2f797">00127</a>       std::vector&lt;OBGenericData*&gt; _vdata; 
<a name="l00128"></a>00128 
<a name="l00129"></a>00129     };
<a name="l00130"></a>00130 
<a name="l00131"></a>00131 } <span class="comment">//namespace OpenBabel</span>
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 <span class="preprocessor">#endif // OB_BASE_H</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:04 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
