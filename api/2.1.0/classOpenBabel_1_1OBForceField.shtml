<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBForceField Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul>
</div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a></div>
<h1>OBForceField Class Reference</h1><!-- doxytag: class="OpenBabel::OBForceField" -->Base class for molecular mechanics force fields.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="forcefield_8h-source.shtml">openbabel/forcefield.h</a>&gt;</code>
<p>
<a href="classOpenBabel_1_1OBForceField-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#b49558e469015d76e7c27ee0cfdf4a75">~OBForceField</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#1107abae4af40cd96faa7385b4de79c2">GetUnit</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#39a480e503a44c78cd7f8963dcfd447f">Setup</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#b9bff2ca9aad359da6491fa4c3f46577">UpdateCoordinates</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#5c29065ad6e1322ade9087657bc576ec">UpdateConformers</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#06249fabc93686f6fa389173bcd2e300">OBFFLog</a> (std::string msg)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#232f01774986e74179b56eb961728a54">OBFFLog</a> (const char *msg)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#d9161e81d8d93b760bd95a5b00079459">kludge</a> ()</td></tr>

<tr><td colspan="2"><div class="groupHeader">Methods for energy evaluation</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#d9242de2f838fb94efcd85f7182a6f83">Energy</a> (bool gradients=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#da5914c7c0927cc9157d404ac175bcce">E_Bond</a> (bool gradients=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#b071cd3395d95bfa4c90cbdc3426c95a">E_Angle</a> (bool gradients=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#180eb032b11995b3140d54b1fd1ec991">E_StrBnd</a> (bool gradients=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#bcf664aaa0bbb807a4f6e3d441d3147a">E_Torsion</a> (bool gradients=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#83d00f6965c92799d4d4a6e488a737e3">E_OOP</a> (bool gradients=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#9a27f6899e6a57b234cfe79022ca0d1c">E_VDW</a> (bool gradients=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#7ed5b3a5502abbe3a9931165475905e0">E_Electrostatic</a> (bool gradients=true)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Methods for logging</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#dca43238dd8a76b1f66737b74c1933ee">SetLogFile</a> (std::ostream *pos)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad67effdb484585dffa645891d6d8ded">SetLogLevel</a> (int level)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#a9927fd2efb61460c8e879f83c0d387e">GetLogLevel</a> ()</td></tr>

<tr><td colspan="2"><div class="groupHeader">Methods for structure generation</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#4d90f7c74f9cf591a88aa3ee82505c81">SystematicRotorSearch</a> ()</td></tr>

<tr><td colspan="2"><div class="groupHeader">Methods for energy minimization</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#5f08066361ace92acfa362df93fafd76">LineSearch</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;direction)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#209c761c2f70a11d574a605c6f83921f">SteepestDescent</a> (int steps, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#6ba7f48a161b7c25d9a8ad661c3c572b">SteepestDescentInitialize</a> (int steps=1000, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#b2cea937bb0224112a6f79758a099932">SteepestDescentTakeNSteps</a> (int n)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#2f2732698efde5c2f155bfac08fd9ded">ConjugateGradients</a> (int steps, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#7e253a1997cddeb4fd5eaa79e6e42610">ConjugateGradientsInitialize</a> (int steps=1000, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ef9f033a26aaedb027c2a99de04a9646">ConjugateGradientsTakeNSteps</a> (int n)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Methods for forcefield validation</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#591a6c018926edaa3f398ca7134e26c9">Validate</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#5bd73ca104b0fd34659d77a7f9d3a0a4">ValidateGradients</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#e517465b4ca745841c28cf22db304a7f">ValidateGradientError</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;numgrad, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;anagrad)</td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#4d625c122a1c2ed931851331b0243950">FindForceField</a> (const std::string &amp;ID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#8af11ddb5650f7733164c81da3aacbd8">FindForceField</a> (const char *ID)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Methods for vector analysis (used by OBFFXXXXCalculationYYYY)</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#b451a524c7a4f04bb987b3fac9288eed">VectorLengthDerivative</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#fe981b8f96a737d0228fbf62c4c94417">VectorAngleDerivative</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#4d4709cf0de47e7c6f44da4e21f20c9f">VectorTorsionDerivative</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d)</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#d8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter</a> (int a, int b, int c, int d, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> &gt; &amp;parameter)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#6d072805c7042da11d4ae8c8319a22f2">GetParameter</a> (const char *a, const char *b, const char *c, const char *d, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> &gt; &amp;parameter)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#2a6bafaddf41c8eb9d0bda246bb07c85">NumericalDerivative</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, int terms=OBFF_ENERGY)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#499789742e7b2021f26f8d1cfe04045f">NumericalSecondDerivative</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, int terms=OBFF_ENERGY)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#8c159a7d04c647e6dd408497451fb2de">GetGradient</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, int terms=OBFF_ENERGY)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#cafd9be7a3a74bed05e552a20aa0fccf">IsInSameRing</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b)</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#5ae66d31df78d115efc8282c8c695c1a">_mol</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::ostream *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#64eff46d46ca1a94d882efa15d589b78">logos</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">char&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab11caf1e98e9bb1bd821cdc33c14dd1">logbuf</a> [200]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#fa55d008e5d35bd707cfe2a7be2c36c8">loglvl</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#6c28d52de53fb1ee6e4b6ce5f4c04695">current_conformer</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#47292a5e3cad98d5a169bd2c54103d66">_econv</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#d33cee0e99c32beb8f2b8b05248a085f">_e_n1</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#9e2f9cbfe3a6d8ca5380f6996136d436">_method</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#c7f362c839a5c13c37dcbd43b426516b">_cstep</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#fe138e40e061c04494421e5513829b37">_nsteps</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#1c25210164842f41968d67225f873283">_grad1</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml#e6c447bb8439e17734510ee4b74cc496">_dir1</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Base class for molecular mechanics force fields. 
<p>
The <a class="el" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a> class is the base class for molecular mechanics in Open Babel. Classes derived from the <a class="el" href="classOpenBabel_1_1OBForceField.shtml" title="Base class for molecular mechanics force fields.">OBForceField</a> implement specific force fields (Ghemical, MMFF94, ...). Other classes such as <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a>, <a class="el" href="classOpenBabel_1_1OBFFCalculation.shtml" title="Internal class for OBForceField to hold energy and gradient calculations on specific...">OBFFCalculation</a> and its derived classes are only for internal use. As a user interested in using the available force fields in Open Babel, you don't need these classes. The rest of this short introduction is aimed at these users. For information on how to implement additional force fields, see the wiki pages or post your questions to the openbabel-devel mailing list.<p>
Before we can start using a force field, we must first select it and set it up. This is illustrated in the first example below. The Setup procedure assigns atom types, charges and parameters. There are several reasons why this may fail, a log message will be written to the logfile before <a class="el" href="classOpenBabel_1_1OBForceField.shtml#39a480e503a44c78cd7f8963dcfd447f">Setup()</a> returns false.<p>
The force field classes use their own logging functions. You can set the logfile using <a class="el" href="classOpenBabel_1_1OBForceField.shtml#dca43238dd8a76b1f66737b74c1933ee">SetLogFile()</a> and set the log level using <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad67effdb484585dffa645891d6d8ded">SetLogLevel()</a>. If needed you can also write to the logfile using <a class="el" href="classOpenBabel_1_1OBForceField.shtml#06249fabc93686f6fa389173bcd2e300">OBFFLog()</a>. There are four log levels: BFF_LOGLVL_NONE, OBFF_LOGLVL_LOW, OBFF_LOGLVL_MEDIUM, OBFF_LOGLVL_HIGH. See the API documentation to know what kind of output each function writes to the logfile for the different log levels.<p>
Below are two examples which explain the basics.<p>
This piece of code can always be used to find available forcefields: <div class="fragment"><pre class="fragment">      <a class="code" href="pluginiter_8h.shtml#e6da8d8a99e4b8364e0e951f01a87db0">FOR_EACH</a>(OBForceField, iter) {
      cout &lt;&lt; <span class="stringliteral">"forcefield ID: "</span> &lt;&lt; iter.ID() &lt;&lt; endl;
      }
</pre></div><p>
Calculate the energy for the structure in mol using the Ghemical forcefield. <div class="fragment"><pre class="fragment"><span class="preprocessor">      #include &lt;<a class="code" href="forcefield_8h.shtml" title="Handle forcefields.">openbabel/forcefield.h</a>&gt;</span>
<span class="preprocessor">      #include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">openbabel/mol.h</a>&gt;</span>

      <span class="comment">// See OBConversion class to fill the mol object.</span>
      OBMol mol;
      <span class="comment">// Select the forcefield, this returns a pointer that we </span>
      <span class="comment">// will later use to access the forcefield functions.</span>
      OBForceField* pFF = <a class="code" href="classOpenBabel_1_1OBForceField.shtml#4d625c122a1c2ed931851331b0243950" title="short description of the force field type.">OBForceField::FindForceField</a>(<span class="stringliteral">"Ghemical"</span>);

      <span class="comment">// Make sure we have a valid pointer</span>
      <span class="keywordflow">if</span> (!pFF)
      <span class="comment">// exit...</span>
     
      <span class="comment">// Set the logfile (can also be &amp;cout or &amp;cerr)</span>
      pFF-&gt;SetLogFile(&amp;cerr);
      <span class="comment">// Set the log level. See indivual functions to know</span>
      <span class="comment">// what kind of output each function produces for the</span>
      <span class="comment">// different log levels.</span>
      pFF-&gt;SetLogLevel(<a class="code" href="forcefield_8h.shtml#09f7b02a472bb953e5b2e0641ba45e3e" title="individual calculations and parameters">OBFF_LOGLVL_HIGH</a>);

      <span class="comment">// We need to setup the forcefield before we can use it. Setup()</span>
      <span class="comment">// returns false if it failes to find the atom types, parameters, ...</span>
      <span class="keywordflow">if</span> (!pFF-&gt;Setup(mol)) {
      cerr &lt;&lt; <span class="stringliteral">"ERROR: could not setup force field."</span> &lt;&lt; endl;
      }
      
      <span class="comment">// Calculate the energy. The output will be written to the</span>
      <span class="comment">// logfile specified by SetLogFile()</span>
      pFF-&gt;Energy();
</pre></div><p>
Minimize the structure in mol using conjugate gradients. <div class="fragment"><pre class="fragment"><span class="preprocessor">      #include &lt;<a class="code" href="forcefield_8h.shtml" title="Handle forcefields.">openbabel/forcefield.h</a>&gt;</span>
<span class="preprocessor">      #include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">openbabel/mol.h</a>&gt;</span>

      OBMol mol;
      OBForceField* pFF = <a class="code" href="classOpenBabel_1_1OBForceField.shtml#4d625c122a1c2ed931851331b0243950" title="short description of the force field type.">OBForceField::FindForceField</a>(<span class="stringliteral">"Ghemical"</span>);

      <span class="comment">// Make sure we have a valid pointer</span>
      <span class="keywordflow">if</span> (!pFF)
      <span class="comment">// exit...</span>
      
      pFF-&gt;SetLogFile(&amp;cerr);
      pFF-&gt;SetLogLevel(<a class="code" href="forcefield_8h.shtml#af7ca13d2b94e79693c47c10ea3c1def" title="SteepestDescent progress... (no output from Energy()).">OBFF_LOGLVL_LOW</a>);
      <span class="keywordflow">if</span> (!pFF-&gt;Setup(mol)) {
      cerr &lt;&lt; <span class="stringliteral">"ERROR: could not setup force field."</span> &lt;&lt; endl;
      }
      
      <span class="comment">// Perform the actual minimization, maximum 1000 steps </span>
      pFF-&gt;ConjugateGradients(1000);
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="b49558e469015d76e7c27ee0cfdf4a75"></a><!-- doxytag: member="OpenBabel::OBForceField::~OBForceField" ref="b49558e469015d76e7c27ee0cfdf4a75" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="d8a19dcfdef3d4cb8a3eea17d3c1f918"></a><!-- doxytag: member="OpenBabel::OBForceField::GetParameter" ref="d8a19dcfdef3d4cb8a3eea17d3c1f918" args="(int a, int b, int c, int d, std::vector&lt; OBFFParameter &gt; &amp;parameter)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> * GetParameter           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>parameter</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the correct <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> from a <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> vector.<p>
<div class="fragment"><pre class="fragment"> vector&lt;OBFFParameter&gt; parameters; 
</pre></div><p>
this vector is filled with entries (as <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a>) from a parameter file. This happens in the <a class="el" href="classOpenBabel_1_1OBForceField.shtml#39a480e503a44c78cd7f8963dcfd447f">Setup()</a> function.<p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#d8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter</a>(a, 0, 0, 0, parameters); 
</pre></div><p>
returns the first <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> from vector&lt;OBFFParameter&gt; parameters where: pa = a (pa = parameter.a)<p>
use: vdw parameters, ...<p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#d8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter</a>(a, b, 0, 0, parameters); 
</pre></div><p>
returns the first <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> from vector&lt;OBFFParameter&gt; parameters where: pa = a &amp; pb = b (ab) or: pa = b &amp; pb = a (ba)<p>
use: bond parameters, vdw parameters (pairs), ...<p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#d8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter</a>(a, b, c, 0, parameters); 
</pre></div><p>
returns the first <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> from vector&lt;OBFFParameter&gt; parameters where: pa = a &amp; pb = b &amp; pc = c (abc) or: pa = c &amp; pb = b &amp; pc = a (cba)<p>
use: angle parameters, ...<p>
<div class="fragment"><pre class="fragment"> <a class="code" href="classOpenBabel_1_1OBForceField.shtml#d8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter</a>(a, b, c, d, parameters); 
</pre></div><p>
returns the first <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> from vector&lt;OBFFParameter&gt; parameters where: pa = a &amp; pb = b &amp; pc = c &amp; pd = d (abcd) or: pa = d &amp; pb = b &amp; pc = c &amp; pd = a (dbca) or: pa = a &amp; pb = c &amp; pc = b &amp; pd = d (acbd) or: pa = d &amp; pb = c &amp; pc = b &amp; pd = a (dcba)<p>
use: torsion parameters, ... 
</div>
</div><p>
<a class="anchor" name="6d072805c7042da11d4ae8c8319a22f2"></a><!-- doxytag: member="OpenBabel::OBForceField::GetParameter" ref="6d072805c7042da11d4ae8c8319a22f2" args="(const char *a, const char *b, const char *c, const char *d, std::vector&lt; OBFFParameter &gt; &amp;parameter)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> * GetParameter           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a> &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>parameter</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#d8a19dcfdef3d4cb8a3eea17d3c1f918">GetParameter(int a, int b, int c, int d, std::vector&lt;OBFFParameter&gt; &amp;parameter)</a> 
<p>

</div>
</div><p>
<a class="anchor" name="2a6bafaddf41c8eb9d0bda246bb07c85"></a><!-- doxytag: member="OpenBabel::OBForceField::NumericalDerivative" ref="2a6bafaddf41c8eb9d0bda246bb07c85" args="(OBAtom *a, int terms=OBFF_ENERGY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> NumericalDerivative           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>terms</em> = <code>OBFF_ENERGY</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate the potential energy function derivative numerically with repect to the coordinates of atom with index a (this vector is the gradient). 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>provides coordinates </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>terms</em>&nbsp;</td><td>OBFF_ENERGY, OBFF_EBOND, OBFF_EANGLE, OBFF_ESTRBND, OBFF_ETORSION, OBFF_EOOP, OBFF_EVDW, OBFF_ELECTROSTATIC </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the negative gradient of atom a </dd></dl>

</div>
</div><p>
<a class="anchor" name="499789742e7b2021f26f8d1cfe04045f"></a><!-- doxytag: member="OpenBabel::OBForceField::NumericalSecondDerivative" ref="499789742e7b2021f26f8d1cfe04045f" args="(OBAtom *a, int terms=OBFF_ENERGY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> NumericalSecondDerivative           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>terms</em> = <code>OBFF_ENERGY</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
OB 3.0. 
<p>

</div>
</div><p>
<a class="anchor" name="8c159a7d04c647e6dd408497451fb2de"></a><!-- doxytag: member="OpenBabel::OBForceField::GetGradient" ref="8c159a7d04c647e6dd408497451fb2de" args="(OBAtom *a, int terms=OBFF_ENERGY)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> GetGradient           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>terms</em> = <code>OBFF_ENERGY</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, protected, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate the potential energy function derivative analyticaly with repect to the coordinates of atom with index a (this vector is the gradient)<p>
If the currently selected forcefield doesn't have analytical gradients, we can still call this function which will return the result of <a class="el" href="classOpenBabel_1_1OBForceField.shtml#2a6bafaddf41c8eb9d0bda246bb07c85" title="Calculate the potential energy function derivative numerically with repect to the...">NumericalDerivative()</a> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>provides coordinates </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>terms</em>&nbsp;</td><td>OBFF_ENERGY, OBFF_EBOND, OBFF_EANGLE, OBFF_ESTRBND, OBFF_ETORSION, OBFF_EOOP, OBFF_EVDW, OBFF_ELECTROSTATIC </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the negative gradient of atom a </dd></dl>

</div>
</div><p>
<a class="anchor" name="cafd9be7a3a74bed05e552a20aa0fccf"></a><!-- doxytag: member="OpenBabel::OBForceField::IsInSameRing" ref="cafd9be7a3a74bed05e552a20aa0fccf" args="(OBAtom *a, OBAtom *b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInSameRing           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Check if two atoms are in the same ring <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>atom a </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>atom b </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if atom a and b are in the same ring </dd></dl>

</div>
</div><p>
<a class="anchor" name="4d625c122a1c2ed931851331b0243950"></a><!-- doxytag: member="OpenBabel::OBForceField::FindForceField" ref="4d625c122a1c2ed931851331b0243950" args="(const std::string &amp;ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a>* FindForceField           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>ID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
short description of the force field type. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ID</em>&nbsp;</td><td>forcefield id (Ghemical, ...) </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to a forcefield (the default if ID is empty), or NULL if not available </dd></dl>

</div>
</div><p>
<a class="anchor" name="8af11ddb5650f7733164c81da3aacbd8"></a><!-- doxytag: member="OpenBabel::OBForceField::FindForceField" ref="8af11ddb5650f7733164c81da3aacbd8" args="(const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a>* FindForceField           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ID</em>&nbsp;</td><td>forcefield id (Ghemical, ...) </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A pointer to a forcefield (the default if ID is empty), or NULL if not available </dd></dl>

</div>
</div><p>
<a class="anchor" name="1107abae4af40cd96faa7385b4de79c2"></a><!-- doxytag: member="OpenBabel::OBForceField::GetUnit" ref="1107abae4af40cd96faa7385b4de79c2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string GetUnit           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The unit (kcal/mol, kJ/mol, ...) in which the energy is expressed as std::string </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="39a480e503a44c78cd7f8963dcfd447f"></a><!-- doxytag: member="OpenBabel::OBForceField::Setup" ref="39a480e503a44c78cd7f8963dcfd447f" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Setup           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Setup the forcefield for mol (assigns atom types, charges, etc.) <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>mol</em>&nbsp;</td><td>the <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object that contains the atoms and bonds </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if succesfull </dd></dl>

</div>
</div><p>
<a class="anchor" name="b9bff2ca9aad359da6491fa4c3f46577"></a><!-- doxytag: member="OpenBabel::OBForceField::UpdateCoordinates" ref="b9bff2ca9aad359da6491fa4c3f46577" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool UpdateCoordinates           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Update coordinates for current conformer <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>mol</em>&nbsp;</td><td>the <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object to copy the coordinates to </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if succesfull </dd></dl>

</div>
</div><p>
<a class="anchor" name="5c29065ad6e1322ade9087657bc576ec"></a><!-- doxytag: member="OpenBabel::OBForceField::UpdateConformers" ref="5c29065ad6e1322ade9087657bc576ec" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool UpdateConformers           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Update coordinates for all conformers <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>mol</em>&nbsp;</td><td>the <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object to copy the coordinates to </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if succesfull </dd></dl>

</div>
</div><p>
<a class="anchor" name="06249fabc93686f6fa389173bcd2e300"></a><!-- doxytag: member="OpenBabel::OBForceField::OBFFLog" ref="06249fabc93686f6fa389173bcd2e300" args="(std::string msg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OBFFLog           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>msg</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Print msg to the logfile <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>msg</em>&nbsp;</td><td>the message </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="232f01774986e74179b56eb961728a54"></a><!-- doxytag: member="OpenBabel::OBForceField::OBFFLog" ref="232f01774986e74179b56eb961728a54" args="(const char *msg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OBFFLog           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>msg</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Print msg to the logfile <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>msg</em>&nbsp;</td><td>the message </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="d9242de2f838fb94efcd85f7182a6f83"></a><!-- doxytag: member="OpenBabel::OBForceField::Energy" ref="d9242de2f838fb94efcd85f7182a6f83" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double Energy           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>gradients</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>gradients</em>&nbsp;</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#8c159a7d04c647e6dd408497451fb2de">GetGradient()</a>) </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Total energy </dd></dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>OBFF_LOGLVL_NONE: none <br>
 OBFF_LOGLVL_LOW: none <br>
 OBFF_LOGLVL_MEDIUM: energy for indivudual energy terms <br>
 OBFF_LOGLVL_HIGH: energy for individual energy interactions <br>
 </dd></dl>

</div>
</div><p>
<a class="anchor" name="da5914c7c0927cc9157d404ac175bcce"></a><!-- doxytag: member="OpenBabel::OBForceField::E_Bond" ref="da5914c7c0927cc9157d404ac175bcce" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_Bond           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>gradients</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>gradients</em>&nbsp;</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#8c159a7d04c647e6dd408497451fb2de">GetGradient()</a>) </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Bond stretching energy </dd></dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#d9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="b071cd3395d95bfa4c90cbdc3426c95a"></a><!-- doxytag: member="OpenBabel::OBForceField::E_Angle" ref="b071cd3395d95bfa4c90cbdc3426c95a" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_Angle           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>gradients</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>gradients</em>&nbsp;</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#8c159a7d04c647e6dd408497451fb2de">GetGradient()</a>) </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Angle bending energy </dd></dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#d9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="180eb032b11995b3140d54b1fd1ec991"></a><!-- doxytag: member="OpenBabel::OBForceField::E_StrBnd" ref="180eb032b11995b3140d54b1fd1ec991" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_StrBnd           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>gradients</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>gradients</em>&nbsp;</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#8c159a7d04c647e6dd408497451fb2de">GetGradient()</a>) </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Stretch bending energy </dd></dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#d9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="bcf664aaa0bbb807a4f6e3d441d3147a"></a><!-- doxytag: member="OpenBabel::OBForceField::E_Torsion" ref="bcf664aaa0bbb807a4f6e3d441d3147a" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_Torsion           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>gradients</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>gradients</em>&nbsp;</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#8c159a7d04c647e6dd408497451fb2de">GetGradient()</a>) </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Torsional energy </dd></dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#d9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="83d00f6965c92799d4d4a6e488a737e3"></a><!-- doxytag: member="OpenBabel::OBForceField::E_OOP" ref="83d00f6965c92799d4d4a6e488a737e3" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_OOP           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>gradients</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>gradients</em>&nbsp;</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#8c159a7d04c647e6dd408497451fb2de">GetGradient()</a>) </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Out-Of-Plane bending energy </dd></dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#d9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="9a27f6899e6a57b234cfe79022ca0d1c"></a><!-- doxytag: member="OpenBabel::OBForceField::E_VDW" ref="9a27f6899e6a57b234cfe79022ca0d1c" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_VDW           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>gradients</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>gradients</em>&nbsp;</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#8c159a7d04c647e6dd408497451fb2de">GetGradient()</a>) </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Van der Waals energy </dd></dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#d9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="7ed5b3a5502abbe3a9931165475905e0"></a><!-- doxytag: member="OpenBabel::OBForceField::E_Electrostatic" ref="7ed5b3a5502abbe3a9931165475905e0" args="(bool gradients=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double E_Electrostatic           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>gradients</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>gradients</em>&nbsp;</td><td>Set to true when the gradients need to be calculated (needs to be done before calling <a class="el" href="classOpenBabel_1_1OBForceField.shtml#8c159a7d04c647e6dd408497451fb2de">GetGradient()</a>) </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Electrostatic energy </dd></dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>see <a class="el" href="classOpenBabel_1_1OBForceField.shtml#d9242de2f838fb94efcd85f7182a6f83">Energy()</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="dca43238dd8a76b1f66737b74c1933ee"></a><!-- doxytag: member="OpenBabel::OBForceField::SetLogFile" ref="dca43238dd8a76b1f66737b74c1933ee" args="(std::ostream *pos)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetLogFile           </td>
          <td>(</td>
          <td class="paramtype">std::ostream *&nbsp;</td>
          <td class="paramname"> <em>pos</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the stream for logging (can also be &amp;cout for logging to screen) <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>pos</em>&nbsp;</td><td>stream </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if succesfull </dd></dl>

</div>
</div><p>
<a class="anchor" name="ad67effdb484585dffa645891d6d8ded"></a><!-- doxytag: member="OpenBabel::OBForceField::SetLogLevel" ref="ad67effdb484585dffa645891d6d8ded" args="(int level)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetLogLevel           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>level</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the log level (OBFF_LOGLVL_NONE, OBFF_LOGLVL_LOW, OBFF_LOGLVL_MEDIUM, OBFF_LOGLVL_HIGH)<p>
Inline if statements for logging are available:<p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">      #define IF_OBFF_LOGLVL_LOW    if(loglvl &gt;= OBFF_LOGLVL_LOW)</span>
<span class="preprocessor"></span><span class="preprocessor">      #define IF_OBFF_LOGLVL_MEDIUM if(loglvl &gt;= OBFF_LOGLVL_MEDIUM)</span>
<span class="preprocessor">      #define IF_OBFF_LOGLVL_HIGH   if(loglvl &gt;= OBFF_LOGLVL_HIGH)</span>
</pre></div><p>
example: <div class="fragment"><pre class="fragment">      <a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad67effdb484585dffa645891d6d8ded">SetLogLevel</a>(<a class="code" href="forcefield_8h.shtml#efda3ec45e427a38ac62a99a50cf93af" title="individual energy terms">OBFF_LOGLVL_MEDIUM</a>);
  
      <a class="code" href="forcefield_8h.shtml#f9a87deee4328f76736a05bf6e6709ea">IF_OBFF_LOGLVL_HIGH</a> {
      *<a class="code" href="classOpenBabel_1_1OBForceField.shtml#64eff46d46ca1a94d882efa15d589b78" title="Output for logfile.">logos</a> &lt;&lt; <span class="stringliteral">"this text will NOT be logged..."</span> &lt;&lt; endl
      }
   
      <a class="code" href="forcefield_8h.shtml#62a639c8c4176b63a2697aff40f4338a">IF_OBFF_LOGLVL_LOW</a> {
      *<a class="code" href="classOpenBabel_1_1OBForceField.shtml#64eff46d46ca1a94d882efa15d589b78" title="Output for logfile.">logos</a> &lt;&lt; <span class="stringliteral">"this text will be logged..."</span> &lt;&lt; endl
      }
  
      <a class="code" href="forcefield_8h.shtml#6f31cf89cddb30bac3d187474f8defed">IF_OBFF_LOGLVL_MEDIUM</a> {
      *<a class="code" href="classOpenBabel_1_1OBForceField.shtml#64eff46d46ca1a94d882efa15d589b78" title="Output for logfile.">logos</a> &lt;&lt; <span class="stringliteral">"this text will also be logged..."</span> &lt;&lt; endl
      }
</pre></div> 
</div>
</div><p>
<a class="anchor" name="a9927fd2efb61460c8e879f83c0d387e"></a><!-- doxytag: member="OpenBabel::OBForceField::GetLogLevel" ref="a9927fd2efb61460c8e879f83c0d387e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetLogLevel           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>log level </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="4d90f7c74f9cf591a88aa3ee82505c81"></a><!-- doxytag: member="OpenBabel::OBForceField::SystematicRotorSearch" ref="4d90f7c74f9cf591a88aa3ee82505c81" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SystematicRotorSearch           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Generate conformers for the molecule (systematicaly rotating torsions).<p>
The initial starting structure here is important, this structure should be minimized for the best results. SystematicRotorSearch works by rotating around the rotatable bond in a molecule (see <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml" title="Supports a set of rotamer coordinate sets for some number of potentially rotatable...">OBRotamerList</a> class). This rotating generates multiple conformers. The energy for all these conformers is then evaluated and the lowest energy conformer is selected.<p>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for this function will interfere with the output for this function. <br>
<br>
 OBFF_LOGLVL_NONE: none <br>
 OBFF_LOGLVL_LOW: number of rotatable bonds, energies for the conformers, which one is the lowest, ... <br>
 OBFF_LOGLVL_MEDIUM: see note above <br>
 OBFF_LOGLVL_HIGH: see note above <br>
 </dd></dl>

</div>
</div><p>
<a class="anchor" name="5f08066361ace92acfa362df93fafd76"></a><!-- doxytag: member="OpenBabel::OBForceField::LineSearch" ref="5f08066361ace92acfa362df93fafd76" args="(OBAtom *atom, vector3 &amp;direction)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> LineSearch           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>direction</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Perform a linesearch starting at atom in direction direction <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>atom</em>&nbsp;</td><td>start coordinates </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>direction</em>&nbsp;</td><td>the search direction</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>vector which starts at atom and stops at the minimum (the length is the ideal stepsize)</dd></dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>OBFF_LOGLVL_NONE: none <br>
 OBFF_LOGLVL_LOW: none <br>
 OBFF_LOGLVL_MEDIUM: none <br>
 OBFF_LOGLVL_HIGH: none <br>
 </dd></dl>

</div>
</div><p>
<a class="anchor" name="209c761c2f70a11d574a605c6f83921f"></a><!-- doxytag: member="OpenBabel::OBForceField::SteepestDescent" ref="209c761c2f70a11d574a605c6f83921f" args="(int steps, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SteepestDescent           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>steps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>econv</em> = <code>1e-6f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>method</em> = <code>OBFF_ANALYTICAL_GRADIENT</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Perform steepest descent optimalization for steps steps or until convergence criteria is reached. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>steps</em>&nbsp;</td><td>the number of steps </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>econv</em>&nbsp;</td><td>energy convergence criteria (defualt is 1e-6) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>method</em>&nbsp;</td><td>OBFF_ANALYTICAL_GRADIENTS (default) or OBFF_NUMERICAL_GRADIENTS</td></tr>
  </table>
</dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br>
<br>
 OBFF_LOGLVL_NONE: none <br>
 OBFF_LOGLVL_LOW: header including number of steps and first step <br>
 OBFF_LOGLVL_MEDIUM: see note above <br>
 OBFF_LOGLVL_HIGH: see note above <br>
 </dd></dl>

</div>
</div><p>
<a class="anchor" name="6ba7f48a161b7c25d9a8ad661c3c572b"></a><!-- doxytag: member="OpenBabel::OBForceField::SteepestDescentInitialize" ref="6ba7f48a161b7c25d9a8ad661c3c572b" args="(int steps=1000, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SteepestDescentInitialize           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>steps</em> = <code>1000</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>econv</em> = <code>1e-6f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>method</em> = <code>OBFF_ANALYTICAL_GRADIENT</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initialize steepest descent optimalization, to be used in combination with <a class="el" href="classOpenBabel_1_1OBForceField.shtml#b2cea937bb0224112a6f79758a099932">SteepestDescentTakeNSteps()</a>.<p>
example: <div class="fragment"><pre class="fragment">      <span class="comment">// pFF is a pointer to a OBForceField class </span>
      pFF-&gt;SteepestDescentInitialize(100, 1e-5f);
      <span class="keywordflow">while</span> (pFF-&gt;SteepestDescentTakeNSteps(5)) {
        <span class="comment">// do some updating in your program (redraw structure, ...)</span>
      }
</pre></div><p>
If you don't need any updating in your program, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#209c761c2f70a11d574a605c6f83921f">SteepestDescent()</a> is recommended.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>steps</em>&nbsp;</td><td>the number of steps </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>econv</em>&nbsp;</td><td>energy convergence criteria (defualt is 1e-6) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>method</em>&nbsp;</td><td>OBFF_ANALYTICAL_GRADIENTS (default) or OBFF_NUMERICAL_GRADIENTS</td></tr>
  </table>
</dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br>
<br>
 OBFF_LOGLVL_NONE: none <br>
 OBFF_LOGLVL_LOW: header including number of steps <br>
 OBFF_LOGLVL_MEDIUM: see note above <br>
 OBFF_LOGLVL_HIGH: see note above <br>
 </dd></dl>

</div>
</div><p>
<a class="anchor" name="b2cea937bb0224112a6f79758a099932"></a><!-- doxytag: member="OpenBabel::OBForceField::SteepestDescentTakeNSteps" ref="b2cea937bb0224112a6f79758a099932" args="(int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SteepestDescentTakeNSteps           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Take n steps in a steepestdescent optimalization that was previously initialized with <a class="el" href="classOpenBabel_1_1OBForceField.shtml#6ba7f48a161b7c25d9a8ad661c3c572b">SteepestDescentInitialize()</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>n</em>&nbsp;</td><td>the number of steps to take</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>false if convergence or the number of steps given by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#6ba7f48a161b7c25d9a8ad661c3c572b">SteepestDescentInitialize()</a> has been reached</dd></dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br>
<br>
 OBFF_LOGLVL_NONE: none <br>
 OBFF_LOGLVL_LOW: step number, energy and energy for the previous step <br>
 OBFF_LOGLVL_MEDIUM: see note above <br>
 OBFF_LOGLVL_HIGH: see note above <br>
 </dd></dl>

</div>
</div><p>
<a class="anchor" name="2f2732698efde5c2f155bfac08fd9ded"></a><!-- doxytag: member="OpenBabel::OBForceField::ConjugateGradients" ref="2f2732698efde5c2f155bfac08fd9ded" args="(int steps, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ConjugateGradients           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>steps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>econv</em> = <code>1e-6f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>method</em> = <code>OBFF_ANALYTICAL_GRADIENT</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Perform conjugate gradient optimalization for steps steps or until convergence criteria is reached. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>steps</em>&nbsp;</td><td>the number of steps </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>econv</em>&nbsp;</td><td>energy convergence criteria (defualt is 1e-6) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>method</em>&nbsp;</td><td>OBFF_ANALYTICAL_GRADIENTS (default) or OBFF_NUMERICAL_GRADIENTS</td></tr>
  </table>
</dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br>
<br>
 OBFF_LOGLVL_NONE: none <br>
 OBFF_LOGLVL_LOW: information about the progress of the minimization <br>
 OBFF_LOGLVL_MEDIUM: see note above <br>
 OBFF_LOGLVL_HIGH: see note above <br>
 </dd></dl>

</div>
</div><p>
<a class="anchor" name="7e253a1997cddeb4fd5eaa79e6e42610"></a><!-- doxytag: member="OpenBabel::OBForceField::ConjugateGradientsInitialize" ref="7e253a1997cddeb4fd5eaa79e6e42610" args="(int steps=1000, double econv=1e-6f, int method=OBFF_ANALYTICAL_GRADIENT)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ConjugateGradientsInitialize           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>steps</em> = <code>1000</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>econv</em> = <code>1e-6f</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>method</em> = <code>OBFF_ANALYTICAL_GRADIENT</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initialize conjugate gradient optimalization and take the first step, to be used in combination with <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ef9f033a26aaedb027c2a99de04a9646">ConjugateGradientsTakeNSteps()</a>.<p>
example: <div class="fragment"><pre class="fragment">      <span class="comment">// pFF is a pointer to a OBForceField class </span>
      pFF-&gt;ConjugateGradientsInitialize(100, 1e-5f);
      <span class="keywordflow">while</span> (pFF-&gt;ConjugateGradientsTakeNSteps(5)) {
        <span class="comment">// do some updating in your program (redraw structure, ...)</span>
      }
</pre></div><p>
If you don't need any updating in your program, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#2f2732698efde5c2f155bfac08fd9ded">ConjugateGradients()</a> is recommended.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>steps</em>&nbsp;</td><td>the number of steps </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>econv</em>&nbsp;</td><td>energy convergence criteria (defualt is 1e-6) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>method</em>&nbsp;</td><td>OBFF_ANALYTICAL_GRADIENTS (default) or OBFF_NUMERICAL_GRADIENTS</td></tr>
  </table>
</dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br>
<br>
 OBFF_LOGLVL_NONE: none <br>
 OBFF_LOGLVL_LOW: header including number of steps and first step <br>
 OBFF_LOGLVL_MEDIUM: see note above <br>
 OBFF_LOGLVL_HIGH: see note above <br>
 </dd></dl>

</div>
</div><p>
<a class="anchor" name="ef9f033a26aaedb027c2a99de04a9646"></a><!-- doxytag: member="OpenBabel::OBForceField::ConjugateGradientsTakeNSteps" ref="ef9f033a26aaedb027c2a99de04a9646" args="(int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ConjugateGradientsTakeNSteps           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Take n steps in a conjugate gradient optimalization that was previously initialized with <a class="el" href="classOpenBabel_1_1OBForceField.shtml#7e253a1997cddeb4fd5eaa79e6e42610">ConjugateGradientsInitialize()</a>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>n</em>&nbsp;</td><td>the number of steps to take</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>false if convergence or the number of steps given by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#7e253a1997cddeb4fd5eaa79e6e42610">ConjugateGradientsInitialize()</a> has been reached</dd></dl>
<dl class="user" compact><dt><b>Output to log:</b></dt><dd>This function should only be called with the log level set to OBFF_LOGLVL_NONE or OBFF_LOGLVL_LOW. Otherwise too much information about the energy calculations needed for the minimization will interfere with the list of energies for succesive steps. <br>
<br>
 OBFF_LOGLVL_NONE: none <br>
 OBFF_LOGLVL_LOW: step number, energy and energy for the previous step <br>
 OBFF_LOGLVL_MEDIUM: see note above <br>
 OBFF_LOGLVL_HIGH: see note above <br>
 </dd></dl>

</div>
</div><p>
<a class="anchor" name="591a6c018926edaa3f398ca7134e26c9"></a><!-- doxytag: member="OpenBabel::OBForceField::Validate" ref="591a6c018926edaa3f398ca7134e26c9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Validate           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Validate the force field implementation (debugging). 
<p>

</div>
</div><p>
<a class="anchor" name="5bd73ca104b0fd34659d77a7f9d3a0a4"></a><!-- doxytag: member="OpenBabel::OBForceField::ValidateGradients" ref="5bd73ca104b0fd34659d77a7f9d3a0a4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ValidateGradients           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Validate the analytical gradients by comparing them to numerical ones. This function has to be implemented force field specific. (debugging) 
</div>
</div><p>
<a class="anchor" name="e517465b4ca745841c28cf22db304a7f"></a><!-- doxytag: member="OpenBabel::OBForceField::ValidateGradientError" ref="e517465b4ca745841c28cf22db304a7f" args="(vector3 &amp;numgrad, vector3 &amp;anagrad)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> ValidateGradientError           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>numgrad</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>anagrad</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate the error of the analytical gradient (debugging) <dl class="return" compact><dt><b>Returns:</b></dt><dd>error = fabs(numgrad - anagrad) / anagrad * 100% </dd></dl>

</div>
</div><p>
<a class="anchor" name="b451a524c7a4f04bb987b3fac9288eed"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorLengthDerivative" ref="b451a524c7a4f04bb987b3fac9288eed" args="(vector3 &amp;a, vector3 &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorLengthDerivative           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate the derivative of a vector length. The vector is given by a - b, the length of this vector rab = sqrt(ab.x^2 + ab.y^2 + ab.z^2). <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>atom a (coordinates), will be changed to -drab/da </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>atom b (coordinates), will be changed to -drab/db </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The distance between a and b (bondlength for bond stretching, separation for vdw, electrostatic) </dd></dl>

</div>
</div><p>
<a class="anchor" name="fe981b8f96a737d0228fbf62c4c94417"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorAngleDerivative" ref="fe981b8f96a737d0228fbf62c4c94417" args="(vector3 &amp;a, vector3 &amp;b, vector3 &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorAngleDerivative           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate the derivative of a angle a-b-c. The angle is given by dot(ab,cb)/rab*rcb. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>atom a (coordinates), will be changed to -dtheta/da </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>atom b (coordinates), will be changed to -dtheta/db </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>c</em>&nbsp;</td><td>atom c (coordinates), will be changed to -dtheta/dc </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The angle between a-b-c </dd></dl>

</div>
</div><p>
<a class="anchor" name="4d4709cf0de47e7c6f44da4e21f20c9f"></a><!-- doxytag: member="OpenBabel::OBForceField::VectorTorsionDerivative" ref="4d4709cf0de47e7c6f44da4e21f20c9f" args="(vector3 &amp;a, vector3 &amp;b, vector3 &amp;c, vector3 &amp;d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double VectorTorsionDerivative           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>d</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate the derivative of a torsion angle a-b-c-d. The torsion angle is given by dot(corss(ab,bc),cross(bc,cd)/rabbc*rbccd. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>atom a (coordinates), will be changed to -dtheta/da </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>b</em>&nbsp;</td><td>atom b (coordinates), will be changed to -dtheta/db </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>c</em>&nbsp;</td><td>atom c (coordinates), will be changed to -dtheta/dc </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>d</em>&nbsp;</td><td>atom d (coordinates), will be changed to -dtheta/dd </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The tosion angle for a-b-c-d </dd></dl>

</div>
</div><p>
<a class="anchor" name="d9161e81d8d93b760bd95a5b00079459"></a><!-- doxytag: member="OpenBabel::OBForceField::kludge" ref="d9161e81d8d93b760bd95a5b00079459" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void kludge           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Do not use. This function contains rubbish merely to ensure the compiler instantiates some templated functions which are needed for the Windows Python build. TODO Find the proper way of doing this. 
</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="5ae66d31df78d115efc8282c8c695c1a"></a><!-- doxytag: member="OpenBabel::OBForceField::_mol" ref="5ae66d31df78d115efc8282c8c695c1a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> <a class="el" href="classOpenBabel_1_1OBForceField.shtml#5ae66d31df78d115efc8282c8c695c1a">_mol</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Molecule to be evaluated or minimized. 
<p>

</div>
</div><p>
<a class="anchor" name="64eff46d46ca1a94d882efa15d589b78"></a><!-- doxytag: member="OpenBabel::OBForceField::logos" ref="64eff46d46ca1a94d882efa15d589b78" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream* <a class="el" href="classOpenBabel_1_1OBForceField.shtml#64eff46d46ca1a94d882efa15d589b78">logos</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Output for logfile. 
<p>

</div>
</div><p>
<a class="anchor" name="ab11caf1e98e9bb1bd821cdc33c14dd1"></a><!-- doxytag: member="OpenBabel::OBForceField::logbuf" ref="ab11caf1e98e9bb1bd821cdc33c14dd1" args="[200]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab11caf1e98e9bb1bd821cdc33c14dd1">logbuf</a>[200]<code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fa55d008e5d35bd707cfe2a7be2c36c8"></a><!-- doxytag: member="OpenBabel::OBForceField::loglvl" ref="fa55d008e5d35bd707cfe2a7be2c36c8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#fa55d008e5d35bd707cfe2a7be2c36c8">loglvl</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Log level for output. 
<p>

</div>
</div><p>
<a class="anchor" name="6c28d52de53fb1ee6e4b6ce5f4c04695"></a><!-- doxytag: member="OpenBabel::OBForceField::current_conformer" ref="6c28d52de53fb1ee6e4b6ce5f4c04695" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#6c28d52de53fb1ee6e4b6ce5f4c04695">current_conformer</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
used to hold i for current conformer (needed by UpdateConformers) 
<p>

</div>
</div><p>
<a class="anchor" name="47292a5e3cad98d5a169bd2c54103d66"></a><!-- doxytag: member="OpenBabel::OBForceField::_econv" ref="47292a5e3cad98d5a169bd2c54103d66" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classOpenBabel_1_1OBForceField.shtml#47292a5e3cad98d5a169bd2c54103d66">_econv</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Used for conjugate gradients and steepest descent(Initialize and TakeNSteps). 
<p>

</div>
</div><p>
<a class="anchor" name="d33cee0e99c32beb8f2b8b05248a085f"></a><!-- doxytag: member="OpenBabel::OBForceField::_e_n1" ref="d33cee0e99c32beb8f2b8b05248a085f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classOpenBabel_1_1OBForceField.shtml#d33cee0e99c32beb8f2b8b05248a085f">_e_n1</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9e2f9cbfe3a6d8ca5380f6996136d436"></a><!-- doxytag: member="OpenBabel::OBForceField::_method" ref="9e2f9cbfe3a6d8ca5380f6996136d436" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#9e2f9cbfe3a6d8ca5380f6996136d436">_method</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c7f362c839a5c13c37dcbd43b426516b"></a><!-- doxytag: member="OpenBabel::OBForceField::_cstep" ref="c7f362c839a5c13c37dcbd43b426516b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#c7f362c839a5c13c37dcbd43b426516b">_cstep</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fe138e40e061c04494421e5513829b37"></a><!-- doxytag: member="OpenBabel::OBForceField::_nsteps" ref="fe138e40e061c04494421e5513829b37" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBForceField.shtml#fe138e40e061c04494421e5513829b37">_nsteps</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1c25210164842f41968d67225f873283"></a><!-- doxytag: member="OpenBabel::OBForceField::_grad1" ref="1c25210164842f41968d67225f873283" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&gt; <a class="el" href="classOpenBabel_1_1OBForceField.shtml#1c25210164842f41968d67225f873283">_grad1</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="e6c447bb8439e17734510ee4b74cc496"></a><!-- doxytag: member="OpenBabel::OBForceField::_dir1" ref="e6c447bb8439e17734510ee4b74cc496" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&gt; <a class="el" href="classOpenBabel_1_1OBForceField.shtml#e6c447bb8439e17734510ee4b74cc496">_dir1</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="forcefield_8h-source.shtml">forcefield.h</a><li><a class="el" href="forcefield_8cpp.shtml">forcefield.cpp</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:14 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
