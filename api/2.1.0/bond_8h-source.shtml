<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: bond.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>bond.h</h1><a href="bond_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">bond.h - Handle OBBond class.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span>
<a name="l00007"></a>00007 <span class="comment"> </span>
<a name="l00008"></a>00008 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00009"></a>00009 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00010"></a>00010 <span class="comment"> </span>
<a name="l00011"></a>00011 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00012"></a>00012 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00013"></a>00013 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00014"></a>00014 <span class="comment"> </span>
<a name="l00015"></a>00015 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00016"></a>00016 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00017"></a>00017 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00018"></a>00018 <span class="comment">GNU General Public License for more details.</span>
<a name="l00019"></a>00019 <span class="comment">***********************************************************************/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef OB_BOND_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define OB_BOND_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;<a class="code" href="atom_8h.shtml" title="Handle atoms.">openbabel/atom.h</a>&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">namespace </span>OpenBabel
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035 
<a name="l00036"></a><a class="code" href="namespaceOpenBabel.shtml#d30fc0fda0a0c8a6f7d22b8202af0dce">00036</a>   <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>;
<a name="l00037"></a>00037 
<a name="l00039"></a>00039   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBEdgeBase</a>;
<a name="l00040"></a>00040 
<a name="l00041"></a>00041   <span class="comment">//BOND Property Macros (flags)</span>
<a name="l00043"></a><a class="code" href="bond_8h.shtml#90183171d38e32f07e97bffb7836f9fd">00043</a> <span class="comment"></span><span class="preprocessor">#define OB_AROMATIC_BOND  (1&lt;&lt;1)</span>
<a name="l00045"></a><a class="code" href="bond_8h.shtml#71faadca5c5e100b081f5a563c22e9ee">00045</a> <span class="preprocessor">#define OB_WEDGE_BOND     (1&lt;&lt;2)</span>
<a name="l00047"></a><a class="code" href="bond_8h.shtml#14b10c08a25058d1d4a98f8573195119">00047</a> <span class="preprocessor">#define OB_HASH_BOND      (1&lt;&lt;3)</span>
<a name="l00049"></a><a class="code" href="bond_8h.shtml#2f74970f7126e2bc1e9a4e1d8ed1af26">00049</a> <span class="preprocessor">#define OB_RING_BOND      (1&lt;&lt;4)</span>
<a name="l00051"></a><a class="code" href="bond_8h.shtml#4acf405087f46d03ebc4581cbce02f3b">00051</a> <span class="preprocessor">#define OB_TORUP_BOND     (1&lt;&lt;5)</span>
<a name="l00053"></a><a class="code" href="bond_8h.shtml#7c5124279ed6a19b93840ab3038ef2c0">00053</a> <span class="preprocessor">#define OB_TORDOWN_BOND   (1&lt;&lt;6)</span>
<a name="l00055"></a><a class="code" href="bond_8h.shtml#2cbf156fa54b94fb630c4915ab06cbb1">00055</a> <span class="preprocessor">#define OB_KSINGLE_BOND   (1&lt;&lt;7)</span>
<a name="l00057"></a><a class="code" href="bond_8h.shtml#f2291cb768c88e059cb8ee24d3f66f64">00057</a> <span class="preprocessor">#define OB_KDOUBLE_BOND   (1&lt;&lt;8)</span>
<a name="l00059"></a><a class="code" href="bond_8h.shtml#e702c1e19159f86ccd298f273ac94cd6">00059</a> <span class="preprocessor">#define OB_KTRIPLE_BOND   (1&lt;&lt;9)</span>
<a name="l00061"></a><a class="code" href="bond_8h.shtml#19b6306ab83f788b1fb60f8816b07e9c">00061</a> <span class="preprocessor">#define OB_CLOSURE_BOND   (1&lt;&lt;10)</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span>  <span class="comment">// 11-16 currently unused</span>
<a name="l00063"></a>00063 
<a name="l00064"></a>00064   <span class="comment">// class introduction in bond.cpp</span>
<a name="l00065"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml">00065</a>  <span class="keyword">class </span>OBAPI OBBond: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>
<a name="l00066"></a>00066     {
<a name="l00067"></a>00067     <span class="keyword">protected</span>:
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#1219a011a5e0ec59c67a5a873d81986c">00068</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                _idx;   
<a name="l00069"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a15238ffbdb1330727678c9d6553d6ba">00069</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>                      *_parent;
<a name="l00070"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#3a61f73b711933e11ee793bf8fc550e0">00070</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>                     *_bgn;   
<a name="l00071"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a094fa86d6e276e37457b5f662d386e0">00071</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>                     *_end;   
<a name="l00072"></a>00072 
<a name="l00073"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#3db9d8d4a032ad98c3cc9139bff39a49">00073</a>       <span class="keywordtype">char</span>                        _order; 
<a name="l00074"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ec57dcfb24a8b5496b6319fa1172fa5e">00074</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>          _flags; 
<a name="l00075"></a>00075 
<a name="l00076"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#3a1dc0419a66d2e7288214342de43b7a">00076</a>       <span class="keywordtype">bool</span> HasFlag(<span class="keywordtype">int</span> flag)    { <span class="keywordflow">return</span>((_flags &amp; flag) != 0); }
<a name="l00077"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#dcdab8f96dc4fdc2940749e527087245">00077</a>       <span class="keywordtype">void</span> SetFlag(<span class="keywordtype">int</span> flag)    { _flags |= flag;               }
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#401b99defa8a57195dc40a2604cee115">00078</a>       <span class="keywordtype">void</span> UnsetFlag(<span class="keywordtype">int</span> flag)  { _flags &amp;= (~(flag));          }
<a name="l00079"></a>00079 
<a name="l00080"></a>00080     <span class="keyword">public</span>:
<a name="l00082"></a>00082 
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#6368d7673f23186649b2969ade3661d7">00083</a>       <span class="keywordtype">bool</span> Visit;
<a name="l00084"></a>00084 
<a name="l00086"></a>00086       OBBond();
<a name="l00088"></a>00088       <span class="keyword">virtual</span> ~OBBond();
<a name="l00089"></a>00089 
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#b994a975e39f5c62288f4f972b6f90c9">00095</a>       <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)        {          _idx = idx;        }
<a name="l00097"></a>00097 
<a name="l00098"></a>00098       <span class="keywordtype">void</span> SetBO(<span class="keywordtype">int</span> order);
<a name="l00100"></a>00100       <span class="keywordtype">void</span> SetBondOrder(<span class="keywordtype">int</span> order);
<a name="l00102"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#3c443bcf96eac155aa058b69cc59aa4e">00102</a>       <span class="keywordtype">void</span> SetBegin(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *begin){          _bgn = begin;      }
<a name="l00104"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#9bcf1c90715c368ce2896acae75235c4">00104</a>       <span class="keywordtype">void</span> SetEnd(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *end)    {          _end = end;        }
<a name="l00106"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#962b3010305cfb80ba816a0e54097dee">00106</a>       <span class="keywordtype">void</span> SetParent(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *ptr)  {        _parent= ptr;        }
<a name="l00108"></a>00108       <span class="keywordtype">void</span> SetLength(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *fixed,<span class="keywordtype">double</span> length);
<a name="l00110"></a>00110       <span class="keywordtype">void</span> Set(<span class="keywordtype">int</span> index, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* begin,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* end,<span class="keywordtype">int</span> order,<span class="keywordtype">int</span> flags);
<a name="l00112"></a>00112       <span class="keywordtype">void</span> SetKSingle();
<a name="l00114"></a>00114       <span class="keywordtype">void</span> SetKDouble();
<a name="l00116"></a>00116       <span class="keywordtype">void</span> SetKTriple();
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#3d29498c15007d9b6729e26784f23a5b">00118</a>       <span class="keywordtype">void</span> SetAromatic()    { SetFlag(<a class="code" href="bond_8h.shtml#90183171d38e32f07e97bffb7836f9fd" title="An aromatic bond (regardless of bond order).">OB_AROMATIC_BOND</a>); }
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#25f82438018e969b4feda4a25042c608">00120</a>       <span class="keywordtype">void</span> SetHash()        { SetFlag(<a class="code" href="bond_8h.shtml#14b10c08a25058d1d4a98f8573195119" title="A dashed "hash" bond in 2D representations -- i.e., "down" from the 2D plane.">OB_HASH_BOND</a>);     }
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ac63169d5f12da96ad067cc8194c8cdb">00122</a>       <span class="keywordtype">void</span> SetWedge()       { SetFlag(<a class="code" href="bond_8h.shtml#71faadca5c5e100b081f5a563c22e9ee" title="A solid black wedge in 2D representations -- i.e., "up" from the 2D plane.">OB_WEDGE_BOND</a>);    }
<a name="l00124"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#1b06560e0e01a806b92c2386220d0b57">00124</a>       <span class="keywordtype">void</span> SetUp()          { SetFlag(<a class="code" href="bond_8h.shtml#4acf405087f46d03ebc4581cbce02f3b" title="The "upper" bond in a double bond cis/trans isomer (i.e., "/" in SMILES).">OB_TORUP_BOND</a>); UnsetFlag(<a class="code" href="bond_8h.shtml#7c5124279ed6a19b93840ab3038ef2c0" title="The "down" bond in a double bond cis/trans isomer (i.e., "\" in SMILES).">OB_TORDOWN_BOND</a>); }
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#7690859a81831984dbc0fa73313d44b3">00126</a>       <span class="keywordtype">void</span> SetDown()        { SetFlag(<a class="code" href="bond_8h.shtml#7c5124279ed6a19b93840ab3038ef2c0" title="The "down" bond in a double bond cis/trans isomer (i.e., "\" in SMILES).">OB_TORDOWN_BOND</a>); UnsetFlag(<a class="code" href="bond_8h.shtml#4acf405087f46d03ebc4581cbce02f3b" title="The "upper" bond in a double bond cis/trans isomer (i.e., "/" in SMILES).">OB_TORUP_BOND</a>);   }
<a name="l00128"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#e6a016e7f67cf564e5f80254c425f65c">00128</a>       <span class="keywordtype">void</span> SetInRing()      { SetFlag(<a class="code" href="bond_8h.shtml#2f74970f7126e2bc1e9a4e1d8ed1af26" title="A bond in a ring.">OB_RING_BOND</a>);     }
<a name="l00130"></a>00130 
<a name="l00133"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#b499793fc98aadbaa192756b8327016d">00133</a>       <span class="keywordtype">void</span> SetClosure()     { SetFlag(<a class="code" href="bond_8h.shtml#19b6306ab83f788b1fb60f8816b07e9c" title="A bond which "closes" a ring when walking the molecular graph.">OB_CLOSURE_BOND</a>);  }
<a name="l00135"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#934251078b7907fd8cd8573c40fdea58">00135</a>       <span class="keywordtype">void</span> UnsetHash()      { UnsetFlag(<a class="code" href="bond_8h.shtml#14b10c08a25058d1d4a98f8573195119" title="A dashed "hash" bond in 2D representations -- i.e., "down" from the 2D plane.">OB_HASH_BOND</a>);    }
<a name="l00137"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#8425a34105ee2f2e152da12ebca9960e">00137</a>       <span class="keywordtype">void</span> UnsetWedge()     { UnsetFlag(<a class="code" href="bond_8h.shtml#71faadca5c5e100b081f5a563c22e9ee" title="A solid black wedge in 2D representations -- i.e., "up" from the 2D plane.">OB_WEDGE_BOND</a>);   }
<a name="l00139"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#88d9f308b5a9d49e98da1c6bd195358f">00139</a>       <span class="keywordtype">void</span> UnsetUp()        { UnsetFlag(<a class="code" href="bond_8h.shtml#4acf405087f46d03ebc4581cbce02f3b" title="The "upper" bond in a double bond cis/trans isomer (i.e., "/" in SMILES).">OB_TORUP_BOND</a>);   }
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#561d657e1cc83679879b2b8f662b9205">00141</a>       <span class="keywordtype">void</span> UnsetDown()      { UnsetFlag(<a class="code" href="bond_8h.shtml#7c5124279ed6a19b93840ab3038ef2c0" title="The "down" bond in a double bond cis/trans isomer (i.e., "\" in SMILES).">OB_TORDOWN_BOND</a>); }
<a name="l00143"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#2fcf3bf429f36281a43c879e40e75f34">00143</a>       <span class="keywordtype">void</span> UnsetAromatic()  { UnsetFlag(<a class="code" href="bond_8h.shtml#90183171d38e32f07e97bffb7836f9fd" title="An aromatic bond (regardless of bond order).">OB_AROMATIC_BOND</a>);}
<a name="l00145"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#512e7b122631a29f1ef8c679704632cd">00145</a>       <span class="keywordtype">void</span> UnsetKekule()
<a name="l00146"></a>00146         {
<a name="l00147"></a>00147           _flags &amp;= (~(<a class="code" href="bond_8h.shtml#2cbf156fa54b94fb630c4915ab06cbb1" title="A Kekule single bond.">OB_KSINGLE_BOND</a>|<a class="code" href="bond_8h.shtml#f2291cb768c88e059cb8ee24d3f66f64" title="A Kekule double bond.">OB_KDOUBLE_BOND</a>|<a class="code" href="bond_8h.shtml#e702c1e19159f86ccd298f273ac94cd6" title="A Kekule triple bond.">OB_KTRIPLE_BOND</a>));
<a name="l00148"></a>00148         }
<a name="l00150"></a>00150 
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00154"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#44b77545e83209582e42f375c8f40474">00154</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetIdx()<span class="keyword">           const </span>{ <span class="keywordflow">return</span>(_idx);  }
<a name="l00156"></a>00156 
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#7d9f4e277b24001cf1d7d9ef072724e6">00157</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetBO()<span class="keyword">            const </span>{ <span class="keywordflow">return</span>(_order); }
<a name="l00159"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#d4ae2f349fa9fe34dea5f5e69378fbf7">00159</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetBondOrder()<span class="keyword">     const </span>{ <span class="keywordflow">return</span>(_order); }
<a name="l00161"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#d2ed50e039de387fb517a9f7832de06f">00161</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetFlags()<span class="keyword">         const </span>{ <span class="keywordflow">return</span>(_flags);      }
<a name="l00163"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#e11a8ddd132109c3a14328bb7676d9f7">00163</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetBeginAtomIdx()<span class="keyword">  const </span>{ <span class="keywordflow">return</span>(_bgn-&gt;GetIdx()); }
<a name="l00165"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#38f53ed138507e197a36be75e58a24da">00165</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetEndAtomIdx()<span class="keyword">    const </span>{ <span class="keywordflow">return</span>(_end-&gt;GetIdx()); }
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#fdda9b904cabc9ce0335a665988ab143">00167</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *GetBeginAtom()    { <span class="keywordflow">return</span>(_bgn);    }
<a name="l00168"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#e24579e3e3a0beac0d559aa2ac513f5d">00168</a>       <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *GetBeginAtom()<span class="keyword"> const </span>
<a name="l00169"></a>00169 <span class="keyword">        </span>{ <span class="keywordflow">return</span>(_bgn);    }
<a name="l00171"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ee593e9cc14031b07e3dc63a003c345f">00171</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *GetEndAtom()      { <span class="keywordflow">return</span>(_end);    }
<a name="l00172"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#2b0f900d4472956b82a94dca09c64eeb">00172</a>       <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *GetEndAtom()<span class="keyword"> const</span>
<a name="l00173"></a>00173 <span class="keyword">        </span>{ <span class="keywordflow">return</span>(_end);    }
<a name="l00175"></a>00175 
<a name="l00177"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#30735471b108fe43965fd2d0a9fe86a0">00177</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *GetNbrAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *ptr)
<a name="l00178"></a>00178         {
<a name="l00179"></a>00179           <span class="keywordflow">return</span>((ptr != _bgn)? _bgn : _end);
<a name="l00180"></a>00180         }
<a name="l00182"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#d8480b61159bc6cb861b17341dc2b29a">00182</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>  *GetParent()                 {<span class="keywordflow">return</span>(_parent);}
<a name="l00184"></a>00184 
<a name="l00185"></a>00185       <span class="keywordtype">double</span>  GetEquibLength();
<a name="l00187"></a>00187       <span class="keywordtype">double</span>  GetLength();
<a name="l00189"></a>00189 
<a name="l00191"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#e3aba2dee7140a159fb534747bb2dc7a">00191</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetNbrAtomIdx(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *ptr)
<a name="l00192"></a>00192         {
<a name="l00193"></a>00193           <span class="keywordflow">return</span>((ptr!=_bgn)?_bgn-&gt;GetIdx():_end-&gt;GetIdx());
<a name="l00194"></a>00194         }
<a name="l00196"></a>00196 
<a name="l00198"></a>00198 
<a name="l00199"></a>00199 
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 
<a name="l00202"></a>00202       <span class="keywordtype">bool</span> IsAromatic() <span class="keyword">const</span>;
<a name="l00204"></a>00204       <span class="keywordtype">bool</span> IsInRing() <span class="keyword">const</span>;
<a name="l00206"></a>00206 
<a name="l00211"></a>00211       <span class="keywordtype">bool</span> IsRotor();
<a name="l00213"></a>00213       <span class="keywordtype">bool</span> IsAmide();
<a name="l00215"></a>00215       <span class="keywordtype">bool</span> IsPrimaryAmide();
<a name="l00217"></a>00217       <span class="keywordtype">bool</span> IsSecondaryAmide();
<a name="l00219"></a>00219       <span class="keywordtype">bool</span> IsEster();
<a name="l00221"></a>00221       <span class="keywordtype">bool</span> IsCarbonyl();
<a name="l00223"></a>00223       <span class="keywordtype">bool</span> IsSingle();
<a name="l00225"></a>00225       <span class="keywordtype">bool</span> IsDouble();
<a name="l00227"></a>00227       <span class="keywordtype">bool</span> IsTriple();
<a name="l00229"></a>00229       <span class="keywordtype">bool</span> IsKSingle();
<a name="l00231"></a>00231       <span class="keywordtype">bool</span> IsKDouble();
<a name="l00233"></a>00233       <span class="keywordtype">bool</span> IsKTriple();
<a name="l00235"></a>00235       <span class="keywordtype">bool</span> IsClosure();
<a name="l00238"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#1733c541422f1bec76b19733d5f6f046">00238</a>       <span class="keywordtype">bool</span> IsUp()    {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#4acf405087f46d03ebc4581cbce02f3b" title="The "upper" bond in a double bond cis/trans isomer (i.e., "/" in SMILES).">OB_TORUP_BOND</a>));    }
<a name="l00241"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#4ff4d4e51ec0a91f7b8174265de188e7">00241</a>       <span class="keywordtype">bool</span> IsDown()  {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#7c5124279ed6a19b93840ab3038ef2c0" title="The "down" bond in a double bond cis/trans isomer (i.e., "\" in SMILES).">OB_TORDOWN_BOND</a>));  }
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#70910881ff95404e96c9b40d33e0db76">00244</a>       <span class="keywordtype">bool</span> IsWedge() {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#71faadca5c5e100b081f5a563c22e9ee" title="A solid black wedge in 2D representations -- i.e., "up" from the 2D plane.">OB_WEDGE_BOND</a>));    }
<a name="l00247"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#b5e8e371f621ba037c843f6da7fe6bdb">00247</a>       <span class="keywordtype">bool</span> IsHash()  {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#14b10c08a25058d1d4a98f8573195119" title="A dashed "hash" bond in 2D representations -- i.e., "down" from the 2D plane.">OB_HASH_BOND</a>));     }
<a name="l00249"></a>00249       <span class="keywordtype">bool</span> IsDoubleBondGeometry();
<a name="l00251"></a>00251 
<a name="l00252"></a>00252     }; <span class="comment">// class OBBond</span>
<a name="l00253"></a>00253 
<a name="l00255"></a><a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d">00255</a>   <span class="keyword">typedef</span> std::vector&lt;OBBond*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a>;
<a name="l00256"></a>00256 
<a name="l00257"></a>00257 }<span class="comment">// namespace OpenBabel</span>
<a name="l00258"></a>00258 
<a name="l00259"></a>00259 <span class="preprocessor">#endif   // OB_BOND_H</span>
<a name="l00260"></a>00260 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:04 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
