<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: forcefield.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>forcefield.h</h1><a href="forcefield_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">forcefield.h - Handle OBForceField class.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2006-2007 by Tim Vandermeersch &lt;tim.vandermeersch@gmail.com&gt;</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_FORCEFIELD_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_FORCEFIELD_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">openbabel/mol.h</a>&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;<a class="code" href="pluginiter_8h.shtml" title="Simplify 'plugin' classes to be discovered and/or loaded at runtime.">openbabel/pluginiter.h</a>&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">namespace </span>OpenBabel
<a name="l00033"></a>00033 {
<a name="l00034"></a>00034   <span class="comment">// log levels</span>
<a name="l00035"></a><a class="code" href="forcefield_8h.shtml#e0c831fc1fdad7188e79f0d94ffb0c87">00035</a> <span class="preprocessor">#define OBFF_LOGLVL_NONE        0   </span>
<a name="l00036"></a><a class="code" href="forcefield_8h.shtml#af7ca13d2b94e79693c47c10ea3c1def">00036</a> <span class="preprocessor">#define OBFF_LOGLVL_LOW 1     </span>
<a name="l00037"></a><a class="code" href="forcefield_8h.shtml#efda3ec45e427a38ac62a99a50cf93af">00037</a> <span class="preprocessor">#define OBFF_LOGLVL_MEDIUM      2 </span>
<a name="l00038"></a><a class="code" href="forcefield_8h.shtml#09f7b02a472bb953e5b2e0641ba45e3e">00038</a> <span class="preprocessor">#define OBFF_LOGLVL_HIGH        3   </span>
<a name="l00039"></a>00039 <span class="preprocessor"></span>
<a name="l00040"></a>00040 <span class="preprocessor"></span>  <span class="comment">// terms</span>
<a name="l00041"></a><a class="code" href="forcefield_8h.shtml#586a185b0aed9265f6812ed4338cd8bd">00041</a> <span class="preprocessor">#define OBFF_ENERGY             (1 &lt;&lt; 0)   </span>
<a name="l00042"></a><a class="code" href="forcefield_8h.shtml#326285b39a02acf24b5b73d340129086">00042</a> <span class="preprocessor">#define OBFF_EBOND              (1 &lt;&lt; 1)   </span>
<a name="l00043"></a><a class="code" href="forcefield_8h.shtml#f9110b0ba91b61dfb6d4a01263b22b02">00043</a> <span class="preprocessor">#define OBFF_EANGLE             (1 &lt;&lt; 2)   </span>
<a name="l00044"></a><a class="code" href="forcefield_8h.shtml#005da6f6cb4c5568b1c203cc702f5ce7">00044</a> <span class="preprocessor">#define OBFF_ESTRBND            (1 &lt;&lt; 3) </span>
<a name="l00045"></a><a class="code" href="forcefield_8h.shtml#0f54562816bbf69d6bf037a0adc8bb39">00045</a> <span class="preprocessor">#define OBFF_ETORSION           (1 &lt;&lt; 4) </span>
<a name="l00046"></a><a class="code" href="forcefield_8h.shtml#4b88f20fe0968d703e3c08d0b66bf056">00046</a> <span class="preprocessor">#define OBFF_EOOP               (1 &lt;&lt; 5)     </span>
<a name="l00047"></a><a class="code" href="forcefield_8h.shtml#e95a975f8a0274950f0f89b3f7bf9a64">00047</a> <span class="preprocessor">#define OBFF_EVDW               (1 &lt;&lt; 6)     </span>
<a name="l00048"></a><a class="code" href="forcefield_8h.shtml#3dd361374bf490af6c1f35d60a05949e">00048</a> <span class="preprocessor">#define OBFF_EELECTROSTATIC     (1 &lt;&lt; 7) </span>
<a name="l00049"></a>00049 <span class="preprocessor"></span>
<a name="l00050"></a>00050 <span class="preprocessor"></span>  <span class="comment">// mode arguments for SteepestDescent, ConjugateGradients, ...</span>
<a name="l00051"></a><a class="code" href="forcefield_8h.shtml#76a7ae4b96bf74f5d6f690b908e57bb6">00051</a> <span class="preprocessor">#define OBFF_NUMERICAL_GRADIENT   (1 &lt;&lt; 0)  </span>
<a name="l00052"></a><a class="code" href="forcefield_8h.shtml#a79097c99a0f44c20585623da1f5098e">00052</a> <span class="preprocessor">#define OBFF_ANALYTICAL_GRADIENT        (1 &lt;&lt; 1)  </span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a><a class="code" href="forcefield_8h.shtml#26434409c375f3b38709afdcccec596c">00054</a> <span class="preprocessor"></span><span class="preprocessor">#define KCAL_TO_KJ      4.1868</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>
<a name="l00056"></a>00056   <span class="comment">// inline if statements for logging.</span>
<a name="l00057"></a><a class="code" href="forcefield_8h.shtml#62a639c8c4176b63a2697aff40f4338a">00057</a> <span class="preprocessor">#define IF_OBFF_LOGLVL_LOW    if(loglvl &gt;= OBFF_LOGLVL_LOW)</span>
<a name="l00058"></a><a class="code" href="forcefield_8h.shtml#6f31cf89cddb30bac3d187474f8defed">00058</a> <span class="preprocessor"></span><span class="preprocessor">#define IF_OBFF_LOGLVL_MEDIUM if(loglvl &gt;= OBFF_LOGLVL_MEDIUM)</span>
<a name="l00059"></a><a class="code" href="forcefield_8h.shtml#f9a87deee4328f76736a05bf6e6709ea">00059</a> <span class="preprocessor"></span><span class="preprocessor">#define IF_OBFF_LOGLVL_HIGH   if(loglvl &gt;= OBFF_LOGLVL_HIGH)</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span>  
<a name="l00063"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml">00063</a>   <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> {
<a name="l00064"></a>00064   <span class="keyword">public</span>:
<a name="l00066"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#6f364afbe132c4ecfea48bde1b0618ba">00066</a>     <span class="keywordtype">int</span>         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a4c2a5552e9bc49b1816ff532f558c74" title="Used to store integer atom types.">a</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#148e3876077787926724625411d6e7a9">b</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#4e1e0e72dd773439e333c84dd762a9c3">c</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#6f364afbe132c4ecfea48bde1b0618ba">d</a>;
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#436665a0d94c49fd61354af10a56e33d">00068</a>     std::string <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#86e4c325d35090aeb11ec1be9d2c4b92" title="used to store string atom types">_a</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#ef54f9555eb83d9adc8bfe4c51a41048">_b</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#612751a856867453e2cf240a13b1c69a">_c</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#436665a0d94c49fd61354af10a56e33d">_d</a>; 
<a name="l00069"></a>00069 
<a name="l00071"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#546c48290ce46d1531716ba6a988c9f8">00071</a>     <span class="keywordtype">int</span>       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#68aca69a5f4f8ec9614f66ce2f78fbff" title="Used to store integer type parameters (bondtypes, multiplicity, ...).">ipar1</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#78e737f52c5007086e0c018898644a98">ipar2</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#6f75a98e9cdd17f9a3464e93f4d2f5da">ipar3</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a105c7edfe4092fb9e85b2b1cd41b626">ipar4</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#546c48290ce46d1531716ba6a988c9f8">ipar5</a>;
<a name="l00073"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#859e203e1248f98d81f116efa84c8325">00073</a>     <span class="keywordtype">double</span>    <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#f662f1d631d7326a9f5be9adc0eeaba2" title="Used to store double type parameters (force constants, bond lengths, angles, ...)...">dpar1</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#fc6d80a74e2696f52521c3763f080fff">dpar2</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#4a4c041289842614f879e2377148f6e3">dpar3</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#e27dcd2dfe8122250dd3d5d75ccda6e1">dpar4</a>, <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#859e203e1248f98d81f116efa84c8325">dpar5</a>;
<a name="l00074"></a>00074 
<a name="l00076"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#31c588c926e46d76ea0b6ea45e6f98a8">00076</a>     <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a>&amp; <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#31c588c926e46d76ea0b6ea45e6f98a8" title="Assignment.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a> &amp;ai) 
<a name="l00077"></a>00077     {
<a name="l00078"></a>00078       <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;ai) {
<a name="l00079"></a>00079         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a4c2a5552e9bc49b1816ff532f558c74" title="Used to store integer atom types.">a</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a4c2a5552e9bc49b1816ff532f558c74" title="Used to store integer atom types.">a</a>;
<a name="l00080"></a>00080         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#148e3876077787926724625411d6e7a9">b</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#148e3876077787926724625411d6e7a9">b</a>;
<a name="l00081"></a>00081         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#4e1e0e72dd773439e333c84dd762a9c3">c</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#4e1e0e72dd773439e333c84dd762a9c3">c</a>;
<a name="l00082"></a>00082         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#6f364afbe132c4ecfea48bde1b0618ba">d</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#6f364afbe132c4ecfea48bde1b0618ba">d</a>;
<a name="l00083"></a>00083         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#86e4c325d35090aeb11ec1be9d2c4b92" title="used to store string atom types">_a</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#86e4c325d35090aeb11ec1be9d2c4b92" title="used to store string atom types">_a</a>;
<a name="l00084"></a>00084         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#ef54f9555eb83d9adc8bfe4c51a41048">_b</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#ef54f9555eb83d9adc8bfe4c51a41048">_b</a>;
<a name="l00085"></a>00085         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#612751a856867453e2cf240a13b1c69a">_c</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#612751a856867453e2cf240a13b1c69a">_c</a>;
<a name="l00086"></a>00086         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#436665a0d94c49fd61354af10a56e33d">_d</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#436665a0d94c49fd61354af10a56e33d">_d</a>;
<a name="l00087"></a>00087         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#68aca69a5f4f8ec9614f66ce2f78fbff" title="Used to store integer type parameters (bondtypes, multiplicity, ...).">ipar1</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#68aca69a5f4f8ec9614f66ce2f78fbff" title="Used to store integer type parameters (bondtypes, multiplicity, ...).">ipar1</a>;
<a name="l00088"></a>00088         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#78e737f52c5007086e0c018898644a98">ipar2</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#78e737f52c5007086e0c018898644a98">ipar2</a>;
<a name="l00089"></a>00089         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#6f75a98e9cdd17f9a3464e93f4d2f5da">ipar3</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#6f75a98e9cdd17f9a3464e93f4d2f5da">ipar3</a>;
<a name="l00090"></a>00090         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a105c7edfe4092fb9e85b2b1cd41b626">ipar4</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a105c7edfe4092fb9e85b2b1cd41b626">ipar4</a>;
<a name="l00091"></a>00091         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#546c48290ce46d1531716ba6a988c9f8">ipar5</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#546c48290ce46d1531716ba6a988c9f8">ipar5</a>;
<a name="l00092"></a>00092         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#f662f1d631d7326a9f5be9adc0eeaba2" title="Used to store double type parameters (force constants, bond lengths, angles, ...)...">dpar1</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#f662f1d631d7326a9f5be9adc0eeaba2" title="Used to store double type parameters (force constants, bond lengths, angles, ...)...">dpar1</a>;
<a name="l00093"></a>00093         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#fc6d80a74e2696f52521c3763f080fff">dpar2</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#fc6d80a74e2696f52521c3763f080fff">dpar2</a>;
<a name="l00094"></a>00094         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#4a4c041289842614f879e2377148f6e3">dpar3</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#4a4c041289842614f879e2377148f6e3">dpar3</a>;
<a name="l00095"></a>00095         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#e27dcd2dfe8122250dd3d5d75ccda6e1">dpar4</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#e27dcd2dfe8122250dd3d5d75ccda6e1">dpar4</a>;
<a name="l00096"></a>00096         <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#859e203e1248f98d81f116efa84c8325">dpar5</a> = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#859e203e1248f98d81f116efa84c8325">dpar5</a>;
<a name="l00097"></a>00097       }
<a name="l00098"></a>00098         
<a name="l00099"></a>00099       <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00100"></a>00100     }
<a name="l00101"></a>00101 
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#c8bb3912a3ce86b15842e79d0b421204">00103</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#c8bb3912a3ce86b15842e79d0b421204" title="Reset the atom types and set all parameters to zero.">clear</a> () 
<a name="l00104"></a>00104     {
<a name="l00105"></a>00105       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a4c2a5552e9bc49b1816ff532f558c74" title="Used to store integer atom types.">a</a> = 0;
<a name="l00106"></a>00106       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#148e3876077787926724625411d6e7a9">b</a> = 0;
<a name="l00107"></a>00107       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#4e1e0e72dd773439e333c84dd762a9c3">c</a> = 0;
<a name="l00108"></a>00108       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#6f364afbe132c4ecfea48bde1b0618ba">d</a> = 0;
<a name="l00109"></a>00109       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#68aca69a5f4f8ec9614f66ce2f78fbff" title="Used to store integer type parameters (bondtypes, multiplicity, ...).">ipar1</a> = 0;
<a name="l00110"></a>00110       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#78e737f52c5007086e0c018898644a98">ipar2</a> = 0;
<a name="l00111"></a>00111       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#6f75a98e9cdd17f9a3464e93f4d2f5da">ipar3</a> = 0;
<a name="l00112"></a>00112       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#a105c7edfe4092fb9e85b2b1cd41b626">ipar4</a> = 0;
<a name="l00113"></a>00113       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#546c48290ce46d1531716ba6a988c9f8">ipar5</a> = 0;
<a name="l00114"></a>00114       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#f662f1d631d7326a9f5be9adc0eeaba2" title="Used to store double type parameters (force constants, bond lengths, angles, ...)...">dpar1</a> = 0.0f;
<a name="l00115"></a>00115       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#fc6d80a74e2696f52521c3763f080fff">dpar2</a> = 0.0f;
<a name="l00116"></a>00116       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#4a4c041289842614f879e2377148f6e3">dpar3</a> = 0.0f;
<a name="l00117"></a>00117       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#e27dcd2dfe8122250dd3d5d75ccda6e1">dpar4</a> = 0.0f;
<a name="l00118"></a>00118       <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#859e203e1248f98d81f116efa84c8325">dpar5</a> = 0.0f;
<a name="l00119"></a>00119     }
<a name="l00120"></a>00120   }; <span class="comment">// class OBFFParameter</span>
<a name="l00121"></a>00121   
<a name="l00122"></a>00122   <span class="comment">// specific class introductions in forcefieldYYYY.cpp (for YYYY calculations)</span>
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml">00125</a> <span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml" title="Internal class for OBForceField to hold energy and gradient calculations on specific...">OBFFCalculation</a>
<a name="l00126"></a>00126   {
<a name="l00127"></a>00127     <span class="keyword">public</span>:
<a name="l00129"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#1d26cc49e49afe96406210d6beaf418a">00129</a>       <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#1d26cc49e49afe96406210d6beaf418a" title="Used to store the energy for this OBFFCalculation.">energy</a>;
<a name="l00131"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#360127e447a0f25cfd633cba0c784db7">00131</a>       <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#85f3dc7c6507fc363d7294b47d799738" title="Used to store the gradients for this OBFFCalculation.">grada</a>, <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#432477a5629da8236131cc2dacb776f3">gradb</a>, <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#9eda32553be7029c4f04b012b84a2555">gradc</a>, <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#360127e447a0f25cfd633cba0c784db7">gradd</a>;
<a name="l00133"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#bc62ecd7a79c7d1cd07ef8aee2ec0bb6">00133</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *<a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#9541ea5166923fc18311a3cfc4843518" title="Used to store the atoms for this OBFFCalculation.">a</a>, *<a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#3b7f67e0c88d3405346c2aa592d75faf">b</a>, *<a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#8864f86536f4aef5a68274b98380e022">c</a>, *<a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#bc62ecd7a79c7d1cd07ef8aee2ec0bb6">d</a>;
<a name="l00134"></a>00134 
<a name="l00136"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#52391cbdbd202382ba77da3e62e3103c">00136</a>       <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#52391cbdbd202382ba77da3e62e3103c" title="Constructor.">OBFFCalculation</a>() 
<a name="l00137"></a>00137         {
<a name="l00138"></a>00138           <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#9541ea5166923fc18311a3cfc4843518" title="Used to store the atoms for this OBFFCalculation.">a</a> = NULL;
<a name="l00139"></a>00139           <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#3b7f67e0c88d3405346c2aa592d75faf">b</a> = NULL;
<a name="l00140"></a>00140           <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#8864f86536f4aef5a68274b98380e022">c</a> = NULL;
<a name="l00141"></a>00141           <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#bc62ecd7a79c7d1cd07ef8aee2ec0bb6">d</a> = NULL;
<a name="l00142"></a>00142           <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#1d26cc49e49afe96406210d6beaf418a" title="Used to store the energy for this OBFFCalculation.">energy</a> = 0.0f;
<a name="l00143"></a>00143           <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#85f3dc7c6507fc363d7294b47d799738" title="Used to store the gradients for this OBFFCalculation.">grada</a> = <a class="code" href="namespaceOpenBabel.shtml#3752b8b2cb2b0485307ec67623d7e2c5" title="The zero vector: &lt;0.0, 0.0, 0.0&gt;.">VZero</a>;
<a name="l00144"></a>00144           <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#432477a5629da8236131cc2dacb776f3">gradb</a> = <a class="code" href="namespaceOpenBabel.shtml#3752b8b2cb2b0485307ec67623d7e2c5" title="The zero vector: &lt;0.0, 0.0, 0.0&gt;.">VZero</a>;
<a name="l00145"></a>00145           <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#9eda32553be7029c4f04b012b84a2555">gradc</a> = <a class="code" href="namespaceOpenBabel.shtml#3752b8b2cb2b0485307ec67623d7e2c5" title="The zero vector: &lt;0.0, 0.0, 0.0&gt;.">VZero</a>;
<a name="l00146"></a>00146           <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#360127e447a0f25cfd633cba0c784db7">gradd</a> = <a class="code" href="namespaceOpenBabel.shtml#3752b8b2cb2b0485307ec67623d7e2c5" title="The zero vector: &lt;0.0, 0.0, 0.0&gt;.">VZero</a>;
<a name="l00147"></a>00147         }
<a name="l00149"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#70ded24adb97f752764a1e8bd58973fc">00149</a>       <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#70ded24adb97f752764a1e8bd58973fc" title="Destructor.">~OBFFCalculation</a>()
<a name="l00150"></a>00150         {
<a name="l00151"></a>00151         }
<a name="l00152"></a>00152       
<a name="l00154"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#08e729779dab188278b49bce1d884dbb">00154</a>       <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#08e729779dab188278b49bce1d884dbb" title="Compute the energy and gradients for this OBFFCalculation.">Compute</a>(<span class="keywordtype">bool</span> gradients = <span class="keyword">true</span>) 
<a name="l00155"></a>00155         {
<a name="l00156"></a>00156         }
<a name="l00158"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#6c1cf6c3b4901959141aa1052d44139a">00158</a>       <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#6c1cf6c3b4901959141aa1052d44139a" title="Energy for this OBFFCalculation (call Compute() first)">GetEnergy</a>() 
<a name="l00159"></a>00159       {
<a name="l00160"></a>00160         <span class="keywordflow">if</span> (!<a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#1d26cc49e49afe96406210d6beaf418a" title="Used to store the energy for this OBFFCalculation.">energy</a>)
<a name="l00161"></a>00161           <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#08e729779dab188278b49bce1d884dbb" title="Compute the energy and gradients for this OBFFCalculation.">Compute</a>(<span class="keyword">false</span>);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163         <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#1d26cc49e49afe96406210d6beaf418a" title="Used to store the energy for this OBFFCalculation.">energy</a>; 
<a name="l00164"></a>00164       }
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#f164e746798233e4383625019959bca1">00166</a>       <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#f164e746798233e4383625019959bca1" title="Gradient for this OBFFCalculation with respect to coordinates of atom (call Compute()...">GetGradient</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom) 
<a name="l00167"></a>00167       {
<a name="l00168"></a>00168         <span class="keywordflow">if</span> (atom == <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#9541ea5166923fc18311a3cfc4843518" title="Used to store the atoms for this OBFFCalculation.">a</a>)
<a name="l00169"></a>00169           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#85f3dc7c6507fc363d7294b47d799738" title="Used to store the gradients for this OBFFCalculation.">grada</a>;
<a name="l00170"></a>00170         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (atom == <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#3b7f67e0c88d3405346c2aa592d75faf">b</a>)
<a name="l00171"></a>00171           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#432477a5629da8236131cc2dacb776f3">gradb</a>;
<a name="l00172"></a>00172         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (atom == <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#8864f86536f4aef5a68274b98380e022">c</a>)
<a name="l00173"></a>00173           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#9eda32553be7029c4f04b012b84a2555">gradc</a>;
<a name="l00174"></a>00174         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (atom == <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#bc62ecd7a79c7d1cd07ef8aee2ec0bb6">d</a>)
<a name="l00175"></a>00175           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBFFCalculation.shtml#360127e447a0f25cfd633cba0c784db7">gradd</a>;
<a name="l00176"></a>00176         <span class="keywordflow">else</span> 
<a name="l00177"></a>00177           <span class="keywordflow">return</span>  <a class="code" href="namespaceOpenBabel.shtml#3752b8b2cb2b0485307ec67623d7e2c5" title="The zero vector: &lt;0.0, 0.0, 0.0&gt;.">VZero</a>;
<a name="l00178"></a>00178       }
<a name="l00179"></a>00179   };
<a name="l00180"></a>00180 
<a name="l00181"></a>00181   <span class="comment">// Class OBForceField</span>
<a name="l00182"></a>00182   <span class="comment">// class introduction in forcefield.cpp</span>
<a name="l00183"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml">00183</a>   <span class="keyword">class </span>OBAPI OBForceField
<a name="l00184"></a>00184   {
<a name="l00185"></a>00185   
<a name="l00186"></a>00186   <a class="code" href="pluginiter_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(OBForceField)
<a name="l00187"></a>00187   
<a name="l00188"></a>00188     <span class="keyword">protected</span>:
<a name="l00230"></a>00230     <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a>* GetParameter(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c, <span class="keywordtype">int</span> d, std::vector&lt;OBFFParameter&gt; &amp;parameter);
<a name="l00232"></a>00232     <a class="code" href="classOpenBabel_1_1OBFFParameter.shtml" title="Internal class for OBForceField to hold forcefield parameters.">OBFFParameter</a>* GetParameter(<span class="keyword">const</span> <span class="keywordtype">char</span>* a, <span class="keyword">const</span> <span class="keywordtype">char</span>* b, <span class="keyword">const</span> <span class="keywordtype">char</span>* c, <span class="keyword">const</span> <span class="keywordtype">char</span>* d, std::vector&lt;OBFFParameter&gt; &amp;parameter);
<a name="l00233"></a>00233            
<a name="l00235"></a>00235 
<a name="l00240"></a>00240     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> NumericalDerivative(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a, <span class="keywordtype">int</span> terms = <a class="code" href="forcefield_8h.shtml#586a185b0aed9265f6812ed4338cd8bd" title="all terms">OBFF_ENERGY</a>);
<a name="l00242"></a>00242     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> NumericalSecondDerivative(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a, <span class="keywordtype">int</span> terms = <a class="code" href="forcefield_8h.shtml#586a185b0aed9265f6812ed4338cd8bd" title="all terms">OBFF_ENERGY</a>);
<a name="l00252"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#8c159a7d04c647e6dd408497451fb2de">00252</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetGradient(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a, <span class="keywordtype">int</span> terms = <a class="code" href="forcefield_8h.shtml#586a185b0aed9265f6812ed4338cd8bd" title="all terms">OBFF_ENERGY</a>) 
<a name="l00253"></a>00253     { 
<a name="l00254"></a>00254       <span class="keywordflow">return</span> -NumericalDerivative(a, terms); 
<a name="l00255"></a>00255     }
<a name="l00261"></a>00261     <span class="keywordtype">bool</span> IsInSameRing(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* a, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* b);
<a name="l00262"></a>00262  
<a name="l00263"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#5ae66d31df78d115efc8282c8c695c1a">00263</a>     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> _mol; 
<a name="l00264"></a>00264 
<a name="l00266"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#64eff46d46ca1a94d882efa15d589b78">00266</a>     std::ostream* logos;
<a name="l00267"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ab11caf1e98e9bb1bd821cdc33c14dd1">00267</a>     <span class="keywordtype">char</span> logbuf[200];
<a name="l00268"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#fa55d008e5d35bd707cfe2a7be2c36c8">00268</a>     <span class="keywordtype">int</span> loglvl; 
<a name="l00269"></a>00269 
<a name="l00271"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#6c28d52de53fb1ee6e4b6ce5f4c04695">00271</a>     <span class="keywordtype">int</span> current_conformer;
<a name="l00272"></a>00272 
<a name="l00274"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#47292a5e3cad98d5a169bd2c54103d66">00274</a>     <span class="keywordtype">double</span> _econv, _e_n1;
<a name="l00275"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#fe138e40e061c04494421e5513829b37">00275</a>     <span class="keywordtype">int</span> _method, _cstep, _nsteps;
<a name="l00276"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#1c25210164842f41968d67225f873283">00276</a>     std::vector&lt;vector3&gt; _grad1, _dir1;
<a name="l00277"></a>00277 
<a name="l00278"></a>00278   <span class="keyword">public</span>:
<a name="l00280"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#b49558e469015d76e7c27ee0cfdf4a75">00280</a>     <span class="keyword">virtual</span> ~OBForceField()
<a name="l00281"></a>00281       {
<a name="l00282"></a>00282       }
<a name="l00284"></a>00284     <span class="comment">//virtual std::string Description()=0;</span>
<a name="l00288"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#4d625c122a1c2ed931851331b0243950">00288</a> <span class="comment"></span>    <span class="keyword">static</span> OBForceField* FindForceField(<span class="keyword">const</span> std::string&amp; ID)
<a name="l00289"></a>00289     { 
<a name="l00290"></a>00290       <span class="keywordflow">return</span> Iter().FindType(ID);
<a name="l00291"></a>00291     } 
<a name="l00295"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#8af11ddb5650f7733164c81da3aacbd8">00295</a>     <span class="keyword">static</span> OBForceField* FindForceField(<span class="keyword">const</span> <span class="keywordtype">char</span> *ID)
<a name="l00296"></a>00296     {
<a name="l00297"></a>00297       std::string ffname(ID);
<a name="l00298"></a>00298       <span class="keywordflow">return</span> FindForceField(ffname);
<a name="l00299"></a>00299     }
<a name="l00301"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#1107abae4af40cd96faa7385b4de79c2">00301</a>     <span class="keyword">virtual</span> std::string GetUnit() { <span class="keywordflow">return</span> std::string(<span class="stringliteral">"au"</span>); }
<a name="l00306"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#39a480e503a44c78cd7f8963dcfd447f">00306</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol) { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00311"></a>00311     <span class="keywordtype">bool</span> UpdateCoordinates(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00316"></a>00316     <span class="keywordtype">bool</span> UpdateConformers(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00320"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#06249fabc93686f6fa389173bcd2e300">00320</a>     <span class="keywordtype">void</span> OBFFLog(std::string msg)
<a name="l00321"></a>00321     {
<a name="l00322"></a>00322       <span class="keywordflow">if</span> (!logos)
<a name="l00323"></a>00323         <span class="keywordflow">return</span>;
<a name="l00324"></a>00324       
<a name="l00325"></a>00325       *logos &lt;&lt; msg;
<a name="l00326"></a>00326     }
<a name="l00330"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#232f01774986e74179b56eb961728a54">00330</a>     <span class="keywordtype">void</span> OBFFLog(<span class="keyword">const</span> <span class="keywordtype">char</span> *msg)
<a name="l00331"></a>00331     {
<a name="l00332"></a>00332       <span class="keywordflow">if</span> (!logos)
<a name="l00333"></a>00333         <span class="keywordflow">return</span>;
<a name="l00334"></a>00334       
<a name="l00335"></a>00335       *logos &lt;&lt; msg;
<a name="l00336"></a>00336     }
<a name="l00337"></a>00337 
<a name="l00339"></a>00339     <span class="comment">// Energy Evaluation                                                   //</span>
<a name="l00341"></a>00341 <span class="comment"></span>      
<a name="l00343"></a>00343 
<a name="l00344"></a>00344 
<a name="l00352"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#d9242de2f838fb94efcd85f7182a6f83">00352</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> Energy(<span class="keywordtype">bool</span> gradients = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00358"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#da5914c7c0927cc9157d404ac175bcce">00358</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_Bond(<span class="keywordtype">bool</span> gradients = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00364"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#b071cd3395d95bfa4c90cbdc3426c95a">00364</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_Angle(<span class="keywordtype">bool</span> gradients = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00370"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#180eb032b11995b3140d54b1fd1ec991">00370</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_StrBnd(<span class="keywordtype">bool</span> gradients = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00376"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#bcf664aaa0bbb807a4f6e3d441d3147a">00376</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_Torsion(<span class="keywordtype">bool</span> gradients = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00382"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#83d00f6965c92799d4d4a6e488a737e3">00382</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_OOP(<span class="keywordtype">bool</span> gradients = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00388"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#9a27f6899e6a57b234cfe79022ca0d1c">00388</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_VDW(<span class="keywordtype">bool</span> gradients = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00394"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#7ed5b3a5502abbe3a9931165475905e0">00394</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_Electrostatic(<span class="keywordtype">bool</span> gradients = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00396"></a>00396      
<a name="l00398"></a>00398     <span class="comment">// Logging                                                             //</span>
<a name="l00400"></a>00400 <span class="comment"></span>      
<a name="l00402"></a>00402 
<a name="l00403"></a>00403 
<a name="l00407"></a>00407     <span class="keywordtype">bool</span> SetLogFile(std::ostream *pos);
<a name="l00436"></a>00436     <span class="keywordtype">bool</span> SetLogLevel(<span class="keywordtype">int</span> level);
<a name="l00438"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a9927fd2efb61460c8e879f83c0d387e">00438</a>     <span class="keywordtype">int</span> GetLogLevel() { <span class="keywordflow">return</span> loglvl; }
<a name="l00440"></a>00440      
<a name="l00442"></a>00442     <span class="comment">// Structure Generation                                                //</span>
<a name="l00444"></a>00444 <span class="comment"></span>      
<a name="l00446"></a>00446 
<a name="l00447"></a>00447 
<a name="l00464"></a>00464     <span class="keywordtype">void</span> SystematicRotorSearch();
<a name="l00465"></a>00465       
<a name="l00467"></a>00467     <span class="comment">// Energy Minimization                                                 //</span>
<a name="l00469"></a>00469 <span class="comment"></span>      
<a name="l00471"></a>00471 
<a name="l00472"></a>00472 
<a name="l00484"></a>00484     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> LineSearch(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;direction);
<a name="l00499"></a>00499     <span class="keywordtype">void</span> SteepestDescent(<span class="keywordtype">int</span> steps, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#a79097c99a0f44c20585623da1f5098e" title="use analytical gradients">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l00527"></a>00527     <span class="keywordtype">void</span> SteepestDescentInitialize(<span class="keywordtype">int</span> steps = 1000, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#a79097c99a0f44c20585623da1f5098e" title="use analytical gradients">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l00543"></a>00543     <span class="keywordtype">bool</span> SteepestDescentTakeNSteps(<span class="keywordtype">int</span> n);
<a name="l00559"></a>00559     <span class="keywordtype">void</span> ConjugateGradients(<span class="keywordtype">int</span> steps, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#a79097c99a0f44c20585623da1f5098e" title="use analytical gradients">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l00586"></a>00586     <span class="keywordtype">void</span> ConjugateGradientsInitialize(<span class="keywordtype">int</span> steps = 1000, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#a79097c99a0f44c20585623da1f5098e" title="use analytical gradients">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l00601"></a>00601     <span class="keywordtype">bool</span> ConjugateGradientsTakeNSteps(<span class="keywordtype">int</span> n);
<a name="l00603"></a>00603       
<a name="l00605"></a>00605     <span class="comment">// Validation                                                          //</span>
<a name="l00607"></a>00607 <span class="comment"></span>      
<a name="l00609"></a>00609 
<a name="l00610"></a>00610 
<a name="l00611"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#591a6c018926edaa3f398ca7134e26c9">00611</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00616"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#5bd73ca104b0fd34659d77a7f9d3a0a4">00616</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ValidateGradients() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00621"></a>00621     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> ValidateGradientError(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;numgrad, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;anagrad);
<a name="l00623"></a>00623      
<a name="l00625"></a>00625     <span class="comment">// Vector Analysis                                                     //</span>
<a name="l00627"></a>00627 <span class="comment"></span>      
<a name="l00629"></a>00629 
<a name="l00630"></a>00630 
<a name="l00636"></a>00636     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorLengthDerivative(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;a, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;b);
<a name="l00643"></a>00643     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorAngleDerivative(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;a, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;b, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;c);
<a name="l00651"></a>00651     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorTorsionDerivative(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;a, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;b, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;c, <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;d);
<a name="l00653"></a>00653 
<a name="l00658"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#d9161e81d8d93b760bd95a5b00079459">00658</a>     <span class="keywordtype">void</span> kludge()
<a name="l00659"></a>00659     {
<a name="l00660"></a>00660       <a class="code" href="classOpenBabel_1_1PluginIter.shtml" title="Template class used to simplify dynamic classes discovered at runtime.">PluginIter&lt;OBForceField&gt;</a> it;
<a name="l00661"></a>00661       (++it)-&gt;SetLogLevel(1);
<a name="l00662"></a>00662       <span class="keywordflow">if</span>(it)it.<a class="code" href="classOpenBabel_1_1PluginIter.shtml#616e5ec5383953189628ddf0dd018453" title="The ID code for this plugin">ID</a>();
<a name="l00663"></a>00663     }
<a name="l00664"></a>00664 
<a name="l00665"></a>00665   }; <span class="comment">// class OBForceField</span>
<a name="l00666"></a>00666 
<a name="l00667"></a>00667 }<span class="comment">// namespace OpenBabel</span>
<a name="l00668"></a>00668 
<a name="l00669"></a>00669 <span class="preprocessor">#endif   // OB_FORCEFIELD_H</span>
<a name="l00670"></a>00670 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:04 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
