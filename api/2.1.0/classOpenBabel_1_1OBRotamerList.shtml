<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBRotamerList Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul>
</div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBRotamerList.shtml">OBRotamerList</a></div>
<h1>OBRotamerList Class Reference</h1><!-- doxytag: class="OpenBabel::OBRotamerList" --><!-- doxytag: inherits="OpenBabel::OBGenericData" -->Supports a set of rotamer coordinate sets for some number of potentially rotatable bonds.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="rotamer_8h-source.shtml">openbabel/rotamer.h</a>&gt;</code>
<p>
Inheritance diagram for OBRotamerList:<p><center><img src="classOpenBabel_1_1OBRotamerList__inherit__graph.png" border="0" usemap="#OBRotamerList__inherit__map" alt="Inheritance graph"></center>
<map name="OBRotamerList__inherit__map">
<area shape="rect" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data." alt="" coords="7,7,125,34"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center><a href="classOpenBabel_1_1OBRotamerList-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a1cef5a8affd0b0f75891495f1674805">OBRotamerList</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#5361d45ced4133323de80d61ae5ecf05">Clone</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *parent) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#193afbb27085bc1183ea8f415c99b989">~OBRotamerList</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#fd34dcbc8bd8c0fba2433b39f1e1d61b">Setup</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#7ecbed112a3ccc6252b88d4432b94c6e">Setup</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, unsigned char *ref, int nrotors)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#cec7eb06ebdea2ad5380429c895fbff3">NumRotors</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#dd4e6ba7b3a1dbd14607e23096de4212">NumRotamers</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#731bb8e81cfd2699e1bfeb0c24fc7d2b">AddRotamer</a> (double *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#1abcce8335b5b98eb2ef691138e864eb">AddRotamer</a> (int *key)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#b12cefb04ee9382126d785c965b99454">AddRotamer</a> (std::vector&lt; int &gt; key)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#2244fa5b56d6a839a32de2fd11156472">AddRotamer</a> (unsigned char *key)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#6f752b5a14fe102c0c274166e40f8eb4">AddRotamers</a> (unsigned char *arr, int nconf)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#f5e36f37fe489ad4ad34605ddb34ecc1">GetReferenceArray</a> (unsigned char *) const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; double * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#3f0fbaf701b38d36aaa0a225de04841d">CreateConformerList</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#47d8b31fb5ca455ff3586b86e44acdfc">ExpandConformerList</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; double * &gt; &amp;confs)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#91c3efe37db1542a2f553440143915f9">SetBaseCoordinateSets</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a06b0ac4b05d9a708e38da81868e9586">SetBaseCoordinateSets</a> (std::vector&lt; double * &gt; bc, unsigned int N)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#dc7ea5c9356d1597bec2d328bcdc3b07">NumBaseCoordinateSets</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#dbaf9eeafb825763acadfc785220412a">GetBaseCoordinateSet</a> (unsigned int i) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#2f0695eb7d6ff6321032d88655ae8d25">NumAtoms</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ae3d15983201a2a115701b2c538fef77">SetAttribute</a> (const std::string &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#45613e34598a9584fb0120ef3fdab9e0">SetOrigin</a> (const <a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> s)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const std::string &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#c61fc66ef692e79290d6eaf7231db92c">GetAttribute</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#91834e24b299c63cdf2cb77795298446">GetDataType</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const std::string &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#6145f0df06364b6d58c728368db8f992">GetValue</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#df131b210114ba636246ffc8dcb2ea13">GetOrigin</a> () const</td></tr>

<tr><td colspan="2"><div class="groupHeader">Iterator methods</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; unsigned char <br>
* &gt;::iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#2948e1a74f2c22c575d6ddc6643f6ef1">BeginRotamer</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; unsigned char <br>
* &gt;::iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#589d2df01c6f3e1cb1bf95b25e804409">EndRotamer</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#dceb77134f15418a66cf1124dcef1b51">_attr</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#31291823d487a4a47f24aae5870505ef">_type</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#239606b62a534e4df7626ea0cfdfb856">_source</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Supports a set of rotamer coordinate sets for some number of potentially rotatable bonds. 
<p>
A high-level class for rotamer / conformer generation, intended mainly for use with the related class <a class="el" href="classOpenBabel_1_1OBRotorList.shtml" title="Given an OBMol, set up a list of possibly rotatable torsions,.">OBRotorList</a> and the <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml" title="Database of default hybridization torsional rules and SMARTS-defined OBRotorRule...">OBRotorRules</a> database<p>
Rotamers represent conformational isomers formed simply by rotation of dihedral angles. On the other hand, conformers may include geometric relaxation (i.e., slight modification of bond lengths, bond angles, etc.)<p>
The following shows an example of generating 2 conformers using different rotor states. Similar code could be used for systematic or Monte Carlo conformer sampling when combined with energy evaluation (molecular mechanics or otherwise).<p>
<div class="fragment"><pre class="fragment">OBRotorList rl; <span class="comment">// used to sample all rotatable bonds via the OBRotorRules data</span>
<span class="comment">// If you want to "fix" any particular atoms (i.e., freeze them in space)</span>
<span class="comment">// then set up an OBBitVec of the fixed atoms and call</span>
<span class="comment">// rl.SetFixAtoms(bitvec);</span>
rl.Setup(mol);

<span class="comment">// How many rotatable bonds are there?</span>
cerr &lt;&lt; <span class="stringliteral">" Number of rotors: "</span> &lt;&lt; rl.Size() &lt;&lt; endl;

<span class="comment">// indexed from 1, rotorKey[0] = 0</span>
std::vector&lt;int&gt; rotorKey(rl.Size() + 1, 0);

<span class="comment">// each entry represents the configuration of a rotor</span>
<span class="comment">// e.g. indexes into OBRotor::GetResolution() -- the different angles</span>
<span class="comment">//   to sample for a rotamer search</span>
<span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; rl.Size() + 1; ++i)
  rotorKey[i] = 0; <span class="comment">// could be anything from 0 .. OBRotor-&gt;GetResolution().size()</span>

<span class="comment">// The OBRotamerList can generate conformations (i.e., coordinate sets)</span>
<a class="code" href="classOpenBabel_1_1OBRotamerList.shtml#a1cef5a8affd0b0f75891495f1674805">OBRotamerList</a> rotamers;
rotamers.SetBaseCoordinateSets(mol);
rotamers.Setup(mol, rl);

rotamers.AddRotamer(rotorKey);
rotorKey[1] = 2; <span class="comment">// switch one rotor</span>
rotamers.AddRotamer(rotorKey);

rotamers.ExpandConformerList(mol, mol.GetConformers());

<span class="comment">// change the molecule conformation</span>
mol.SetConformer(0); <span class="comment">// rotorKey 0, 0, ...</span>
conv.Write(&amp;mol);

mol.SetConformer(1); <span class="comment">// rotorKey 0, 2, ...</span>
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a1cef5a8affd0b0f75891495f1674805"></a><!-- doxytag: member="OpenBabel::OBRotamerList::OBRotamerList" ref="a1cef5a8affd0b0f75891495f1674805" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml">OBRotamerList</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="193afbb27085bc1183ea8f415c99b989"></a><!-- doxytag: member="OpenBabel::OBRotamerList::~OBRotamerList" ref="193afbb27085bc1183ea8f415c99b989" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBRotamerList.shtml">OBRotamerList</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="5361d45ced4133323de80d61ae5ecf05"></a><!-- doxytag: member="OpenBabel::OBRotamerList::Clone" ref="5361d45ced4133323de80d61ae5ecf05" args="(OBBase *parent) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * Clone           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>parent</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#67bda850335747e7ac5d66629bda0a67">OBGenericData</a>.
</div>
</div><p>
<a class="anchor" name="fd34dcbc8bd8c0fba2433b39f1e1d61b"></a><!-- doxytag: member="OpenBabel::OBRotamerList::Setup" ref="fd34dcbc8bd8c0fba2433b39f1e1d61b" args="(OBMol &amp;, OBRotorList &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Setup           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a> &amp;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set up a rotamer list based on an already created <a class="el" href="classOpenBabel_1_1OBRotorList.shtml" title="Given an OBMol, set up a list of possibly rotatable torsions,.">OBRotorList</a>. 
<p>

</div>
</div><p>
<a class="anchor" name="7ecbed112a3ccc6252b88d4432b94c6e"></a><!-- doxytag: member="OpenBabel::OBRotamerList::Setup" ref="7ecbed112a3ccc6252b88d4432b94c6e" args="(OBMol &amp;mol, unsigned char *ref, int nrotors)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Setup           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&nbsp;</td>
          <td class="paramname"> <em>ref</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>nrotors</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set up a rotamer list based on the supplied reference atoms and the number of rotors <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>mol</em>&nbsp;</td><td>The molecule to evaluate </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ref</em>&nbsp;</td><td>An array of the 4 dihedral atoms for each rotor </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nrotors</em>&nbsp;</td><td>The number of rotors (i.e., the size of ref / 4) </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="cec7eb06ebdea2ad5380429c895fbff3"></a><!-- doxytag: member="OpenBabel::OBRotamerList::NumRotors" ref="cec7eb06ebdea2ad5380429c895fbff3" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumRotors           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of rotatable bonds considered </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="dd4e6ba7b3a1dbd14607e23096de4212"></a><!-- doxytag: member="OpenBabel::OBRotamerList::NumRotamers" ref="dd4e6ba7b3a1dbd14607e23096de4212" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumRotamers           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of rotamer (conformation) coordinate sets </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="731bb8e81cfd2699e1bfeb0c24fc7d2b"></a><!-- doxytag: member="OpenBabel::OBRotamerList::AddRotamer" ref="731bb8e81cfd2699e1bfeb0c24fc7d2b" args="(double *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddRotamer           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add a rotamer to the list based on the supplied coordinate set as a double*. 
<p>

</div>
</div><p>
<a class="anchor" name="1abcce8335b5b98eb2ef691138e864eb"></a><!-- doxytag: member="OpenBabel::OBRotamerList::AddRotamer" ref="1abcce8335b5b98eb2ef691138e864eb" args="(int *key)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddRotamer           </td>
          <td>(</td>
          <td class="paramtype">int *&nbsp;</td>
          <td class="paramname"> <em>key</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add a rotamer to the list based on <code>key</code> as a configuration of the individual rotor bonds. 
<p>

</div>
</div><p>
<a class="anchor" name="b12cefb04ee9382126d785c965b99454"></a><!-- doxytag: member="OpenBabel::OBRotamerList::AddRotamer" ref="b12cefb04ee9382126d785c965b99454" args="(std::vector&lt; int &gt; key)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddRotamer           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt;&nbsp;</td>
          <td class="paramname"> <em>key</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add a rotamer to the list based on <code>key</code> as a configuration of the individual rotor bonds. 
<p>

</div>
</div><p>
<a class="anchor" name="2244fa5b56d6a839a32de2fd11156472"></a><!-- doxytag: member="OpenBabel::OBRotamerList::AddRotamer" ref="2244fa5b56d6a839a32de2fd11156472" args="(unsigned char *key)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddRotamer           </td>
          <td>(</td>
          <td class="paramtype">unsigned char *&nbsp;</td>
          <td class="paramname"> <em>key</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add a rotamer to the list based on <code>key</code> as a configuration of the individual rotor bonds. 
<p>

</div>
</div><p>
<a class="anchor" name="6f752b5a14fe102c0c274166e40f8eb4"></a><!-- doxytag: member="OpenBabel::OBRotamerList::AddRotamers" ref="6f752b5a14fe102c0c274166e40f8eb4" args="(unsigned char *arr, int nconf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddRotamers           </td>
          <td>(</td>
          <td class="paramtype">unsigned char *&nbsp;</td>
          <td class="paramname"> <em>arr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>nconf</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add <code>nconf</code> rotamers based on <code>as</code> an array of configurations much like <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#731bb8e81cfd2699e1bfeb0c24fc7d2b" title="Add a rotamer to the list based on the supplied coordinate set as a double*.">AddRotamer()</a>. 
<p>

</div>
</div><p>
<a class="anchor" name="f5e36f37fe489ad4ad34605ddb34ecc1"></a><!-- doxytag: member="OpenBabel::OBRotamerList::GetReferenceArray" ref="f5e36f37fe489ad4ad34605ddb34ecc1" args="(unsigned char *) const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetReferenceArray           </td>
          <td>(</td>
          <td class="paramtype">unsigned char *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A reference array (as used by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#731bb8e81cfd2699e1bfeb0c24fc7d2b" title="Add a rotamer to the list based on the supplied coordinate set as a double*.">AddRotamer()</a> as a configuration of the individual rotor bonds </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="2948e1a74f2c22c575d6ddc6643f6ef1"></a><!-- doxytag: member="OpenBabel::OBRotamerList::BeginRotamer" ref="2948e1a74f2c22c575d6ddc6643f6ef1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;unsigned char*&gt;::iterator BeginRotamer           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="589d2df01c6f3e1cb1bf95b25e804409"></a><!-- doxytag: member="OpenBabel::OBRotamerList::EndRotamer" ref="589d2df01c6f3e1cb1bf95b25e804409" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;unsigned char*&gt;::iterator EndRotamer           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="3f0fbaf701b38d36aaa0a225de04841d"></a><!-- doxytag: member="OpenBabel::OBRotamerList::CreateConformerList" ref="3f0fbaf701b38d36aaa0a225de04841d" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; double * &gt; CreateConformerList           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create a conformer list using the internal base set of coordinates. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The set of coordinates by rotating the bonds in each rotamer </dd></dl>

</div>
</div><p>
<a class="anchor" name="47d8b31fb5ca455ff3586b86e44acdfc"></a><!-- doxytag: member="OpenBabel::OBRotamerList::ExpandConformerList" ref="47d8b31fb5ca455ff3586b86e44acdfc" args="(OBMol &amp;mol, std::vector&lt; double * &gt; &amp;confs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ExpandConformerList           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double * &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>confs</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create a conformer list using the internal base set of coordinates. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The set of coordinates as a reference in <code>confs</code> </dd></dl>

</div>
</div><p>
<a class="anchor" name="91c3efe37db1542a2f553440143915f9"></a><!-- doxytag: member="OpenBabel::OBRotamerList::SetBaseCoordinateSets" ref="91c3efe37db1542a2f553440143915f9" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBaseCoordinateSets           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copies the mol's conformers (the coordinates, NOT the pointers) into the object as base coordinates. 
<p>

</div>
</div><p>
<a class="anchor" name="a06b0ac4b05d9a708e38da81868e9586"></a><!-- doxytag: member="OpenBabel::OBRotamerList::SetBaseCoordinateSets" ref="a06b0ac4b05d9a708e38da81868e9586" args="(std::vector&lt; double * &gt; bc, unsigned int N)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBaseCoordinateSets           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double * &gt;&nbsp;</td>
          <td class="paramname"> <em>bc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>N</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copies the coordinates in bc, NOT the pointers, into this object. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>bc</em>&nbsp;</td><td>The conformer set for the molecule </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>N</em>&nbsp;</td><td>The number of atoms in the molecule </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="dc7ea5c9356d1597bec2d328bcdc3b07"></a><!-- doxytag: member="OpenBabel::OBRotamerList::NumBaseCoordinateSets" ref="dc7ea5c9356d1597bec2d328bcdc3b07" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumBaseCoordinateSets           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The number of "base" coordinate sets (i.e., the number of conformers in the base <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="dbaf9eeafb825763acadfc785220412a"></a><!-- doxytag: member="OpenBabel::OBRotamerList::GetBaseCoordinateSet" ref="dbaf9eeafb825763acadfc785220412a" args="(unsigned int i) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* GetBaseCoordinateSet           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get a pointer to a specific base pointer (i.e., specific conformer). 
<p>

</div>
</div><p>
<a class="anchor" name="2f0695eb7d6ff6321032d88655ae8d25"></a><!-- doxytag: member="OpenBabel::OBRotamerList::NumAtoms" ref="2f0695eb7d6ff6321032d88655ae8d25" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumAtoms           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The number of atoms in the base <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="ae3d15983201a2a115701b2c538fef77"></a><!-- doxytag: member="OpenBabel::OBRotamerList::SetAttribute" ref="ae3d15983201a2a115701b2c538fef77" args="(const std::string &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAttribute           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the attribute (key), which can be used to retrieve this data. 
<p>

</div>
</div><p>
<a class="anchor" name="45613e34598a9584fb0120ef3fdab9e0"></a><!-- doxytag: member="OpenBabel::OBRotamerList::SetOrigin" ref="45613e34598a9584fb0120ef3fdab9e0" args="(const DataOrigin s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetOrigin           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the origin of this data, which can be used to filter the data. 
<p>

</div>
</div><p>
<a class="anchor" name="c61fc66ef692e79290d6eaf7231db92c"></a><!-- doxytag: member="OpenBabel::OBRotamerList::GetAttribute" ref="c61fc66ef692e79290d6eaf7231db92c" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetAttribute           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The attribute (key), which can be used to retrieve this data </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="91834e24b299c63cdf2cb77795298446"></a><!-- doxytag: member="OpenBabel::OBRotamerList::GetDataType" ref="91834e24b299c63cdf2cb77795298446" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetDataType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the data type for this object as defined in <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="6145f0df06364b6d58c728368db8f992"></a><!-- doxytag: member="OpenBabel::OBRotamerList::GetValue" ref="6145f0df06364b6d58c728368db8f992" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetValue           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Base class returns a default value (the attribute type) but should never be called. 
<p>

<p>
Reimplemented in <a class="el" href="classOpenBabel_1_1OBCommentData.shtml#6145f0df06364b6d58c728368db8f992">OBCommentData</a>, <a class="el" href="classOpenBabel_1_1OBPairData.shtml#6145f0df06364b6d58c728368db8f992">OBPairData</a>, and <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml#5296b18feccede12ba2dd8fb80c6ef66">OBPairTemplate</a>.
</div>
</div><p>
<a class="anchor" name="df131b210114ba636246ffc8dcb2ea13"></a><!-- doxytag: member="OpenBabel::OBRotamerList::GetOrigin" ref="df131b210114ba636246ffc8dcb2ea13" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> GetOrigin           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="dceb77134f15418a66cf1124dcef1b51"></a><!-- doxytag: member="OpenBabel::OBRotamerList::_attr" ref="dceb77134f15418a66cf1124dcef1b51" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#dceb77134f15418a66cf1124dcef1b51">_attr</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
attribute tag (e.g., "UnitCell", "Comment" or "Author") 
<p>

</div>
</div><p>
<a class="anchor" name="31291823d487a4a47f24aae5870505ef"></a><!-- doxytag: member="OpenBabel::OBRotamerList::_type" ref="31291823d487a4a47f24aae5870505ef" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#31291823d487a4a47f24aae5870505ef">_type</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
attribute type -- declared for each subclass 
<p>

</div>
</div><p>
<a class="anchor" name="239606b62a534e4df7626ea0cfdfb856"></a><!-- doxytag: member="OpenBabel::OBRotamerList::_source" ref="239606b62a534e4df7626ea0cfdfb856" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#239606b62a534e4df7626ea0cfdfb856">_source</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
source of data for accounting 
<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="rotamer_8h-source.shtml">rotamer.h</a><li><a class="el" href="rotamer_8cpp.shtml">rotamer.cpp</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:18 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
