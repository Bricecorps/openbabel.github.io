<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: oberror.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>oberror.h</h1><a href="oberror_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">oberror.h - Handle error messages, warnings, notices, etc.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2002 by Stefan Kebekus</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2003-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful, but</span>
<a name="l00015"></a>00015 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00017"></a>00017 <span class="comment">General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_ERROR_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_ERROR_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;iosfwd&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;deque&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#ifndef OBERROR</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#define OBERROR</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="keyword">namespace </span>OpenBabel
<a name="l00036"></a>00036 {
<a name="l00037"></a>00037 
<a name="l00039"></a><a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">00039</a>   <span class="keyword">enum</span> <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9" title="Levels of error and audit messages to allow filtering.">obMessageLevel</a> {
<a name="l00040"></a><a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fbf66ee4ae8ad04bc5003a16aa9b2b77">00040</a>     <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fbf66ee4ae8ad04bc5003a16aa9b2b77" title="for critical errors (e.g., cannot read a file)">obError</a>,     
<a name="l00041"></a><a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9600e966aac7d34fec05f2067eb6b989b">00041</a>     <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9600e966aac7d34fec05f2067eb6b989b" title="for non-critical problems (e.g., molecule appears empty)">obWarning</a>,   
<a name="l00042"></a><a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d98239e6e8daa5c812be192e6447979814">00042</a>     <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d98239e6e8daa5c812be192e6447979814" title="for informative messages (e.g., file is a non-standard format)">obInfo</a>,      
<a name="l00043"></a><a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fca370a4ce993c0a266c7d120c3a6310">00043</a>     <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fca370a4ce993c0a266c7d120c3a6310" title="for messages auditing methods which destroy or perceive molecular data (e.g., kekulization...">obAuditMsg</a>,  
<a name="l00044"></a><a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce">00044</a>     <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce" title="for messages only useful for debugging purposes">obDebug</a>      
<a name="l00045"></a>00045   };
<a name="l00046"></a>00046 
<a name="l00050"></a><a class="code" href="classOpenBabel_1_1OBError.shtml">00050</a>   <span class="keyword">class </span>OBERROR OBError
<a name="l00051"></a>00051     {
<a name="l00052"></a>00052     <span class="keyword">public</span>:
<a name="l00053"></a>00053 
<a name="l00055"></a>00055       OBError( <span class="keyword">const</span> std::string &amp;method = <span class="stringliteral">""</span>,
<a name="l00056"></a>00056                <span class="keyword">const</span> std::string &amp;errorMsg = <span class="stringliteral">""</span>,
<a name="l00057"></a>00057                <span class="keyword">const</span> std::string &amp;explanation = <span class="stringliteral">""</span>,
<a name="l00058"></a>00058                <span class="keyword">const</span> std::string &amp;possibleCause = <span class="stringliteral">""</span>,
<a name="l00059"></a>00059                <span class="keyword">const</span> std::string &amp;suggestedRemedy = <span class="stringliteral">""</span>,
<a name="l00060"></a>00060                <span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9" title="Levels of error and audit messages to allow filtering.">obMessageLevel</a> = <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce" title="for messages only useful for debugging purposes">obDebug</a> );
<a name="l00061"></a>00061 
<a name="l00063"></a>00063       std::string message(<span class="keywordtype">void</span>) <span class="keyword">const</span>;
<a name="l00064"></a>00064   
<a name="l00066"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#79f2d96335566944848c00c7749286f6">00066</a>       <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#70c653ee69fdbd27f77d430e4aed3cad" title="Prints a representation of the vector as a row vector of the form "<0.1,1,2>".">operator&lt;&lt; </a>( std::ostream &amp;os, <span class="keyword">const</span> OBError &amp;er )
<a name="l00067"></a>00067         { <span class="keywordflow">return</span> os &lt;&lt; er.<a class="code" href="classOpenBabel_1_1OBError.shtml#58895ce0cba9231c40070623841e2cf6" title="A formatted message string, including optional explanations, etc.">message</a>(); };
<a name="l00068"></a>00068 
<a name="l00071"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#6085d518407579eea6641c87b0900859">00071</a>       std::string    GetMethod()            { <span class="keywordflow">return</span> _method;          }
<a name="l00073"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#719d28a406124c91803d87f2a76c103a">00073</a>       std::string    GetError()             { <span class="keywordflow">return</span> _errorMsg;        }
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#ab978f99214edd5de5fb4aa62570b091">00075</a>       std::string    GetExplanation()       { <span class="keywordflow">return</span> _explanation;     }
<a name="l00077"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#eb5472e04a3f6fc0a25db86f9b02b771">00077</a>       std::string    GetPossibleCause()     { <span class="keywordflow">return</span> _possibleCause;   }
<a name="l00079"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#b604c6ca5ac69c2f5a9a92a309511b08">00079</a>       std::string    GetSuggestedRemedy()   { <span class="keywordflow">return</span> _suggestedRemedy; }
<a name="l00081"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#b56da33bae8e73b05c21b6fa91a6f465">00081</a>       <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9" title="Levels of error and audit messages to allow filtering.">obMessageLevel</a> GetLevel()             { <span class="keywordflow">return</span> _level;           }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="keyword">protected</span>:
<a name="l00084"></a>00084 
<a name="l00086"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#b76b110ce78dbf832f2be94de64d4393">00086</a>       std::string _method;
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#e555e3ad2f9ba1a05c02c8e728da3e6f">00088</a>       std::string _errorMsg;
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#51f6cb8ac4c800345ad82cf63df0f9cb">00090</a>       std::string _explanation;
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#89443235c00d3d81208c0e339adbf6a7">00092</a>       std::string _possibleCause;
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#a04ab009d8cdab368735f2bdf66f8a73">00094</a>       std::string _suggestedRemedy;
<a name="l00095"></a>00095 
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#20898b53aeee396c51fb24d5fad05df0">00097</a>       <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9" title="Levels of error and audit messages to allow filtering.">obMessageLevel</a> _level;
<a name="l00098"></a>00098     };
<a name="l00099"></a>00099 
<a name="l00101"></a>00101   <span class="comment">// More documentation in oberror.cpp</span>
<a name="l00102"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml">00102</a>   <span class="keyword">class </span>OBERROR OBMessageHandler
<a name="l00103"></a>00103     {
<a name="l00104"></a>00104     <span class="keyword">protected</span>:
<a name="l00106"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#5812cd4eb01367908022f9ef86e49ec6">00106</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           _messageCount[5];
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     <span class="keyword">public</span>:
<a name="l00109"></a>00109       OBMessageHandler();
<a name="l00110"></a>00110       ~OBMessageHandler();
<a name="l00111"></a>00111     
<a name="l00113"></a>00113       <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#fb61c494dc21ce21a7cbd165f7616dc2">ThrowError</a>(OBError err);
<a name="l00115"></a>00115       <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#fb61c494dc21ce21a7cbd165f7616dc2">ThrowError</a>(<span class="keyword">const</span> std::string &amp;method, <span class="keyword">const</span> std::string &amp;errorMsg, 
<a name="l00116"></a>00116                       <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9" title="Levels of error and audit messages to allow filtering.">obMessageLevel</a> level = <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce" title="for messages only useful for debugging purposes">obDebug</a>);
<a name="l00117"></a>00117 
<a name="l00119"></a>00119       std::vector&lt;std::string&gt; GetMessagesOfLevel(<span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9" title="Levels of error and audit messages to allow filtering.">obMessageLevel</a>);
<a name="l00120"></a>00120 
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#2ddeff91a6a4f113be67243d32aae4f0">00122</a>       <span class="keywordtype">void</span> StartLogging() { _logging = <span class="keyword">true</span>; }
<a name="l00124"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#08d309e66bc4091df861de396b6dd4a4">00124</a>       <span class="keywordtype">void</span> StopLogging()  { _logging = <span class="keyword">false</span>; }
<a name="l00125"></a>00125 
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#77f52cdbd233a78a86a17fdbc5b1aeba">00127</a>       <span class="keywordtype">void</span> SetMaxLogEntries(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max) { _maxEntries = max; }
<a name="l00129"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#d5cc775d9bcbe374ba8e3a7706441187">00129</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetMaxLogEntries() { <span class="keywordflow">return</span> _maxEntries; }
<a name="l00130"></a>00130 
<a name="l00132"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#f69ea3bc45568000475c11f584bd6506">00132</a>       <span class="keywordtype">void</span> ClearLog() { _messageList.clear(); }
<a name="l00133"></a>00133 
<a name="l00136"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#e467fbd6fca625ae5ee0ea066810280f">00136</a>       <span class="keywordtype">void</span> SetOutputLevel(<span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9" title="Levels of error and audit messages to allow filtering.">obMessageLevel</a> level) { _outputLevel = level; }
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#3e6a1f72967b7b5e99d6a25cdde2fe34">00138</a>       <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9" title="Levels of error and audit messages to allow filtering.">obMessageLevel</a> GetOutputLevel() { <span class="keywordflow">return</span> _outputLevel; }
<a name="l00139"></a>00139 
<a name="l00140"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#8d5a7033d340808ae4eb4602a6f638de">00140</a>       <span class="keywordtype">void</span> SetOutputStream(std::ostream *os) { _outputStream = os; }
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#fa3e05fe5fa00cc48db4a2b5b5f3ba95">00141</a>       std::ostream* GetOutputStream() { <span class="keywordflow">return</span> _outputStream; }
<a name="l00142"></a>00142 
<a name="l00144"></a>00144       <span class="keywordtype">bool</span> StartErrorWrap();
<a name="l00146"></a>00146       <span class="keywordtype">bool</span> StopErrorWrap();
<a name="l00147"></a>00147 
<a name="l00149"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#43dbb5cf7a6a8e51944720b532ebf0a3">00149</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetErrorMessageCount() { <span class="keywordflow">return</span> _messageCount[<a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fbf66ee4ae8ad04bc5003a16aa9b2b77" title="for critical errors (e.g., cannot read a file)">obError</a>];}
<a name="l00151"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#d8c74030fe5436581bebd5c42af17bc5">00151</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetWarningMessageCount() { <span class="keywordflow">return</span> _messageCount[<a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9600e966aac7d34fec05f2067eb6b989b" title="for non-critical problems (e.g., molecule appears empty)">obWarning</a>];}
<a name="l00153"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#00c4e7133ee9e7290c0002445789c1c6">00153</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetInfoMessageCount() { <span class="keywordflow">return</span> _messageCount[<a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d98239e6e8daa5c812be192e6447979814" title="for informative messages (e.g., file is a non-standard format)">obInfo</a>];}
<a name="l00155"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#48866a67a47b80b0d0c6adf5267e72eb">00155</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetAuditMessageCount() { <span class="keywordflow">return</span> _messageCount[<a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fca370a4ce993c0a266c7d120c3a6310" title="for messages auditing methods which destroy or perceive molecular data (e.g., kekulization...">obAuditMsg</a>];}
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#673ec0e1a1c14ca7117e07a90efcd8ee">00157</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetDebugMessageCount() { <span class="keywordflow">return</span> _messageCount[<a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce" title="for messages only useful for debugging purposes">obDebug</a>];}
<a name="l00159"></a>00159       std::string GetMessageSummary();
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     <span class="keyword">protected</span>:
<a name="l00163"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#08ea2212aebb85ea22895ec49bd81f85">00163</a>       std::deque&lt;OBError&gt;    _messageList;
<a name="l00164"></a>00164 
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#bddad1d062682a33800f8d048a1e35f6">00166</a>       <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9" title="Levels of error and audit messages to allow filtering.">obMessageLevel</a>         _outputLevel;
<a name="l00167"></a>00167 
<a name="l00168"></a>00168       <span class="comment">// self-explanatory</span>
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#dff5b7b50cde9f6620dc08128df860c4">00169</a>       std::ostream          *_outputStream;
<a name="l00170"></a>00170 
<a name="l00172"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#3c4c6fad78b988cdc4fc9b7ade5e788c">00172</a>       <span class="keywordtype">bool</span>                   _logging;
<a name="l00174"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#7a0d2d55c1de9a5afc3bf71abedfdddd">00174</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           _maxEntries;
<a name="l00175"></a>00175 
<a name="l00177"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#3e0837dfabcca64b1bdf2392e70b3228">00177</a>       std::streambuf        *_inWrapStreamBuf;
<a name="l00179"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#9285cdb5ae08c9a33cd6d6998cd69a26">00179</a>       std::streambuf        *_filterStreamBuf;
<a name="l00180"></a>00180     }; 
<a name="l00181"></a>00181 
<a name="l00182"></a>00182   OBERROR <span class="keyword">extern</span> OBMessageHandler <a class="code" href="namespaceOpenBabel.shtml#02dd5608cfe8883be0f788e2cd6488da" title="Global OBMessageHandler error handler.">obErrorLog</a>;
<a name="l00183"></a>00183 
<a name="l00186"></a>00186 
<a name="l00196"></a><a class="code" href="classOpenBabel_1_1obLogBuf.shtml">00196</a>   <span class="keyword">class </span>OBERROR obLogBuf : <span class="keyword">public</span> std::stringbuf
<a name="l00197"></a>00197     {
<a name="l00198"></a>00198     <span class="keyword">public</span>:
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1obLogBuf.shtml#d22e8f4b05ebff4d7292436b23c62666">00200</a>       <span class="keyword">virtual</span> ~obLogBuf() { sync(); }
<a name="l00201"></a>00201     
<a name="l00202"></a>00202     <span class="keyword">protected</span>:
<a name="l00204"></a><a class="code" href="classOpenBabel_1_1obLogBuf.shtml#553fc1343cc7a747775864d1d124a5d5">00204</a>       <span class="keywordtype">int</span> sync()
<a name="l00205"></a>00205         {
<a name="l00206"></a>00206           <a class="code" href="namespaceOpenBabel.shtml#02dd5608cfe8883be0f788e2cd6488da" title="Global OBMessageHandler error handler.">obErrorLog</a>.<a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#d49e4137a5874763ccaef154a0cdab30" title="Throw an error with an already-formatted OBError object.">ThrowError</a>(<span class="stringliteral">""</span>, str(), <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d98239e6e8daa5c812be192e6447979814" title="for informative messages (e.g., file is a non-standard format)">obInfo</a>);
<a name="l00207"></a>00207           str(std::string()); <span class="comment">// clear the buffer</span>
<a name="l00208"></a>00208           <span class="keywordflow">return</span> 0;
<a name="l00209"></a>00209         }
<a name="l00210"></a>00210     };
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 <span class="preprocessor">#endif</span>
<a name="l00215"></a>00215 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:06 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
