<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBMoleculeFormat Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul>
</div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml">OBMoleculeFormat</a></div>
<h1>OBMoleculeFormat Class Reference</h1><!-- doxytag: class="OpenBabel::OBMoleculeFormat" --><!-- doxytag: inherits="OpenBabel::OBFormat" -->An <a class="el" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a> convenience subclass for conversion to/from <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> data.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="obmolecformat_8h-source.shtml">openbabel/obmolecformat.h</a>&gt;</code>
<p>
Inheritance diagram for OBMoleculeFormat:<p><center><img src="classOpenBabel_1_1OBMoleculeFormat__inherit__graph.png" border="0" usemap="#OBMoleculeFormat__inherit__map" alt="Inheritance graph"></center>
<map name="OBMoleculeFormat__inherit__map">
<area shape="rect" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats." alt="" coords="34,7,120,34"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center><a href="classOpenBabel_1_1OBMoleculeFormat-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef std::map&lt; std::string,<br>
 unsigned &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#da7e9e6b9a0767b268cc282a91ff4185">NameIndexType</a></td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#73a3969d77031276422cbeb5901ea05a">OBMoleculeFormat</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#9acd362b27e30c19a2c870ca71592723">ReadChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#39c2aaf250dde6e85d05ff9357d8b003">WriteChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const std::type_info &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#54e576034bd51c66256aa6a98f81d644">GetType</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1e309febfaef70cc3c8d98afc1540931">ReadMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#663171ec9788e2d1621d374848b3888b">WriteMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#b87525f269e7819d8462f450d30d56a7">Description</a> ()=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1870e0d80a223ef4e1661be80029dbec">TargetClassDescription</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1d3a8785a0ad0c85b98fa3406a64d50f">SpecificationURL</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#0e10219d8aedefa78ef16fc7fded85ec">GetMIMEType</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#94a94537cc5ba96b1876db1b612b91a3">Flags</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1f0ee7ba19cc62b53a7ee06fa4f91509">SkipObjects</a> (int, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#0924b1a442d147fa036bff23a4cf04ef">MakeNewInstance</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#4273e4d8b5279f4d5a5015e369b85bbe">ReadChemObjectImpl</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#1f7b3f1711e8742722dda80539ee7a26">WriteChemObjectImpl</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#63c961472dda3d4a42002f79779cddc2">ReadNameIndex</a> (<a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#da7e9e6b9a0767b268cc282a91ff4185">NameIndexType</a> &amp;index, const std::string &amp;datafilename, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pInFormat)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Routines to handle the -C option for combining data from several OBMols</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#f1daeb7a6df43ecc85b30609d4d1a1eb">DeferMolOutput</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pF)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#44783fb18af054ead6aa1bf8b40d488f">OutputDeferredMols</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ab6717630b2cf9a802bd34741dc21d17">DeleteDeferredMols</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#e054dd6691ce4b4a9cef0b4d2601468d">MakeCombinedMolecule</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pFirst, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pSecond)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
An <a class="el" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a> convenience subclass for conversion to/from <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> data. 
<p>
This class is not intended for direct use outside of Open Babel, unless you're writing a new format converting to or from an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> molecule. (e.g., see <a href="http://openbabel.sourceforge.net/wiki/HowTo:Add_A_New_File_Format">http://openbabel.sourceforge.net/wiki/HowTo:Add_A_New_File_Format</a>).<p>
An <a class="el" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a> which converts to and/or from <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> can derive from this class to save duplicating the <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#9acd362b27e30c19a2c870ca71592723" title="The "Convert" interface for reading a new molecule.">ReadChemObject()</a> and/or <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#39c2aaf250dde6e85d05ff9357d8b003" title="The "Convert" interface for writing a new molecule.">WriteChemObject()</a> methods. Derive directly from <a class="el" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a> if the object converted is not <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> or if interaction with the framework is required during the execution of <a class="el" href="classOpenBabel_1_1OBFormat.shtml#1e309febfaef70cc3c8d98afc1540931" title="The "API" interface Read function.">ReadMolecule()</a> or <a class="el" href="classOpenBabel_1_1OBFormat.shtml#663171ec9788e2d1621d374848b3888b" title="The "API" interface Write function.">WriteMolecule()</a>, as for example in CMLFormat 
<p>
<hr><h2>Member Typedef Documentation</h2>
<a class="anchor" name="da7e9e6b9a0767b268cc282a91ff4185"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::NameIndexType" ref="da7e9e6b9a0767b268cc282a91ff4185" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;std::string, unsigned&gt; <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#da7e9e6b9a0767b268cc282a91ff4185">NameIndexType</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="73a3969d77031276422cbeb5901ea05a"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::OBMoleculeFormat" ref="73a3969d77031276422cbeb5901ea05a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml">OBMoleculeFormat</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="4273e4d8b5279f4d5a5015e369b85bbe"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::ReadChemObjectImpl" ref="4273e4d8b5279f4d5a5015e369b85bbe" args="(OBConversion *pConv, OBFormat *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool ReadChemObjectImpl           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"> <em>pConv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Static routine, which can be called from elsewhere. 
<p>

</div>
</div><p>
<a class="anchor" name="1f7b3f1711e8742722dda80539ee7a26"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::WriteChemObjectImpl" ref="1f7b3f1711e8742722dda80539ee7a26" args="(OBConversion *pConv, OBFormat *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool WriteChemObjectImpl           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"> <em>pConv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Static routine, which can be called from elsewhere. 
<p>

</div>
</div><p>
<a class="anchor" name="9acd362b27e30c19a2c870ca71592723"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::ReadChemObject" ref="9acd362b27e30c19a2c870ca71592723" args="(OBConversion *pConv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadChemObject           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"> <em>pConv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "Convert" interface for reading a new molecule. 
<p>

<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#6044ced825a2a83b7cfe7c45eea63c99">OBFormat</a>.
</div>
</div><p>
<a class="anchor" name="39c2aaf250dde6e85d05ff9357d8b003"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::WriteChemObject" ref="39c2aaf250dde6e85d05ff9357d8b003" args="(OBConversion *pConv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteChemObject           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"> <em>pConv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "Convert" interface for writing a new molecule. 
<p>

<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#5ea5d9623cd9594549a52e116caecaa2">OBFormat</a>.
</div>
</div><p>
<a class="anchor" name="f1daeb7a6df43ecc85b30609d4d1a1eb"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::DeferMolOutput" ref="f1daeb7a6df43ecc85b30609d4d1a1eb" args="(OBMol *pmol, OBConversion *pConv, OBFormat *pF)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool DeferMolOutput           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&nbsp;</td>
          <td class="paramname"> <em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"> <em>pConv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td>
          <td class="paramname"> <em>pF</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Defer output of a molecule until later, so it can be combined with others <dl class="return" compact><dt><b>Returns:</b></dt><dd>Success, or false if no molecule was read. </dd></dl>

</div>
</div><p>
<a class="anchor" name="44783fb18af054ead6aa1bf8b40d488f"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::OutputDeferredMols" ref="44783fb18af054ead6aa1bf8b40d488f" args="(OBConversion *pConv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OutputDeferredMols           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"> <em>pConv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Write out all molecules queued with DeferMolOutput. 
<p>

</div>
</div><p>
<a class="anchor" name="ab6717630b2cf9a802bd34741dc21d17"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::DeleteDeferredMols" ref="ab6717630b2cf9a802bd34741dc21d17" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool DeleteDeferredMols           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Delete the list of queued molecules from DeferMolOutput. 
<p>

</div>
</div><p>
<a class="anchor" name="e054dd6691ce4b4a9cef0b4d2601468d"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::MakeCombinedMolecule" ref="e054dd6691ce4b4a9cef0b4d2601468d" args="(OBMol *pFirst, OBMol *pSecond)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* MakeCombinedMolecule           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&nbsp;</td>
          <td class="paramname"> <em>pFirst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&nbsp;</td>
          <td class="paramname"> <em>pSecond</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> which combines <code>pFirst</code> and <code>pSecond</code> (i.e.) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="63c961472dda3d4a42002f79779cddc2"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::ReadNameIndex" ref="63c961472dda3d4a42002f79779cddc2" args="(NameIndexType &amp;index, const std::string &amp;datafilename, OBFormat *pInFormat)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool ReadNameIndex           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#da7e9e6b9a0767b268cc282a91ff4185">NameIndexType</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>datafilename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td>
          <td class="paramname"> <em>pInFormat</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="54e576034bd51c66256aa6a98f81d644"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::GetType" ref="54e576034bd51c66256aa6a98f81d644" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::type_info&amp; GetType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the type of data converted by this format (here, <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>) </dd></dl>

<p>

<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#73f632a573cbbfecf9e00f04c5ce73e9">OBFormat</a>.
</div>
</div><p>
<a class="anchor" name="1e309febfaef70cc3c8d98afc1540931"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::ReadMolecule" ref="1e309febfaef70cc3c8d98afc1540931" args="(OBBase *, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadMolecule           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "API" interface Read function. 
<p>
Reads a single object. Does not make a new object on the heap; can be used with a pointer to an chem object on the heap or the stack. 
<p>
Reimplemented in <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#5a3cd5ffc0d21fe9b95d804c44e7d146">XMLMoleculeFormat</a>.
</div>
</div><p>
<a class="anchor" name="663171ec9788e2d1621d374848b3888b"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::WriteMolecule" ref="663171ec9788e2d1621d374848b3888b" args="(OBBase *, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteMolecule           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "API" interface Write function. 
<p>
Writes a single object Does not delete the object; can be used with a pointer to an chem object on the heap or the stack. <dl class="return" compact><dt><b>Returns:</b></dt><dd>false on error. </dd></dl>

</div>
</div><p>
<a class="anchor" name="b87525f269e7819d8462f450d30d56a7"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::Description" ref="b87525f269e7819d8462f450d30d56a7" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* Description           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [pure virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Information on this format. Printed out in response to -Hxxx option where xxx id the id of the format. 
<p>
Must be provided by each format class. Can include a list of command line Options. These may be used to construction check boxes, radio buttons etc for GUI interface. 
</div>
</div><p>
<a class="anchor" name="1870e0d80a223ef4e1661be80029dbec"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::TargetClassDescription" ref="1870e0d80a223ef4e1661be80029dbec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * TargetClassDescription           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
If not provided, the object type used by the default format is used (usually <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>). 
<p>

</div>
</div><p>
<a class="anchor" name="1d3a8785a0ad0c85b98fa3406a64d50f"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::SpecificationURL" ref="1d3a8785a0ad0c85b98fa3406a64d50f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* SpecificationURL           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Web address where the format is defined. 
<p>

</div>
</div><p>
<a class="anchor" name="0e10219d8aedefa78ef16fc7fded85ec"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::GetMIMEType" ref="0e10219d8aedefa78ef16fc7fded85ec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* GetMIMEType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Chemical MIME type associated with this file type (if any). 
<p>

</div>
</div><p>
<a class="anchor" name="94a94537cc5ba96b1876db1b612b91a3"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::Flags" ref="94a94537cc5ba96b1876db1b612b91a3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int Flags           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Decribes the capabilities of the format (Read only etc.). 
<p>
Currently, can be a bitwise OR of any of the following NOTREADABLE READONEONLY NOTWRITABLE WRITEONEONLY DEFAULTFORMAT READBINARY WRITEBINARY READXML 
</div>
</div><p>
<a class="anchor" name="1f0ee7ba19cc62b53a7ee06fa4f91509"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::SkipObjects" ref="1f0ee7ba19cc62b53a7ee06fa4f91509" args="(int, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual int SkipObjects           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>1 on success, -1 on error and 0 if not implemented </dd></dl>

<p>

<p>
Reimplemented in <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#dfcd8e84805c262d8cbca79a83f9d4cc">XMLBaseFormat</a>.
</div>
</div><p>
<a class="anchor" name="0924b1a442d147fa036bff23a4cf04ef"></a><!-- doxytag: member="OpenBabel::OBMoleculeFormat::MakeNewInstance" ref="0924b1a442d147fa036bff23a4cf04ef" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* MakeNewInstance           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>a pointer to a new instance of the format, or NULL if fails. </dd></dl>

<p>
Normally a single global instance is used but this may cause problems if there are member variables and the format is used in more than one place in the program. 
</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="obmolecformat_8h-source.shtml">obmolecformat.h</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:17 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
