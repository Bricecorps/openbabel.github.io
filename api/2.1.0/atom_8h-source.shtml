<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: atom.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>atom.h</h1><a href="atom_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">atom.h - Handle OBAtom class.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span>
<a name="l00007"></a>00007 <span class="comment"> </span>
<a name="l00008"></a>00008 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00009"></a>00009 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00010"></a>00010 <span class="comment"> </span>
<a name="l00011"></a>00011 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00012"></a>00012 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00013"></a>00013 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00014"></a>00014 <span class="comment"> </span>
<a name="l00015"></a>00015 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00016"></a>00016 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00017"></a>00017 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00018"></a>00018 <span class="comment">GNU General Public License for more details.</span>
<a name="l00019"></a>00019 <span class="comment">***********************************************************************/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef OB_ATOM_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define OB_ATOM_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="residue_8h.shtml" title="Defines for residue properties, names, etc.">openbabel/residue.h</a>&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a><a class="code" href="namespaceOpenBabel.shtml">00036</a> <span class="keyword">namespace </span>OpenBabel
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 
<a name="l00039"></a>00039   <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>;
<a name="l00040"></a><a class="code" href="namespaceOpenBabel.shtml#c0863bf2485bd66ba3afa6e50ddc20f6">00040</a>   <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00041"></a>00041 
<a name="l00043"></a>00043   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBNodeBase</a>;
<a name="l00045"></a><a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d">00045</a>   <span class="keyword">typedef</span> std::vector&lt;OBBond*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a>;
<a name="l00047"></a><a class="code" href="namespaceOpenBabel.shtml#f5cc46e8aef811b24e105aca712ec7c2">00047</a>   <span class="keyword">typedef</span> std::vector&lt;OBAtom*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#f5cc46e8aef811b24e105aca712ec7c2" title="A standard iterator over a vector of atoms.">OBAtomIterator</a>;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049   <span class="comment">//ATOM Property Macros (flags)</span>
<a name="l00051"></a><a class="code" href="atom_8h.shtml#7049a943ce03181c7004fe9ecd798f40">00051</a> <span class="comment"></span><span class="preprocessor">#define OB_4RING_ATOM     (1&lt;&lt;1)</span>
<a name="l00053"></a><a class="code" href="atom_8h.shtml#54cf51e4021ce031b9a9bd20e053cead">00053</a> <span class="preprocessor">#define OB_3RING_ATOM     (1&lt;&lt;2)</span>
<a name="l00055"></a><a class="code" href="atom_8h.shtml#c08352e8abee93573a66f692f0827bd3">00055</a> <span class="preprocessor">#define OB_AROMATIC_ATOM  (1&lt;&lt;3)</span>
<a name="l00057"></a><a class="code" href="atom_8h.shtml#5f2ffc18f5cc3589dd1978252169f11e">00057</a> <span class="preprocessor">#define OB_RING_ATOM      (1&lt;&lt;4)</span>
<a name="l00059"></a><a class="code" href="atom_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43">00059</a> <span class="preprocessor">#define OB_CSTEREO_ATOM   (1&lt;&lt;5)</span>
<a name="l00061"></a><a class="code" href="atom_8h.shtml#7a0c4ca8c736e743fda131e25de50a26">00061</a> <span class="preprocessor">#define OB_ACSTEREO_ATOM  (1&lt;&lt;6)</span>
<a name="l00063"></a><a class="code" href="atom_8h.shtml#cb984613554c9199387e3039b6cf4e8c">00063</a> <span class="preprocessor">#define OB_DONOR_ATOM     (1&lt;&lt;7)</span>
<a name="l00065"></a><a class="code" href="atom_8h.shtml#86c329377a02eb7b0d5e015a6d0b1099">00065</a> <span class="preprocessor">#define OB_ACCEPTOR_ATOM  (1&lt;&lt;8)</span>
<a name="l00067"></a><a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d">00067</a> <span class="preprocessor">#define OB_CHIRAL_ATOM    (1&lt;&lt;9)</span>
<a name="l00069"></a><a class="code" href="atom_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5">00069</a> <span class="preprocessor">#define OB_POS_CHIRAL_ATOM (1&lt;&lt;10)</span>
<a name="l00071"></a><a class="code" href="atom_8h.shtml#28504d751913b6affc112690765c1ea6">00071</a> <span class="preprocessor">#define OB_NEG_CHIRAL_ATOM (1&lt;&lt;11)</span>
<a name="l00073"></a><a class="code" href="atom_8h.shtml#ad40730c29a0be944d55f5b3e3f98ac9">00073</a> <span class="preprocessor">#define OB_ATOM_HAS_NO_H   (1&lt;&lt;12)</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span>  <span class="comment">// 13-16 currently unused</span>
<a name="l00075"></a>00075 
<a name="l00076"></a>00076   <span class="comment">// Class OBAtom</span>
<a name="l00077"></a>00077   <span class="comment">// class introduction in atom.cpp</span>
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml">00078</a>  <span class="keyword">class </span>OBAPI OBAtom: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>
<a name="l00079"></a>00079     {
<a name="l00080"></a>00080     <span class="keyword">protected</span>:
<a name="l00081"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#28c35937d84aeb0e06ba2705d6cc65fd">00081</a>       <span class="keywordtype">char</span>                          _ele;       
<a name="l00082"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b3e028e65ae7c0dac55997f2cb7281ce">00082</a>       <span class="keywordtype">char</span>                          _impval;    
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e34265581460024d37fb0ff25d97f110">00083</a>       <span class="keywordtype">char</span>                          _type[6];   
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6e636025c5db07bf67523b31a55f6327">00084</a>       <span class="keywordtype">short</span>                         _fcharge;   
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d60f474b9381f875e4b6e3f5df457c9a">00085</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _isotope;   
<a name="l00086"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ec3b74d938a5e47bc6a6627f64d86e27">00086</a>       <span class="keywordtype">short</span>                         _spinmultiplicity;
<a name="l00087"></a>00087 
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1219a011a5e0ec59c67a5a873d81986c">00088</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _idx;       
<a name="l00089"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a15238ffbdb1330727678c9d6553d6ba">00089</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>                        *_parent;    
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3c7208419c7703e947e9a1c365838b98">00090</a>       std::vector&lt;OBBond*&gt;          _vbond;     
<a name="l00091"></a>00091 
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ef178db02607fe00f112bd1a7f5f4d2b">00092</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _cidx;      
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5d400386667c899017669303bdec09cd">00093</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _hyb;       
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5cc9f88f4cc5fda10e7932cd59a87f16">00094</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _flags;     
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e4b9cf0b2f94fc6befff220367fccd0a">00095</a>       <span class="keywordtype">double</span>                        _pcharge;   
<a name="l00096"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#91a32f6c060e12e4d188974db5b111d3">00096</a>       <span class="keywordtype">double</span>                      **_c;         
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e8dcade9402fad862f0391488350ea3e">00097</a>       <span class="keyword">mutable</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>               _v;         
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#c26545dc3d68694f0a7b6f4a776f7a17">00098</a>       <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>                    *_residue;   
<a name="l00099"></a>00099 
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#cc0aec564b42e181709de3699656f5b1">00101</a>       <span class="keywordtype">int</span>  GetFlag()<span class="keyword"> const    </span>{  <span class="keywordflow">return</span>(_flags);  }
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#dcdab8f96dc4fdc2940749e527087245">00103</a>       <span class="keywordtype">void</span> SetFlag(<span class="keywordtype">int</span> flag)  { _flags |= flag;   }
<a name="l00105"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3a1dc0419a66d2e7288214342de43b7a">00105</a>       <span class="keywordtype">bool</span> HasFlag(<span class="keywordtype">int</span> flag)  {  <span class="keywordflow">return</span>((_flags &amp; flag) ? <span class="keyword">true</span> : <span class="keyword">false</span>); }
<a name="l00106"></a>00106 
<a name="l00107"></a>00107     <span class="keyword">public</span>:
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6368d7673f23186649b2969ade3661d7">00109</a>       <span class="keywordtype">bool</span> Visit;
<a name="l00110"></a>00110 
<a name="l00112"></a>00112       OBAtom();
<a name="l00114"></a>00114       <span class="keyword">virtual</span> ~OBAtom();
<a name="l00116"></a>00116       OBAtom &amp;operator = (OBAtom &amp;);
<a name="l00119"></a>00119       <span class="keywordtype">bool</span> Clear();
<a name="l00120"></a>00120 
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 
<a name="l00124"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b994a975e39f5c62288f4f972b6f90c9">00124</a>       <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)    { _idx = idx; _cidx = (idx-1)*3; }
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9ca5228f1b568f7076cd930ad0902a83">00126</a>       <span class="keywordtype">void</span> SetHyb(<span class="keywordtype">int</span> hyb)    { _hyb = hyb; }
<a name="l00128"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#573a9f96a971854938ab2db5eb4d4851">00128</a>       <span class="keywordtype">void</span> SetAtomicNum(<span class="keywordtype">int</span> atomicnum)    { _ele = (char)atomicnum; }
<a name="l00130"></a>00130       <span class="keywordtype">void</span> SetIsotope(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> iso);
<a name="l00132"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#4ebf98749415a00a56fdbc77f87fdc87">00132</a>       <span class="keywordtype">void</span> SetImplicitValence(<span class="keywordtype">int</span> val)    { _impval = (char)val; }
<a name="l00134"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e048690c14e9258cc653231a56d5dfda">00134</a>       <span class="keywordtype">void</span> IncrementImplicitValence()     { _impval++; }
<a name="l00136"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#7acb91a903a31d698dc25d296b988f7f">00136</a>       <span class="keywordtype">void</span> DecrementImplicitValence()     { _impval--; }
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1d084182d025e6fa000b928807d7689">00138</a>       <span class="keywordtype">void</span> SetFormalCharge(<span class="keywordtype">int</span> fcharge)   { _fcharge = fcharge; }
<a name="l00140"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#299285ee1effd21803b3c042a376e149">00140</a>       <span class="keywordtype">void</span> SetSpinMultiplicity(<span class="keywordtype">short</span> spin){ _spinmultiplicity = spin; }
<a name="l00142"></a>00142       <span class="keywordtype">void</span> SetType(<span class="keyword">const</span> <span class="keywordtype">char</span> *type);
<a name="l00144"></a>00144       <span class="keywordtype">void</span> SetType(std::string &amp;type);
<a name="l00146"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#963851351ab3c084233a82d367f15607">00146</a>       <span class="keywordtype">void</span> SetPartialCharge(<span class="keywordtype">double</span> pcharge){ _pcharge = pcharge; }
<a name="l00148"></a>00148       <span class="keywordtype">void</span> SetVector(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v);
<a name="l00150"></a>00150       <span class="keywordtype">void</span> SetVector(<span class="keyword">const</span> <span class="keywordtype">double</span> x,<span class="keyword">const</span> <span class="keywordtype">double</span> y,<span class="keyword">const</span> <span class="keywordtype">double</span> z);
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#eff361260a8a4e9ea703d5d38f5fc671">00152</a>       <span class="keywordtype">void</span> SetCoordPtr(<span class="keywordtype">double</span> **c)        { _c = c; _cidx = (GetIdx()-1)*3; }
<a name="l00154"></a>00154       <span class="keywordtype">void</span> SetVector();
<a name="l00156"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#de786f15ee67979fbb9c48970b22e184">00156</a>       <span class="keywordtype">void</span> SetResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *res)     { _residue=res; }
<a name="l00158"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#962b3010305cfb80ba816a0e54097dee">00158</a>       <span class="keywordtype">void</span> SetParent(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *ptr)          { _parent=ptr; }
<a name="l00160"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3d29498c15007d9b6729e26784f23a5b">00160</a>       <span class="keywordtype">void</span> SetAromatic()                  { SetFlag(<a class="code" href="atom_8h.shtml#c08352e8abee93573a66f692f0827bd3" title="Atom is aromatic.">OB_AROMATIC_ATOM</a>); }
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#2fcf3bf429f36281a43c879e40e75f34">00162</a>       <span class="keywordtype">void</span> UnsetAromatic()                { _flags &amp;= (~(<a class="code" href="atom_8h.shtml#c08352e8abee93573a66f692f0827bd3" title="Atom is aromatic.">OB_AROMATIC_ATOM</a>)); }
<a name="l00164"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#df069c94123595712cb7fa847b87e449">00164</a>       <span class="keywordtype">void</span> SetClockwiseStereo()           { SetFlag(<a class="code" href="atom_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., "@@").">OB_CSTEREO_ATOM</a>|<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f328f0aa99465103074b1d336c393919">00166</a>       <span class="keywordtype">void</span> SetAntiClockwiseStereo()       { SetFlag(<a class="code" href="atom_8h.shtml#7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., "@").">OB_ACSTEREO_ATOM</a>|<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00168"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6ddbbbc5f8e185c43e634a0425311275">00168</a>       <span class="keywordtype">void</span> SetPositiveStereo() { SetFlag(<a class="code" href="atom_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>|<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00170"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ea322d9d450ee48fb2e89a4f7c34deda">00170</a>       <span class="keywordtype">void</span> SetNegativeStereo() { SetFlag(<a class="code" href="atom_8h.shtml#28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>|<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00172"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#fdf42f73fe8a0cec0db3c3e544830fcc">00172</a>       <span class="keywordtype">void</span> UnsetStereo()
<a name="l00173"></a>00173         {
<a name="l00174"></a>00174           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., "@").">OB_ACSTEREO_ATOM</a>);
<a name="l00175"></a>00175           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., "@@").">OB_CSTEREO_ATOM</a>);
<a name="l00176"></a>00176           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>);
<a name="l00177"></a>00177           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>);
<a name="l00178"></a>00178           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>);
<a name="l00179"></a>00179         }
<a name="l00181"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e6a016e7f67cf564e5f80254c425f65c">00181</a>       <span class="keywordtype">void</span> SetInRing()         { SetFlag(<a class="code" href="atom_8h.shtml#5f2ffc18f5cc3589dd1978252169f11e" title="Atom is in a ring.">OB_RING_ATOM</a>); }
<a name="l00183"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d4e5a4c67101743f644b047b632d058b">00183</a>       <span class="keywordtype">void</span> SetChiral()         { SetFlag(<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3fa3634d92a924e5af69208768e839a5">00185</a>       <span class="keywordtype">void</span> ClearCoordPtr()     { _c = NULL; _cidx=0; }
<a name="l00187"></a>00187 
<a name="l00189"></a>00189 
<a name="l00190"></a>00190 
<a name="l00191"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#34d5bb9535dadccfdaaae8b98dab2078">00191</a>       <span class="keywordtype">int</span>          GetFormalCharge()<span class="keyword">  const </span>{ <span class="keywordflow">return</span>(_fcharge);    }
<a name="l00193"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#90250b249ffa0fcb4daa83bde1ff4614">00193</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetAtomicNum()<span class="keyword">     const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_ele); }
<a name="l00195"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d61d9e7b9ecdf9ac58a7f0a65a50b066">00195</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> GetIsotope()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_isotope);    }
<a name="l00198"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#546f896e98331fe14e5746c53a4a543f">00198</a>       <span class="keywordtype">int</span>          GetSpinMultiplicity()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_spinmultiplicity); }
<a name="l00201"></a>00201       <span class="keywordtype">double</span>     GetAtomicMass()    <span class="keyword">const</span>;
<a name="l00204"></a>00204       <span class="keywordtype">double</span>     GetExactMass()     <span class="keyword">const</span>;
<a name="l00206"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#44b77545e83209582e42f375c8f40474">00206</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetIdx()<span class="keyword">           const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_idx);  }
<a name="l00209"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#534869887e7780bf59a97b9c7e38cac9">00209</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetCoordinateIdx()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_cidx); }
<a name="l00211"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#036023769d4fee171548943838fa0df1">00211</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetCIdx()<span class="keyword">          const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_cidx); }
<a name="l00213"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#7bb9aaaed179e592414edfa0331788f6">00213</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#7a78d148bf3ac283b30c720a8b040700">GetValence</a>()<span class="keyword">       const</span>
<a name="l00214"></a>00214 <span class="keyword">        </span>{
<a name="l00215"></a>00215           <span class="keywordflow">return</span>((_vbond.empty()) ? 0 : _vbond.size());
<a name="l00216"></a>00216         }
<a name="l00218"></a>00218       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHyb()             <span class="keyword">const</span>;
<a name="l00220"></a>00220       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetImplicitValence() <span class="keyword">const</span>;
<a name="l00222"></a>00222       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#2d93b4c6ef85b403a7a2376d9b324668">GetHvyValence</a>()      <span class="keyword">const</span>;
<a name="l00224"></a>00224       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHeteroValence()   <span class="keyword">const</span>;
<a name="l00226"></a>00226       <span class="keywordtype">char</span>        *GetType();
<a name="l00227"></a>00227 
<a name="l00229"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9fa6ce00a437dcb7c438cdf669a35fe6">00229</a>       <span class="keywordtype">double</span>      GetX()    {        <span class="keywordflow">return</span>(x());    }
<a name="l00231"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6f947fc048c388c2ae724147a2e74ea2">00231</a>       <span class="keywordtype">double</span>      GetY()    {        <span class="keywordflow">return</span>(y());    }
<a name="l00233"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#2917f1fdbf033388ba0f3b37f5a23303">00233</a>       <span class="keywordtype">double</span>      GetZ()    {        <span class="keywordflow">return</span>(z());    }
<a name="l00234"></a>00234 
<a name="l00235"></a>00235       <span class="comment">// These methods check to see if there is a coordinate pointer</span>
<a name="l00236"></a>00236       <span class="comment">// or an internal vector (e.g., SetCoordPtr())</span>
<a name="l00238"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1d181ea8ec179ff8046ef6cf2a8aa232">00238</a> <span class="comment"></span>      <span class="keywordtype">double</span>      x() {
<a name="l00239"></a>00239         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx]);
<a name="l00240"></a>00240         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.x();
<a name="l00241"></a>00241       }
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#52c7eae49e9d0d75c6cc38f61ed526f2">00243</a>       <span class="keywordtype">double</span>      y() {
<a name="l00244"></a>00244         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx+1]);
<a name="l00245"></a>00245         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.y();
<a name="l00246"></a>00246       }
<a name="l00248"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#2d651524c446d89c995be7682931a249">00248</a>       <span class="keywordtype">double</span>      z() {
<a name="l00249"></a>00249         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx+2]);
<a name="l00250"></a>00250         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.z();
<a name="l00251"></a>00251       }
<a name="l00256"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f9dd6c6924f23479933e0b8779a4bec2">00256</a>       <span class="keywordtype">double</span>     *GetCoordinate(){
<a name="l00257"></a>00257         <span class="keywordflow">if</span> (_c)          <span class="keywordflow">return</span>(&amp;(*_c)[_cidx]);
<a name="l00258"></a>00258         <span class="keywordflow">else</span>             <span class="keywordflow">return</span> NULL;
<a name="l00259"></a>00259       }
<a name="l00261"></a>00261       <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>   &amp;GetVector();
<a name="l00262"></a>00262       <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>   &amp;GetVector() <span class="keyword">const</span>;
<a name="l00264"></a>00264       <span class="keywordtype">double</span>     GetPartialCharge();
<a name="l00266"></a>00266       <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *GetResidue();
<a name="l00268"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d8480b61159bc6cb861b17341dc2b29a">00268</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>     *GetParent()        {<span class="keywordflow">return</span>((<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>*)_parent);}
<a name="l00271"></a>00271       <span class="keywordtype">bool</span>       GetNewBondVector(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v,<span class="keywordtype">double</span> length);
<a name="l00274"></a>00274       <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>    *GetBond(OBAtom *);
<a name="l00279"></a>00279       OBAtom    *GetNextAtom();
<a name="l00281"></a>00281 
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 
<a name="l00285"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#c4ea48df79e239b506d3501dd42adde9">00285</a>       <a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a> BeginBonds()
<a name="l00286"></a>00286         { <span class="keywordflow">return</span>(_vbond.begin()); }
<a name="l00288"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#87859f951e8ea33345b76d93014486c9">00288</a>       <a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a> EndBonds()
<a name="l00289"></a>00289         { <span class="keywordflow">return</span>(_vbond.end());   }
<a name="l00292"></a>00292       <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *BeginBond(<a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00295"></a>00295       <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *NextBond(<a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00298"></a>00298       OBAtom *BeginNbrAtom(<a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00301"></a>00301       OBAtom *NextNbrAtom(<a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00303"></a>00303 
<a name="l00305"></a>00305       <span class="keywordtype">double</span> GetDistance(<span class="keywordtype">int</span> index);
<a name="l00307"></a>00307       <span class="keywordtype">double</span> GetDistance(OBAtom*);
<a name="l00309"></a>00309       <span class="keywordtype">double</span> GetAngle(<span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c);
<a name="l00311"></a>00311       <span class="keywordtype">double</span> GetAngle(OBAtom *b, OBAtom *c);
<a name="l00312"></a>00312 
<a name="l00314"></a>00314 
<a name="l00315"></a>00315 
<a name="l00317"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#616b5aac27eec22be5be998bc15d6349">00317</a>       <span class="keywordtype">void</span> NewResidue()
<a name="l00318"></a>00318         {
<a name="l00319"></a>00319           <span class="keywordflow">if</span> (!_residue)
<a name="l00320"></a>00320             _residue = <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>;
<a name="l00321"></a>00321         }
<a name="l00323"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3e3b0d3b268e6abe26f87d4c422c31cd">00323</a>       <span class="keywordtype">void</span> AddResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *res) { SetResidue(res); }
<a name="l00325"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#85fa173a3c3f488fc691a11eaad81439">00325</a>       <span class="keywordtype">void</span> DeleteResidue(){
<a name="l00326"></a>00326         <span class="keywordflow">if</span> (_residue) {
<a name="l00327"></a>00327           <span class="keyword">delete</span> _residue;
<a name="l00328"></a>00328           _residue = NULL; <span class="comment">// Make sure to clear that a residue existed</span>
<a name="l00329"></a>00329         }
<a name="l00330"></a>00330       }
<a name="l00332"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5abeab08afbd305a51b9a9b5bd8fe356">00332</a>       <span class="keywordtype">void</span> AddBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *bond) { _vbond.push_back(bond); }
<a name="l00335"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1773630938cf6a028368394b666d06bf">00335</a>       <span class="keywordtype">void</span> InsertBond(<a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i, <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *bond)
<a name="l00336"></a>00336         {
<a name="l00337"></a>00337           _vbond.insert(i, bond);
<a name="l00338"></a>00338         }
<a name="l00340"></a>00340       <span class="keywordtype">bool</span> DeleteBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>* bond);
<a name="l00342"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#03fe71c8266435b7a76682e5c1472894">00342</a>       <span class="keywordtype">void</span> ClearBond() {_vbond.clear();}
<a name="l00344"></a>00344 
<a name="l00346"></a>00346 
<a name="l00347"></a>00347 
<a name="l00350"></a>00350       <span class="keywordtype">bool</span> HtoMethyl();
<a name="l00353"></a>00353       <span class="keywordtype">bool</span> SetHybAndGeom(<span class="keywordtype">int</span>);
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1a92c9eb656eb9ef43f03c717a38adc3">00355</a>       <span class="keywordtype">void</span> ForceNoH() {SetFlag(<a class="code" href="atom_8h.shtml#ad40730c29a0be944d55f5b3e3f98ac9" title="Atom has no hydrogen attached. Temporary use only during SMILES input.">OB_ATOM_HAS_NO_H</a>);}
<a name="l00357"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#55e8f858833eee0408aee7b0f1b9c22c">00357</a>       <span class="keywordtype">bool</span> HasNoHForced() {<span class="keywordflow">return</span> HasFlag(<a class="code" href="atom_8h.shtml#ad40730c29a0be944d55f5b3e3f98ac9" title="Atom has no hydrogen attached. Temporary use only during SMILES input.">OB_ATOM_HAS_NO_H</a>);}
<a name="l00359"></a>00359 
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 
<a name="l00363"></a>00363       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  CountFreeOxygens()      <span class="keyword">const</span>;
<a name="l00365"></a>00365       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ImplicitHydrogenCount() <span class="keyword">const</span>;
<a name="l00367"></a>00367       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ExplicitHydrogenCount(<span class="keywordtype">bool</span> ExcludeIsotopes=<span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l00369"></a>00369       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  MemberOfRingCount()     <span class="keyword">const</span>;
<a name="l00371"></a>00371       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  MemberOfRingSize()    <span class="keyword">const</span>;
<a name="l00373"></a>00373       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  CountRingBonds() <span class="keyword">const</span>;
<a name="l00375"></a>00375       <span class="keywordtype">double</span>      SmallestBondAngle();
<a name="l00377"></a>00377       <span class="keywordtype">double</span>      AverageBondAngle();
<a name="l00379"></a>00379       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  BOSum()                 <span class="keyword">const</span>;
<a name="l00382"></a>00382       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  KBOSum()                <span class="keyword">const</span>;
<a name="l00384"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e3177d9e8b583d3cda02b90c141894c5">00384</a>       <span class="keywordtype">bool</span> HasResidue()    { <span class="keywordflow">return</span>(_residue != NULL);    }
<a name="l00386"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b633bc0f8f40dfcedf42940ab8a5316c">00386</a>       <span class="keywordtype">bool</span> IsHydrogen()    { <span class="keywordflow">return</span>(GetAtomicNum() == 1); }
<a name="l00388"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1f0a167775136e911cd349cdd8923b24">00388</a>       <span class="keywordtype">bool</span> IsCarbon()      { <span class="keywordflow">return</span>(GetAtomicNum() == 6); }
<a name="l00390"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#acb82bc548922e4f1276a255f212f143">00390</a>       <span class="keywordtype">bool</span> IsNitrogen()    { <span class="keywordflow">return</span>(GetAtomicNum() == 7); }
<a name="l00392"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f7e8030ce19d79c9ad0b3cfbf116dc59">00392</a>       <span class="keywordtype">bool</span> IsOxygen()      { <span class="keywordflow">return</span>(GetAtomicNum() == 8); }
<a name="l00394"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a71152591d5cc51fc2f3701ff7de7dfd">00394</a>       <span class="keywordtype">bool</span> IsSulfur()      { <span class="keywordflow">return</span>(GetAtomicNum() == 16);}
<a name="l00396"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b8c7f052f9380b98eef3b83da640eba3">00396</a>       <span class="keywordtype">bool</span> IsPhosphorus()  { <span class="keywordflow">return</span>(GetAtomicNum() == 15);}
<a name="l00398"></a>00398       <span class="keywordtype">bool</span> IsAromatic()      <span class="keyword">const</span>;
<a name="l00400"></a>00400       <span class="keywordtype">bool</span> IsInRing()        <span class="keyword">const</span>;
<a name="l00402"></a>00402       <span class="keywordtype">bool</span> IsInRingSize(<span class="keywordtype">int</span>) <span class="keyword">const</span>;
<a name="l00405"></a>00405       <span class="keywordtype">bool</span> IsHeteroatom();
<a name="l00407"></a>00407       <span class="keywordtype">bool</span> IsNotCorH();
<a name="l00409"></a>00409       <span class="keywordtype">bool</span> IsConnected(OBAtom*);
<a name="l00412"></a>00412       <span class="keywordtype">bool</span> IsOneThree(OBAtom*);
<a name="l00415"></a>00415       <span class="keywordtype">bool</span> IsOneFour(OBAtom*);
<a name="l00417"></a>00417       <span class="keywordtype">bool</span> IsCarboxylOxygen();
<a name="l00419"></a>00419       <span class="keywordtype">bool</span> IsPhosphateOxygen();
<a name="l00421"></a>00421       <span class="keywordtype">bool</span> IsSulfateOxygen();
<a name="l00423"></a>00423       <span class="keywordtype">bool</span> IsNitroOxygen();
<a name="l00425"></a>00425       <span class="keywordtype">bool</span> IsAmideNitrogen();
<a name="l00428"></a>00428       <span class="keywordtype">bool</span> IsPolarHydrogen();
<a name="l00431"></a>00431       <span class="keywordtype">bool</span> IsNonPolarHydrogen();
<a name="l00434"></a>00434       <span class="keywordtype">bool</span> IsAromaticNOxide();
<a name="l00436"></a>00436       <span class="keywordtype">bool</span> IsChiral();
<a name="l00438"></a>00438       <span class="keywordtype">bool</span> IsAxial();
<a name="l00440"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#4d1f38bbe03483629778078dcc4e75a0">00440</a>       <span class="keywordtype">bool</span> IsClockwise()         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., "@@").">OB_CSTEREO_ATOM</a>));  }
<a name="l00442"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f3abb70d4f818b9c3e416928afa2e844">00442</a>       <span class="keywordtype">bool</span> IsAntiClockwise()     { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., "@").">OB_ACSTEREO_ATOM</a>)); }
<a name="l00444"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9880a080dd0bce244291bde514b67d20">00444</a>       <span class="keywordtype">bool</span> IsPositiveStereo() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>)); }
<a name="l00446"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#61e5344c34c172e9b889e59255aff6de">00446</a>       <span class="keywordtype">bool</span> IsNegativeStereo() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>)); }
<a name="l00448"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#8844e382c76003229ee5fdd0341aacee">00448</a>       <span class="keywordtype">bool</span> HasChiralitySpecified()
<a name="l00449"></a>00449         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., "@@").">OB_CSTEREO_ATOM</a>|<a class="code" href="atom_8h.shtml#7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., "@").">OB_ACSTEREO_ATOM</a>)); }
<a name="l00451"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#63911efd550113b275239d322670986d">00451</a>       <span class="keywordtype">bool</span> HasChiralVolume()
<a name="l00452"></a>00452         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>|<a class="code" href="atom_8h.shtml#28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>)); }
<a name="l00454"></a>00454       <span class="keywordtype">bool</span> IsHbondAcceptor();
<a name="l00456"></a>00456       <span class="keywordtype">bool</span> IsHbondDonor();
<a name="l00458"></a>00458       <span class="keywordtype">bool</span> IsHbondDonorH();
<a name="l00463"></a>00463       <span class="keywordtype">bool</span> HasAlphaBetaUnsat(<span class="keywordtype">bool</span> includePandS=<span class="keyword">true</span>);
<a name="l00465"></a>00465       <span class="keywordtype">bool</span> HasBondOfOrder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bo);
<a name="l00467"></a>00467       <span class="keywordtype">int</span>  CountBondsOfOrder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bo);
<a name="l00469"></a>00469       <span class="keywordtype">bool</span> HasNonSingleBond();
<a name="l00471"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f347b80d156587c2287754345606c78d">00471</a>       <span class="keywordtype">bool</span> HasSingleBond()    {        <span class="keywordflow">return</span>(HasBondOfOrder(1));    }
<a name="l00473"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0cb35a21cc08897bc7f9b01ae4561e50">00473</a>       <span class="keywordtype">bool</span> HasDoubleBond()    {        <span class="keywordflow">return</span>(HasBondOfOrder(2));    }
<a name="l00475"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#11bf8aa7f79e9b9bdef2602808bb794d">00475</a>       <span class="keywordtype">bool</span> HasAromaticBond()  {        <span class="keywordflow">return</span>(HasBondOfOrder(5));    }
<a name="l00477"></a>00477       <span class="keywordtype">bool</span> MatchesSMARTS(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00479"></a>00479 
<a name="l00480"></a>00480     }; <span class="comment">// class OBAtom</span>
<a name="l00481"></a>00481 
<a name="l00482"></a>00482 }<span class="comment">// namespace OpenBabel</span>
<a name="l00483"></a>00483 
<a name="l00484"></a>00484 <span class="preprocessor">#endif   // OB_ATOM_H</span>
<a name="l00485"></a>00485 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:04 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
