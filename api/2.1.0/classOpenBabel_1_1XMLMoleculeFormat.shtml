<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: XMLMoleculeFormat Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul>
</div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">XMLMoleculeFormat</a></div>
<h1>XMLMoleculeFormat Class Reference</h1><!-- doxytag: class="OpenBabel::XMLMoleculeFormat" --><!-- doxytag: inherits="OpenBabel::XMLBaseFormat" -->Abstract class for XML formats which represent molecules.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="xml_8h-source.shtml">openbabel/xml.h</a>&gt;</code>
<p>
Inheritance diagram for XMLMoleculeFormat:<p><center><img src="classOpenBabel_1_1XMLMoleculeFormat__inherit__graph.png" border="0" usemap="#XMLMoleculeFormat__inherit__map" alt="Inheritance graph"></center>
<map name="XMLMoleculeFormat__inherit__map">
<area shape="rect" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats." alt="" coords="19,82,145,109"><area shape="rect" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats." alt="" coords="39,8,125,34"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center><a href="classOpenBabel_1_1XMLMoleculeFormat-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#9acd362b27e30c19a2c870ca71592723">ReadChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#39c2aaf250dde6e85d05ff9357d8b003">WriteChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#5a3cd5ffc0d21fe9b95d804c44e7d146">ReadMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const std::type_info &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#54e576034bd51c66256aa6a98f81d644">GetType</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#bad103449aface0ecb56655e06a1e3b6">NamespaceURI</a> () const=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#6b007f43192f527944eef5136e4b2703">DoElement</a> (const std::string &amp;ElName)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#0e59feda5d3eb85765b53cf4b42f77ef">EndElement</a> (const std::string &amp;ElName)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#d2f75af8aac19e5c3c48dc26c1fa319c">EndTag</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#663171ec9788e2d1621d374848b3888b">WriteMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#b87525f269e7819d8462f450d30d56a7">Description</a> ()=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1870e0d80a223ef4e1661be80029dbec">TargetClassDescription</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1d3a8785a0ad0c85b98fa3406a64d50f">SpecificationURL</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#0e10219d8aedefa78ef16fc7fded85ec">GetMIMEType</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#94a94537cc5ba96b1876db1b612b91a3">Flags</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#0924b1a442d147fa036bff23a4cf04ef">MakeNewInstance</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">xmlTextReaderPtr&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#4f78f6b785dbc43f74d44c6bb39cfb78">reader</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">xmlTextWriterPtr&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#b13d5085d6f8bb5fc391fdc1ad1f8000">writer</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#4964d8defcb0f638a51963d436188f12">OutputToStream</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#dfcd8e84805c262d8cbca79a83f9d4cc">SkipObjects</a> (int n, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#e286ac3ecc365473ace5c0da2c656ffe">_pmol</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#5fd9fbe1a6ecd9798543ec2a55c472a8">_prefix</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#5e2c3ec36cd04bac7ecad43b9f5501a2">baseindent</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#4b00721003b8d35559a55c9098ff36c5">ind</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#8000c477c493f1dc954e8a538ae6fda8">nsdecl</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#c0224265e7d214b7ed98e091fe559c88">_embedlevel</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Abstract class for XML formats which represent molecules. 
<p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="9acd362b27e30c19a2c870ca71592723"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::ReadChemObject" ref="9acd362b27e30c19a2c870ca71592723" args="(OBConversion *pConv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadChemObject           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "Convert" interface Read function. 
<p>
Possibly reads multiple new objects on the heap and subjects them to its DoTransformations() function, which may delete them again. Sends result to pConv-&gt;AddChemObject() 
<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#6044ced825a2a83b7cfe7c45eea63c99">OBFormat</a>.
</div>
</div><p>
<a class="anchor" name="39c2aaf250dde6e85d05ff9357d8b003"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::WriteChemObject" ref="39c2aaf250dde6e85d05ff9357d8b003" args="(OBConversion *pConv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteChemObject           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "Convert" interface Write function. 
<p>
Writes a single object Deletes the object after writing <dl class="return" compact><dt><b>Returns:</b></dt><dd>false on error </dd></dl>

<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#5ea5d9623cd9594549a52e116caecaa2">OBFormat</a>.
</div>
</div><p>
<a class="anchor" name="5a3cd5ffc0d21fe9b95d804c44e7d146"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::ReadMolecule" ref="5a3cd5ffc0d21fe9b95d804c44e7d146" args="(OBBase *pOb, OBConversion *pConv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadMolecule           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "API" interface Read function. 
<p>
Reads a single object. Does not make a new object on the heap; can be used with a pointer to an chem object on the heap or the stack. 
<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#1e309febfaef70cc3c8d98afc1540931">OBFormat</a>.
</div>
</div><p>
<a class="anchor" name="54e576034bd51c66256aa6a98f81d644"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::GetType" ref="54e576034bd51c66256aa6a98f81d644" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::type_info&amp; GetType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the type of chemical object used by the format. </dd></dl>

<p>
Defaults to that used by the default format. Useful for checking that a format can handle a particular object. 
<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#73f632a573cbbfecf9e00f04c5ce73e9">OBFormat</a>.
</div>
</div><p>
<a class="anchor" name="bad103449aface0ecb56655e06a1e3b6"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::NamespaceURI" ref="bad103449aface0ecb56655e06a1e3b6" args="() const=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* NamespaceURI           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [pure virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6b007f43192f527944eef5136e4b2703"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::DoElement" ref="6b007f43192f527944eef5136e4b2703" args="(const std::string &amp;ElName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool DoElement           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>ElName</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0e59feda5d3eb85765b53cf4b42f77ef"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::EndElement" ref="0e59feda5d3eb85765b53cf4b42f77ef" args="(const std::string &amp;ElName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool EndElement           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>ElName</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d2f75af8aac19e5c3c48dc26c1fa319c"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::EndTag" ref="d2f75af8aac19e5c3c48dc26c1fa319c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* EndTag           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The tag at the end of the chemical object e.g. "/molecule&gt;". 
<p>

</div>
</div><p>
<a class="anchor" name="4f78f6b785dbc43f74d44c6bb39cfb78"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::reader" ref="4f78f6b785dbc43f74d44c6bb39cfb78" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xmlTextReaderPtr reader           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b13d5085d6f8bb5fc391fdc1ad1f8000"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::writer" ref="b13d5085d6f8bb5fc391fdc1ad1f8000" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xmlTextWriterPtr writer           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4964d8defcb0f638a51963d436188f12"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::OutputToStream" ref="4964d8defcb0f638a51963d436188f12" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OutputToStream           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="dfcd8e84805c262d8cbca79a83f9d4cc"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::SkipObjects" ref="dfcd8e84805c262d8cbca79a83f9d4cc" args="(int n, OBConversion *pConv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual int SkipObjects           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"> <em>pConv</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, protected, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Skip past first n objects in input stream (or current one with n=0) Returns 1 on success, -1 on error and 0 if not implemented 
<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#1f0ee7ba19cc62b53a7ee06fa4f91509">OBFormat</a>.
</div>
</div><p>
<a class="anchor" name="663171ec9788e2d1621d374848b3888b"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::WriteMolecule" ref="663171ec9788e2d1621d374848b3888b" args="(OBBase *, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteMolecule           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "API" interface Write function. 
<p>
Writes a single object Does not delete the object; can be used with a pointer to an chem object on the heap or the stack. <dl class="return" compact><dt><b>Returns:</b></dt><dd>false on error. </dd></dl>

</div>
</div><p>
<a class="anchor" name="b87525f269e7819d8462f450d30d56a7"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::Description" ref="b87525f269e7819d8462f450d30d56a7" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* Description           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [pure virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Information on this format. Printed out in response to -Hxxx option where xxx id the id of the format. 
<p>
Must be provided by each format class. Can include a list of command line Options. These may be used to construction check boxes, radio buttons etc for GUI interface. 
</div>
</div><p>
<a class="anchor" name="1870e0d80a223ef4e1661be80029dbec"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::TargetClassDescription" ref="1870e0d80a223ef4e1661be80029dbec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * TargetClassDescription           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
If not provided, the object type used by the default format is used (usually <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>). 
<p>

</div>
</div><p>
<a class="anchor" name="1d3a8785a0ad0c85b98fa3406a64d50f"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::SpecificationURL" ref="1d3a8785a0ad0c85b98fa3406a64d50f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* SpecificationURL           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Web address where the format is defined. 
<p>

</div>
</div><p>
<a class="anchor" name="0e10219d8aedefa78ef16fc7fded85ec"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::GetMIMEType" ref="0e10219d8aedefa78ef16fc7fded85ec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* GetMIMEType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Chemical MIME type associated with this file type (if any). 
<p>

</div>
</div><p>
<a class="anchor" name="94a94537cc5ba96b1876db1b612b91a3"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::Flags" ref="94a94537cc5ba96b1876db1b612b91a3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int Flags           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Decribes the capabilities of the format (Read only etc.). 
<p>
Currently, can be a bitwise OR of any of the following NOTREADABLE READONEONLY NOTWRITABLE WRITEONEONLY DEFAULTFORMAT READBINARY WRITEBINARY READXML 
</div>
</div><p>
<a class="anchor" name="0924b1a442d147fa036bff23a4cf04ef"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::MakeNewInstance" ref="0924b1a442d147fa036bff23a4cf04ef" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* MakeNewInstance           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>a pointer to a new instance of the format, or NULL if fails. </dd></dl>

<p>
Normally a single global instance is used but this may cause problems if there are member variables and the format is used in more than one place in the program. 
</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="e286ac3ecc365473ace5c0da2c656ffe"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::_pmol" ref="e286ac3ecc365473ace5c0da2c656ffe" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#e286ac3ecc365473ace5c0da2c656ffe">_pmol</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b50420582d1794a71702ae17e176dc07"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::_pxmlConv" ref="b50420582d1794a71702ae17e176dc07" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a>* <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5fd9fbe1a6ecd9798543ec2a55c472a8"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::_prefix" ref="5fd9fbe1a6ecd9798543ec2a55c472a8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#5fd9fbe1a6ecd9798543ec2a55c472a8">_prefix</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5e2c3ec36cd04bac7ecad43b9f5501a2"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::baseindent" ref="5e2c3ec36cd04bac7ecad43b9f5501a2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#5e2c3ec36cd04bac7ecad43b9f5501a2">baseindent</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4b00721003b8d35559a55c9098ff36c5"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::ind" ref="4b00721003b8d35559a55c9098ff36c5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#4b00721003b8d35559a55c9098ff36c5">ind</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8000c477c493f1dc954e8a538ae6fda8"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::nsdecl" ref="8000c477c493f1dc954e8a538ae6fda8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#8000c477c493f1dc954e8a538ae6fda8">nsdecl</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c0224265e7d214b7ed98e091fe559c88"></a><!-- doxytag: member="OpenBabel::XMLMoleculeFormat::_embedlevel" ref="c0224265e7d214b7ed98e091fe559c88" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#c0224265e7d214b7ed98e091fe559c88">_embedlevel</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="xml_8h-source.shtml">xml.h</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:18 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
