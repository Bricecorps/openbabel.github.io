<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: obiter.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>obiter.h</h1><a href="obiter_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obiter.h - STL-style iterators for Open Babel.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_OBITER_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_OBITER_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml" title="Fast and efficient bitstring class.">openbabel/bitvec.h</a>&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;stack&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;queue&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">namespace </span>OpenBabel
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033 
<a name="l00034"></a>00034   <span class="keyword">class </span>OBMol;
<a name="l00035"></a>00035   <span class="keyword">class </span>OBAtom;
<a name="l00036"></a>00036   <span class="keyword">class </span>OBBond;
<a name="l00037"></a>00037   <span class="keyword">class </span>OBResidue;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039   <span class="comment">// more detailed descriptions and documentation in obiter.cpp</span>
<a name="l00040"></a>00040 
<a name="l00042"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">00042</a>   <span class="keyword">class </span>OBAPI OBMolAtomIter {
<a name="l00043"></a>00043     std::vector&lt;OBAtom*&gt;::iterator _i;
<a name="l00044"></a>00044     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00045"></a>00045     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *_ptr;
<a name="l00046"></a>00046   <span class="keyword">public</span>:
<a name="l00047"></a>00047 
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#0e0a0033461ca2e8bd7d3553613acb68">00048</a>     OBMolAtomIter() :_parent(NULL), _ptr(NULL) { }
<a name="l00049"></a>00049     OBMolAtomIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00050"></a>00050     OBMolAtomIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00051"></a>00051     OBMolAtomIter(<span class="keyword">const</span> OBMolAtomIter &amp;ai);
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#b41faac5de2b33826f98ef32e67d99fa">00052</a>     ~OBMolAtomIter() { }
<a name="l00053"></a>00053 
<a name="l00054"></a>00054     OBMolAtomIter&amp; operator=(<span class="keyword">const</span> OBMolAtomIter &amp;ai);
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#67b76affb3b5d35fa419ac234144038b">00056</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00058"></a>00058     OBMolAtomIter&amp; operator++();
<a name="l00060"></a>00060     OBMolAtomIter  operator++(<span class="keywordtype">int</span>);
<a name="l00062"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#227568f5015b62dce6f62b9eca4c90bb">00062</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00064"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#8e0b41342bcfcc7f327acc7a5ddd8438">00064</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00065"></a>00065   };
<a name="l00066"></a>00066 
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">00068</a>   <span class="keyword">class </span>OBAPI OBMolAtomDFSIter {
<a name="l00069"></a>00069     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>               *_parent;
<a name="l00070"></a>00070     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>              *_ptr;
<a name="l00071"></a>00071     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="Fast and efficient bitstring class.">OBBitVec</a>             _notVisited;
<a name="l00072"></a>00072     std::stack&lt;OBAtom *&gt; _stack;
<a name="l00073"></a>00073   <span class="keyword">public</span>:
<a name="l00074"></a>00074 
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#28577ca5de6b95b9ac0d4210be8d9fde">00075</a>     OBMolAtomDFSIter() : _parent(NULL), _ptr(NULL) { }
<a name="l00076"></a>00076     OBMolAtomDFSIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol, <span class="keywordtype">int</span> StartIndex=1);
<a name="l00077"></a>00077     OBMolAtomDFSIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol, <span class="keywordtype">int</span> StartIndex=1);
<a name="l00078"></a>00078     OBMolAtomDFSIter(<span class="keyword">const</span> OBMolAtomDFSIter &amp;ai);
<a name="l00079"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#6d1833f8401794abf419e65503bb4fb2">00079</a>     ~OBMolAtomDFSIter() { }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     OBMolAtomDFSIter&amp; operator=(<span class="keyword">const</span> OBMolAtomDFSIter &amp;ai);
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#67b76affb3b5d35fa419ac234144038b">00083</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00085"></a>00085     OBMolAtomDFSIter&amp; operator++();
<a name="l00087"></a>00087     OBMolAtomDFSIter  operator++(<span class="keywordtype">int</span>);
<a name="l00089"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#227568f5015b62dce6f62b9eca4c90bb">00089</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#8e0b41342bcfcc7f327acc7a5ddd8438">00091</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#aaffd1bb24cbcff3418b09c755f2b5bc">00093</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* next()
<a name="l00094"></a>00094     { 
<a name="l00095"></a>00095       <span class="keywordflow">if</span>(_stack.empty())
<a name="l00096"></a>00096         <span class="keywordflow">return</span> NULL; <span class="comment">//end of a disconnected fragment</span>
<a name="l00097"></a>00097       <span class="keywordflow">else</span>
<a name="l00098"></a>00098         <span class="keywordflow">return</span> _stack.top(); <span class="comment">//the next atom</span>
<a name="l00099"></a>00099     }
<a name="l00100"></a>00100   };
<a name="l00101"></a>00101 
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">00103</a>   <span class="keyword">class </span>OBAPI OBMolAtomBFSIter {
<a name="l00104"></a>00104     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>               *_parent;
<a name="l00105"></a>00105     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>              *_ptr;
<a name="l00106"></a>00106     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="Fast and efficient bitstring class.">OBBitVec</a>             _notVisited;
<a name="l00107"></a>00107     std::queue&lt;OBAtom *&gt; _queue;
<a name="l00108"></a>00108   <span class="keyword">public</span>:
<a name="l00109"></a>00109 
<a name="l00110"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#1afe0a6b964c9975a5eab78a4fe6012f">00110</a>     OBMolAtomBFSIter(): _parent(NULL), _ptr(NULL) { }
<a name="l00111"></a>00111     OBMolAtomBFSIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00112"></a>00112     OBMolAtomBFSIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00113"></a>00113     OBMolAtomBFSIter(<span class="keyword">const</span> OBMolAtomBFSIter &amp;ai);
<a name="l00114"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#0ed2011d285caf87692d837c05b3ab37">00114</a>     ~OBMolAtomBFSIter() { }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116     OBMolAtomBFSIter&amp; operator=(<span class="keyword">const</span> OBMolAtomBFSIter &amp;ai);
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#67b76affb3b5d35fa419ac234144038b">00118</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00120"></a>00120     OBMolAtomBFSIter&amp; operator++();
<a name="l00122"></a>00122     OBMolAtomBFSIter  operator++(<span class="keywordtype">int</span>);
<a name="l00124"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#227568f5015b62dce6f62b9eca4c90bb">00124</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#8e0b41342bcfcc7f327acc7a5ddd8438">00126</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00127"></a>00127   };
<a name="l00128"></a>00128 
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">00130</a>   <span class="keyword">class </span>OBAPI OBMolBondIter {
<a name="l00131"></a>00131     std::vector&lt;OBBond*&gt;::iterator _i;
<a name="l00132"></a>00132     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00133"></a>00133     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *_ptr;
<a name="l00134"></a>00134   <span class="keyword">public</span>:
<a name="l00135"></a>00135 
<a name="l00136"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#455059ecfe54c9a0c32e8456aa848569">00136</a>     OBMolBondIter() : _parent(NULL), _ptr(NULL) {}
<a name="l00137"></a>00137     OBMolBondIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00138"></a>00138     OBMolBondIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00139"></a>00139     OBMolBondIter(<span class="keyword">const</span> OBMolBondIter &amp;bi);
<a name="l00140"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#6ab51a3738ec0fa144ed6b3e49545cd7">00140</a>     ~OBMolBondIter() { }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142     OBMolBondIter&amp; operator=(<span class="keyword">const</span> OBMolBondIter &amp;bi);
<a name="l00144"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#67b76affb3b5d35fa419ac234144038b">00144</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00146"></a>00146     OBMolBondIter&amp; operator++();
<a name="l00148"></a>00148     OBMolBondIter  operator++(<span class="keywordtype">int</span>);
<a name="l00150"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#8c23da904e7b838d0482d3fce70e55b8">00150</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#46d44d5951cc8d2c6a76a65c8a00b494">00152</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00153"></a>00153   };
<a name="l00154"></a>00154 
<a name="l00156"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">00156</a>   <span class="keyword">class </span>OBAPI OBAtomAtomIter {
<a name="l00157"></a>00157     std::vector&lt;OBBond*&gt;::iterator _i;
<a name="l00158"></a>00158     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *_parent;
<a name="l00159"></a>00159     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *_ptr;
<a name="l00160"></a>00160   <span class="keyword">public</span>:
<a name="l00161"></a>00161 
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#f8a4eb72f4e027a2f7d2649b01b847f1">00162</a>     OBAtomAtomIter() : _parent(NULL), _ptr(NULL) { }
<a name="l00163"></a>00163     OBAtomAtomIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atm);
<a name="l00164"></a>00164     OBAtomAtomIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;atm);
<a name="l00165"></a>00165     OBAtomAtomIter(<span class="keyword">const</span> OBAtomAtomIter &amp;ai);
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#e08b3633f489a115c0708df48a086337">00166</a>     ~OBAtomAtomIter() { }
<a name="l00167"></a>00167 
<a name="l00168"></a>00168     OBAtomAtomIter&amp; operator=(<span class="keyword">const</span> OBAtomAtomIter &amp;ai);
<a name="l00170"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#67b76affb3b5d35fa419ac234144038b">00170</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00172"></a>00172     OBAtomAtomIter&amp; operator++();
<a name="l00174"></a>00174     OBAtomAtomIter  operator++(<span class="keywordtype">int</span>);
<a name="l00176"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#227568f5015b62dce6f62b9eca4c90bb">00176</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00178"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#8e0b41342bcfcc7f327acc7a5ddd8438">00178</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00179"></a>00179   };
<a name="l00180"></a>00180 
<a name="l00182"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">00182</a>   <span class="keyword">class </span>OBAPI OBAtomBondIter {
<a name="l00183"></a>00183     std::vector&lt;OBBond*&gt;::iterator _i;
<a name="l00184"></a>00184     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *_parent;
<a name="l00185"></a>00185     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *_ptr;
<a name="l00186"></a>00186   <span class="keyword">public</span>:
<a name="l00187"></a>00187 
<a name="l00188"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#f28bfccc1ea71cb3c90d4131fd0ffaac">00188</a>     OBAtomBondIter(): _parent(NULL), _ptr(NULL) { }
<a name="l00189"></a>00189     OBAtomBondIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atm);
<a name="l00190"></a>00190     OBAtomBondIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;atm);
<a name="l00191"></a>00191     OBAtomBondIter(<span class="keyword">const</span> OBAtomBondIter &amp;bi);
<a name="l00192"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#8049d0d3287127c18a69a03a0ada3389">00192</a>     ~OBAtomBondIter() { }
<a name="l00193"></a>00193 
<a name="l00194"></a>00194     OBAtomBondIter&amp; operator=(<span class="keyword">const</span> OBAtomBondIter &amp;bi);
<a name="l00196"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#67b76affb3b5d35fa419ac234144038b">00196</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00198"></a>00198     OBAtomBondIter&amp; operator++();
<a name="l00200"></a>00200     OBAtomBondIter  operator++(<span class="keywordtype">int</span>);
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#8c23da904e7b838d0482d3fce70e55b8">00202</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00204"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#46d44d5951cc8d2c6a76a65c8a00b494">00204</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00205"></a>00205   };
<a name="l00206"></a>00206 
<a name="l00208"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">00208</a>   <span class="keyword">class </span>OBAPI OBResidueIter {
<a name="l00209"></a>00209     std::vector&lt;OBResidue*&gt;::iterator _i;
<a name="l00210"></a>00210     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *_ptr;
<a name="l00211"></a>00211     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00212"></a>00212   <span class="keyword">public</span>:
<a name="l00213"></a>00213 
<a name="l00214"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#222f27c41a5414c4fb612d260c21a5fc">00214</a>     OBResidueIter() : _ptr(NULL), _parent(NULL) { }
<a name="l00215"></a>00215     OBResidueIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00216"></a>00216     OBResidueIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00217"></a>00217     OBResidueIter(<span class="keyword">const</span> OBResidueIter &amp;ri);
<a name="l00218"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#f01b06a6ef42d96b03e8026780e87365">00218</a>     ~OBResidueIter() { }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220     OBResidueIter&amp; operator=(<span class="keyword">const</span> OBResidueIter &amp;ri);
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#67b76affb3b5d35fa419ac234144038b">00222</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00224"></a>00224     OBResidueIter&amp; operator++();
<a name="l00226"></a>00226     OBResidueIter  operator++(<span class="keywordtype">int</span>);
<a name="l00228"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#7e04dfb68e7cea085c06bc0dc993dacb">00228</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>* operator-&gt;()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00230"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#b95d7e81ca1ae249b476c1bfee809ab9">00230</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00231"></a>00231   };
<a name="l00232"></a>00232 
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">00234</a>   <span class="keyword">class </span>OBAPI OBResidueAtomIter {
<a name="l00235"></a>00235     std::vector&lt;OBAtom*&gt;::iterator _i;
<a name="l00236"></a>00236     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *_parent;
<a name="l00237"></a>00237     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>    *_ptr;
<a name="l00238"></a>00238   <span class="keyword">public</span>:
<a name="l00239"></a>00239 
<a name="l00240"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#248fb7bc3b3279d171bfa2d1bf9eeb41">00240</a>     OBResidueAtomIter() : _parent(NULL), _ptr(NULL) { }
<a name="l00241"></a>00241     OBResidueAtomIter(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *res);
<a name="l00242"></a>00242     OBResidueAtomIter(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> &amp;res);
<a name="l00243"></a>00243     OBResidueAtomIter(<span class="keyword">const</span> OBResidueAtomIter &amp;ri);
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#2a89fef9e1122bf74748b6312c9852dc">00244</a>     ~OBResidueAtomIter() { }
<a name="l00245"></a>00245 
<a name="l00246"></a>00246     OBResidueAtomIter &amp;operator = (<span class="keyword">const</span> OBResidueAtomIter &amp;ri);
<a name="l00248"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#67b76affb3b5d35fa419ac234144038b">00248</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00250"></a>00250     OBResidueAtomIter&amp; operator++ ();
<a name="l00252"></a>00252     OBResidueAtomIter  operator++ (<span class="keywordtype">int</span>);
<a name="l00254"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#227568f5015b62dce6f62b9eca4c90bb">00254</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00256"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#8e0b41342bcfcc7f327acc7a5ddd8438">00256</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;<a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00257"></a>00257   };
<a name="l00258"></a>00258   
<a name="l00260"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml">00260</a>   <span class="keyword">class </span>OBAPI OBMolAngleIter {
<a name="l00261"></a>00261     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>     *_parent;
<a name="l00262"></a>00262     std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vangle;
<a name="l00263"></a>00263     std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;
<a name="l00264"></a>00264     std::vector&lt;unsigned int&gt; _angle;
<a name="l00265"></a>00265   <span class="keyword">public</span>:
<a name="l00266"></a>00266 
<a name="l00267"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#482e4131f901dd1ec3c1d6305b1df9b4">00267</a>     OBMolAngleIter() :_parent(NULL) { }
<a name="l00268"></a>00268     OBMolAngleIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00269"></a>00269     OBMolAngleIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00270"></a>00270     OBMolAngleIter(<span class="keyword">const</span> OBMolAngleIter &amp;ai);
<a name="l00271"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#917fefa24816b0e6bca7497496cdb918">00271</a>     ~OBMolAngleIter() { }
<a name="l00272"></a>00272 
<a name="l00273"></a>00273     OBMolAngleIter&amp; operator=(<span class="keyword">const</span> OBMolAngleIter &amp;ai);
<a name="l00275"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#67b76affb3b5d35fa419ac234144038b">00275</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> (_i != _vangle.end()); }
<a name="l00277"></a>00277     OBMolAngleIter&amp; operator++();
<a name="l00280"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#24759ad6219529c6a5b192593abd164b">00280</a>     std::vector&lt;unsigned int&gt; <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _angle;     }
<a name="l00281"></a>00281   };
<a name="l00282"></a>00282 
<a name="l00284"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml">00284</a>   <span class="keyword">class </span>OBAPI OBMolTorsionIter {
<a name="l00285"></a>00285     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00286"></a>00286     std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vtorsion;
<a name="l00287"></a>00287     std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;
<a name="l00288"></a>00288     std::vector&lt;unsigned int&gt; _torsion;
<a name="l00289"></a>00289   <span class="keyword">public</span>:
<a name="l00290"></a>00290 
<a name="l00291"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#2e6d7ebd2d9d520ecd18112ac456da81">00291</a>     OBMolTorsionIter() :_parent(NULL) { }
<a name="l00292"></a>00292     OBMolTorsionIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00293"></a>00293     OBMolTorsionIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00294"></a>00294     OBMolTorsionIter(<span class="keyword">const</span> OBMolTorsionIter &amp;ai);
<a name="l00295"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#c739d51704add695fff280e299ea91d5">00295</a>     ~OBMolTorsionIter() { }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297     OBMolTorsionIter&amp; operator=(<span class="keyword">const</span> OBMolTorsionIter &amp;ai);
<a name="l00299"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#67b76affb3b5d35fa419ac234144038b">00299</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> (_i != _vtorsion.end()); }
<a name="l00301"></a>00301     OBMolTorsionIter&amp; operator++();
<a name="l00304"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#24759ad6219529c6a5b192593abd164b">00304</a>     std::vector&lt;unsigned int&gt; <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _torsion;     }
<a name="l00305"></a>00305   };
<a name="l00306"></a>00306   
<a name="l00308"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml">00308</a>   <span class="keyword">class </span>OBAPI OBMolPairIter {
<a name="l00309"></a>00309     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00310"></a>00310     std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vpair;
<a name="l00311"></a>00311     std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;
<a name="l00312"></a>00312     std::vector&lt;unsigned int&gt; _pair;
<a name="l00313"></a>00313  
<a name="l00314"></a>00314   <span class="keyword">public</span>:
<a name="l00315"></a>00315 
<a name="l00316"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#a604593cfb41d4c23618d71b4b26ea6d">00316</a>     OBMolPairIter() :_parent(NULL) { }
<a name="l00317"></a>00317     OBMolPairIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00318"></a>00318     OBMolPairIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00319"></a>00319     OBMolPairIter(<span class="keyword">const</span> OBMolPairIter &amp;ai);
<a name="l00320"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#daa9e198d76f5f97560146d1673205b6">00320</a>     ~OBMolPairIter() { }
<a name="l00321"></a>00321 
<a name="l00322"></a>00322     OBMolPairIter&amp; operator=(<span class="keyword">const</span> OBMolPairIter &amp;ai);
<a name="l00324"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#67b76affb3b5d35fa419ac234144038b">00324</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> (_i != _vpair.end()); }
<a name="l00326"></a>00326     OBMolPairIter&amp; operator++();
<a name="l00329"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#24759ad6219529c6a5b192593abd164b">00329</a>     std::vector&lt;unsigned int&gt; <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _pair;     }
<a name="l00330"></a>00330   };
<a name="l00331"></a>00331 
<a name="l00332"></a>00332 
<a name="l00334"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">00334</a>   <span class="keyword">class </span>OBAPI OBMolRingIter {
<a name="l00335"></a>00335     std::vector&lt;OBRing*&gt;::iterator _i;
<a name="l00336"></a>00336     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> *_ptr;
<a name="l00337"></a>00337     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00338"></a>00338     <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR()).">OBRingData</a> *_rings;
<a name="l00339"></a>00339   <span class="keyword">public</span>:
<a name="l00340"></a>00340 
<a name="l00341"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#4201ae784613cc343f4c85aff073f8b6">00341</a>     OBMolRingIter() : _ptr(NULL), _parent(NULL), _rings(NULL) { }
<a name="l00342"></a>00342     OBMolRingIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00343"></a>00343     OBMolRingIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00344"></a>00344     OBMolRingIter(<span class="keyword">const</span> OBMolRingIter &amp;ri);
<a name="l00345"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#1d382621222fab3106bbf62d88d12c16">00345</a>     ~OBMolRingIter() { }
<a name="l00346"></a>00346 
<a name="l00347"></a>00347     OBMolRingIter&amp; operator=(<span class="keyword">const</span> OBMolRingIter &amp;ri);
<a name="l00349"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#67b76affb3b5d35fa419ac234144038b">00349</a>     operator bool()<span class="keyword">      const </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00351"></a>00351     OBMolRingIter&amp; operator++();
<a name="l00353"></a>00353     OBMolRingIter  operator++(<span class="keywordtype">int</span>);
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#f19aafb1ac310e24268489943d2b396c">00355</a>     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a>* operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00357"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#3c1e4cec708267f47c3f68b1485feaa6">00357</a>     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator*</a>()<span class="keyword">  const </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00358"></a>00358   };
<a name="l00359"></a>00359 
<a name="l00360"></a><a class="code" href="obiter_8h.shtml#fb051cb17b46d381998c24fc41db2a79">00360</a> <span class="preprocessor">#define FOR_ATOMS_OF_MOL(a,m)     for( OBMolAtomIter     a(m); a; ++a )</span>
<a name="l00361"></a><a class="code" href="obiter_8h.shtml#16c0f68c4f2d476fae98338b31e77e46">00361</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BONDS_OF_MOL(b,m)     for( OBMolBondIter     b(m); b; ++b )</span>
<a name="l00362"></a><a class="code" href="obiter_8h.shtml#18326b3c74bff171f5807ce9725e0c47">00362</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_NBORS_OF_ATOM(a,p)    for( OBAtomAtomIter    a(p); a; ++a )</span>
<a name="l00363"></a><a class="code" href="obiter_8h.shtml#a102b7f8200028ba654f022dc63fdf35">00363</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BONDS_OF_ATOM(b,p)    for( OBAtomBondIter    b(p); b; ++b )</span>
<a name="l00364"></a><a class="code" href="obiter_8h.shtml#483bbcfb9673a775c47ab6adf8e53451">00364</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_RESIDUES_OF_MOL(r,m)  for( OBResidueIter     r(m); r; ++r )</span>
<a name="l00365"></a><a class="code" href="obiter_8h.shtml#a4f83897733e3f3a1fb1ff9a1a85db1f">00365</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_ATOMS_OF_RESIDUE(a,r) for( OBResidueAtomIter a(r); a; ++a )</span>
<a name="l00366"></a><a class="code" href="obiter_8h.shtml#15820464f7b1f60c2d343932d5eda8cd">00366</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_DFS_OF_MOL(a,m)       for( OBMolAtomDFSIter  a(m); a; ++a )</span>
<a name="l00367"></a><a class="code" href="obiter_8h.shtml#7c427f32f67339fb215933423bace3e4">00367</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BFS_OF_MOL(a,m)       for( OBMolAtomBFSIter  a(m); a; ++a )</span>
<a name="l00368"></a><a class="code" href="obiter_8h.shtml#0297c6de75de6131cc5289475787841a">00368</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_RINGS_OF_MOL(a,m)     for( OBMolRingIter     r(m); r; ++r )</span>
<a name="l00369"></a><a class="code" href="obiter_8h.shtml#1fc0ae63791285f6155fa53658c2e4ae">00369</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_ANGLES_OF_MOL(a,m)    for( OBMolAngleIter    a(m); a; ++a )</span>
<a name="l00370"></a><a class="code" href="obiter_8h.shtml#ee758b2fef3dcacb197e41b5819d7465">00370</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_TORSIONS_OF_MOL(t,m)  for( OBMolTorsionIter  t(m); t; ++t )</span>
<a name="l00371"></a><a class="code" href="obiter_8h.shtml#640062d330b1455694059113b560a4aa">00371</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_PAIRS_OF_MOL(p,m)     for( OBMolPairIter     p(m); p; ++p )</span>
<a name="l00372"></a>00372 <span class="preprocessor"></span>
<a name="l00373"></a>00373 } <span class="comment">// namespace OpenBabel</span>
<a name="l00374"></a>00374 <span class="preprocessor">#endif // OB_OBITER_H</span>
<a name="l00375"></a>00375 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:06 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
