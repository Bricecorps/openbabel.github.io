<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: generic.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>generic.h</h1><a href="generic_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">generic.h - Handle generic data classes. Custom data for atoms, bonds, etc.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_GENERIC_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_GENERIC_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="vector3_8h.shtml" title="Handle 3D coordinates.">openbabel/math/vector3.h</a>&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;<a class="code" href="obutil_8h.shtml" title="Various utility methods.">openbabel/obutil.h</a>&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">namespace </span>OpenBabel
<a name="l00033"></a>00033 {
<a name="l00034"></a>00034 
<a name="l00035"></a>00035   <span class="keyword">class </span>OBBase;
<a name="l00036"></a>00036   <span class="keyword">class </span>OBAtom;
<a name="l00037"></a>00037   <span class="keyword">class </span>OBBond;
<a name="l00038"></a>00038   <span class="keyword">class </span>OBRing;
<a name="l00039"></a>00039 
<a name="l00040"></a>00040   OBAPI std::string&amp; <a class="code" href="namespaceOpenBabel.shtml#e8d9d7dd615b5fa7b533c075fe744d8f" title="Removes white space from front and back of string.">Trim</a>(std::string&amp; txt);
<a name="l00041"></a>00041 
<a name="l00053"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml">00053</a>   <span class="keyword">namespace </span>OBGenericDataType
<a name="l00054"></a>00054   {
<a name="l00055"></a>00055     <span class="keyword">enum</span>
<a name="l00056"></a>00056     {
<a name="l00058"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55baed11c625f3ba337a0468e31990a832e">00058</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55baed11c625f3ba337a0468e31990a832e" title="Unknown data type (default).">UndefinedData</a> =      0,
<a name="l00059"></a>00059 
<a name="l00061"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bf37b8c94a903cbf5fc45475c815c541a">00061</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bf37b8c94a903cbf5fc45475c815c541a" title="Arbitrary key/value data, i.e., OBPairData.">PairData</a>      =      1,
<a name="l00062"></a>00062 
<a name="l00064"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bed27589416d0d35119923437b476c33c">00064</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bed27589416d0d35119923437b476c33c" title="Energetics data (e.g., total energy, heat of formation, etc.).">EnergyData</a>    =      2,
<a name="l00065"></a>00065 
<a name="l00067"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bd015d8b14f8fa9e2c8107ec0b6d637a2">00067</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bd015d8b14f8fa9e2c8107ec0b6d637a2" title="Storing text comments (one per molecule, atom, bond, etc.) (for other data, e.g....">CommentData</a>   =      3,
<a name="l00068"></a>00068 
<a name="l00070"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55ba8504383b864769bce6f9962ff55711c">00070</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55ba8504383b864769bce6f9962ff55711c" title="Arbitrary information about conformers, i.e., OBConformerData.">ConformerData</a> =      4,
<a name="l00071"></a>00071 
<a name="l00073"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bbbdeac68debaebaea148a0f2271c8128">00073</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bbbdeac68debaebaea148a0f2271c8128" title="Bond data external to OpenBabel, i.e., OBExternalBond, OBExternalBondData.">ExternalBondData</a> =   5,
<a name="l00074"></a>00074 
<a name="l00076"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b6792a664f1614a75f33128e139392ef1">00076</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b6792a664f1614a75f33128e139392ef1" title="Information for generating &amp; manipulating rotamers, i.e. OBRotamerList.">RotamerList</a> =        6,
<a name="l00077"></a>00077 
<a name="l00079"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b71d63bc919dfc9800e9e274301882557">00079</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b71d63bc919dfc9800e9e274301882557" title="Info. for storing bonds to atoms yet to be added, i.e. OBVirtualBond.">VirtualBondData</a> =    7,
<a name="l00080"></a>00080 
<a name="l00082"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b614fe63c6aaa519336589c0b3dcbcdb9">00082</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b614fe63c6aaa519336589c0b3dcbcdb9" title="Information on rings in a molecule, i.e., OBRingData.">RingData</a> =           8,
<a name="l00083"></a>00083 
<a name="l00085"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b9cf293f0b1ed83d3b1b804ca947ddcd8">00085</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b9cf293f0b1ed83d3b1b804ca947ddcd8" title="Information about torsion/dihedral angles, i.e., OBTorsionData and OBTorsion.">TorsionData</a> =        9,
<a name="l00086"></a>00086 
<a name="l00088"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b99b8d17f7ee6c09b008ab6bf5b5bf0cc">00088</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b99b8d17f7ee6c09b008ab6bf5b5bf0cc" title="Bond angles in a molecule, i.e., OBAngle, OBAngleData.">AngleData</a> =         10,
<a name="l00089"></a>00089 
<a name="l00091"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4804a06df36aa971eb112ada03885b00">00091</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4804a06df36aa971eb112ada03885b00" title="Residue serial numbers.">SerialNums</a> =        11,
<a name="l00092"></a>00092 
<a name="l00094"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b26d8504c2596c9ef59dab47c01a4dd1b">00094</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b26d8504c2596c9ef59dab47c01a4dd1b" title="Crystallographic unit cell data, i.e., OBUnitCell.">UnitCell</a> =          12,
<a name="l00095"></a>00095 
<a name="l00097"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb44db07941815c91fbc8e01f66252208">00097</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb44db07941815c91fbc8e01f66252208" title="Spin data, including NMR, atomic and molecular spin, etc.">SpinData</a> =          13,
<a name="l00098"></a>00098 
<a name="l00100"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55be1fbcef5ed6d30c670148af84890d0af">00100</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55be1fbcef5ed6d30c670148af84890d0af" title="Arbitrary partial and total charges, dipole moments, etc.">ChargeData</a> =        14,
<a name="l00101"></a>00101 
<a name="l00103"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2ed92f76270c3218036e96ad1044301d">00103</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2ed92f76270c3218036e96ad1044301d" title="Symmetry data -- point and space groups, transforms, etc. i.e., OBSymmetryData.">SymmetryData</a> =      15,
<a name="l00104"></a>00104 
<a name="l00106"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bab3b5ad7023167aa297c4c555c10acdd">00106</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bab3b5ad7023167aa297c4c555c10acdd" title="Arbitrary chiral information (atom, bond, molecule, etc.) i.e., OBChiralData.">ChiralData</a> =        16,
<a name="l00107"></a>00107 
<a name="l00109"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bac4fd2f8c1bedfe2d09c303e9c1b8e0a">00109</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bac4fd2f8c1bedfe2d09c303e9c1b8e0a" title="Atomic and molecular occupation data.">OccupationData</a> =    17,
<a name="l00110"></a>00110 
<a name="l00112"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b5b0d37c5cdfbcc15ee852b769c25d1b7">00112</a>        <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b5b0d37c5cdfbcc15ee852b769c25d1b7" title="Density (cube) data and surfaces.">DensityData</a> =       18,
<a name="l00113"></a>00113 
<a name="l00115"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b88ee5a5e80dd4e9523761d17ba9b81f2">00115</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b88ee5a5e80dd4e9523761d17ba9b81f2" title="Electronic levels, redox states, orbitals, etc.">ElectronicData</a> =    19,
<a name="l00116"></a>00116 
<a name="l00118"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb69829f7efb675ca0f6a4d8f245ceaf2">00118</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb69829f7efb675ca0f6a4d8f245ceaf2" title="Vibrational modes, frequencies, etc.">VibrationData</a> =     20,
<a name="l00119"></a>00119 
<a name="l00121"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb7c011beb81d9ba86035c1c0b7609899">00121</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb7c011beb81d9ba86035c1c0b7609899" title="Rotational energy information.">RotationData</a> =      21,
<a name="l00122"></a>00122 
<a name="l00124"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bdd3a99a5a7d554d150d7241368f2ba1d">00124</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bdd3a99a5a7d554d150d7241368f2ba1d" title="Nuclear transitions (e.g., decay, fission, fusion).">NuclearData</a> =       22,
<a name="l00125"></a>00125 
<a name="l00127"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39">00127</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a> =           23,
<a name="l00128"></a>00128 
<a name="l00129"></a>00129       <span class="comment">// space for up to 2^14 more entries...</span>
<a name="l00130"></a>00130 
<a name="l00132"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bd4a188d7201f00f99ec649edead73c1e">00132</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bd4a188d7201f00f99ec649edead73c1e" title="Custom (user-defined data).">CustomData0</a> = 16384,
<a name="l00133"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b7bd8533c833569ccbd4a701378ccffb7">00133</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b7bd8533c833569ccbd4a701378ccffb7">CustomData1</a> = 16385,
<a name="l00134"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b7be53c3112d0111bbbee98cefbac4850">00134</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b7be53c3112d0111bbbee98cefbac4850">CustomData2</a> = 16386,
<a name="l00135"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b012e8681e30646e38989b9a0f6ace98f">00135</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b012e8681e30646e38989b9a0f6ace98f">CustomData3</a> = 16387,
<a name="l00136"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b342cb4110346a130dc73e4e3491533de">00136</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b342cb4110346a130dc73e4e3491533de">CustomData4</a> = 16388,
<a name="l00137"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bf20627567e8d1835670ff531d5cb9d1a">00137</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bf20627567e8d1835670ff531d5cb9d1a">CustomData5</a> = 16389,
<a name="l00138"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4c2040d0daf33eff43588933be9150a7">00138</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4c2040d0daf33eff43588933be9150a7">CustomData6</a> = 16390,
<a name="l00139"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b40d766aa8e0726ef56b99986ec4d275d">00139</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b40d766aa8e0726ef56b99986ec4d275d">CustomData7</a> = 16391,
<a name="l00140"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb32f4336d6de7ee7fdf6557bcd9b01c4">00140</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb32f4336d6de7ee7fdf6557bcd9b01c4">CustomData8</a> = 16392,
<a name="l00141"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4a0f2b355a4e2d24d617f2824c165a61">00141</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4a0f2b355a4e2d24d617f2824c165a61">CustomData9</a> = 16393,
<a name="l00142"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b240964387d336b8321d240044762c8e6">00142</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b240964387d336b8321d240044762c8e6">CustomData10</a> = 16394,
<a name="l00143"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b806a44c47ce81d45527562fca2917d0f">00143</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b806a44c47ce81d45527562fca2917d0f">CustomData11</a> = 16395,
<a name="l00144"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b3b6e862da975578f9b8f2a5cef18935c">00144</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b3b6e862da975578f9b8f2a5cef18935c">CustomData12</a> = 16396,
<a name="l00145"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bfe6b84e76821b52a2eb5f3a761dc8c6a">00145</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bfe6b84e76821b52a2eb5f3a761dc8c6a">CustomData13</a> = 16397,
<a name="l00146"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b3cbbbad42fbfe9766b0892ccc88b47c5">00146</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b3cbbbad42fbfe9766b0892ccc88b47c5">CustomData14</a> = 16398,
<a name="l00147"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b8051d4056f7d8a89233dfa0ebc949bc1">00147</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b8051d4056f7d8a89233dfa0ebc949bc1">CustomData15</a> = 16399,
<a name="l00148"></a>00148     };
<a name="l00149"></a>00149   } <span class="comment">// end namespace</span>
<a name="l00150"></a>00150 
<a name="l00151"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">00151</a>   <span class="keyword">enum</span> <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> {
<a name="l00152"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc1408e68258d108979edaae8bed94e25048">00152</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc1408e68258d108979edaae8bed94e25048" title="Undefined or unspecified (default).">any</a>,                 
<a name="l00153"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14887e83e320499ec89236722bbdf56f50">00153</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14887e83e320499ec89236722bbdf56f50" title="Read from an input file.">fileformatInput</a>,     
<a name="l00154"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14928a3db32b4975c3d42d0ca5d8d9f44d">00154</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14928a3db32b4975c3d42d0ca5d8d9f44d" title="Added by the user.">userInput</a>,           
<a name="l00155"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14b1c8706dce6832c9ce173260ba2bf392">00155</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14b1c8706dce6832c9ce173260ba2bf392" title="Perceived by Open Babel library methods.">perceived</a>,           
<a name="l00156"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc146aef01ed9b1c198e6944f87e370f00b2">00156</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc146aef01ed9b1c198e6944f87e370f00b2" title="Added by an external program.">external</a>             
<a name="l00157"></a>00157   };
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 
<a name="l00162"></a>00162   <span class="comment">// class introduction in generic.cpp</span>
<a name="l00163"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml">00163</a>   <span class="keyword">class </span>OBAPI OBGenericData
<a name="l00164"></a>00164   {
<a name="l00165"></a>00165   <span class="keyword">protected</span>:
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#dceb77134f15418a66cf1124dcef1b51">00166</a>     std::string  _attr;  
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#31291823d487a4a47f24aae5870505ef">00167</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _type;  
<a name="l00168"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#239606b62a534e4df7626ea0cfdfb856">00168</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a>   _source;
<a name="l00169"></a>00169   <span class="keyword">public</span>:
<a name="l00170"></a>00170     OBGenericData(<span class="keyword">const</span> std::string attr = <span class="stringliteral">"undefined"</span>,
<a name="l00171"></a>00171                   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type =  <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55baed11c625f3ba337a0468e31990a832e" title="Unknown data type (default).">OBGenericDataType::UndefinedData</a>,
<a name="l00172"></a>00172                   <span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source = <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc1408e68258d108979edaae8bed94e25048" title="Undefined or unspecified (default).">any</a>);
<a name="l00173"></a>00173     <span class="comment">//Use default copy constructor and assignment operators</span>
<a name="l00174"></a>00174     <span class="comment">//OBGenericData(const OBGenericData&amp;);</span>
<a name="l00175"></a>00175                 
<a name="l00176"></a>00176     <span class="comment">/* Virtual constructors added. see </span>
<a name="l00177"></a>00177 <span class="comment">       http://www.parashift.com/c++-faq-lite/abcs.html#faq-22.5</span>
<a name="l00178"></a>00178 <span class="comment">       to allow copying given only a base class OBGenericData pointer.</span>
<a name="l00179"></a>00179 <span class="comment">       It may be necessary to cast the return pointer to the derived class</span>
<a name="l00180"></a>00180 <span class="comment">       type, since we are doing without Covariant Return Types </span>
<a name="l00181"></a>00181 <span class="comment">       http://www.parashift.com/c++-faq-lite/virtual-functions.html#faq-20.8</span>
<a name="l00182"></a>00182 <span class="comment">    </span>
<a name="l00183"></a>00183 <span class="comment">       A derived class may return NULL if copying is inappropriate */</span>
<a name="l00184"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#67bda850335747e7ac5d66629bda0a67">00184</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00185"></a>00185 <span class="keyword">    </span>{ <span class="keywordflow">return</span> NULL; } 
<a name="l00186"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#cb834533508953a264ed93b74fddad8d">00186</a>     <span class="keyword">virtual</span> ~OBGenericData()    {}
<a name="l00187"></a>00187     <span class="comment">//Use default copy constructor and assignment operators</span>
<a name="l00188"></a>00188     <span class="comment">//OBGenericData&amp; operator=(const OBGenericData &amp;src);</span>
<a name="l00189"></a>00189 
<a name="l00191"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#ae3d15983201a2a115701b2c538fef77">00191</a>     <span class="keywordtype">void</span>                      SetAttribute(<span class="keyword">const</span> std::string &amp;v)
<a name="l00192"></a>00192     {        _attr = v;        }
<a name="l00194"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#45613e34598a9584fb0120ef3fdab9e0">00194</a>     <span class="keywordtype">void</span> SetOrigin(<span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> s) { _source = s; }
<a name="l00196"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#c61fc66ef692e79290d6eaf7231db92c">00196</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetAttribute()<span class="keyword">  const</span>
<a name="l00197"></a>00197 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_attr);    }
<a name="l00199"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#91834e24b299c63cdf2cb77795298446">00199</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                GetDataType()<span class="keyword">    const</span>
<a name="l00200"></a>00200 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_type);    }
<a name="l00203"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#6145f0df06364b6d58c728368db8f992">00203</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetValue()<span class="keyword">  const</span>
<a name="l00204"></a>00204 <span class="keyword">    </span>{                   <span class="keywordflow">return</span> _attr; }
<a name="l00205"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#df131b210114ba636246ffc8dcb2ea13">00205</a>     <span class="keyword">virtual</span> <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> GetOrigin()<span class="keyword"> const</span>
<a name="l00206"></a>00206 <span class="keyword">    </span>{     <span class="keywordflow">return</span> _source; }
<a name="l00207"></a>00207   };
<a name="l00208"></a>00208 
<a name="l00211"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml">00211</a>  <span class="keyword">class </span>OBAPI OBCommentData : <span class="keyword">public</span> OBGenericData
<a name="l00212"></a>00212   {
<a name="l00213"></a>00213   <span class="keyword">protected</span>:
<a name="l00214"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#bfcfad17c10b3bb5b39412d927518e43">00214</a>     std::string _data;
<a name="l00215"></a>00215   <span class="keyword">public</span>:
<a name="l00216"></a>00216     OBCommentData();
<a name="l00217"></a>00217     OBCommentData(<span class="keyword">const</span> OBCommentData&amp;);
<a name="l00218"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#67bda850335747e7ac5d66629bda0a67">00218</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBCommentData(*<span class="keyword">this</span>);}
<a name="l00219"></a>00219                 
<a name="l00220"></a>00220     OBCommentData&amp; operator=(<span class="keyword">const</span> OBCommentData &amp;src);
<a name="l00221"></a>00221 
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#71ec30c014852fe90aed06daa76e378b">00222</a>     <span class="keywordtype">void</span>          <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<span class="keyword">const</span> std::string &amp;data)
<a name="l00223"></a>00223     { _data = data; <a class="code" href="namespaceOpenBabel.shtml#e8d9d7dd615b5fa7b533c075fe744d8f" title="Removes white space from front and back of string.">Trim</a>(_data); }
<a name="l00224"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#0f90c3ff45f5d9a13c71f46dba0770e5">00224</a>     <span class="keywordtype">void</span>          <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *d)
<a name="l00225"></a>00225     {_data = d; <a class="code" href="namespaceOpenBabel.shtml#e8d9d7dd615b5fa7b533c075fe744d8f" title="Removes white space from front and back of string.">Trim</a>(_data);     }
<a name="l00226"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#181123deb29bb853771bb72608c7e81b">00226</a>     <span class="keyword">const</span> std::string &amp;GetData()<span class="keyword">              const</span>
<a name="l00227"></a>00227 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_data);      }
<a name="l00228"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#6145f0df06364b6d58c728368db8f992">00228</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetValue()<span class="keyword">              const  </span>
<a name="l00229"></a>00229 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_data);      }
<a name="l00230"></a>00230   };
<a name="l00231"></a>00231 
<a name="l00235"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml">00235</a>   <span class="keyword">class </span>OBAPI OBExternalBond
<a name="l00236"></a>00236   {
<a name="l00237"></a>00237     <span class="keywordtype">int</span>     _idx;
<a name="l00238"></a>00238     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *_atom;
<a name="l00239"></a>00239     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *_bond;
<a name="l00240"></a>00240   <span class="keyword">public</span>:
<a name="l00241"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a3e2d107afd3e69aee9bf52b47d1444c">00241</a>   OBExternalBond(): _idx(0), _atom(NULL), _bond(NULL) {}
<a name="l00242"></a>00242     OBExternalBond(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *,<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *,<span class="keywordtype">int</span>);
<a name="l00243"></a>00243     OBExternalBond(<span class="keyword">const</span> OBExternalBond &amp;);
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#359543c25a72cf7a9ab33ab75b9b5f1e">00244</a>     ~OBExternalBond()   {}
<a name="l00245"></a>00245 
<a name="l00246"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#141f8abda99de827deec22f935dc9e31">00246</a>     <span class="keywordtype">int</span>     GetIdx()<span class="keyword">  const    </span>{        <span class="keywordflow">return</span>(_idx);    }
<a name="l00247"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a50dcd20da6bba326a2f820ded0c1b19">00247</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *GetAtom()<span class="keyword"> const    </span>{        <span class="keywordflow">return</span>(_atom);   }
<a name="l00248"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#61f7b16bfa66a44e7092b0605157ca10">00248</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *GetBond()<span class="keyword"> const    </span>{        <span class="keywordflow">return</span>(_bond);   }
<a name="l00249"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#b994a975e39f5c62288f4f972b6f90c9">00249</a>     <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)       {        _idx = idx;      }
<a name="l00250"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#84cdb57aaf88aa0a94f4f4a1dd0f0252">00250</a>     <span class="keywordtype">void</span> SetAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom) {        _atom = atom;    }
<a name="l00251"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#75c73979e73fb44e48424150fa0208c7">00251</a>     <span class="keywordtype">void</span> SetBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *bond) {        _bond = bond;    }
<a name="l00252"></a>00252   };
<a name="l00253"></a>00253 
<a name="l00256"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml">00256</a>  <span class="keyword">class </span>OBAPI OBExternalBondData : <span class="keyword">public</span> OBGenericData
<a name="l00257"></a>00257   {
<a name="l00258"></a>00258   <span class="keyword">protected</span>:
<a name="l00259"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#8b0c5550b7332d65d1c285004891cff2">00259</a>     std::vector&lt;OBExternalBond&gt; _vexbnd;
<a name="l00260"></a>00260   <span class="keyword">public</span>:
<a name="l00261"></a>00261     OBExternalBondData();
<a name="l00262"></a>00262                 
<a name="l00263"></a>00263     <span class="comment">//Copying is not used and too much work to set up</span>
<a name="l00264"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#67bda850335747e7ac5d66629bda0a67">00264</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> NULL;}
<a name="l00265"></a>00265     
<a name="l00266"></a>00266     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>*,<span class="keywordtype">int</span>);
<a name="l00267"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#11f9065de21b2a826607337504954584">00267</a>     std::vector&lt;OBExternalBond&gt; *GetData()
<a name="l00268"></a>00268       {
<a name="l00269"></a>00269         <span class="keywordflow">return</span>(&amp;_vexbnd);
<a name="l00270"></a>00270       }
<a name="l00271"></a>00271   };
<a name="l00272"></a>00272 
<a name="l00278"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml">00278</a>  <span class="keyword">class </span>OBAPI OBPairData : <span class="keyword">public</span> OBGenericData
<a name="l00279"></a>00279   {
<a name="l00280"></a>00280   <span class="keyword">protected</span>:
<a name="l00281"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#366a2531a9485fdfb2f6abbe528d99e1">00281</a>     std::string _value; 
<a name="l00282"></a>00282   <span class="keyword">public</span>:
<a name="l00283"></a>00283     OBPairData();
<a name="l00284"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#67bda850335747e7ac5d66629bda0a67">00284</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00285"></a>00285 <span class="keyword">      </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBPairData(*<span class="keyword">this</span>);}
<a name="l00286"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#ef706f61b8b25bb7de414f46bbe317b3">00286</a>     <span class="keywordtype">void</span>    SetValue(<span class="keyword">const</span> <span class="keywordtype">char</span> *v)        {      _value = v;    }
<a name="l00287"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#36b6ff14e0bae8e56e4637ab727fc8cb">00287</a>     <span class="keywordtype">void</span>    SetValue(<span class="keyword">const</span> std::string &amp;v) {      _value = v;    }
<a name="l00288"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#6145f0df06364b6d58c728368db8f992">00288</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetValue()<span class="keyword"> const</span>
<a name="l00289"></a>00289 <span class="keyword">    </span>{      <span class="keywordflow">return</span>(_value);    }
<a name="l00290"></a>00290   };
<a name="l00291"></a>00291 
<a name="l00294"></a>00294   <span class="comment">// More detailed description in generic.cpp</span>
<a name="l00295"></a>00295   <span class="keyword">template</span> &lt;<span class="keyword">class</span> ValueT&gt;
<a name="l00296"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml">00296</a>     <span class="keyword">class </span>OBAPI OBPairTemplate : <span class="keyword">public</span> OBGenericData
<a name="l00297"></a>00297   {
<a name="l00298"></a>00298   <span class="keyword">protected</span>:
<a name="l00299"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#8e244c63178d867c1294ea6011dc73ff">00299</a>     ValueT _value; 
<a name="l00300"></a>00300   <span class="keyword">public</span>:
<a name="l00301"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#bbe664b8fa3b004481772438aa0c1e8c">00301</a>   OBPairTemplate():
<a name="l00302"></a>00302     OBGenericData(<span class="stringliteral">"PairData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bf37b8c94a903cbf5fc45475c815c541a" title="Arbitrary key/value data, i.e., OBPairData.">PairData</a>), ValueT() {};
<a name="l00303"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#8525d460be3e43a8e605d854a2c9e246">00303</a>     <span class="keywordtype">void</span> SetValue(<span class="keyword">const</span> ValueT t)             { _value = t;     }
<a name="l00304"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#5296b18feccede12ba2dd8fb80c6ef66">00304</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> ValueT &amp;GetValue()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_value); }
<a name="l00305"></a>00305   };
<a name="l00306"></a>00306 
<a name="l00308"></a><a class="code" href="namespaceOpenBabel.shtml#0bdf8334aad62a6bb7ad50f58060c9b6">00308</a>   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate&lt;int&gt;</a>     <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairInteger</a>;
<a name="l00310"></a><a class="code" href="namespaceOpenBabel.shtml#5ba6d4475315df1100427dc98074c087">00310</a>   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate&lt;double&gt;</a>  <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairFloatingPoint</a>;
<a name="l00311"></a>00311 
<a name="l00315"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml">00315</a>  <span class="keyword">class </span>OBAPI OBSetData : <span class="keyword">public</span> OBGenericData
<a name="l00316"></a>00316   {
<a name="l00317"></a>00317   <span class="keyword">protected</span>:
<a name="l00318"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#e4896f79700c8d654fc8f7dcef4eb30a">00318</a>     std::vector&lt;OBGenericData *&gt; _vdata;
<a name="l00319"></a>00319   <span class="keyword">public</span>:
<a name="l00320"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#1998d348b757cd3146c83750f00d8c8a">00320</a>   OBSetData() : OBGenericData(<span class="stringliteral">"SetData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>) {}
<a name="l00321"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#67bda850335747e7ac5d66629bda0a67">00321</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBSetData(*<span class="keyword">this</span>);}
<a name="l00322"></a>00322 
<a name="l00324"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#3e36d0e80af7574cee4f2240b8f372dd">00324</a>     <span class="keywordtype">void</span> AddData(OBGenericData *d)
<a name="l00325"></a>00325     {
<a name="l00326"></a>00326       <span class="keywordflow">if</span>(d)
<a name="l00327"></a>00327         {
<a name="l00328"></a>00328           _vdata.push_back(d);
<a name="l00329"></a>00329         }
<a name="l00330"></a>00330     }
<a name="l00331"></a>00331 
<a name="l00333"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#8ad9af74c60e6f57716910542f616ae5">00333</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(std::vector&lt;OBGenericData *&gt; &amp;vdata)
<a name="l00334"></a>00334     {
<a name="l00335"></a>00335       _vdata = vdata;
<a name="l00336"></a>00336     }
<a name="l00337"></a>00337 
<a name="l00339"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#74418cc8cd2b2a72f8e1778b0cd58a48">00339</a>     OBGenericData *GetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *s)
<a name="l00340"></a>00340     {
<a name="l00341"></a>00341       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00342"></a>00342 
<a name="l00343"></a>00343       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00344"></a>00344         <span class="keywordflow">if</span> ((*i)-&gt;GetAttribute() == s)
<a name="l00345"></a>00345           <span class="keywordflow">return</span>(*i);
<a name="l00346"></a>00346 
<a name="l00347"></a>00347       <span class="keywordflow">return</span>(NULL);
<a name="l00348"></a>00348     }
<a name="l00349"></a>00349 
<a name="l00351"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#c1fc78db5080260be71f604ee5bbfcd2">00351</a>     OBGenericData *GetData(<span class="keyword">const</span> std::string &amp;s)
<a name="l00352"></a>00352     {
<a name="l00353"></a>00353       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00354"></a>00354 
<a name="l00355"></a>00355       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00356"></a>00356         <span class="keywordflow">if</span> ((*i)-&gt;GetAttribute() == s)
<a name="l00357"></a>00357           <span class="keywordflow">return</span>(*i);
<a name="l00358"></a>00358 
<a name="l00359"></a>00359       <span class="keywordflow">return</span>(NULL);
<a name="l00360"></a>00360     }
<a name="l00361"></a>00361 
<a name="l00363"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#206596836060899943e2c60406ef8300">00363</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::vector&lt;OBGenericData *&gt; &amp;GetData() const <span class="comment">//now virtual and const</span>
<a name="l00364"></a>00364     {
<a name="l00365"></a>00365       <span class="keywordflow">return</span>(_vdata);
<a name="l00366"></a>00366     }
<a name="l00367"></a>00367 
<a name="l00369"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#2dd0afcc5538601c2a39a3b7871faff2">00369</a>     std::vector&lt;OBGenericData*&gt;::iterator GetBegin()
<a name="l00370"></a>00370       {
<a name="l00371"></a>00371         <span class="keywordflow">return</span> _vdata.begin();
<a name="l00372"></a>00372       }
<a name="l00373"></a>00373 
<a name="l00375"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#e26106f464c8cb2959a7705a606f7da0">00375</a>     std::vector&lt;OBGenericData*&gt;::iterator GetEnd()
<a name="l00376"></a>00376       {
<a name="l00377"></a>00377         <span class="keywordflow">return</span> _vdata.end();
<a name="l00378"></a>00378       }
<a name="l00379"></a>00379 
<a name="l00381"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#ce768b2c55b1d16a47b8fdcda84515ea">00381</a>     <span class="keywordtype">void</span> DeleteData(OBGenericData *gd)
<a name="l00382"></a>00382     {
<a name="l00383"></a>00383       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00384"></a>00384       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00385"></a>00385         <span class="keywordflow">if</span> (*i == gd)
<a name="l00386"></a>00386           {
<a name="l00387"></a>00387             <span class="keyword">delete</span> *i;
<a name="l00388"></a>00388             _vdata.erase(i);
<a name="l00389"></a>00389           }
<a name="l00390"></a>00390     }
<a name="l00391"></a>00391 
<a name="l00392"></a>00392   }; <span class="comment">// OBSetData</span>
<a name="l00393"></a>00393 
<a name="l00397"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml">00397</a>  <span class="keyword">class </span>OBAPI OBVirtualBond : <span class="keyword">public</span> OBGenericData
<a name="l00398"></a>00398   {
<a name="l00399"></a>00399   <span class="keyword">protected</span>:
<a name="l00400"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#eb2c09a43f4c8b6256dbed5faf85d768">00400</a>     <span class="keywordtype">int</span> _bgn;
<a name="l00401"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#bb406f6b7d63af84fda76dbcdbac66c5">00401</a>     <span class="keywordtype">int</span> _end;
<a name="l00402"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#f7c67fda80d169e7af68407f88740499">00402</a>     <span class="keywordtype">int</span> _ord;
<a name="l00403"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#a753c6ca5d794e055f8b4b590c6ba538">00403</a>     <span class="keywordtype">int</span> _stereo;
<a name="l00404"></a>00404   <span class="keyword">public</span>:
<a name="l00405"></a>00405     OBVirtualBond();
<a name="l00406"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#67bda850335747e7ac5d66629bda0a67">00406</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBVirtualBond(*<span class="keyword">this</span>);}
<a name="l00407"></a>00407     OBVirtualBond(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span> stereo=0);
<a name="l00408"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#064aa6b502655795918788af438b0208">00408</a>     <span class="keywordtype">int</span> GetBgn()    {      <span class="keywordflow">return</span>(_bgn);    }
<a name="l00409"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#fc186d85b94bae6548e433324215fff6">00409</a>     <span class="keywordtype">int</span> GetEnd()    {      <span class="keywordflow">return</span>(_end);    }
<a name="l00410"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#eaca5975b0354f81d10792199fee7d4d">00410</a>     <span class="keywordtype">int</span> GetOrder()  {      <span class="keywordflow">return</span>(_ord);    }
<a name="l00411"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#9695376d762d4fd2b12da6f51a99fb92">00411</a>     <span class="keywordtype">int</span> GetStereo() {      <span class="keywordflow">return</span>(_stereo); }
<a name="l00412"></a>00412   };
<a name="l00413"></a>00413 
<a name="l00416"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml">00416</a>  <span class="keyword">class </span>OBAPI OBRingData : <span class="keyword">public</span> OBGenericData
<a name="l00417"></a>00417   {
<a name="l00418"></a>00418   <span class="keyword">protected</span>:
<a name="l00419"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#2da396a9610e4fd1218b885407375568">00419</a>     std::vector&lt;OBRing*&gt; _vr;
<a name="l00420"></a>00420   <span class="keyword">public</span>:
<a name="l00421"></a>00421     OBRingData();
<a name="l00422"></a>00422     OBRingData(<span class="keyword">const</span> OBRingData &amp;);
<a name="l00423"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#67bda850335747e7ac5d66629bda0a67">00423</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBRingData(*<span class="keyword">this</span>);}
<a name="l00424"></a>00424     ~OBRingData();
<a name="l00425"></a>00425 
<a name="l00426"></a>00426     OBRingData &amp;operator=(<span class="keyword">const</span> OBRingData &amp;);
<a name="l00427"></a>00427 
<a name="l00428"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#45f2a0418d86a4d7f2e94f1c54e504ce">00428</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(std::vector&lt;OBRing*&gt; &amp;vr)
<a name="l00429"></a>00429     {
<a name="l00430"></a>00430       _vr = vr;
<a name="l00431"></a>00431     }
<a name="l00432"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#120222dc719c5f6a711770dce699535b">00432</a>     <span class="keywordtype">void</span> PushBack(<a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> *r)
<a name="l00433"></a>00433     {
<a name="l00434"></a>00434       _vr.push_back(r);
<a name="l00435"></a>00435     }
<a name="l00436"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#45043bd4256fcf9d62e0cb45e024c466">00436</a>     std::vector&lt;OBRing*&gt; &amp;GetData()
<a name="l00437"></a>00437       {
<a name="l00438"></a>00438         <span class="keywordflow">return</span>(_vr);
<a name="l00439"></a>00439       }
<a name="l00440"></a>00440 
<a name="l00441"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#a1a05257821a8156625beabb7dd58e0b">00441</a>     std::vector&lt;OBRing*&gt;::iterator BeginRings()
<a name="l00442"></a>00442       { <span class="keywordflow">return</span>(_vr.begin()); }
<a name="l00443"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#07ad405727c652a6a280d821b9d1ac47">00443</a>     std::vector&lt;OBRing*&gt;::iterator EndRings()
<a name="l00444"></a>00444       { <span class="keywordflow">return</span>(_vr.end()); }
<a name="l00445"></a>00445     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> *BeginRing(std::vector&lt;OBRing*&gt;::iterator &amp;i);
<a name="l00446"></a>00446     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> *NextRing(std::vector&lt;OBRing*&gt;::iterator &amp;i);
<a name="l00447"></a>00447   };
<a name="l00448"></a>00448 
<a name="l00453"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml">00453</a>  <span class="keyword">class </span>OBAPI OBUnitCell: <span class="keyword">public</span> OBGenericData
<a name="l00454"></a>00454   {
<a name="l00455"></a>00455   <span class="keyword">public</span>:
<a name="l00456"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c7818f893264a00711081b62de694f99db4">00456</a>     <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c78">LatticeType</a> { <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f18f893264a00711081b62de694f99db4">Undefined</a>, 
<a name="l00457"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c780c393259f8f62caf4a7d210327e9ecb7">00457</a>                        Triclinic, 
<a name="l00458"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c788dcb30922b1f64f0d749914bf32442ff">00458</a>                        Monoclinic, 
<a name="l00459"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c78d6c2a31a4f6d88429ee1146228b5bbd8">00459</a>                        Orthorhombic, 
<a name="l00460"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c783d2110f7a11f77ed4f87cbc954aeec21">00460</a>                        Tetragonal, 
<a name="l00461"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c7867f25c654b88f3bdcb76dd7a853f1296">00461</a>                        Rhombohedral , 
<a name="l00462"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c78f6a3ca263243147ee2b534d1c757544b">00462</a>                        Hexagonal, 
<a name="l00463"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c787105ea83819b1af6af85747e20b462b4">00463</a>                        Cubic};
<a name="l00464"></a>00464 
<a name="l00465"></a>00465 
<a name="l00466"></a>00466   <span class="keyword">protected</span>:
<a name="l00467"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#09c94aa5a87671fca3499dcf7b41d84a">00467</a>     <span class="keywordtype">double</span> _a, _b, _c, _alpha, _beta, _gamma;
<a name="l00468"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#4e04f720581a30502f781e620fb56af6">00468</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> _offset; 
<a name="l00469"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#477aabff6d508d2afbc81da2c82f7405">00469</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> _v1, _v2, _v3; 
<a name="l00470"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#472527c3649b76aaaa28597ba3f214dd">00470</a>     std::string _spaceGroup;
<a name="l00471"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#32ea66231cbc01ffab8afce5ce3ce63a">00471</a>     <span class="keywordtype">int</span> _numericSpaceGroup;
<a name="l00472"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#474459fcdeb63c82700a345e59330645">00472</a>     <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c78">LatticeType</a> _lattice;
<a name="l00473"></a>00473   <span class="keyword">public</span>:
<a name="l00475"></a>00475     OBUnitCell();
<a name="l00476"></a>00476     OBUnitCell(<span class="keyword">const</span> OBUnitCell &amp;);
<a name="l00477"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#67bda850335747e7ac5d66629bda0a67">00477</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00478"></a>00478 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBUnitCell(*<span class="keyword">this</span>);}
<a name="l00479"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#29eaffe421897707aa12103bec99d3c9">00479</a>     ~OBUnitCell()    {}
<a name="l00480"></a>00480 
<a name="l00481"></a>00481     OBUnitCell &amp;operator=(<span class="keyword">const</span> OBUnitCell &amp;);
<a name="l00482"></a>00482 
<a name="l00492"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#cca66a4b8a38d190c178b6ed85f9b8ed">00492</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> a, <span class="keyword">const</span> <span class="keywordtype">double</span> b, <span class="keyword">const</span> <span class="keywordtype">double</span> c,
<a name="l00493"></a>00493                  <span class="keyword">const</span> <span class="keywordtype">double</span> alpha, <span class="keyword">const</span> <span class="keywordtype">double</span> beta, <span class="keyword">const</span> <span class="keywordtype">double</span> gamma)
<a name="l00494"></a>00494     {   _a = a; _b = b; _c = c;
<a name="l00495"></a>00495       _alpha = alpha; _beta = beta; _gamma = gamma; }
<a name="l00496"></a>00496     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v2, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v3);
<a name="l00497"></a>00497 
<a name="l00499"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#4c53fadff602620ff82a9a0c3ceda85a">00499</a>     <span class="keywordtype">void</span> SetOffset(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v1) { _offset = v1; }
<a name="l00500"></a>00500 
<a name="l00504"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#76ccdf2ccfbefae104ff52932dcf11c1">00504</a>     <span class="keywordtype">void</span> SetSpaceGroup(<span class="keyword">const</span> std::string sg) { _spaceGroup = sg; }
<a name="l00505"></a>00505     
<a name="l00511"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e0d7e7ddcd3c5e3c48c6b24908d8404f">00511</a>     <span class="keywordtype">void</span> SetSpaceGroup(<span class="keyword">const</span> <span class="keywordtype">int</span> sg) { _numericSpaceGroup = sg; }
<a name="l00512"></a>00512     
<a name="l00514"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#6516b3a121b34a94e19201da06104afa">00514</a>     <span class="keywordtype">void</span> SetLatticeType(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c78">LatticeType</a> lt) { _lattice = lt; }
<a name="l00515"></a>00515 
<a name="l00517"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#3bacc0010fd34814039b26758da67dae">00517</a>     <span class="keywordtype">double</span> GetA()    { <span class="keywordflow">return</span>(_a);    }
<a name="l00519"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#c0f9682b3743c4ec91dd9fd16bb5bd82">00519</a>     <span class="keywordtype">double</span> GetB()    { <span class="keywordflow">return</span>(_b);    }
<a name="l00521"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#229a18fdc499aafe149c55011f9fb2fb">00521</a>     <span class="keywordtype">double</span> GetC()    { <span class="keywordflow">return</span>(_c);    }
<a name="l00523"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#6897ba879a5e0f5ac4ac5aefeb94601d">00523</a>     <span class="keywordtype">double</span> GetAlpha(){ <span class="keywordflow">return</span>(_alpha);}
<a name="l00525"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#8b788f95c3fa1f2cc9aedaa1b92b78a1">00525</a>     <span class="keywordtype">double</span> GetBeta() { <span class="keywordflow">return</span>(_beta); }
<a name="l00527"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#53b3c98860a330a6b95074945fc2895f">00527</a>     <span class="keywordtype">double</span> GetGamma(){ <span class="keywordflow">return</span>(_gamma);}
<a name="l00529"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#545d26772ece9dda5ed6bd4a6f71f45b">00529</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetOffset() { <span class="keywordflow">return</span>(_offset); }
<a name="l00530"></a>00530 
<a name="l00532"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#309d90870e421229d1719465203494c3">00532</a>     <span class="keyword">const</span> std::string GetSpaceGroup() { <span class="keywordflow">return</span>(_spaceGroup); }
<a name="l00533"></a>00533                 
<a name="l00535"></a>00535     LatticeType GetLatticeType( <span class="keywordtype">int</span> spacegroup );
<a name="l00536"></a>00536     
<a name="l00538"></a>00538     LatticeType GetLatticeType();
<a name="l00539"></a>00539 
<a name="l00541"></a>00541     std::vector&lt;vector3&gt; GetCellVectors();
<a name="l00543"></a>00543     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a>   GetCellMatrix();
<a name="l00545"></a>00545     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> GetOrthoMatrix();
<a name="l00547"></a>00547     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> GetFractionalMatrix();
<a name="l00548"></a>00548 
<a name="l00550"></a>00550     <span class="keywordtype">int</span> GetSpaceGroupNumber( std::string name );
<a name="l00552"></a>00552     <span class="keywordtype">double</span> GetCellVolume();
<a name="l00553"></a>00553   };
<a name="l00554"></a>00554 
<a name="l00560"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml">00560</a>  <span class="keyword">class </span>OBAPI OBConformerData: <span class="keyword">public</span> OBGenericData
<a name="l00561"></a>00561   {
<a name="l00562"></a>00562   <span class="keyword">protected</span>:
<a name="l00564"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#6c0b393e8fabed75f977c2ef2e9776b4">00564</a>     std::vector&lt;unsigned short&gt;              _vDimension;
<a name="l00566"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#d069a68962fcc260bd3d4a1f4fc37fcb">00566</a>     std::vector&lt;double&gt;                      _vEnergies;
<a name="l00568"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#89ef302474a75b75e95f99892462da96">00568</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vForces;
<a name="l00570"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#c6c0bfd74d984fed427c1ced49acef5a">00570</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vVelocity;
<a name="l00572"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#aea44fb2ea8511661a37ff43c6df9149">00572</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vDisplace;
<a name="l00574"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ff183e0156f477b106269c9524d8b4dd">00574</a>     std::vector&lt;std::string&gt;                 _vData;
<a name="l00575"></a>00575     
<a name="l00576"></a>00576   <span class="keyword">public</span>:
<a name="l00577"></a>00577     OBConformerData();
<a name="l00578"></a>00578     OBConformerData(<span class="keyword">const</span> OBConformerData &amp;);
<a name="l00579"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#67bda850335747e7ac5d66629bda0a67">00579</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBConformerData(*<span class="keyword">this</span>);}
<a name="l00580"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#1e909f0c20e17b79ecc51ae05b57f78f">00580</a>     ~OBConformerData()    {}
<a name="l00581"></a>00581 
<a name="l00582"></a>00582     OBConformerData &amp;operator=(<span class="keyword">const</span> OBConformerData &amp;);
<a name="l00583"></a>00583 
<a name="l00584"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#98270b6a5c308d32731da6e0347604f8">00584</a>     <span class="keywordtype">void</span> SetDimension(std::vector&lt;unsigned short&gt; vd) { _vDimension = vd; }
<a name="l00585"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#83d2707a7d694d2dcbca91b52e537953">00585</a>     <span class="keywordtype">void</span> SetEnergies(std::vector&lt;double&gt; ve) { _vEnergies = ve; }
<a name="l00586"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#e5e8b9cfa509d47b804cd62dabec4384">00586</a>     <span class="keywordtype">void</span> SetForces(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vf) {_vForces = vf;}
<a name="l00587"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#10e686c1334aab2838abd83f0e43c15d">00587</a>     <span class="keywordtype">void</span> SetVelocities(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vv)
<a name="l00588"></a>00588     { _vVelocity = vv; }
<a name="l00589"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#97fd4b5e51251d3647a1d8744f5fc178">00589</a>     <span class="keywordtype">void</span> SetDisplacements(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vd)
<a name="l00590"></a>00590     { _vDisplace = vd; }
<a name="l00591"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#6a42c8d13245d5d0c11476c56e6a6e33">00591</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(std::vector&lt;std::string&gt; vdat) { _vData = vdat; }
<a name="l00592"></a>00592 
<a name="l00593"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#11ede097c372a7bca3ac9bbc8325aade">00593</a>     std::vector&lt;unsigned short&gt; GetDimension() { <span class="keywordflow">return</span> _vDimension; }
<a name="l00594"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#3d8b242eebd5ab58552d535f86bd1609">00594</a>     std::vector&lt;double&gt;         GetEnergies()  { <span class="keywordflow">return</span> _vEnergies; }
<a name="l00595"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#b47a820667f55e0899534778c414c21d">00595</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetForces() {<span class="keywordflow">return</span> _vForces; }
<a name="l00596"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#045c32551393c9123ffcaaf64b68f8df">00596</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetVelocities()
<a name="l00597"></a>00597       {<span class="keywordflow">return</span> _vVelocity;}
<a name="l00598"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#0f4fc4a438c20ca17dc4164245723b61">00598</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetDisplacements()
<a name="l00599"></a>00599       {<span class="keywordflow">return</span> _vDisplace;}
<a name="l00600"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#10bc2a88336b4e3de55ce7112ad07811">00600</a>     std::vector&lt;std::string&gt;    GetData() { <span class="keywordflow">return</span> _vData; }
<a name="l00601"></a>00601 
<a name="l00602"></a>00602   };
<a name="l00603"></a>00603 
<a name="l00608"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml">00608</a>  <span class="keyword">class </span>OBAPI OBSymmetryData: <span class="keyword">public</span> OBGenericData
<a name="l00609"></a>00609   {
<a name="l00610"></a>00610   <span class="keyword">protected</span>:
<a name="l00611"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#472527c3649b76aaaa28597ba3f214dd">00611</a>     std::string _spaceGroup;
<a name="l00612"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#4a2dc3eb5d3a544b8afe7507b7189fe9">00612</a>     std::string _pointGroup;
<a name="l00613"></a>00613   <span class="keyword">public</span>:
<a name="l00614"></a>00614     OBSymmetryData();
<a name="l00615"></a>00615     OBSymmetryData(<span class="keyword">const</span> OBSymmetryData &amp;);
<a name="l00616"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#67bda850335747e7ac5d66629bda0a67">00616</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBSymmetryData(*<span class="keyword">this</span>);}
<a name="l00617"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#af4df0ae2afcaf39df55df81e0a18a5a">00617</a>     ~OBSymmetryData()    {}
<a name="l00618"></a>00618 
<a name="l00619"></a>00619     OBSymmetryData &amp;operator=(<span class="keyword">const</span> OBSymmetryData &amp;);
<a name="l00620"></a>00620 
<a name="l00621"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#2ceb8f352cca6f223aff43d41f4fb2f1">00621</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(std::string pg, std::string sg = <span class="stringliteral">""</span>)
<a name="l00622"></a>00622     { _pointGroup = pg; _spaceGroup = sg; }
<a name="l00623"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#614446afd9dea92d4da7e8c8095aa107">00623</a>     <span class="keywordtype">void</span> SetPointGroup(std::string pg) { _pointGroup = pg; }
<a name="l00624"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#ef06d0d2bb4513684db4b052f487d45a">00624</a>     <span class="keywordtype">void</span> SetSpaceGroup(std::string sg) { _spaceGroup = sg; }
<a name="l00625"></a>00625 
<a name="l00626"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#ed0b54749bded9681b917dbbe6ce1800">00626</a>     std::string GetPointGroup() { <span class="keywordflow">return</span> _pointGroup; }
<a name="l00627"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#90903c2ee1d02cbf37d5162541691f4f">00627</a>     std::string GetSpaceGroup() { <span class="keywordflow">return</span> _spaceGroup; }
<a name="l00628"></a>00628   };
<a name="l00629"></a>00629 
<a name="l00633"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml">00633</a>   <span class="keyword">class </span>OBAPI OBTorsion
<a name="l00634"></a>00634   {
<a name="l00635"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#c59e55249c26b7453efa178aab836428">00635</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00636"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#7633b32d47d66ecdfb4f3db46e7e1422">00636</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a>;
<a name="l00637"></a>00637 
<a name="l00638"></a>00638   <span class="keyword">protected</span>:
<a name="l00639"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a0d884087af9a4eac62349cdd16f0e52">00639</a>     std::pair&lt;OBAtom*,OBAtom*&gt; _bc;
<a name="l00641"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#dae49ee49ed76ec2af6149f2a20f34bf">00641</a>     std::vector&lt;triple&lt;OBAtom*,OBAtom*,double&gt; &gt; _ads;
<a name="l00642"></a>00642 
<a name="l00643"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#b97992a9144899afd3b91c39dcc8e5e4">00643</a>     OBTorsion(): _bc(NULL, NULL)      {      }
<a name="l00644"></a>00644     <span class="comment">//protected for use only by friend classes</span>
<a name="l00645"></a>00645     OBTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *);
<a name="l00646"></a>00646 
<a name="l00647"></a>00647     std::vector&lt;quad&lt;OBAtom*,OBAtom*,OBAtom*,OBAtom*&gt; &gt; GetTorsions();
<a name="l00648"></a>00648 
<a name="l00649"></a>00649   <span class="keyword">public</span>:
<a name="l00650"></a>00650     OBTorsion(<span class="keyword">const</span> OBTorsion &amp;);
<a name="l00651"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#42a5dd5b1bb3906af399c66764589c23">00651</a>     ~OBTorsion()      {}
<a name="l00652"></a>00652 
<a name="l00653"></a>00653     OBTorsion&amp; operator=(<span class="keyword">const</span> OBTorsion &amp;);
<a name="l00654"></a>00654 
<a name="l00655"></a>00655     <span class="keywordtype">void</span> Clear();
<a name="l00656"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#31d1053aee208079bcc3c5e1884774df">00656</a>     <span class="keywordtype">bool</span> Empty()    {      <span class="keywordflow">return</span>(_bc.first == 0 &amp;&amp; _bc.second == 0);    }
<a name="l00657"></a>00657 
<a name="l00658"></a>00658     <span class="keywordtype">bool</span> AddTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *b, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *c,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *d);
<a name="l00659"></a>00659     <span class="keywordtype">bool</span> AddTorsion(<a class="code" href="structOpenBabel_1_1quad.shtml" title="A 4-element templated, based on the design of the STL pair<>.">quad&lt;OBAtom*,OBAtom*,OBAtom*,OBAtom*&gt;</a> &amp;atoms);
<a name="l00660"></a>00660 
<a name="l00661"></a>00661     <span class="keywordtype">bool</span> SetAngle(<span class="keywordtype">double</span> radians, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index = 0);
<a name="l00662"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a2c22321e05df8c58066c30bef2cf927">00662</a>     <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> * <span class="comment">/*bond*/</span>) { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00663"></a>00663 
<a name="l00664"></a>00664     <span class="keywordtype">bool</span> GetAngle(<span class="keywordtype">double</span> &amp;radians, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index =0);
<a name="l00667"></a>00667     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetBondIdx();
<a name="l00668"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#dbf6ca7c8c1512e7991441055a301c2a">00668</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize()<span class="keyword"> const    </span>{      <span class="keywordflow">return</span> _ads.size();    }
<a name="l00669"></a>00669 
<a name="l00672"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#16b7e8677bd43d8292b1f0485e4d1d5e">00672</a>     std::pair&lt;OBAtom*,OBAtom*&gt;                  GetBC()
<a name="l00673"></a>00673       {
<a name="l00674"></a>00674         <span class="keywordflow">return</span>(_bc);
<a name="l00675"></a>00675       }
<a name="l00678"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#223305867f2593a05ebbc37bdc9bb674">00678</a>     std::vector&lt;triple&lt;OBAtom*,OBAtom*,double&gt; &gt; GetADs()
<a name="l00679"></a>00679     {
<a name="l00680"></a>00680       <span class="keywordflow">return</span>(_ads) ;
<a name="l00681"></a>00681     }
<a name="l00682"></a>00682 
<a name="l00683"></a>00683     <span class="keywordtype">bool</span> IsProtonRotor();
<a name="l00684"></a>00684   };
<a name="l00685"></a>00685 
<a name="l00690"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml">00690</a>  <span class="keyword">class </span>OBAPI OBTorsionData : <span class="keyword">public</span> OBGenericData
<a name="l00691"></a>00691   {
<a name="l00692"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#c59e55249c26b7453efa178aab836428">00692</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00693"></a>00693 
<a name="l00694"></a>00694   <span class="keyword">protected</span>:
<a name="l00695"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#8284d9e040299fd3ee667ad31e34a8d3">00695</a>     std::vector&lt;OBTorsion&gt; _torsions;
<a name="l00696"></a>00696 
<a name="l00697"></a>00697     OBTorsionData();
<a name="l00698"></a>00698     OBTorsionData(<span class="keyword">const</span> OBTorsionData &amp;);
<a name="l00699"></a>00699 
<a name="l00700"></a>00700   <span class="keyword">public</span>:
<a name="l00701"></a>00701     OBTorsionData &amp;operator=(<span class="keyword">const</span> OBTorsionData &amp;);
<a name="l00702"></a>00702 
<a name="l00704"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#67bda850335747e7ac5d66629bda0a67">00704</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00705"></a>00705 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBTorsionData(*<span class="keyword">this</span>);}
<a name="l00706"></a>00706 
<a name="l00707"></a>00707     <span class="keywordtype">void</span> Clear();
<a name="l00708"></a>00708 
<a name="l00711"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#9ce867c471907a6d2a54c1873c9e10e9">00711</a>     std::vector&lt;OBTorsion&gt; GetData()<span class="keyword"> const</span>
<a name="l00712"></a>00712 <span class="keyword">      </span>{
<a name="l00713"></a>00713         <span class="keywordflow">return</span> _torsions;
<a name="l00714"></a>00714       }
<a name="l00715"></a>00715       
<a name="l00718"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#dbf6ca7c8c1512e7991441055a301c2a">00718</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      GetSize()<span class="keyword"> const</span>
<a name="l00719"></a>00719 <span class="keyword">    </span>{
<a name="l00720"></a>00720       <span class="keywordflow">return</span> _torsions.size();
<a name="l00721"></a>00721     }
<a name="l00722"></a>00722 
<a name="l00723"></a>00723     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(OBTorsion &amp;torsion);
<a name="l00724"></a>00724 
<a name="l00725"></a>00725     <span class="keywordtype">bool</span> FillTorsionArray(std::vector&lt;std::vector&lt;unsigned int&gt; &gt; &amp;torsions);
<a name="l00726"></a>00726   };
<a name="l00727"></a>00727 
<a name="l00730"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml">00730</a>   <span class="keyword">class </span>OBAPI OBAngle
<a name="l00731"></a>00731   {
<a name="l00732"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#c59e55249c26b7453efa178aab836428">00732</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00733"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#c2fadcaf6e1d7246db44fd04d90df423">00733</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a>;
<a name="l00734"></a>00734 
<a name="l00735"></a>00735   <span class="keyword">protected</span>:
<a name="l00736"></a>00736 
<a name="l00737"></a>00737     <span class="comment">//member data</span>
<a name="l00738"></a>00738 
<a name="l00739"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#6d6d58b7c653e7457ce0d0c2a907f9aa">00739</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>                *_vertex;
<a name="l00740"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#ed0a513f416c5140e604577971e1dd5c">00740</a>     std::pair&lt;OBAtom*,OBAtom*&gt;  _termini;
<a name="l00741"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#8ebc49284f65cb6d82c40fba0f9111b4">00741</a>     <span class="keywordtype">double</span>                  _radians;
<a name="l00742"></a>00742 
<a name="l00743"></a>00743     <span class="comment">//protected member functions</span>
<a name="l00744"></a>00744 
<a name="l00745"></a>00745     OBAngle();  <span class="comment">//protect constructor for use only by friend classes</span>
<a name="l00746"></a>00746     OBAngle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *vertex,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *b);
<a name="l00747"></a>00747 
<a name="l00748"></a>00748     <a class="code" href="structOpenBabel_1_1triple.shtml" title="A 3-element templated, based on the design of the STL pair<>.">triple&lt;OBAtom*,OBAtom*,OBAtom*&gt;</a> GetAtoms();
<a name="l00749"></a>00749     <span class="keywordtype">void</span> SortByIndex();
<a name="l00750"></a>00750 
<a name="l00751"></a>00751   <span class="keyword">public</span>:
<a name="l00752"></a>00752 
<a name="l00753"></a>00753     OBAngle(<span class="keyword">const</span> OBAngle &amp;);
<a name="l00754"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#35e160e815b78f064cd07164bf5aebb2">00754</a>     ~OBAngle()
<a name="l00755"></a>00755       {
<a name="l00756"></a>00756         _vertex = NULL;
<a name="l00757"></a>00757       }
<a name="l00758"></a>00758 
<a name="l00759"></a>00759     OBAngle &amp;operator = (<span class="keyword">const</span> OBAngle &amp;);
<a name="l00760"></a>00760     <span class="keywordtype">bool</span>     <a class="code" href="namespaceOpenBabel.shtml#c001b331f648fbbd8590576f59d4d2ab">operator ==</a>(<span class="keyword">const</span> OBAngle &amp;);
<a name="l00761"></a>00761 
<a name="l00762"></a>00762     <span class="keywordtype">void</span>  Clear();
<a name="l00763"></a>00763 
<a name="l00766"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#a8238cc457ba8f2b2ec938d5a3aa591b">00766</a>     <span class="keywordtype">double</span> GetAngle()<span class="keyword"> const</span>
<a name="l00767"></a>00767 <span class="keyword">    </span>{
<a name="l00768"></a>00768       <span class="keywordflow">return</span>(_radians);
<a name="l00769"></a>00769     }
<a name="l00772"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#55f96888e82a56edfa241a34f3271ae0">00772</a>     <span class="keywordtype">void</span>  SetAngle(<span class="keywordtype">double</span> angle)
<a name="l00773"></a>00773     {
<a name="l00774"></a>00774       _radians = angle;
<a name="l00775"></a>00775     }
<a name="l00776"></a>00776     <span class="keywordtype">void</span>  SetAtoms(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *vertex,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *b);
<a name="l00777"></a>00777     <span class="keywordtype">void</span>  SetAtoms(<a class="code" href="structOpenBabel_1_1triple.shtml" title="A 3-element templated, based on the design of the STL pair<>.">triple&lt;OBAtom*,OBAtom*,OBAtom*&gt;</a> &amp;atoms);
<a name="l00778"></a>00778 
<a name="l00779"></a>00779   };
<a name="l00780"></a>00780 
<a name="l00783"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml">00783</a>  <span class="keyword">class </span>OBAPI OBAngleData : <span class="keyword">public</span> OBGenericData
<a name="l00784"></a>00784   {
<a name="l00785"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#c59e55249c26b7453efa178aab836428">00785</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00786"></a>00786 
<a name="l00787"></a>00787   <span class="keyword">protected</span>:
<a name="l00788"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#259e7ee82fbf67240f0b058ce4293d2e">00788</a>     std::vector&lt;OBAngle&gt; _angles;
<a name="l00789"></a>00789 
<a name="l00790"></a>00790     OBAngleData();
<a name="l00791"></a>00791     OBAngleData(<span class="keyword">const</span> OBAngleData &amp;);
<a name="l00793"></a>00793 
<a name="l00794"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#87ade60f96e83b51d4357559ec77cd82">00794</a>     std::vector&lt;OBAngle&gt; GetData()<span class="keyword"> const</span>
<a name="l00795"></a>00795 <span class="keyword">      </span>{
<a name="l00796"></a>00796         <span class="keywordflow">return</span>(_angles);
<a name="l00797"></a>00797       }
<a name="l00798"></a>00798 
<a name="l00799"></a>00799   <span class="keyword">public</span>:
<a name="l00800"></a>00800     OBAngleData &amp;operator =(<span class="keyword">const</span> OBAngleData &amp;);
<a name="l00801"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#67bda850335747e7ac5d66629bda0a67">00801</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00802"></a>00802 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBAngleData(*<span class="keyword">this</span>);}
<a name="l00803"></a>00803 
<a name="l00804"></a>00804     <span class="keywordtype">void</span> Clear();
<a name="l00805"></a>00805     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> FillAngleArray(<span class="keywordtype">int</span> **angles, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;size);
<a name="l00806"></a>00806     <span class="keywordtype">bool</span> FillAngleArray(std::vector&lt;std::vector&lt;unsigned int&gt; &gt; &amp;angles);
<a name="l00807"></a>00807 
<a name="l00808"></a>00808     <span class="keywordtype">void</span>         <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(OBAngle &amp;);
<a name="l00811"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#dbf6ca7c8c1512e7991441055a301c2a">00811</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize()<span class="keyword"> const</span>
<a name="l00812"></a>00812 <span class="keyword">    </span>{
<a name="l00813"></a>00813       <span class="keywordflow">return</span> _angles.size();
<a name="l00814"></a>00814     }
<a name="l00815"></a>00815   };
<a name="l00816"></a>00816 
<a name="l00817"></a><a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">00817</a>   <span class="keyword">enum</span> <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a>{
<a name="l00818"></a><a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8e6eb596f7e638118128651043ff38545">00818</a>     <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8e6eb596f7e638118128651043ff38545">output</a>,     
<a name="l00819"></a><a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b837943061a284187ff6e555ac7093f528">00819</a>     <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b837943061a284187ff6e555ac7093f528">input</a>,      
<a name="l00820"></a><a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8103458136e7028a1a9b7349e64967810">00820</a>     <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8103458136e7028a1a9b7349e64967810">calcvolume</a>  
<a name="l00821"></a>00821   }; <span class="comment">// sets which atom4ref is accessed by OBChiralData</span>
<a name="l00822"></a>00822 
<a name="l00825"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml">00825</a>  <span class="keyword">class </span>OBAPI OBChiralData : <span class="keyword">public</span> OBGenericData
<a name="l00826"></a>00826   {
<a name="l00827"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#c59e55249c26b7453efa178aab836428">00827</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00828"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#c0625d6c1f6b8002765c09a45d400c4d">00828</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>;
<a name="l00829"></a>00829 
<a name="l00830"></a>00830   <span class="keyword">protected</span>:
<a name="l00831"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#89411064df2cf2407f4a89f75a5ea618">00831</a>     std::vector&lt;unsigned int&gt; _atom4refs; 
<a name="l00832"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#9886384fc77ff9471fc26cd16f822324">00832</a>     std::vector&lt;unsigned int&gt; _atom4refo; 
<a name="l00833"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#9f82047fe27246702be9b5032768ffb5">00833</a>     std::vector&lt;unsigned int&gt; _atom4refc; 
<a name="l00834"></a>00834 
<a name="l00837"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#22c1e0c27cee34369adf919eed3e3aac">00837</a>     <span class="keywordtype">int</span> parity;
<a name="l00838"></a>00838 
<a name="l00839"></a>00839   <span class="keyword">public</span>:
<a name="l00840"></a>00840 
<a name="l00841"></a>00841     OBChiralData();
<a name="l00842"></a>00842     OBChiralData(<span class="keyword">const</span> OBChiralData &amp;src);
<a name="l00843"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#67bda850335747e7ac5d66629bda0a67">00843</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00844"></a>00844 <span class="keyword">      </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> OBChiralData(*<span class="keyword">this</span>); }
<a name="l00845"></a>00845     OBChiralData &amp;operator =(<span class="keyword">const</span> OBChiralData &amp;);
<a name="l00846"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#bc2d4b013efd6a8788da4a31489d28b9">00846</a>     ~OBChiralData(){}
<a name="l00847"></a>00847 
<a name="l00848"></a>00848     <span class="keywordtype">void</span> Clear();
<a name="l00849"></a>00849 
<a name="l00851"></a>00851     std::vector&lt;unsigned int&gt; GetAtom4Refs(<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t) <span class="keyword">const</span>;
<a name="l00853"></a>00853     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetAtomRef(<span class="keywordtype">int</span> a,<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00854"></a>00854 
<a name="l00855"></a>00855     <span class="keywordtype">bool</span> SetAtom4Refs(std::vector&lt;unsigned int&gt; atom4refs, <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00856"></a>00856     <span class="keywordtype">int</span> AddAtomRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomref, <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00857"></a>00857 
<a name="l00859"></a>00859     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize(<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t) <span class="keyword">const</span>;
<a name="l00860"></a>00860   };
<a name="l00861"></a>00861 
<a name="l00864"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml">00864</a>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml" title="Defines a map between serial numbers (e.g., in a PDB file) and OBAtom objects inside...">OBSerialNums</a> : <span class="keyword">public</span> OBGenericData
<a name="l00865"></a>00865   {
<a name="l00866"></a>00866   <span class="keyword">protected</span>:
<a name="l00867"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423">00867</a>     std::map&lt;int, OBAtom*&gt; <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a>; 
<a name="l00868"></a>00868 
<a name="l00869"></a>00869   <span class="keyword">public</span>:
<a name="l00870"></a>00870 
<a name="l00871"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#c133c97c2adaeacc4a476bb27bc24500">00871</a>   <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#c133c97c2adaeacc4a476bb27bc24500">OBSerialNums</a>() :
<a name="l00872"></a>00872     OBGenericData(<span class="stringliteral">"obSerialNums"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4804a06df36aa971eb112ada03885b00" title="Residue serial numbers.">SerialNums</a>)
<a name="l00873"></a>00873       {}
<a name="l00874"></a>00874 
<a name="l00875"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#0b0be14ee04253bb90997df9884a94ca">00875</a>   <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#c133c97c2adaeacc4a476bb27bc24500">OBSerialNums</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml" title="Defines a map between serial numbers (e.g., in a PDB file) and OBAtom objects inside...">OBSerialNums</a> &amp;cp) : OBGenericData(cp)
<a name="l00876"></a>00876     {
<a name="l00877"></a>00877       <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a> = cp.<a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a>;
<a name="l00878"></a>00878     }
<a name="l00881"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#67bda850335747e7ac5d66629bda0a67">00881</a>     <span class="keyword">virtual</span> OBGenericData* <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#67bda850335747e7ac5d66629bda0a67">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00882"></a>00882 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#c133c97c2adaeacc4a476bb27bc24500">OBSerialNums</a>(*<span class="keyword">this</span>);}
<a name="l00883"></a>00883       
<a name="l00884"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#392c3230c9d3cca11b1e4d57bdd2ddfd">00884</a>     std::map&lt;int,OBAtom*&gt; &amp;<a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#392c3230c9d3cca11b1e4d57bdd2ddfd">GetData</a>()    { <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a>;    }
<a name="l00885"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#97e7e04349f25820cb9f816f7c6a6cdd">00885</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#97e7e04349f25820cb9f816f7c6a6cdd">SetData</a>(std::map&lt;int,OBAtom*&gt; &amp;sm) { <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a> = sm;  }
<a name="l00886"></a>00886       
<a name="l00887"></a>00887   };
<a name="l00888"></a>00888 
<a name="l00891"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml">00891</a>  <span class="keyword">class </span>OBAPI OBVibrationData: <span class="keyword">public</span> OBGenericData
<a name="l00892"></a>00892   {
<a name="l00893"></a>00893   <span class="keyword">protected</span>:
<a name="l00895"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#84619fd6eb56bada6e0c68c54798bde0">00895</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; _vLx;
<a name="l00896"></a>00896     
<a name="l00898"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#443d61f7fd264880b7233b3d727a5828">00898</a>     std::vector&lt;double&gt;  _vFrequencies;
<a name="l00899"></a>00899     
<a name="l00901"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#e7963c2698fd4975c7060b1c5438b272">00901</a>     std::vector&lt;double&gt;  _vIntensities;
<a name="l00902"></a>00902     
<a name="l00903"></a>00903   <span class="keyword">public</span>:
<a name="l00904"></a>00904     OBVibrationData();
<a name="l00905"></a>00905     OBVibrationData(<span class="keyword">const</span> OBVibrationData &amp;);
<a name="l00906"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#15e0e61c24d40e37ce025231ffc9ee73">00906</a>     ~OBVibrationData() {}
<a name="l00907"></a>00907     
<a name="l00908"></a>00908     OBVibrationData &amp; operator=(<span class="keyword">const</span> OBVibrationData &amp;);
<a name="l00909"></a>00909     
<a name="l00910"></a>00910     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<span class="keyword">const</span> std::vector&lt; std::vector&lt; vector3 &gt; &gt; &amp;,
<a name="l00911"></a>00911                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;,
<a name="l00912"></a>00912                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00913"></a>00913     
<a name="l00914"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#c97e8fd919f733fa03de1b70f5ee9ea8">00914</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetLx()<span class="keyword"> const</span>
<a name="l00915"></a>00915 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vLx; }
<a name="l00916"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#4710d82ad5bc5a3ea469148513a6a05f">00916</a>     std::vector&lt;double&gt; GetFrequencies()<span class="keyword"> const</span>
<a name="l00917"></a>00917 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vFrequencies; }
<a name="l00918"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#fd7bd331d7f62a7891b6615b1d1d6f5a">00918</a>     std::vector&lt;double&gt; GetIntensities()<span class="keyword"> const</span>
<a name="l00919"></a>00919 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vIntensities; }
<a name="l00920"></a>00920 
<a name="l00921"></a>00921     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetNumberOfFrequencies() <span class="keyword">const</span>;
<a name="l00922"></a>00922 };
<a name="l00923"></a>00923 
<a name="l00925"></a><a class="code" href="namespaceOpenBabel.shtml#d6fa5ee882f2b39a9101861b97267fec">00925</a>   <span class="keyword">typedef</span> std::vector&lt;OBGenericData*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#d6fa5ee882f2b39a9101861b97267fec" title="A standard iterator over vectors of OBGenericData (e.g., inherited from OBBase).">OBDataIterator</a>;
<a name="l00926"></a>00926 
<a name="l00927"></a>00927 } <span class="comment">//end namespace OpenBabel</span>
<a name="l00928"></a>00928 
<a name="l00929"></a>00929 <span class="preprocessor">#endif // OB_GENERIC_H</span>
<a name="l00930"></a>00930 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:04 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
