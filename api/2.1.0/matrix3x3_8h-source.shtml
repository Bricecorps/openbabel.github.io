<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: matrix3x3.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>matrix3x3.h</h1><a href="matrix3x3_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">matrix3x3.cpp - Handle 3D Rotation matrix.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2006 by Benoit Jacob</span>
<a name="l00007"></a>00007 <span class="comment"></span>
<a name="l00008"></a>00008 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00009"></a>00009 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00010"></a>00010 <span class="comment"> </span>
<a name="l00011"></a>00011 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00012"></a>00012 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00013"></a>00013 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00014"></a>00014 <span class="comment"> </span>
<a name="l00015"></a>00015 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00016"></a>00016 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00017"></a>00017 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00018"></a>00018 <span class="comment">GNU General Public License for more details.</span>
<a name="l00019"></a>00019 <span class="comment">***********************************************************************/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef OB_MATRIX3x3_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define OB_MATRIX3x3_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;ostream&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;<a class="code" href="vector3_8h.shtml" title="Handle 3D coordinates.">openbabel/math/vector3.h</a>&gt;</span> <span class="comment">// includes rand.h, which includes &lt;math.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;<a class="code" href="oberror_8h.shtml" title="Handle error messages, warnings, notices, etc.">openbabel/oberror.h</a>&gt;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#ifndef RAD_TO_DEG</span>
<a name="l00030"></a><a class="code" href="matrix3x3_8h.shtml#89e47af0449640d4f15191aba5ca24c6">00030</a> <span class="preprocessor"></span><span class="preprocessor">#define RAD_TO_DEG (180.0/M_PI)</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span>
<a name="l00033"></a>00033 <span class="preprocessor">#ifndef DEG_TO_RAD</span>
<a name="l00034"></a><a class="code" href="matrix3x3_8h.shtml#212460e743fecb084d717bb2180c5a56">00034</a> <span class="preprocessor"></span><span class="preprocessor">#define DEG_TO_RAD (M_PI/180.0)</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span>
<a name="l00037"></a>00037 <span class="keyword">namespace </span>OpenBabel
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039   <span class="keyword">class </span>OBRandom; <span class="comment">// class introduction in rand.h</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041   <span class="comment">// class introduction in matrix3x3.cpp</span>
<a name="l00042"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml">00042</a>   <span class="keyword">class </span>OBAPI matrix3x3
<a name="l00043"></a>00043     {
<a name="l00045"></a>00045 
<a name="l00047"></a>00047       <span class="keywordtype">double</span> ele[3][3];
<a name="l00048"></a>00048 
<a name="l00049"></a>00049     <span class="keyword">public</span>:
<a name="l00051"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#02fbfa24687cc574a29a8d1c0ff0a2db">00051</a>       matrix3x3(<span class="keywordtype">void</span>)
<a name="l00052"></a>00052         {
<a name="l00053"></a>00053           ele[0][0] = 0.0;
<a name="l00054"></a>00054           ele[0][1] = 0.0;
<a name="l00055"></a>00055           ele[0][2] = 0.0;
<a name="l00056"></a>00056           ele[1][0] = 0.0;
<a name="l00057"></a>00057           ele[1][1] = 0.0;
<a name="l00058"></a>00058           ele[1][2] = 0.0;
<a name="l00059"></a>00059           ele[2][0] = 0.0;
<a name="l00060"></a>00060           ele[2][1] = 0.0;
<a name="l00061"></a>00061           ele[2][2] = 0.0;
<a name="l00062"></a>00062         }
<a name="l00063"></a>00063 
<a name="l00065"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#c0461afe3f76b83a10fe99fac330f702">00065</a>       matrix3x3(<span class="keywordtype">double</span> s)
<a name="l00066"></a>00066         {
<a name="l00067"></a>00067           ele[0][0] = s;
<a name="l00068"></a>00068           ele[0][1] = 0.0;
<a name="l00069"></a>00069           ele[0][2] = 0.0;
<a name="l00070"></a>00070           ele[1][0] = 0.0;
<a name="l00071"></a>00071           ele[1][1] = s;
<a name="l00072"></a>00072           ele[1][2] = 0.0;
<a name="l00073"></a>00073           ele[2][0] = 0.0;
<a name="l00074"></a>00074           ele[2][1] = 0.0;
<a name="l00075"></a>00075           ele[2][2] = s;
<a name="l00076"></a>00076         }
<a name="l00077"></a>00077 
<a name="l00079"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#4736c0c51dc08725c39e02a84c2390ec">00079</a>       matrix3x3(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> row1,<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> row2,<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> row3)
<a name="l00080"></a>00080         {
<a name="l00081"></a>00081           ele[0][0] = row1.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>();
<a name="l00082"></a>00082           ele[0][1] = row1.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>();
<a name="l00083"></a>00083           ele[0][2] = row1.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>();
<a name="l00084"></a>00084           ele[1][0] = row2.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>();
<a name="l00085"></a>00085           ele[1][1] = row2.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>();
<a name="l00086"></a>00086           ele[1][2] = row2.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>();
<a name="l00087"></a>00087           ele[2][0] = row3.<a class="code" href="classOpenBabel_1_1vector3.shtml#7b1e56edcce2dfec1f65354c4f55703e" title="Access function to get the x-coordinate of the vector.">x</a>();
<a name="l00088"></a>00088           ele[2][1] = row3.<a class="code" href="classOpenBabel_1_1vector3.shtml#9085cf790064f107bc57185b11ab2eee" title="Access function to get the y-coordinate of the vector.">y</a>();
<a name="l00089"></a>00089           ele[2][2] = row3.<a class="code" href="classOpenBabel_1_1vector3.shtml#89f6c6d834e9fec20840d1754c06016e" title="Access function to get the z-coordinate of the vector.">z</a>();
<a name="l00090"></a>00090         }
<a name="l00091"></a>00091 
<a name="l00093"></a>00093 
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#0a0be9b2cd186a15d56efdaaefa9a994">00094</a>       matrix3x3(<span class="keywordtype">double</span> d[3][3])
<a name="l00095"></a>00095         {
<a name="l00096"></a>00096           ele[0][0] = d[0][0];
<a name="l00097"></a>00097           ele[0][1] = d[0][1];
<a name="l00098"></a>00098           ele[0][2] = d[0][2];
<a name="l00099"></a>00099           ele[1][0] = d[1][0];
<a name="l00100"></a>00100           ele[1][1] = d[1][1];
<a name="l00101"></a>00101           ele[1][2] = d[1][2];
<a name="l00102"></a>00102           ele[2][0] = d[2][0];
<a name="l00103"></a>00103           ele[2][1] = d[2][1];
<a name="l00104"></a>00104           ele[2][2] = d[2][2];
<a name="l00105"></a>00105         }
<a name="l00106"></a>00106 
<a name="l00108"></a>00108 
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#3f648014bbd17f8090159d2d93cbe30c">00111</a>       <span class="keywordtype">void</span> GetArray(<span class="keywordtype">double</span> *m)
<a name="l00112"></a>00112         {
<a name="l00113"></a>00113           m[0] = ele[0][0];
<a name="l00114"></a>00114           m[1] = ele[0][1];
<a name="l00115"></a>00115           m[2] = ele[0][2];
<a name="l00116"></a>00116           m[3] = ele[1][0];
<a name="l00117"></a>00117           m[4] = ele[1][1];
<a name="l00118"></a>00118           m[5] = ele[1][2];
<a name="l00119"></a>00119           m[6] = ele[2][0];
<a name="l00120"></a>00120           m[7] = ele[2][1];
<a name="l00121"></a>00121           m[8] = ele[2][2];
<a name="l00122"></a>00122         }
<a name="l00123"></a>00123 
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#a6e296b71371e9b9b334dca8c7f3314a">00126</a>       <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; operator() (<span class="keywordtype">int</span> row, <span class="keywordtype">int</span> column )<span class="keyword"> const</span>
<a name="l00127"></a>00127 <span class="keyword">      </span>{
<a name="l00128"></a>00128         <span class="keywordflow">return</span> ele[row][column];
<a name="l00129"></a>00129       }
<a name="l00130"></a>00130 
<a name="l00133"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#59c4092616c1d0ffc2c3e022350ee02d">00133</a>       <span class="keywordtype">double</span> &amp; operator() (<span class="keywordtype">int</span> row, <span class="keywordtype">int</span> column )
<a name="l00134"></a>00134       {
<a name="l00135"></a>00135         <span class="keywordflow">return</span> ele[row][column];
<a name="l00136"></a>00136       }
<a name="l00137"></a>00137 
<a name="l00139"></a>00139       matrix3x3 inverse(<span class="keywordtype">void</span>) const
<a name="l00140"></a>00140 <span class="preprocessor">#ifdef OB_OLD_MATH_CHECKS</span>
<a name="l00141"></a>00141 <span class="preprocessor"></span>  <span class="keywordflow">throw</span>(<a class="code" href="classOpenBabel_1_1OBError.shtml" title="Customizable error handling and logging -- store a message, including the method...">OBError</a>)
<a name="l00142"></a>00142 <span class="preprocessor">#endif</span>
<a name="l00143"></a>00143 <span class="preprocessor"></span>      ;
<a name="l00144"></a>00144 
<a name="l00146"></a>00146       matrix3x3 transpose(<span class="keywordtype">void</span>) <span class="keyword">const</span>;
<a name="l00147"></a>00147 
<a name="l00149"></a>00149       <span class="keywordtype">void</span> randomRotation(<a class="code" href="classOpenBabel_1_1OBRandom.shtml" title="Random number generator.">OBRandom</a> &amp;rnd);
<a name="l00150"></a>00150 
<a name="l00152"></a>00152       <span class="keywordtype">double</span> determinant() <span class="keyword">const</span>;
<a name="l00153"></a>00153 
<a name="l00155"></a>00155       <span class="keywordtype">bool</span> isSymmetric(<span class="keywordtype">void</span>) <span class="keyword">const</span>;
<a name="l00156"></a>00156 
<a name="l00158"></a>00158 
<a name="l00172"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#e8249851867ad7b2795614ee2b4f0078">00172</a>       <span class="keywordtype">bool</span> isOrthogonal(<span class="keywordtype">void</span>)<span class="keyword"> const</span>
<a name="l00173"></a>00173 <span class="keyword">        </span>{
<a name="l00174"></a>00174           <span class="keywordflow">return</span> (*<span class="keyword">this</span> * transpose()).isUnitMatrix();
<a name="l00175"></a>00175         };
<a name="l00176"></a>00176 
<a name="l00178"></a>00178       <span class="keywordtype">bool</span> isDiagonal(<span class="keywordtype">void</span>) <span class="keyword">const</span>;
<a name="l00179"></a>00179 
<a name="l00181"></a>00181       <span class="keywordtype">bool</span> isUnitMatrix(<span class="keywordtype">void</span>) <span class="keyword">const</span>;
<a name="l00182"></a>00182 
<a name="l00184"></a>00184 
<a name="l00187"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#0aba6c9a55fa03689378594bb58f1ff1">00187</a>       <span class="keywordtype">double</span> Get(<span class="keywordtype">int</span> row,<span class="keywordtype">int</span> column)<span class="keyword"> const</span>
<a name="l00188"></a>00188 <span class="keyword">        </span>{
<a name="l00189"></a>00189 <span class="preprocessor">#ifdef OB_OLD_MATH_CHECKS</span>
<a name="l00190"></a>00190 <span class="preprocessor"></span>          <span class="keywordflow">if</span> (row &gt;= 0 &amp;&amp; row &lt;= 2 &amp;&amp; column &gt;= 0 &amp;&amp; column &lt;= 2)
<a name="l00191"></a>00191             <span class="keywordflow">return</span>(ele[row][column]);
<a name="l00192"></a>00192           <span class="keywordflow">else</span>
<a name="l00193"></a>00193             <span class="keywordflow">return</span> 0.0f;
<a name="l00194"></a>00194 <span class="preprocessor">#else</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span>          <span class="keywordflow">return</span>(ele[row][column]);
<a name="l00196"></a>00196 <span class="preprocessor">#endif</span>
<a name="l00197"></a>00197 <span class="preprocessor"></span>        }
<a name="l00198"></a>00198 
<a name="l00200"></a>00200 
<a name="l00203"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#ae7e56afba0365c34add2d93288995ca">00203</a>       <span class="keywordtype">void</span> Set(<span class="keywordtype">int</span> row,<span class="keywordtype">int</span> column, <span class="keywordtype">double</span> v)
<a name="l00204"></a>00204         {
<a name="l00205"></a>00205 <span class="preprocessor">#ifdef OB_OLD_MATH_CHECKS</span>
<a name="l00206"></a>00206 <span class="preprocessor"></span>          <span class="keywordflow">if</span> (row &gt;= 0 &amp;&amp; row &lt;= 2 &amp;&amp; column &gt;= 0 &amp;&amp; column &lt;= 2)
<a name="l00207"></a>00207             ele[row][column]= v;
<a name="l00208"></a>00208 <span class="preprocessor">#else</span>
<a name="l00209"></a>00209 <span class="preprocessor"></span>          ele[row][column]= v;
<a name="l00210"></a>00210 <span class="preprocessor">#endif</span>
<a name="l00211"></a>00211 <span class="preprocessor"></span>        }
<a name="l00212"></a>00212 
<a name="l00214"></a>00214 
<a name="l00216"></a>00216       <span class="keywordtype">void</span> SetColumn(<span class="keywordtype">int</span> column, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v)
<a name="l00217"></a>00217 <span class="preprocessor">#ifdef OB_OLD_MATH_CHECKS</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span>  <span class="keywordflow">throw</span>(OBError)
<a name="l00219"></a>00219 <span class="preprocessor">#endif</span>
<a name="l00220"></a>00220 <span class="preprocessor"></span>      ;
<a name="l00221"></a>00221 
<a name="l00223"></a>00223 
<a name="l00225"></a>00225       <span class="keywordtype">void</span> SetRow(<span class="keywordtype">int</span> row, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v)
<a name="l00226"></a>00226 <span class="preprocessor">#ifdef OB_OLD_MATH_CHECKS</span>
<a name="l00227"></a>00227 <span class="preprocessor"></span>  <span class="keywordflow">throw</span>(OBError)
<a name="l00228"></a>00228 <span class="preprocessor">#endif</span>
<a name="l00229"></a>00229 <span class="preprocessor"></span>      ;
<a name="l00230"></a>00230 
<a name="l00232"></a>00232 
<a name="l00234"></a>00234       <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetColumn(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> col) <span class="keyword">const</span>
<a name="l00235"></a>00235 <span class="preprocessor">#ifdef OB_OLD_MATH_CHECKS</span>
<a name="l00236"></a>00236 <span class="preprocessor"></span>  <span class="keywordflow">throw</span>(OBError)
<a name="l00237"></a>00237 <span class="preprocessor">#endif</span>
<a name="l00238"></a>00238 <span class="preprocessor"></span>      ;
<a name="l00239"></a>00239 
<a name="l00241"></a>00241 
<a name="l00243"></a>00243       <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetRow(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> row) <span class="keyword">const</span>
<a name="l00244"></a>00244 <span class="preprocessor">#ifdef OB_OLD_MATH_CHECKS</span>
<a name="l00245"></a>00245 <span class="preprocessor"></span>  <span class="keywordflow">throw</span>(OBError)
<a name="l00246"></a>00246 <span class="preprocessor">#endif</span>
<a name="l00247"></a>00247 <span class="preprocessor"></span>      ;
<a name="l00248"></a>00248 
<a name="l00250"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#bc643ba228447b2f4899fe7d7c369f6e">00250</a>       matrix3x3 &amp;operator*=(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;c)
<a name="l00251"></a>00251       {
<a name="l00252"></a>00252         <span class="keywordflow">for</span>( <span class="keywordtype">int</span> i = 0; i &lt; 3; i++ )
<a name="l00253"></a>00253           <span class="keywordflow">for</span>( <span class="keywordtype">int</span> j = 0; j &lt; 3; j++ )
<a name="l00254"></a>00254             ele[i][j] *= c;
<a name="l00255"></a>00255         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00256"></a>00256       }
<a name="l00257"></a>00257 
<a name="l00259"></a><a class="code" href="classOpenBabel_1_1matrix3x3.shtml#56c27ea39208380495f812df6b865289">00259</a>       matrix3x3 &amp;operator/=(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;c)
<a name="l00260"></a>00260       {
<a name="l00261"></a>00261         <span class="keywordflow">return</span>( (*<span class="keyword">this</span>) *= ( 1.0 / c ) );
<a name="l00262"></a>00262       }
<a name="l00263"></a>00263 
<a name="l00266"></a>00266       <span class="keywordtype">void</span> SetupRotMat(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z);
<a name="l00267"></a>00267 
<a name="l00269"></a>00269       <span class="keywordtype">void</span> PlaneReflection(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;norm);
<a name="l00270"></a>00270 
<a name="l00273"></a>00273       <span class="keywordtype">void</span> RotAboutAxisByAngle(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;axis, <span class="keyword">const</span> <span class="keywordtype">double</span> angle);
<a name="l00274"></a>00274 
<a name="l00280"></a>00280       <span class="keywordtype">void</span> FillOrth(<span class="keywordtype">double</span> alpha, <span class="keywordtype">double</span> beta, <span class="keywordtype">double</span> gamma,
<a name="l00281"></a>00281                     <span class="keywordtype">double</span> a, <span class="keywordtype">double</span> b, <span class="keywordtype">double</span> c);
<a name="l00282"></a>00282 
<a name="l00284"></a>00284       matrix3x3 findEigenvectorsIfSymmetric(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;eigenvals) <span class="keyword">const</span>
<a name="l00285"></a>00285 <span class="preprocessor">#ifdef OB_OLD_MATH_CHECKS</span>
<a name="l00286"></a>00286 <span class="preprocessor"></span>  <span class="keywordflow">throw</span>(OBError)
<a name="l00287"></a>00287 <span class="preprocessor">#endif</span>
<a name="l00288"></a>00288 <span class="preprocessor"></span>      ;
<a name="l00289"></a>00289 
<a name="l00291"></a>00291       <span class="keyword">friend</span> OBAPI <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator *</a>(<span class="keyword">const</span> matrix3x3 &amp;,<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;);
<a name="l00292"></a>00292 
<a name="l00294"></a>00294       <span class="keyword">friend</span> OBAPI matrix3x3 <a class="code" href="namespaceOpenBabel.shtml#264bb0208c4c4bd8539702b2f2684f09" title="Multiplication with a scalar.">operator *</a>(<span class="keyword">const</span> matrix3x3 &amp;,<span class="keyword">const</span> matrix3x3 &amp;);
<a name="l00295"></a>00295 
<a name="l00297"></a>00297       <span class="keyword">friend</span> OBAPI std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#70c653ee69fdbd27f77d430e4aed3cad" title="Prints a representation of the vector as a row vector of the form "<0.1,1,2>".">operator&lt;&lt; </a>( std::ostream&amp;, <span class="keyword">const</span> matrix3x3 &amp; ) ;
<a name="l00298"></a>00298 
<a name="l00300"></a>00300       <span class="keyword">static</span> <span class="keywordtype">void</span> jacobi(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n, <span class="keywordtype">double</span> *a, <span class="keywordtype">double</span> *d, <span class="keywordtype">double</span> *v);
<a name="l00301"></a>00301     };
<a name="l00302"></a>00302 
<a name="l00303"></a>00303 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00304"></a>00304 <span class="preprocessor"></span>  OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#f1a9769dcdfc9bb77a3747a3c89c3d03">center_coords</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00305"></a>00305 <span class="preprocessor">#endif</span>
<a name="l00306"></a>00306 <span class="preprocessor"></span>}
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 <span class="preprocessor">#endif // OB_MATRIX3x3_H</span>
<a name="l00309"></a>00309 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:05 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
