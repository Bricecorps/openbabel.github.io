<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: bitvec.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>bitvec.h</h1><a href="bitvec_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">bitvec.h - Vector of bits.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_BITVEC_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_BITVEC_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#ifdef WIN32</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#pragma warning (disable : 4786)</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#ifndef SETWORD</span>
<a name="l00033"></a><a class="code" href="bitvec_8h.shtml#9fe4f0c47a767fe2d6e2c365059a5a65">00033</a> <span class="preprocessor"></span><span class="preprocessor">#define SETWORD 32</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00036"></a>00036 <span class="preprocessor">#ifndef STARTWORDS</span>
<a name="l00037"></a><a class="code" href="bitvec_8h.shtml#b0d0da65f8c1f9e86e1c16294dc572aa">00037</a> <span class="preprocessor"></span><span class="preprocessor">#define STARTWORDS 10</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">#endif //STARTBITS</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span>
<a name="l00040"></a>00040 <span class="keyword">namespace </span>OpenBabel
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042 
<a name="l00043"></a>00043   <span class="comment">// class introduction in bitvec.cpp</span>
<a name="l00044"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml">00044</a>   <span class="keyword">class </span>OBAPI OBBitVec
<a name="l00045"></a>00045     {
<a name="l00046"></a>00046       <span class="keywordtype">int</span> _size;
<a name="l00047"></a>00047       std::vector&lt;int&gt; _set;
<a name="l00048"></a>00048     <span class="keyword">public</span>:
<a name="l00049"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#f0100bd07b2642e38b29dc8e74ff765b">00049</a>       OBBitVec()
<a name="l00050"></a>00050         {
<a name="l00051"></a>00051           _set.resize(<a class="code" href="bitvec_8h.shtml#b0d0da65f8c1f9e86e1c16294dc572aa">STARTWORDS</a>);
<a name="l00052"></a>00052           _size=_set.size();
<a name="l00053"></a>00053           Clear();
<a name="l00054"></a>00054         }
<a name="l00055"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#903d892e56acd7c79cb54f4a4abab4a7">00055</a>       OBBitVec(<span class="keywordtype">int</span> bits)
<a name="l00056"></a>00056         {
<a name="l00057"></a>00057           _set.resize(bits/<a class="code" href="bitvec_8h.shtml#9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a>);
<a name="l00058"></a>00058           _size=_set.size();
<a name="l00059"></a>00059           Clear();
<a name="l00060"></a>00060         }
<a name="l00062"></a>00062       OBBitVec(<span class="keyword">const</span> OBBitVec&amp;);
<a name="l00063"></a>00063       <span class="keywordtype">void</span> SetBitOn(<span class="keywordtype">int</span>);
<a name="l00064"></a>00064       <span class="keywordtype">void</span> SetBitOff(<span class="keywordtype">int</span>);
<a name="l00065"></a>00065       <span class="keywordtype">void</span> SetRangeOn(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00066"></a>00066       <span class="keywordtype">void</span> SetRangeOff(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00067"></a>00067       <span class="keywordtype">void</span> Fold(<span class="keywordtype">int</span>);
<a name="l00068"></a>00068 
<a name="l00071"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#d78571ba0d803b71eca7a0e4615a65c5">00071</a>       <span class="keywordtype">int</span> FirstBit(<span class="keywordtype">int</span> index = 0)
<a name="l00072"></a>00072         {
<a name="l00073"></a>00073           <span class="keywordflow">return</span> (BitIsSet(index) ? 0  : NextBit(index));
<a name="l00074"></a>00074         }
<a name="l00075"></a>00075       <span class="keywordtype">int</span> NextBit(<span class="keywordtype">int</span>);
<a name="l00077"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#cc637b2c1aa0b73dc4ba8c53d6577e6c">00077</a>       <span class="keywordtype">int</span> EndBit()    {        <span class="keywordflow">return</span>(-1);    }
<a name="l00079"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a4907b035ab197f57102411e48b2cfc0">00079</a>       <span class="keywordtype">int</span> GetSize()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_size);    }
<a name="l00081"></a>00081       <span class="keywordtype">int</span> CountBits();
<a name="l00082"></a>00082 
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#31d1053aee208079bcc3c5e1884774df">00084</a>       <span class="keywordtype">bool</span> Empty()   { <span class="keywordflow">return</span>(IsEmpty()); }
<a name="l00085"></a>00085       <span class="keywordtype">bool</span> IsEmpty();
<a name="l00087"></a>00087       <span class="keywordtype">bool</span> Resize(<span class="keywordtype">int</span> maxbits);
<a name="l00088"></a>00088 
<a name="l00089"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#7551155bb4901aa0f8f0a1d5bcb2cd90">00089</a>       <span class="keywordtype">bool</span> BitIsSet(<span class="keywordtype">int</span> bit)
<a name="l00090"></a>00090         {
<a name="l00091"></a>00091           <span class="keywordflow">return</span>((bit/<a class="code" href="bitvec_8h.shtml#9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a> &gt;= GetSize()) ?
<a name="l00092"></a>00092                  <span class="keyword">false</span> : _set[bit/<a class="code" href="bitvec_8h.shtml#9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a>]&gt;&gt;(bit%<a class="code" href="bitvec_8h.shtml#9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a>)&amp;1);
<a name="l00093"></a>00093         }
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#d03f0ecf79c8ce72b389b44c2f446ccc">00094</a>       <span class="keywordtype">bool</span> BitIsOn(<span class="keywordtype">int</span> bit)
<a name="l00095"></a>00095         {
<a name="l00096"></a>00096           <span class="keywordflow">return</span>((bit/<a class="code" href="bitvec_8h.shtml#9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a> &gt;= GetSize()) ?
<a name="l00097"></a>00097                  <span class="keyword">false</span> : _set[bit/<a class="code" href="bitvec_8h.shtml#9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a>]&gt;&gt;(bit%<a class="code" href="bitvec_8h.shtml#9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a>)&amp;1);
<a name="l00098"></a>00098         }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100       <span class="keywordtype">void</span> FromVecInt(std::vector&lt;int&gt;&amp;);
<a name="l00101"></a>00101       <span class="keywordtype">void</span> FromString(std::string&amp;,<span class="keywordtype">int</span>);
<a name="l00102"></a>00102       <span class="keywordtype">void</span> ToVecInt(std::vector&lt;int&gt;&amp;);
<a name="l00103"></a>00103       <span class="keywordtype">void</span> Clear(<span class="keywordtype">void</span>);
<a name="l00105"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#00e05e1bb6f3185b1a40728679be5274">00105</a>       <span class="keywordtype">void</span> Negate()
<a name="l00106"></a>00106         {
<a name="l00107"></a>00107           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= 0; i != _size; ++i)
<a name="l00108"></a>00108             {
<a name="l00109"></a>00109               _set[i] = ~_set[i];
<a name="l00110"></a>00110             }
<a name="l00111"></a>00111         }
<a name="l00112"></a>00112 
<a name="l00114"></a>00114       OBBitVec &amp;operator= (<span class="keyword">const</span> OBBitVec &amp;);
<a name="l00115"></a>00115       OBBitVec &amp;operator&amp;= (OBBitVec &amp;);
<a name="l00116"></a>00116       OBBitVec &amp;operator|= (OBBitVec &amp;);
<a name="l00117"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#67cbe6495b3010f637aa153c3f124eda">00117</a>       OBBitVec &amp;operator|= (<span class="keyword">const</span> <span class="keywordtype">int</span> i)
<a name="l00118"></a>00118         {
<a name="l00119"></a>00119           SetBitOn(i);
<a name="l00120"></a>00120           <span class="keywordflow">return</span>(*<span class="keyword">this</span>);
<a name="l00121"></a>00121         }
<a name="l00122"></a>00122       OBBitVec &amp;operator^= (OBBitVec &amp;);
<a name="l00123"></a>00123       OBBitVec &amp;operator-= (OBBitVec &amp;);
<a name="l00124"></a>00124       OBBitVec &amp;operator+= (OBBitVec &amp;bv);
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#19166f24e947aa600dcbaf68acec7f1f">00125</a>       <span class="keywordtype">bool</span> operator[] (<span class="keywordtype">int</span> bit)
<a name="l00126"></a>00126         {
<a name="l00127"></a>00127           <span class="keywordflow">return</span>((bit/<a class="code" href="bitvec_8h.shtml#9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a> &gt;= GetSize()) ?
<a name="l00128"></a>00128                  <span class="keyword">false</span> : _set[bit/<a class="code" href="bitvec_8h.shtml#9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a>]&gt;&gt;(bit%<a class="code" href="bitvec_8h.shtml#9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a>)&amp;1);
<a name="l00129"></a>00129         }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131       <span class="keyword">friend</span> OBBitVec <a class="code" href="namespaceOpenBabel.shtml#c14fac6aa218b66e1e27e74608f186cd">operator| </a>(OBBitVec &amp;, OBBitVec &amp;);
<a name="l00132"></a>00132       <span class="keyword">friend</span> OBBitVec <a class="code" href="namespaceOpenBabel.shtml#d58c7e11e884e3db8fccd812d39d7040">operator&amp; </a>(OBBitVec &amp;,OBBitVec &amp;);
<a name="l00133"></a>00133       <span class="keyword">friend</span> OBBitVec <a class="code" href="namespaceOpenBabel.shtml#05b0056b593f42ad241165f517d9780a">operator^ </a>(OBBitVec &amp;,OBBitVec &amp;);
<a name="l00134"></a>00134       <span class="keyword">friend</span> OBBitVec <a class="code" href="namespaceOpenBabel.shtml#a2e0e5d4e59766809b5b61ab9b513a2e" title="Vector subtraction.">operator- </a>(OBBitVec &amp;,OBBitVec &amp;);
<a name="l00135"></a>00135       <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#c001b331f648fbbd8590576f59d4d2ab">operator== </a>(<span class="keyword">const</span> OBBitVec &amp;,<span class="keyword">const</span> OBBitVec &amp;);
<a name="l00136"></a>00136       <span class="keyword">friend</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#3ba5fcca1ecb1241049411be7017186d">operator&lt; </a>(<span class="keyword">const</span> OBBitVec &amp;bv1, <span class="keyword">const</span> OBBitVec &amp;bv2);
<a name="l00137"></a>00137 
<a name="l00138"></a>00138       <span class="keyword">friend</span> std::istream&amp; <a class="code" href="namespaceOpenBabel.shtml#3a21f3b512cf9bbc16301c29079c99c8">operator&gt;&gt; </a>( std::istream&amp;, OBBitVec&amp; );
<a name="l00139"></a>00139       <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#70c653ee69fdbd27f77d430e4aed3cad" title="Prints a representation of the vector as a row vector of the form "<0.1,1,2>".">operator&lt;&lt; </a>( std::ostream&amp;, <span class="keyword">const</span> OBBitVec&amp; ) ;
<a name="l00140"></a>00140         
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#54f0ed8405b1e3645b59d03a0d85a2dc">00142</a>       <span class="keywordtype">void</span> GetWords(std::vector&lt;unsigned int&gt;&amp; vec)
<a name="l00143"></a>00143         {
<a name="l00144"></a>00144           std::vector&lt;int&gt;::iterator itr;
<a name="l00145"></a>00145           <span class="keywordflow">for</span>(itr=_set.begin();itr!=_set.end();itr++)
<a name="l00146"></a>00146             vec.push_back(*itr);
<a name="l00147"></a>00147         }
<a name="l00148"></a>00148     };
<a name="l00149"></a>00149 
<a name="l00151"></a>00151   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#cb0124a1ab83523d88207f71f037ec59" title="This function can change the size of second parameter. There is an alternative with...">Tanimoto</a>(OBBitVec&amp;,OBBitVec&amp;);
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 }
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 <span class="preprocessor">#endif // OB_BITVEC_H</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:04 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
