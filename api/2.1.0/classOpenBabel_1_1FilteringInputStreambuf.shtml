<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: FilteringInputStreambuf Class Template Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul>
</div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">FilteringInputStreambuf</a></div>
<h1>FilteringInputStreambuf Class Template Reference</h1><!-- doxytag: class="OpenBabel::FilteringInputStreambuf" -->Delivers characters from an istream or streambuf from a source while filtering.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="lineend_8h-source.shtml">openbabel/lineend.h</a>&gt;</code>
<p>
<a href="classOpenBabel_1_1FilteringInputStreambuf-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml#5286eeeb41318332c62b76dbf0f05430">FilteringInputStreambuf</a> (std::streambuf *source=NULL, bool deleteWhenFinished=false)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml#848f7550d0280c87631b47f76c715013">~FilteringInputStreambuf</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml#71cbc6b1ec560d3788dac4c02e9328da">overflow</a> (int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml#175cdf589e167db22f30ccacdf98e007">underflow</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml#553fc1343cc7a747775864d1d124a5d5">sync</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual std::streampos&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml#ea680f1e3476af107476e375aaac4b6d">seekoff</a> (std::streamoff off, std::ios_base::seekdir way, std::ios_base::openmode which=std::ios_base::in|std::ios_base::out)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual std::streampos&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml#9f073109a0b2c593a7c63967869c366d">seekpos</a> (std::streampos sp, std::ios_base::openmode which=std::ios_base::in|std::ios_base::out)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::streambuf *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml#e76f0902b7e1ef18e61077e7b36e6f21">GetSource</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml#b8629df5351a87a231c5e95e5518dc4b">SetSource</a> (std::streambuf *newsource)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<h3>template&lt;class Extractor&gt;<br>
 class OpenBabel::FilteringInputStreambuf&lt; Extractor &gt;</h3>

Delivers characters from an istream or streambuf from a source while filtering. 
<p>
Based on an article by James Kanze, "Filtering Streambufs" <a href="http://kanze.james.neuf.fr/articles/fltrsbf1.html">http://kanze.james.neuf.fr/articles/fltrsbf1.html</a><p>
A <a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml" title="Delivers characters from an istream or streambuf from a source while filtering.">FilteringInputStreambuf</a> delivers characters on request to an istream or a destination rdbuf(). It receives them from a source rdbuf. In doing the transfer it filters them in a way decided by the class specified in template parameter Extractor.<p>
seekg and tellg requests from the stream are passed through to source rdbuf. This allows return to a position in the input data that was previously noted. This is adequate to allow OpenBabel's fastsearch indexing, but may not be good enough for some other applications that use random access.<p>
A class <a class="el" href="classOpenBabel_1_1LineEndingExtractor.shtml" title="Replaces CRLF (DOS) and CR (Mac OS 9) line endings by LF (POSIX).">LineEndingExtractor</a> converts DOS and MAC line endings to the UNIX line ending.<p>
This filtering process is potentially extendable, with a chain of FilteringInputStreambufs each carrying out its filtering task. For instance a decompression streambuf could feed a LineEnding filter, which in tern was read by an input stream. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="5286eeeb41318332c62b76dbf0f05430"></a><!-- doxytag: member="OpenBabel::FilteringInputStreambuf::FilteringInputStreambuf" ref="5286eeeb41318332c62b76dbf0f05430" args="(std::streambuf *source=NULL, bool deleteWhenFinished=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">FilteringInputStreambuf</a>           </td>
          <td>(</td>
          <td class="paramtype">std::streambuf *&nbsp;</td>
          <td class="paramname"> <em>source</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>deleteWhenFinished</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="848f7550d0280c87631b47f76c715013"></a><!-- doxytag: member="OpenBabel::FilteringInputStreambuf::~FilteringInputStreambuf" ref="848f7550d0280c87631b47f76c715013" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">FilteringInputStreambuf</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="71cbc6b1ec560d3788dac4c02e9328da"></a><!-- doxytag: member="OpenBabel::FilteringInputStreambuf::overflow" ref="71cbc6b1ec560d3788dac4c02e9328da" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual int overflow           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="175cdf589e167db22f30ccacdf98e007"></a><!-- doxytag: member="OpenBabel::FilteringInputStreambuf::underflow" ref="175cdf589e167db22f30ccacdf98e007" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int underflow           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="553fc1343cc7a747775864d1d124a5d5"></a><!-- doxytag: member="OpenBabel::FilteringInputStreambuf::sync" ref="553fc1343cc7a747775864d1d124a5d5" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int sync           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ea680f1e3476af107476e375aaac4b6d"></a><!-- doxytag: member="OpenBabel::FilteringInputStreambuf::seekoff" ref="ea680f1e3476af107476e375aaac4b6d" args="(std::streamoff off, std::ios_base::seekdir way, std::ios_base::openmode which=std::ios_base::in|std::ios_base::out)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::streampos seekoff           </td>
          <td>(</td>
          <td class="paramtype">std::streamoff&nbsp;</td>
          <td class="paramname"> <em>off</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ios_base::seekdir&nbsp;</td>
          <td class="paramname"> <em>way</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ios_base::openmode&nbsp;</td>
          <td class="paramname"> <em>which</em> = <code>std::ios_base::in&nbsp;|&nbsp;std::ios_base::out</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9f073109a0b2c593a7c63967869c366d"></a><!-- doxytag: member="OpenBabel::FilteringInputStreambuf::seekpos" ref="9f073109a0b2c593a7c63967869c366d" args="(std::streampos sp, std::ios_base::openmode which=std::ios_base::in|std::ios_base::out)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::streampos seekpos           </td>
          <td>(</td>
          <td class="paramtype">std::streampos&nbsp;</td>
          <td class="paramname"> <em>sp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ios_base::openmode&nbsp;</td>
          <td class="paramname"> <em>which</em> = <code>std::ios_base::in&nbsp;|&nbsp;std::ios_base::out</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="e76f0902b7e1ef18e61077e7b36e6f21"></a><!-- doxytag: member="OpenBabel::FilteringInputStreambuf::GetSource" ref="e76f0902b7e1ef18e61077e7b36e6f21" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::streambuf* GetSource           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns current source. 
<p>

</div>
</div><p>
<a class="anchor" name="b8629df5351a87a231c5e95e5518dc4b"></a><!-- doxytag: member="OpenBabel::FilteringInputStreambuf::SetSource" ref="b8629df5351a87a231c5e95e5518dc4b" args="(std::streambuf *newsource)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetSource           </td>
          <td>(</td>
          <td class="paramtype">std::streambuf *&nbsp;</td>
          <td class="paramname"> <em>newsource</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Changes the source. 
<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="lineend_8h-source.shtml">lineend.h</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:16 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
