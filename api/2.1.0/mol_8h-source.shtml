<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: mol.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>mol.h</h1><a href="mol_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">mol.h - Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue.</span>
<a name="l00003"></a>00003 <span class="comment">        (the main header for Open Babel)</span>
<a name="l00004"></a>00004 <span class="comment"> </span>
<a name="l00005"></a>00005 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00007"></a>00007 <span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00010"></a>00010 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00011"></a>00011 <span class="comment"> </span>
<a name="l00012"></a>00012 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00013"></a>00013 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00014"></a>00014 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00015"></a>00015 <span class="comment"> </span>
<a name="l00016"></a>00016 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00017"></a>00017 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00018"></a>00018 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00019"></a>00019 <span class="comment">GNU General Public License for more details.</span>
<a name="l00020"></a>00020 <span class="comment">***********************************************************************/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef OB_MOL_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define OB_MOL_H</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">// Currently includes many headers for 2.x backwards compatibility</span>
<a name="l00038"></a>00038 <span class="comment">// \deprecated -- this will be cleaned up in 3.0 efforts </span>
<a name="l00039"></a>00039 <span class="comment">//      to improve compile time significantly. </span>
<a name="l00040"></a>00040 <span class="comment">// Only include necessary headers and class declaration stubs.</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;<a class="code" href="atom_8h.shtml" title="Handle atoms.">openbabel/atom.h</a>&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;<a class="code" href="bond_8h.shtml" title="Handle bonds.">openbabel/bond.h</a>&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;<a class="code" href="data_8h.shtml" title="Global data and resource file parsers.">openbabel/data.h</a>&gt;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &lt;<a class="code" href="chains_8h.shtml" title="Parse for macromolecule chains and residues.">openbabel/chains.h</a>&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;<a class="code" href="vector3_8h.shtml" title="Handle 3D coordinates.">openbabel/math/vector3.h</a>&gt;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml" title="Fast and efficient bitstring class.">openbabel/bitvec.h</a>&gt;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;<a class="code" href="residue_8h.shtml" title="Defines for residue properties, names, etc.">openbabel/residue.h</a>&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;<a class="code" href="ring_8h.shtml" title="Deal with rings, find smallest set of smallest rings (SSSR).">openbabel/ring.h</a>&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;<a class="code" href="generic_8h.shtml" title="Handle generic data classes. Custom data for atoms, bonds, etc.">openbabel/generic.h</a>&gt;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;<a class="code" href="typer_8h.shtml" title="Open Babel atom and aromaticity typer.">openbabel/typer.h</a>&gt;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &lt;<a class="code" href="oberror_8h.shtml" title="Handle error messages, warnings, notices, etc.">openbabel/oberror.h</a>&gt;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &lt;<a class="code" href="obiter_8h.shtml" title="STL-style iterators for Open Babel.">openbabel/obiter.h</a>&gt;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &lt;<a class="code" href="internalcoord_8h.shtml" title="Declaration of OBInternalCoord class, conversion between Cartesian and Z-matrix form...">openbabel/internalcoord.h</a>&gt;</span>
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="keyword">namespace </span>OpenBabel
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058 
<a name="l00059"></a>00059   <span class="keyword">class </span>OBAtom;
<a name="l00060"></a>00060   <span class="keyword">class </span>OBBond;
<a name="l00061"></a>00061   <span class="keyword">class </span>OBInternalCoord;
<a name="l00062"></a>00062 
<a name="l00063"></a>00063   <span class="comment">// Class OBMol</span>
<a name="l00064"></a>00064   <span class="comment">//MOL Property Macros (flags) -- 32+ bits</span>
<a name="l00066"></a><a class="code" href="mol_8h.shtml#1ab7f39b595f0f69b77c5907c804afc4">00066</a> <span class="comment"></span><span class="preprocessor">#define OB_SSSR_MOL              (1&lt;&lt;1)</span>
<a name="l00068"></a><a class="code" href="mol_8h.shtml#e9ad3600741ed030f463badacb48cbf9">00068</a> <span class="preprocessor">#define OB_RINGFLAGS_MOL         (1&lt;&lt;2)</span>
<a name="l00070"></a><a class="code" href="mol_8h.shtml#00796165b0d091f4b0987ee2a0ba5609">00070</a> <span class="preprocessor">#define OB_AROMATIC_MOL          (1&lt;&lt;3)</span>
<a name="l00072"></a><a class="code" href="mol_8h.shtml#bf2d91f3d8e6d4db13029a0130a262a5">00072</a> <span class="preprocessor">#define OB_ATOMTYPES_MOL         (1&lt;&lt;4)</span>
<a name="l00074"></a><a class="code" href="mol_8h.shtml#bdf1bef91d791e4ec64071377a06e491">00074</a> <span class="preprocessor">#define OB_CHIRALITY_MOL         (1&lt;&lt;5)</span>
<a name="l00076"></a><a class="code" href="mol_8h.shtml#ade7aaf66074d41ccc89a88fde187ef0">00076</a> <span class="preprocessor">#define OB_PCHARGE_MOL           (1&lt;&lt;6)</span>
<a name="l00078"></a><a class="code" href="mol_8h.shtml#2609984a86f8eaca60bd0995ab1ff082">00078</a> <span class="preprocessor">#define OB_HYBRID_MOL            (1&lt;&lt;8)</span>
<a name="l00080"></a><a class="code" href="mol_8h.shtml#220b0e4aac833823ef37f6d10ac7a254">00080</a> <span class="preprocessor">#define OB_IMPVAL_MOL            (1&lt;&lt;9)</span>
<a name="l00082"></a><a class="code" href="mol_8h.shtml#db1c838e0460bae3347db0d94b4e63c7">00082</a> <span class="preprocessor">#define OB_KEKULE_MOL            (1&lt;&lt;10)</span>
<a name="l00084"></a><a class="code" href="mol_8h.shtml#a9b307d4356f47b80ba6516405bea32e">00084</a> <span class="preprocessor">#define OB_CLOSURE_MOL           (1&lt;&lt;11)</span>
<a name="l00086"></a><a class="code" href="mol_8h.shtml#488eaf115c8c8e3f8ac24384f80f6f88">00086</a> <span class="preprocessor">#define OB_H_ADDED_MOL           (1&lt;&lt;12)</span>
<a name="l00088"></a><a class="code" href="mol_8h.shtml#f3ca96a4c05940f8ed8fdc159b93656a">00088</a> <span class="preprocessor">#define OB_PH_CORRECTED_MOL      (1&lt;&lt;13)</span>
<a name="l00090"></a><a class="code" href="mol_8h.shtml#d34e5e48a2b7f4c149070647189d9d71">00090</a> <span class="preprocessor">#define OB_AROM_CORRECTED_MOL    (1&lt;&lt;14)</span>
<a name="l00092"></a><a class="code" href="mol_8h.shtml#5aaff7bcb11a37508fe32d17ad57dea0">00092</a> <span class="preprocessor">#define OB_CHAINS_MOL            (1&lt;&lt;15)</span>
<a name="l00094"></a><a class="code" href="mol_8h.shtml#3168124e0bc8b31e2d4392f1da02fbd7">00094</a> <span class="preprocessor">#define OB_TCHARGE_MOL                 (1&lt;&lt;16)</span>
<a name="l00096"></a><a class="code" href="mol_8h.shtml#8ae8b8d431ee5649e4dad8bbdfd5092d">00096</a> <span class="preprocessor">#define OB_TSPIN_MOL             (1&lt;&lt;17)</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span>  <span class="comment">// flags 18-32 unspecified</span>
<a name="l00098"></a><a class="code" href="mol_8h.shtml#e7cd3ed4ac08cc188ed556c26ff26abe">00098</a> <span class="preprocessor">#define OB_CURRENT_CONFORMER     -1</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>
<a name="l00100"></a>00100   <span class="comment">// class introduction in mol.cpp</span>
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml">00101</a>  <span class="keyword">class </span>OBAPI OBMol: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>
<a name="l00102"></a>00102   {
<a name="l00103"></a>00103   <span class="keyword">protected</span>:
<a name="l00104"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a4a61b1d913f2bee1e0ed5d9daf26549">00104</a>     <span class="keywordtype">int</span>                           _flags;       
<a name="l00105"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c23878536c8da0ff97c0985627dd5646">00105</a>     <span class="keywordtype">bool</span>                          _autoPartialCharge;
<a name="l00106"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#e1c74119422bd6a52bb7c384b42dca4c">00106</a>     <span class="keywordtype">bool</span>                          _autoFormalCharge;
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#1dda4ed41c70aef0a361682dd9b2b0f9">00107</a>     std::string                   _title;       
<a name="l00108"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#d3bcdbfad8eedc0452fe543badd080d5">00108</a>     std::vector&lt;OBAtom*&gt;          _vatom;       
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#3c7208419c7703e947e9a1c365838b98">00109</a>     std::vector&lt;OBBond*&gt;          _vbond;       
<a name="l00110"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#601fbf5c8e5b7d92281dbe6a124d7f2c">00110</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            _dimension;   
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#d93165c379393f8eb17506f1f9820a1a">00111</a>     <span class="keywordtype">double</span>                        _energy;      
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aaeee07c1d80b2638b8b9ace0095c9cd">00112</a>     <span class="keywordtype">int</span>                           _totalCharge; 
<a name="l00113"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7a92cb97f8aa52f145b2e928cf480a07">00113</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _totalSpin;   
<a name="l00114"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#706bc4f751bf06cf864893451a7d21e4">00114</a>     <span class="keywordtype">double</span>                       *_c;             
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6fb1d704dcaeb179720ac771745850b1">00115</a>     std::vector&lt;double*&gt;          _vconf;       
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#370c739afb1e8ed20a96680ec9f1b219">00116</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _natoms;      
<a name="l00117"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#35a920486c1a28ca09de0eeb9dbb174c">00117</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _nbonds;      
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#e1c29d0efe6187e8726962008c81e956">00118</a>     std::vector&lt;OBResidue*&gt;       _residue;     
<a name="l00119"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6c2a9726c57abf03a40339776f5d9a0b">00119</a>     std::vector&lt;OBInternalCoord*&gt; _internals;   
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#5db8eb0124fad1bf66ddaf930b4840f0">00120</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            _mod;         
<a name="l00121"></a>00121 
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#3a1dc0419a66d2e7288214342de43b7a">00122</a>     <span class="keywordtype">bool</span>  HasFlag(<span class="keywordtype">int</span> flag)    { <span class="keywordflow">return</span>((_flags &amp; flag) ? <span class="keyword">true</span> : <span class="keyword">false</span>); }
<a name="l00123"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#dcdab8f96dc4fdc2940749e527087245">00123</a>     <span class="keywordtype">void</span>  SetFlag(<span class="keywordtype">int</span> flag)    { _flags |= flag; }
<a name="l00124"></a>00124 
<a name="l00126"></a>00126 
<a name="l00127"></a>00127     <span class="keywordtype">void</span> start_kekulize(std::vector &lt;OBAtom*&gt; &amp;cycle, std::vector&lt;int&gt; &amp;electron);
<a name="l00128"></a>00128     <span class="keywordtype">int</span> expand_kekulize(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom1, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom2, std::vector&lt;int&gt; &amp;currentState, std::vector&lt;int&gt; &amp;initState, std::vector&lt;int&gt; &amp;bcurrentState, std::vector&lt;int&gt; &amp;binitState, std::vector&lt;bool&gt; &amp;mark);
<a name="l00129"></a>00129     <span class="keywordtype">int</span> getorden(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom);
<a name="l00130"></a>00130     <span class="keywordtype">void</span> expandcycle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="Fast and efficient bitstring class.">OBBitVec</a> &amp;avisit);
<a name="l00132"></a>00132 
<a name="l00133"></a>00133   <span class="keyword">public</span>:
<a name="l00134"></a>00134 
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 
<a name="l00138"></a>00138     OBMol();
<a name="l00140"></a>00140     OBMol(<span class="keyword">const</span> OBMol &amp;);
<a name="l00142"></a>00142     <span class="keyword">virtual</span> ~OBMol();
<a name="l00144"></a>00144     OBMol &amp;operator=(<span class="keyword">const</span> OBMol &amp;mol);      
<a name="l00146"></a>00146     OBMol &amp;operator+=(<span class="keyword">const</span> OBMol &amp;mol);
<a name="l00147"></a>00147 
<a name="l00150"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#723933398f0402a92916d1cfcb8dadd6">00150</a>     <span class="keywordtype">void</span> ReserveAtoms(<span class="keywordtype">int</span> natoms)
<a name="l00151"></a>00151     {
<a name="l00152"></a>00152       <span class="keywordflow">if</span> (natoms &amp;&amp; _mod)
<a name="l00153"></a>00153         _vatom.reserve(natoms);
<a name="l00154"></a>00154     }
<a name="l00155"></a>00155     
<a name="l00158"></a>00158     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *<a class="code" href="namespaceOpenBabel.shtml#5ef07c8230811964a209e423abea11d2">CreateAtom</a>(<span class="keywordtype">void</span>);
<a name="l00161"></a>00161     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *<a class="code" href="namespaceOpenBabel.shtml#0dc584d0582e8f76b7c9873dc1ccf569">CreateBond</a>(<span class="keywordtype">void</span>);
<a name="l00164"></a>00164     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *CreateResidue(<span class="keywordtype">void</span>);
<a name="l00167"></a>00167     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00170"></a>00170     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>*);
<a name="l00173"></a>00173     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>*);
<a name="l00174"></a>00174 
<a name="l00177"></a>00177     <span class="keywordtype">bool</span> AddAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>&amp;);
<a name="l00180"></a>00180     <span class="keywordtype">bool</span> InsertAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;);
<a name="l00188"></a>00188     <span class="keywordtype">bool</span> AddBond(<span class="keywordtype">int</span> beginIdx, <span class="keywordtype">int</span> endIdx, <span class="keywordtype">int</span> order, 
<a name="l00189"></a>00189                  <span class="keywordtype">int</span> flags=0,<span class="keywordtype">int</span> insertpos=-1);
<a name="l00192"></a>00192     <span class="keywordtype">bool</span> AddBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>&amp;);
<a name="l00195"></a>00195     <span class="keywordtype">bool</span> AddResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>&amp;);
<a name="l00196"></a>00196 
<a name="l00199"></a>00199     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>    *NewAtom();
<a name="l00202"></a>00202     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>    *NewBond();
<a name="l00204"></a>00204     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *NewResidue();
<a name="l00209"></a>00209     <span class="keywordtype">bool</span> DeleteAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00212"></a>00212     <span class="keywordtype">bool</span> DeleteBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>*);
<a name="l00215"></a>00215     <span class="keywordtype">bool</span> DeleteResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>*);
<a name="l00217"></a>00217 
<a name="l00219"></a>00219 
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 
<a name="l00223"></a>00223     <span class="keyword">virtual</span> <span class="keywordtype">void</span> BeginModify(<span class="keywordtype">void</span>);
<a name="l00227"></a>00227     <span class="keyword">virtual</span> <span class="keywordtype">void</span> EndModify(<span class="keywordtype">bool</span> nukePerceivedData=<span class="keyword">true</span>);
<a name="l00229"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c5103c8b3cbe4f961bd353209bf2860e">00229</a>     <span class="keywordtype">int</span> GetMod()           {      <span class="keywordflow">return</span>(_mod);    }
<a name="l00232"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#dc36b31f851665247f3c576cdd7aa0af">00232</a>     <span class="keywordtype">void</span> IncrementMod()    {      _mod++;          }
<a name="l00235"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#8efda275b959c94452e1ded1f568c934">00235</a>     <span class="keywordtype">void</span> DecrementMod()    {      _mod--;          }
<a name="l00237"></a>00237 
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 
<a name="l00241"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ba761a006b56d62912a91e259ce11bb1">00241</a>     <span class="keywordtype">int</span>          GetFlags()               { <span class="keywordflow">return</span>(_flags); }
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#d4281d49a1f2b0228e4fdaff01762375">00243</a>     <span class="keyword">const</span> <span class="keywordtype">char</span>  *GetTitle()<span class="keyword"> const         </span>{ <span class="keywordflow">return</span>(_title.c_str()); }
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#2f0695eb7d6ff6321032d88655ae8d25">00245</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumAtoms()<span class="keyword"> const         </span>{  <span class="keywordflow">return</span>(_natoms); }
<a name="l00247"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7358c2c15c4c0d88ae2489f586bc8e0b">00247</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumBonds()<span class="keyword"> const         </span>{  <span class="keywordflow">return</span>(_nbonds); }
<a name="l00249"></a>00249     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumHvyAtoms();
<a name="l00251"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f641753d0dbc017405280791048f0d88">00251</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumResidues()<span class="keyword"> const      </span>{ <span class="keywordflow">return</span>(_residue.size()); }
<a name="l00253"></a>00253     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumRotors();
<a name="l00254"></a>00254     
<a name="l00257"></a>00257     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>      *GetAtom(<span class="keywordtype">int</span> idx);
<a name="l00260"></a>00260     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>      *GetFirstAtom();
<a name="l00263"></a>00263     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>      *GetBond(<span class="keywordtype">int</span> idx);
<a name="l00266"></a>00266     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>      *GetBond(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b);
<a name="l00267"></a>00267     <span class="comment">// The safer version of the above method</span>
<a name="l00269"></a>00269 <span class="comment"></span>    <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>      *GetBond(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* bgn, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* end);
<a name="l00272"></a>00272     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>   *GetResidue(<span class="keywordtype">int</span>);
<a name="l00273"></a>00273     std::vector&lt;OBInternalCoord*&gt; GetInternalCoord();
<a name="l00275"></a>00275     <span class="keywordtype">double</span>       GetTorsion(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>);
<a name="l00277"></a>00277     <span class="keywordtype">double</span>       GetTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* b,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* c,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* d);
<a name="l00280"></a>00280     <span class="keywordtype">double</span> GetAngle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* a, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* b, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* c);
<a name="l00282"></a>00282     std::string  GetFormula();
<a name="l00284"></a>00284     std::string  GetSpacedFormula(<span class="keywordtype">int</span> ones=0, <span class="keyword">const</span> <span class="keywordtype">char</span>* sp=<span class="stringliteral">" "</span>);
<a name="l00286"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#4dcfbb9780f44d5fca2effbc30b17ce0">00286</a>     <span class="keywordtype">double</span>       GetEnergy()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_energy); }
<a name="l00288"></a>00288     <span class="keywordtype">double</span>       GetMolWt();
<a name="l00290"></a>00290     <span class="keywordtype">double</span>       GetExactMass();
<a name="l00292"></a>00292     <span class="keywordtype">int</span>          GetTotalCharge();
<a name="l00294"></a>00294     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetTotalSpinMultiplicity();
<a name="l00296"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#d646045c7f735c9ef05ba9e4bb768b7c">00296</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> GetDimension()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _dimension; }
<a name="l00298"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#d11003513310725bd54265ef5bf004c0">00298</a>     <span class="keywordtype">double</span>      *GetCoordinates() { <span class="keywordflow">return</span>(_c); }
<a name="l00300"></a>00300     std::vector&lt;OBRing*&gt; &amp;GetSSSR();
<a name="l00302"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#9f801729475d1d17415af6376458c81e">00302</a>     <span class="keywordtype">bool</span> AutomaticFormalCharge()   { <span class="keywordflow">return</span>(_autoFormalCharge);  }
<a name="l00304"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f2ee11d3efe6526c2eb352bb67684e6c">00304</a>     <span class="keywordtype">bool</span> AutomaticPartialCharge()  { <span class="keywordflow">return</span>(_autoPartialCharge); }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 
<a name="l00309"></a>00309 
<a name="l00310"></a>00310 
<a name="l00311"></a>00311     <span class="keywordtype">void</span>   SetTitle(<span class="keyword">const</span> <span class="keywordtype">char</span> *title);
<a name="l00313"></a>00313     <span class="keywordtype">void</span>   SetTitle(std::string &amp;title);
<a name="l00315"></a>00315     <span class="keywordtype">void</span>   SetFormula(std::string molFormula);
<a name="l00317"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#b78fa0a100d47ad2beb88c7cabb80e62">00317</a>     <span class="keywordtype">void</span>   SetEnergy(<span class="keywordtype">double</span> energy) { _energy = energy; }
<a name="l00319"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#dc2702cffcab0a0d6907958e3327284b">00319</a>     <span class="keywordtype">void</span>   SetDimension(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> d) { _dimension = d; }
<a name="l00321"></a>00321     <span class="keywordtype">void</span>   SetTotalCharge(<span class="keywordtype">int</span> charge);
<a name="l00324"></a>00324     <span class="keywordtype">void</span>   SetTotalSpinMultiplicity(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> spin);
<a name="l00327"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#50a6320395d2466d277dc42f872c50f8">00327</a>     <span class="keywordtype">void</span>   SetInternalCoord(std::vector&lt;OBInternalCoord*&gt; int_coord)
<a name="l00328"></a>00328     { _internals = int_coord; }
<a name="l00330"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#31e0990c833c415708b3fc515dbb35d5">00330</a>     <span class="keywordtype">void</span> SetAutomaticFormalCharge(<span class="keywordtype">bool</span> val)
<a name="l00331"></a>00331     { _autoFormalCharge=val;  }
<a name="l00333"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a8df95db3695e5e7ce263c484ce5533d">00333</a>     <span class="keywordtype">void</span> SetAutomaticPartialCharge(<span class="keywordtype">bool</span> val)
<a name="l00334"></a>00334     { _autoPartialCharge=val; }
<a name="l00335"></a>00335 
<a name="l00337"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ecd431b2cfaefa64d54c2dc4088551fb">00337</a>     <span class="keywordtype">void</span>   SetAromaticPerceived()    { SetFlag(<a class="code" href="mol_8h.shtml#00796165b0d091f4b0987ee2a0ba5609" title="Aromatic flags have been set for atoms and bonds.">OB_AROMATIC_MOL</a>);    }
<a name="l00339"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ba303a094727738eb901cafbecd7c196">00339</a>     <span class="keywordtype">void</span>   SetSSSRPerceived()        { SetFlag(<a class="code" href="mol_8h.shtml#1ab7f39b595f0f69b77c5907c804afc4" title="Smallest Set of Smallest Rings (SSSR) done. See OBRing and OBMol::FindSSSR.">OB_SSSR_MOL</a>);        }
<a name="l00341"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#0656401ba8b19bc9b9f2d3e8e833d3aa">00341</a>     <span class="keywordtype">void</span>   SetRingAtomsAndBondsPerceived(){SetFlag(<a class="code" href="mol_8h.shtml#e9ad3600741ed030f463badacb48cbf9" title="Ring flags have been set: See OBRing::FindRingAtomsAndBonds.">OB_RINGFLAGS_MOL</a>);}
<a name="l00343"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a809ea95ee07e61c6dc00ae710d8a749">00343</a>     <span class="keywordtype">void</span>   SetAtomTypesPerceived()   { SetFlag(<a class="code" href="mol_8h.shtml#bf2d91f3d8e6d4db13029a0130a262a5" title="Atom typing has been performed. See OBAtomTyper.">OB_ATOMTYPES_MOL</a>);   }
<a name="l00345"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#537294f8e96a7ec5263a79de7454326e">00345</a>     <span class="keywordtype">void</span>   SetChainsPerceived()      { SetFlag(<a class="code" href="mol_8h.shtml#5aaff7bcb11a37508fe32d17ad57dea0" title="Biomolecular chains and residues have been set. See OBChainsParser.">OB_CHAINS_MOL</a>);      }
<a name="l00347"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#608e6f965afea1f4f64cb0f499a0cb27">00347</a>     <span class="keywordtype">void</span>   SetChiralityPerceived()   { SetFlag(<a class="code" href="mol_8h.shtml#bdf1bef91d791e4ec64071377a06e491" title="Chirality detection has been performed. See OBMol::IsChiral.">OB_CHIRALITY_MOL</a>);   }
<a name="l00349"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#00fd4c76a7513a9c8087d975f5d8a51b">00349</a>     <span class="keywordtype">void</span>   SetPartialChargesPerceived(){ SetFlag(<a class="code" href="mol_8h.shtml#ade7aaf66074d41ccc89a88fde187ef0" title="Partial charges have been set or percieved.">OB_PCHARGE_MOL</a>);   }
<a name="l00351"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#4b93b72694e8a9a970eee7f0b65ecf9a">00351</a>     <span class="keywordtype">void</span>   SetHybridizationPerceived() { SetFlag(<a class="code" href="mol_8h.shtml#2609984a86f8eaca60bd0995ab1ff082" title="Atom hybridizations have been set. See OBAtomTyper.">OB_HYBRID_MOL</a>);    }
<a name="l00353"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#9ecfb96410199c294c003f975d870832">00353</a>     <span class="keywordtype">void</span>   SetImplicitValencePerceived(){ SetFlag(<a class="code" href="mol_8h.shtml#220b0e4aac833823ef37f6d10ac7a254" title="Implicit valence has been set. See OBAtomTyper.">OB_IMPVAL_MOL</a>);   }
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#1e298bbe286ab2c5a6f3b086a07b1a2b">00355</a>     <span class="keywordtype">void</span>   SetKekulePerceived()      { SetFlag(<a class="code" href="mol_8h.shtml#db1c838e0460bae3347db0d94b4e63c7" title="Kekule form has been set. See OBMol::Kekulize.">OB_KEKULE_MOL</a>);      }
<a name="l00357"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7900736a9f73a041ab8bade19be84cc9">00357</a>     <span class="keywordtype">void</span>   SetClosureBondsPerceived(){ SetFlag(<a class="code" href="mol_8h.shtml#a9b307d4356f47b80ba6516405bea32e" title="Ring "closure" bonds have been set. See OBBond::IsClosure.">OB_CLOSURE_MOL</a>);     }
<a name="l00359"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#47b63124c405f9c2ecdb766c6de9c56e">00359</a>     <span class="keywordtype">void</span>   SetHydrogensAdded()       { SetFlag(<a class="code" href="mol_8h.shtml#488eaf115c8c8e3f8ac24384f80f6f88" title="Hyrdogen atoms have been added where needed. See OBMol::AddHydrogens.">OB_H_ADDED_MOL</a>);     }
<a name="l00360"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f56db37c6a9f7049ed16469ab0a270c2">00360</a>     <span class="keywordtype">void</span>   SetCorrectedForPH()       { SetFlag(<a class="code" href="mol_8h.shtml#f3ca96a4c05940f8ed8fdc159b93656a" title="pH correction for hydrogen addition has been performed.">OB_PH_CORRECTED_MOL</a>);}
<a name="l00361"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6438e097839dbc98916fb00a3dc67305">00361</a>     <span class="keywordtype">void</span>   SetAromaticCorrected()    { SetFlag(<a class="code" href="mol_8h.shtml#d34e5e48a2b7f4c149070647189d9d71" title="Aromaticity has been corrected. See OBAtomTyper::CorrectAromaticNitrogens.">OB_AROM_CORRECTED_MOL</a>);}
<a name="l00362"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#2c81eeba803bc59d6c40f97b0e0e17fd">00362</a>     <span class="keywordtype">void</span>   SetSpinMultiplicityAssigned(){ SetFlag(<a class="code" href="mol_8h.shtml#8ae8b8d431ee5649e4dad8bbdfd5092d" title="Total spin on this molecule has been set. See OBMol::SetTotalSpinMultiplicity.">OB_TSPIN_MOL</a>);    }
<a name="l00363"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#b0922e1fa0939499c024e1006433adf3">00363</a>     <span class="keywordtype">void</span>   SetFlags(<span class="keywordtype">int</span> flags)       { _flags = flags;              }
<a name="l00364"></a>00364 
<a name="l00365"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#88f39becfe74f62c9d0ffedfb4098b77">00365</a>     <span class="keywordtype">void</span>   UnsetAromaticPerceived()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#00796165b0d091f4b0987ee2a0ba5609" title="Aromatic flags have been set for atoms and bonds.">OB_AROMATIC_MOL</a>));   }
<a name="l00366"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#0b8a9f6292b91ec5c4022a487e9d6092">00366</a>     <span class="keywordtype">void</span>   UnsetPartialChargesPerceived(){ _flags &amp;= (~(<a class="code" href="mol_8h.shtml#ade7aaf66074d41ccc89a88fde187ef0" title="Partial charges have been set or percieved.">OB_PCHARGE_MOL</a>));}
<a name="l00367"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f673e91c4869ca8c1057f006d4f06dae">00367</a>     <span class="keywordtype">void</span>   UnsetImplicitValencePerceived(){_flags &amp;= (~(<a class="code" href="mol_8h.shtml#220b0e4aac833823ef37f6d10ac7a254" title="Implicit valence has been set. See OBAtomTyper.">OB_IMPVAL_MOL</a>)); }
<a name="l00368"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c6df023071b8d662aa513a00579f076d">00368</a>     <span class="keywordtype">void</span>   UnsetHydrogensAdded()       { UnsetFlag(<a class="code" href="mol_8h.shtml#488eaf115c8c8e3f8ac24384f80f6f88" title="Hyrdogen atoms have been added where needed. See OBMol::AddHydrogens.">OB_H_ADDED_MOL</a>);     }
<a name="l00369"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#401b99defa8a57195dc40a2604cee115">00369</a>     <span class="keywordtype">void</span>   UnsetFlag(<span class="keywordtype">int</span> flag)       { _flags &amp;= (~(flag));              }
<a name="l00370"></a>00370 
<a name="l00372"></a>00372 
<a name="l00373"></a>00373     <span class="comment">// Description in transform.cpp (command-line transformations to this molecule)</span>
<a name="l00374"></a>00374     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*    DoTransformations(<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* pOptions);
<a name="l00375"></a>00375     <span class="comment">// Ditto (documentation on transformation options)</span>
<a name="l00376"></a>00376     <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ClassDescription();
<a name="l00378"></a>00378     <span class="keywordtype">bool</span> Clear();
<a name="l00380"></a>00380     <span class="keywordtype">void</span> RenumberAtoms(std::vector&lt;OBAtom*&gt;&amp;);
<a name="l00382"></a>00382     <span class="keywordtype">void</span> ToInertialFrame(<span class="keywordtype">int</span> conf, <span class="keywordtype">double</span> *rmat);
<a name="l00384"></a>00384     <span class="keywordtype">void</span> ToInertialFrame();
<a name="l00386"></a>00386     <span class="keywordtype">void</span> Translate(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v);
<a name="l00388"></a>00388     <span class="keywordtype">void</span> Translate(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v, <span class="keywordtype">int</span> conf);
<a name="l00390"></a>00390     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> u[3][3]);
<a name="l00392"></a>00392     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> m[9]);
<a name="l00394"></a>00394     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> m[9],<span class="keywordtype">int</span> nconf);
<a name="l00396"></a>00396     <span class="keywordtype">void</span> Center();
<a name="l00398"></a>00398     
<a name="l00399"></a>00399     <span class="keywordtype">bool</span> Kekulize();
<a name="l00400"></a>00400     <span class="keywordtype">bool</span> PerceiveKekuleBonds();
<a name="l00401"></a>00401 
<a name="l00402"></a>00402     <span class="keywordtype">void</span> NewPerceiveKekuleBonds();
<a name="l00403"></a>00403 
<a name="l00406"></a>00406     <span class="keywordtype">bool</span> DeleteHydrogens();
<a name="l00409"></a>00409     <span class="keywordtype">bool</span> DeleteHydrogens(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00412"></a>00412     <span class="keywordtype">bool</span> DeleteNonPolarHydrogens();
<a name="l00415"></a>00415     <span class="keywordtype">bool</span> DeleteHydrogen(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00421"></a>00421     <span class="keywordtype">bool</span> AddHydrogens(<span class="keywordtype">bool</span> polaronly=<span class="keyword">false</span>,<span class="keywordtype">bool</span> correctForPH=<span class="keyword">true</span>);
<a name="l00423"></a>00423     <span class="keywordtype">bool</span> AddHydrogens(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00425"></a>00425     <span class="keywordtype">bool</span> AddPolarHydrogens();
<a name="l00426"></a>00426 
<a name="l00428"></a>00428     <span class="keywordtype">bool</span> StripSalts();
<a name="l00430"></a>00430     std::vector&lt;OBMol&gt; Separate(<span class="keywordtype">int</span> StartIndex=1);
<a name="l00432"></a>00432     <span class="keywordtype">bool</span> ConvertDativeBonds();
<a name="l00433"></a>00433 
<a name="l00435"></a>00435     <span class="keywordtype">bool</span> CorrectForPH();
<a name="l00436"></a>00436     <span class="comment">// docs in mol.cpp</span>
<a name="l00437"></a>00437     <span class="keywordtype">bool</span> AssignSpinMultiplicity();
<a name="l00440"></a>00440     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> Center(<span class="keywordtype">int</span> nconf);
<a name="l00442"></a>00442     <span class="keywordtype">void</span> SetTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<span class="keywordtype">double</span>);
<a name="l00444"></a>00444 
<a name="l00446"></a>00446 
<a name="l00447"></a>00447 
<a name="l00448"></a>00448     <span class="keywordtype">void</span> FindSSSR();
<a name="l00450"></a>00450     <span class="keywordtype">void</span> FindRingAtomsAndBonds();
<a name="l00452"></a>00452     <span class="keywordtype">void</span> FindChiralCenters();
<a name="l00453"></a>00453     <span class="comment">// documented in mol.cpp -- locates all atom indexes which can reach 'end'</span>
<a name="l00454"></a>00454     <span class="keywordtype">void</span> FindChildren(std::vector&lt;int&gt; &amp; children,<span class="keywordtype">int</span> bgnIdx,<span class="keywordtype">int</span> endIdx);
<a name="l00455"></a>00455     <span class="comment">// documented in mol.cpp -- locates all atoms which can reach 'end'</span>
<a name="l00456"></a>00456     <span class="keywordtype">void</span> FindChildren(std::vector&lt;OBAtom*&gt;&amp; children,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* bgn,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* end);
<a name="l00461"></a>00461     <span class="keywordtype">void</span> FindLargestFragment(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="Fast and efficient bitstring class.">OBBitVec</a> &amp;frag);
<a name="l00464"></a>00464     <span class="keywordtype">void</span> ContigFragList(std::vector&lt;std::vector&lt;int&gt; &gt;&amp;);
<a name="l00466"></a>00466     <span class="keywordtype">void</span> Align(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>&amp;,<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>&amp;);
<a name="l00468"></a>00468     <span class="keywordtype">void</span> ConnectTheDots();
<a name="l00470"></a>00470     <span class="keywordtype">void</span> PerceiveBondOrders();
<a name="l00472"></a>00472     <span class="keywordtype">void</span> FindAngles();
<a name="l00474"></a>00474     <span class="keywordtype">void</span> FindTorsions();
<a name="l00475"></a>00475     <span class="comment">// documented in mol.cpp: graph-theoretical distance for each atom</span>
<a name="l00476"></a>00476     <span class="keywordtype">bool</span>         <a class="code" href="namespaceOpenBabel.shtml#f774fe32f4bef6b3c8819f0d2824a99c">GetGTDVector</a>(std::vector&lt;int&gt; &amp;);
<a name="l00477"></a>00477     <span class="comment">// documented in mol.cpp: graph-invariant index for each atom</span>
<a name="l00478"></a>00478     <span class="keywordtype">void</span>         <a class="code" href="namespaceOpenBabel.shtml#b512fdf219fc1114a79bce935d86f46d">GetGIVector</a>(std::vector&lt;unsigned int&gt; &amp;);
<a name="l00479"></a>00479     <span class="comment">// documented in mol.cpp: calculate symmetry-unique identifiers</span>
<a name="l00480"></a>00480     <span class="keywordtype">void</span>         GetGIDVector(std::vector&lt;unsigned int&gt; &amp;);
<a name="l00482"></a>00482 
<a name="l00484"></a>00484 
<a name="l00485"></a>00485 
<a name="l00486"></a>00486     <span class="keywordtype">bool</span> Has2D();
<a name="l00488"></a>00488     <span class="keywordtype">bool</span> Has3D();
<a name="l00490"></a>00490     <span class="keywordtype">bool</span> HasNonZeroCoords();
<a name="l00492"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#783c51919c69da3287d51f34b2fa53a0">00492</a>     <span class="keywordtype">bool</span> HasAromaticPerceived()     { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#00796165b0d091f4b0987ee2a0ba5609" title="Aromatic flags have been set for atoms and bonds.">OB_AROMATIC_MOL</a>)); }
<a name="l00494"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ac2c45d000ac10ad770ec5e5eff97f30">00494</a>     <span class="keywordtype">bool</span> HasSSSRPerceived()         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#1ab7f39b595f0f69b77c5907c804afc4" title="Smallest Set of Smallest Rings (SSSR) done. See OBRing and OBMol::FindSSSR.">OB_SSSR_MOL</a>));     }
<a name="l00496"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#0329d4256b426a4967afa867f415d06b">00496</a>     <span class="keywordtype">bool</span> HasRingAtomsAndBondsPerceived(){<span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#e9ad3600741ed030f463badacb48cbf9" title="Ring flags have been set: See OBRing::FindRingAtomsAndBonds.">OB_RINGFLAGS_MOL</a>));}
<a name="l00498"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#0ba2ebe76f1b15c48a8f1538efc8f9b4">00498</a>     <span class="keywordtype">bool</span> HasAtomTypesPerceived()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#bf2d91f3d8e6d4db13029a0130a262a5" title="Atom typing has been performed. See OBAtomTyper.">OB_ATOMTYPES_MOL</a>));}
<a name="l00500"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#39df67d7e225b9dd721b9b8c7df809ce">00500</a>     <span class="keywordtype">bool</span> HasChiralityPerceived()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#bdf1bef91d791e4ec64071377a06e491" title="Chirality detection has been performed. See OBMol::IsChiral.">OB_CHIRALITY_MOL</a>));}
<a name="l00502"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#87c2cd2043f749d5433a98df4ad8277d">00502</a>     <span class="keywordtype">bool</span> HasPartialChargesPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#ade7aaf66074d41ccc89a88fde187ef0" title="Partial charges have been set or percieved.">OB_PCHARGE_MOL</a>));}
<a name="l00504"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#908e2d394d3a47cf821014899344ca37">00504</a>     <span class="keywordtype">bool</span> HasHybridizationPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#2609984a86f8eaca60bd0995ab1ff082" title="Atom hybridizations have been set. See OBAtomTyper.">OB_HYBRID_MOL</a>));  }
<a name="l00506"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7fe699ef7fee62ca46743d6aa78bdea5">00506</a>     <span class="keywordtype">bool</span> HasImplicitValencePerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#220b0e4aac833823ef37f6d10ac7a254" title="Implicit valence has been set. See OBAtomTyper.">OB_IMPVAL_MOL</a>));}
<a name="l00508"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#afddb1ded7f589afbdd56062368602db">00508</a>     <span class="keywordtype">bool</span> HasKekulePerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#db1c838e0460bae3347db0d94b4e63c7" title="Kekule form has been set. See OBMol::Kekulize.">OB_KEKULE_MOL</a>));         }
<a name="l00510"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#fb25b05d950ca109bf9c6333b906a9ee">00510</a>     <span class="keywordtype">bool</span> HasClosureBondsPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a9b307d4356f47b80ba6516405bea32e" title="Ring "closure" bonds have been set. See OBBond::IsClosure.">OB_CLOSURE_MOL</a>));  }
<a name="l00512"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c31a6af8f2b96fa35170523b6318c459">00512</a>     <span class="keywordtype">bool</span> HasChainsPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#5aaff7bcb11a37508fe32d17ad57dea0" title="Biomolecular chains and residues have been set. See OBChainsParser.">OB_CHAINS_MOL</a>));         }
<a name="l00514"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#efc6e71556f0cd4afdd34e4a99d06025">00514</a>     <span class="keywordtype">bool</span> HasHydrogensAdded() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#488eaf115c8c8e3f8ac24384f80f6f88" title="Hyrdogen atoms have been added where needed. See OBMol::AddHydrogens.">OB_H_ADDED_MOL</a>));         }
<a name="l00516"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#b57a4b5dd9752e593e2fdb80f48909d8">00516</a>     <span class="keywordtype">bool</span> HasAromaticCorrected() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#d34e5e48a2b7f4c149070647189d9d71" title="Aromaticity has been corrected. See OBAtomTyper::CorrectAromaticNitrogens.">OB_AROM_CORRECTED_MOL</a>));}
<a name="l00518"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#fc44b8ad27a62b9cfc670d4fd29bb52f">00518</a>     <span class="keywordtype">bool</span> IsCorrectedForPH() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#f3ca96a4c05940f8ed8fdc159b93656a" title="pH correction for hydrogen addition has been performed.">OB_PH_CORRECTED_MOL</a>));     }
<a name="l00520"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#4a45f2c821b749250e070c3594289103">00520</a>     <span class="keywordtype">bool</span> HasSpinMultiplicityAssigned() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#8ae8b8d431ee5649e4dad8bbdfd5092d" title="Total spin on this molecule has been set. See OBMol::SetTotalSpinMultiplicity.">OB_TSPIN_MOL</a>)); }
<a name="l00522"></a>00522     <span class="keywordtype">bool</span> IsChiral();
<a name="l00524"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#31d1053aee208079bcc3c5e1884774df">00524</a>     <span class="keywordtype">bool</span> Empty()                       { <span class="keywordflow">return</span>(_natoms == 0);          }
<a name="l00526"></a>00526 
<a name="l00528"></a>00528 
<a name="l00529"></a>00529 
<a name="l00530"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#37e5c0caf3b51ae81d8d3abc6ffb1a9c">00530</a>     <span class="keywordtype">int</span>     NumConformers()    { <span class="keywordflow">return</span>((_vconf.empty())?0:_vconf.size()); }
<a name="l00532"></a>00532     <span class="keywordtype">void</span>    SetConformers(std::vector&lt;double*&gt; &amp;v);
<a name="l00534"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7b80e7015d000221e0cc92fd3cf6f9e4">00534</a>     <span class="keywordtype">void</span>    AddConformer(<span class="keywordtype">double</span> *f)    {  _vconf.push_back(f);    }
<a name="l00537"></a>00537     <span class="keywordtype">void</span>    SetConformer(<span class="keywordtype">int</span> i);
<a name="l00540"></a>00540     <span class="keywordtype">void</span>    CopyConformer(<span class="keywordtype">double</span>* c,<span class="keywordtype">int</span> nconf);
<a name="l00542"></a>00542     <span class="keywordtype">void</span>    DeleteConformer(<span class="keywordtype">int</span> nconf);
<a name="l00544"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#eae833c9dcc30e182f18554bd40242d6">00544</a>     <span class="keywordtype">double</span>  *GetConformer(<span class="keywordtype">int</span> i)       {  <span class="keywordflow">return</span>(_vconf[i]);      }
<a name="l00547"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#43bacf0671104e33b04835408b5c3785">00547</a>     <span class="keywordtype">double</span>  *BeginConformer(std::vector&lt;double*&gt;::iterator&amp;i)
<a name="l00548"></a>00548     { i = _vconf.begin();
<a name="l00549"></a>00549       <span class="keywordflow">return</span>((i == _vconf.end()) ? NULL:*i); }
<a name="l00552"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#bd4311945a4de0a47d2f036e9632a4b9">00552</a>     <span class="keywordtype">double</span>  *NextConformer(std::vector&lt;double*&gt;::iterator&amp;i)
<a name="l00553"></a>00553     { ++i;
<a name="l00554"></a>00554       <span class="keywordflow">return</span>((i == _vconf.end()) ? NULL:*i); }
<a name="l00556"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#5246a44bf82aa31c2f428665db94bfb8">00556</a>     std::vector&lt;double*&gt; &amp;GetConformers() {   <span class="keywordflow">return</span>(_vconf);     }
<a name="l00558"></a>00558 
<a name="l00560"></a>00560 
<a name="l00561"></a>00561 
<a name="l00562"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#e3b07b388e733d5a0e9ee9654a4411a1">00562</a>     <a class="code" href="namespaceOpenBabel.shtml#f5cc46e8aef811b24e105aca712ec7c2" title="A standard iterator over a vector of atoms.">OBAtomIterator</a> BeginAtoms()   { <span class="keywordflow">return</span> _vatom.begin(); }
<a name="l00564"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#81afb84c73fe3e57e8edd5a472e175f6">00564</a>     <a class="code" href="namespaceOpenBabel.shtml#f5cc46e8aef811b24e105aca712ec7c2" title="A standard iterator over a vector of atoms.">OBAtomIterator</a> EndAtoms()     { <span class="keywordflow">return</span> _vatom.end();   }
<a name="l00566"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c4ea48df79e239b506d3501dd42adde9">00566</a>     <a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a> BeginBonds()   { <span class="keywordflow">return</span> _vbond.begin(); }
<a name="l00568"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#87859f951e8ea33345b76d93014486c9">00568</a>     <a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a> EndBonds()     { <span class="keywordflow">return</span> _vbond.end();   }
<a name="l00570"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#35e5693cfdc3b993440d29540ab0509d">00570</a>     <a class="code" href="namespaceOpenBabel.shtml#a52bc907b6b29c913a85671c48ff8ad7" title="A standard iterator over a vector of residues.">OBResidueIterator</a> BeginResidues() { <span class="keywordflow">return</span> _residue.begin(); }
<a name="l00572"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#62b81baba8ee7151f0aae8fb01e90358">00572</a>     <a class="code" href="namespaceOpenBabel.shtml#a52bc907b6b29c913a85671c48ff8ad7" title="A standard iterator over a vector of residues.">OBResidueIterator</a> EndResidues()   { <span class="keywordflow">return</span> _residue.end();   }
<a name="l00573"></a>00573 
<a name="l00576"></a>00576     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *BeginAtom(<a class="code" href="namespaceOpenBabel.shtml#f5cc46e8aef811b24e105aca712ec7c2" title="A standard iterator over a vector of atoms.">OBAtomIterator</a> &amp;i);
<a name="l00579"></a>00579     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *NextAtom(<a class="code" href="namespaceOpenBabel.shtml#f5cc46e8aef811b24e105aca712ec7c2" title="A standard iterator over a vector of atoms.">OBAtomIterator</a> &amp;i);
<a name="l00582"></a>00582     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *BeginBond(<a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00585"></a>00585     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *NextBond(<a class="code" href="namespaceOpenBabel.shtml#106011a494e1678b705899609a92e59d" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00588"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#49f6fa37f54e72323ae1b9597fdca02e">00588</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *BeginResidue(<a class="code" href="namespaceOpenBabel.shtml#a52bc907b6b29c913a85671c48ff8ad7" title="A standard iterator over a vector of residues.">OBResidueIterator</a> &amp;i)
<a name="l00589"></a>00589     {
<a name="l00590"></a>00590       i = _residue.begin();
<a name="l00591"></a>00591       <span class="keywordflow">return</span>((i == _residue.end()) ? NULL:*i);
<a name="l00592"></a>00592     }
<a name="l00595"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f3747253310ab328967a8bcaf32842d3">00595</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *NextResidue(<a class="code" href="namespaceOpenBabel.shtml#a52bc907b6b29c913a85671c48ff8ad7" title="A standard iterator over a vector of residues.">OBResidueIterator</a> &amp;i)
<a name="l00596"></a>00596     {
<a name="l00597"></a>00597       ++i;
<a name="l00598"></a>00598       <span class="keywordflow">return</span>((i == _residue.end()) ? NULL:*i);
<a name="l00599"></a>00599     }
<a name="l00603"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#67c061a9d850cf30b4bf5ea394760d43">00603</a>     <a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml" title="Used to transform from z-matrix to cartesian coordinates.">OBInternalCoord</a> *BeginInternalCoord(std::vector&lt;OBInternalCoord*&gt;::iterator &amp;i)
<a name="l00604"></a>00604     {
<a name="l00605"></a>00605       i = _internals.begin();
<a name="l00606"></a>00606       <span class="keywordflow">return</span>((i == _internals.end()) ? NULL:*i);
<a name="l00607"></a>00607     }
<a name="l00611"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6680c695e3cdceb7e42a554a0ffc8a19">00611</a>     <a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml" title="Used to transform from z-matrix to cartesian coordinates.">OBInternalCoord</a> *NextInternalCoord(std::vector&lt;OBInternalCoord*&gt;::iterator &amp;i)
<a name="l00612"></a>00612     {
<a name="l00613"></a>00613       ++i;
<a name="l00614"></a>00614       <span class="keywordflow">return</span>((i == _internals.end()) ? NULL:*i);
<a name="l00615"></a>00615     }
<a name="l00617"></a>00617 
<a name="l00618"></a>00618   };
<a name="l00619"></a>00619 
<a name="l00620"></a>00620   <span class="comment">// Utility function prototypes</span>
<a name="l00621"></a>00621   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#fb6c898e6a1ce2092c972650199c9a65">tokenize</a>(std::vector&lt;std::string&gt;&amp;, <span class="keyword">const</span> <span class="keywordtype">char</span> *buf, <span class="keyword">const</span> <span class="keywordtype">char</span> *delimstr=<span class="stringliteral">" \t\n"</span>);
<a name="l00622"></a>00622   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#fb6c898e6a1ce2092c972650199c9a65">tokenize</a>(std::vector&lt;std::string&gt;&amp;, std::string&amp;, <span class="keyword">const</span> <span class="keywordtype">char</span> *delimstr=<span class="stringliteral">" \t\n"</span>, <span class="keywordtype">int</span> limit=-1);
<a name="l00623"></a>00623   <span class="comment">// Remove leading and trailing whitespace from a string (docs in tokenst.cpp)</span>
<a name="l00624"></a>00624   OBAPI std::string&amp; <a class="code" href="namespaceOpenBabel.shtml#e8d9d7dd615b5fa7b533c075fe744d8f" title="Removes white space from front and back of string.">Trim</a>(std::string&amp; txt);
<a name="l00625"></a>00625   <span class="comment">// Deprecated -- use OBMessageHandler class instead (docs in obutil.cpp)</span>
<a name="l00626"></a>00626   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#fb61c494dc21ce21a7cbd165f7616dc2">ThrowError</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *str);
<a name="l00627"></a>00627   <span class="comment">// Deprecated -- use OBMessageHandler class instead (docs in obutil.cpp)</span>
<a name="l00628"></a>00628   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#fb61c494dc21ce21a7cbd165f7616dc2">ThrowError</a>(std::string &amp;str);
<a name="l00630"></a>00630   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#7145217d4de73e243d2d3888dac404ba" title="Convert Cartesian XYZ to a set of OBInternalCoord coordinates.">CartesianToInternal</a>(std::vector&lt;OBInternalCoord*&gt;&amp;,OBMol&amp;);
<a name="l00632"></a>00632   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#e82e7b7b74e5212eada681c15afb77f4" title="Convert set of OBInternalCoord coordinates into Cartesian XYZ.">InternalToCartesian</a>(std::vector&lt;OBInternalCoord*&gt;&amp;,OBMol&amp;);
<a name="l00633"></a>00633   <span class="comment">// Replace the last extension in str with a new one (docs in obutil.cpp)</span>
<a name="l00634"></a>00634   OBAPI std::string <a class="code" href="namespaceOpenBabel.shtml#c1c62bdae6cf7a9195c470e7d0e29883" title="Utility function: replace the last extension in string &amp;src with new extension...">NewExtension</a>(std::string&amp;,<span class="keywordtype">char</span>*);
<a name="l00635"></a>00635 
<a name="l00636"></a>00636   <span class="comment">//global definitions</span>
<a name="l00638"></a><a class="code" href="namespaceOpenBabel.shtml#1e53ca6bf87ac2f6447c9ef2332c9418">00638</a> <span class="comment"></span>  EXTERN  <a class="code" href="classOpenBabel_1_1OBElementTable.shtml" title="Periodic Table of the Elements.">OBElementTable</a>   <a class="code" href="namespaceOpenBabel.shtml#1e53ca6bf87ac2f6447c9ef2332c9418" title="Global OBElementTable for element properties.">etab</a>;
<a name="l00641"></a><a class="code" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">00641</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBTypeTable.shtml" title="Atom Type Translation Table.">OBTypeTable</a>      <a class="code" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">ttab</a>;
<a name="l00643"></a><a class="code" href="namespaceOpenBabel.shtml#35082995377e56142ee5a9fd351c7a70">00643</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml" title="Table of atomic isotope masses.">OBIsotopeTable</a>   <a class="code" href="namespaceOpenBabel.shtml#35082995377e56142ee5a9fd351c7a70" title="Global OBIsotopeTable for isotope properties.">isotab</a>;
<a name="l00645"></a><a class="code" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">00645</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBAromaticTyper.shtml" title="Assigns aromatic typing to atoms and bonds.">OBAromaticTyper</a>  <a class="code" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd" title="Global OBAromaticTyper for detecting aromatic atoms and bonds.">aromtyper</a>;
<a name="l00648"></a><a class="code" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">00648</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges.">OBAtomTyper</a>      <a class="code" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a>;
<a name="l00650"></a><a class="code" href="namespaceOpenBabel.shtml#b81925dbd111f3bf1733a4cbba547131">00650</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBChainsParser.shtml" title="Perceives peptide or nucleotide chains and residues in an OBMol.">OBChainsParser</a>   <a class="code" href="namespaceOpenBabel.shtml#b81925dbd111f3bf1733a4cbba547131" title="Global OBChainsParser for detecting macromolecular chains and residues.">chainsparser</a>;
<a name="l00652"></a>00652   OBERROR <span class="keyword">extern</span>  <a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> <a class="code" href="namespaceOpenBabel.shtml#02dd5608cfe8883be0f788e2cd6488da" title="Global OBMessageHandler error handler.">obErrorLog</a>;
<a name="l00654"></a><a class="code" href="namespaceOpenBabel.shtml#30154f62f3bd1a1b8613a080444e69d7">00654</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBResidueData.shtml" title="Table of common biomolecule residues (for PDB or other files).">OBResidueData</a>    <a class="code" href="namespaceOpenBabel.shtml#30154f62f3bd1a1b8613a080444e69d7" title="Global OBResidueData biomolecule residue database.">resdat</a>;
<a name="l00655"></a>00655 
<a name="l00656"></a>00656   <span class="comment">//Utility Macros</span>
<a name="l00657"></a>00657 
<a name="l00658"></a>00658 <span class="preprocessor">#ifndef BUFF_SIZE</span>
<a name="l00659"></a><a class="code" href="mol_8h.shtml#6c7cd32e1bac137f05e4a752b4ad10af">00659</a> <span class="preprocessor"></span><span class="preprocessor">#define BUFF_SIZE 32768</span>
<a name="l00660"></a>00660 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00661"></a>00661 <span class="preprocessor"></span>
<a name="l00662"></a>00662 <span class="preprocessor">#ifndef EQ</span>
<a name="l00663"></a><a class="code" href="mol_8h.shtml#c07acfbb082b04f5bea72998c8976b3c">00663</a> <span class="preprocessor"></span><span class="preprocessor">#define EQ(a,b) (!strcmp((a), (b)))</span>
<a name="l00664"></a>00664 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00665"></a>00665 <span class="preprocessor"></span>
<a name="l00666"></a>00666 <span class="preprocessor">#ifndef EQn</span>
<a name="l00667"></a><a class="code" href="mol_8h.shtml#ff7047a291906910f63dcfc17c88ed12">00667</a> <span class="preprocessor"></span><span class="preprocessor">#define EQn(a,b,n) (!strncmp((a), (b), (n)))</span>
<a name="l00668"></a>00668 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00669"></a>00669 <span class="preprocessor"></span>
<a name="l00670"></a>00670 <span class="preprocessor">#ifndef SQUARE</span>
<a name="l00671"></a><a class="code" href="mol_8h.shtml#a1cf70a99e21bc2032e8867c6cafbb43">00671</a> <span class="preprocessor"></span><span class="preprocessor">#define SQUARE(x) ((x)*(x))</span>
<a name="l00672"></a>00672 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00673"></a>00673 <span class="preprocessor"></span>
<a name="l00674"></a>00674 <span class="preprocessor">#ifndef IsUnsatType</span>
<a name="l00675"></a><a class="code" href="mol_8h.shtml#e7364e14af885f05220a63486ca6d516">00675</a> <span class="preprocessor"></span><span class="preprocessor">#define IsUnsatType(x)  (EQ(x,"Car") || EQ(x,"C2") || EQ(x,"Sox") || EQ(x,"Sac") || EQ(x,"Pac") || EQ(x,"So2"))</span>
<a name="l00676"></a>00676 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00677"></a>00677 <span class="preprocessor"></span>
<a name="l00678"></a>00678 <span class="preprocessor">#ifndef __KCC</span>
<a name="l00679"></a>00679 <span class="preprocessor"></span>  <span class="keyword">extern</span> <span class="stringliteral">"C"</span>
<a name="l00680"></a>00680   {
<a name="l00681"></a>00681     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#8aa7959b427e1c630f14732c2ad642c8">get_rmat</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00682"></a>00682     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#7e02cd2874a2a4826c8587da507f62ef">ob_make_rmat</a>(<span class="keywordtype">double</span> mat[3][3],<span class="keywordtype">double</span> rmat[9]);
<a name="l00683"></a>00683     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#594933a93529376dbae80405cf23afa8">qtrfit</a> (<span class="keywordtype">double</span> *r,<span class="keywordtype">double</span> *f,<span class="keywordtype">int</span> size,<span class="keywordtype">double</span> u[3][3]);
<a name="l00684"></a>00684     OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00685"></a>00685   }
<a name="l00686"></a>00686 <span class="preprocessor">#else</span>
<a name="l00687"></a>00687 <span class="preprocessor"></span>  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#8aa7959b427e1c630f14732c2ad642c8">get_rmat</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00688"></a>00688   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#7e02cd2874a2a4826c8587da507f62ef">ob_make_rmat</a>(<span class="keywordtype">double</span> mat[3][3],<span class="keywordtype">double</span> rmat[9]);
<a name="l00689"></a>00689   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#594933a93529376dbae80405cf23afa8">qtrfit</a> (<span class="keywordtype">double</span> *r,<span class="keywordtype">double</span> *f,<span class="keywordtype">int</span> size,<span class="keywordtype">double</span> u[3][3]);
<a name="l00690"></a>00690   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00691"></a>00691 <span class="preprocessor">#endif // __KCC</span>
<a name="l00692"></a>00692 <span class="preprocessor"></span>
<a name="l00693"></a>00693 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00694"></a>00694 
<a name="l00695"></a>00695 <span class="preprocessor">#endif // OB_MOL_H</span>
<a name="l00696"></a>00696 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:05 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
