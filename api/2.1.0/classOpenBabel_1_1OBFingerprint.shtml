<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBFingerprint Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul>
</div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a></div>
<h1>OBFingerprint Class Reference</h1><!-- doxytag: class="OpenBabel::OBFingerprint" -->The base class for fingerprints.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="fingerprint_8h-source.shtml">openbabel/fingerprint.h</a>&gt;</code>
<p>
<a href="classOpenBabel_1_1OBFingerprint-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#48c2b72feb2607662249c83e85ce665b">FptFlag</a> { <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#48c2b72feb2607662249c83e85ce665ba6c1016f52874254ed7604c44df21cca">FPT_UNIQUEBITS</a> = 1
 }</td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#55f9725c7e338f4d4c2d9f7a7c34f0cb">~OBFingerprint</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#8ade332d860f26c9e0227ca3e0bc0d4b">SetBit</a> (std::vector&lt; unsigned int &gt; &amp;vec, unsigned int n)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#9bbe06daca0e9e000492cc6a89d7dabd">Fold</a> (std::vector&lt; unsigned int &gt; &amp;vec, unsigned int nbits)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#462db518c432fa8fab958b8dd32d8a05">GetFingerprint</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::vector&lt; unsigned int &gt; &amp;fp, int nbits=0)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#27d4c993fe4e0f2f075a14f2585c7f87">Description</a> ()=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#94a94537cc5ba96b1876db1b612b91a3">Flags</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#f244b13b4b50bb9343f3026d7372e964">Tanimoto</a> (const std::vector&lt; unsigned int &gt; &amp;vec1, const std::vector&lt; unsigned int &gt; &amp;vec2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#e6df021d906a48593e8f9ed11bd8d128">Tanimoto</a> (const std::vector&lt; unsigned int &gt; &amp;vec1, const unsigned int *p2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#d9ecfee3be06f4c37ef48506100f6f0c">Getbitsperint</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#41cc5e112f9a56041d24456899450198">FindFingerprint</a> (const std::string &amp;ID)</td></tr>

<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>bit_or</b></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Function object to set bits. <br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The base class for fingerprints. 
<p>
These fingerprints are condensed representation of molecules (or other objects) as a list of boolean values (actually bits in a vector&lt;unsigned&gt;) with length of a power of 2. The main motivation is for fast searching of data sources containing large numbers of molecules (up to several million). Open Babel provides some routines which can search text files containing lists of molecules in any format. See the documentation on the class <a class="el" href="classOpenBabel_1_1FastSearch.shtml" title="Class to search fingerprint index files.">FastSearch</a>.<p>
There are descriptions of molecular fingerprints at <br>
 <a href="http://www.daylight.com/dayhtml/doc/theory/theory.finger.html">http://www.daylight.com/dayhtml/doc/theory/theory.finger.html</a>) and <br>
 <a href="http://www.mesaac.com/Fingerprint.htm">http://www.mesaac.com/Fingerprint.htm</a> <br>
 Many methods of preparing fingerprints have been described, but the type supported currently in <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> has each bit representing a substructure (or other molecular property). If a substructure is present in the molecule, then a particular bit is set to 1. But because the hashing method may also map other substructures to the same bit, a match does not guarantee that a particular substructure is present; there may be false positives. However, with proper design, a large fraction of irrelevant molecules in a data set can be eliminated in a fast search with boolean methods on the fingerprints. It then becomes feasible to make a definitive substructure search by conventional methods on this reduced list even if it is slow.<p>
<a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> provides a framework for applying new types of fingerprints without changing any existing code. They are derived from <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a> and the source file is just compiled with the rest of <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a>. Alternatively, they can be separately compiled as a DLL or shared library and discovered when <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> runs.<p>
For more on these specific implementations of fingerprints in Open Babel, please take a look at the developer's wiki: <a href="http://openbabel.sourceforge.net/wiki/Fingerprints">http://openbabel.sourceforge.net/wiki/Fingerprints</a><p>
Fingerprints derived from this abstract base class <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a> can be for any object derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> (not just for <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>). Each derived class provides an ID as a string and <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a> keeps a map of these to provides a pointer to the class when requested in FindFingerprint.<p>
<h4>-- To define a fingerprint type --</h4>
<p>
The classes derived form <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a> are required to provide a <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#462db518c432fa8fab958b8dd32d8a05" title="fingerprint in vector, which may be resized, folded to nbits (if nbits!=0)">GetFingerprint()</a> routine and a <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#27d4c993fe4e0f2f075a14f2585c7f87" title="Required short description of the fingerprint type.">Description()</a> routine <div class="fragment"><pre class="fragment">    <span class="keyword">class </span>MyFpType : OBFingerprint 
    {
       MyFpType(<span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keywordtype">id</span>) : OBFingerprint(id){};

       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#462db518c432fa8fab958b8dd32d8a05" title="fingerprint in vector, which may be resized, folded to nbits (if nbits!=0)">GetFingerprint</a>(OBBase* pOb, vector&lt;unsigned int&gt;&amp; fp, <span class="keywordtype">int</span> nbits) 
       {
          <span class="comment">//Convert pOb to the required type, usually OBMol</span>
          OBMol* pmol = <span class="keyword">dynamic_cast&lt;</span>OBMol*<span class="keyword">&gt;</span>(pOb);
          fp.resize(required_number_of_words);
          ... 
          use <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#8ade332d860f26c9e0227ca3e0bc0d4b" title="Sets the nth bit.">SetBit</a>(fp,n); to <span class="keyword">set</span> the nth bit

          <span class="keywordflow">if</span>(nbits)
             <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#9bbe06daca0e9e000492cc6a89d7dabd" title="Repeatedly ORs the top half with the bottom half until no smaller than nbits.">Fold</a>(fp, nbits);
       }
       
       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#27d4c993fe4e0f2f075a14f2585c7f87" title="Required short description of the fingerprint type.">Description</a>(){ <span class="keywordflow">return</span> <span class="stringliteral">"Some descriptive text"</span>;}
       ...
    };
</pre></div><p>
Declare a global instance with the ID you will use in -f options to specify its use. <div class="fragment"><pre class="fragment">    MyFpType theMyFpType(<span class="stringliteral">"myfpID"</span>);
</pre></div><p>
<h4>-- To obtain a fingerprint --</h4>
<p>
<div class="fragment"><pre class="fragment">    OBMol mol;
    ...
    vector&lt;unsigned int&gt; fp;
    OBFingerprint::GetDefault()-&gt;GetFingerprint(&amp;mol, fp); <span class="comment">//gets default size of fingerprint</span>
</pre></div> or <div class="fragment"><pre class="fragment">    vector&lt;unsigned int&gt; fp;
    OBFingerPrint* pFP = <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#41cc5e112f9a56041d24456899450198">OBFingerprint::FindFingerprint</a>(<span class="stringliteral">"myfpID"</span>);
    ...and maybe...
    pFP-&gt;GetFingerprint(&amp;mol,fp, 128); <span class="comment">//fold down to 128bits if was originally larger</span>
</pre></div><p>
<h4>-- To print a list of available fingerprint types --</h4>
<p>
<div class="fragment"><pre class="fragment">    std::string id;
    OBFingerPrint* pFPrt=NULL;
    <span class="keywordflow">while</span>(OBFingerprint::GetNextFPrt(<span class="keywordtype">id</span>, pFPrt))
    {
       cout &lt;&lt; <span class="keywordtype">id</span> &lt;&lt; <span class="stringliteral">" -- "</span> &lt;&lt; pFPrt-&gt;Description() &lt;&lt; endl;
    }
</pre></div><p>
Fingerprints are handled as vector&lt;unsigned int&gt; so that the number of bits in this vector and their order will be platform and compiler dependent, because of size of int types and endian differences. Use fingerprints (and fastsearch indexes containing them) only for comparing with other fingerprints prepared on the same machine.<p>
The FingerprintFormat class is an output format which displays fingerprints as hexadecimal. When multiple molecules are supplied it will calculate the Tanimoto coefficient from the first molecule to each of the others. It also shows whether the first molecule is a possible substructure to all the others, i.e. whether all the bits set in the fingerprint for the first molecule are set in the fingerprint of the others. To display hexadecimal information when multiple molecules are provided it is necessay to use the -xh option.<p>
To see a list of available format types, type babel -F on the command line. The -xF option of the FingerprintFormat class also provides this output, but due to a quirk in the way the program works, it is necessary to have a valid input molecule for this option to work. 
<p>
<hr><h2>Member Enumeration Documentation</h2>
<a class="anchor" name="48c2b72feb2607662249c83e85ce665b"></a><!-- doxytag: member="OpenBabel::OBFingerprint::FptFlag" ref="48c2b72feb2607662249c83e85ce665b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#48c2b72feb2607662249c83e85ce665b">FptFlag</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Optional flags. 
<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="48c2b72feb2607662249c83e85ce665ba6c1016f52874254ed7604c44df21cca"></a><!-- doxytag: member="FPT_UNIQUEBITS" ref="48c2b72feb2607662249c83e85ce665ba6c1016f52874254ed7604c44df21cca" args="" -->FPT_UNIQUEBITS</em>&nbsp;</td><td>
</td></tr>
</table>
</dl>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="55f9725c7e338f4d4c2d9f7a7c34f0cb"></a><!-- doxytag: member="OpenBabel::OBFingerprint::~OBFingerprint" ref="55f9725c7e338f4d4c2d9f7a7c34f0cb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="8ade332d860f26c9e0227ca3e0bc0d4b"></a><!-- doxytag: member="OpenBabel::OBFingerprint::SetBit" ref="8ade332d860f26c9e0227ca3e0bc0d4b" args="(std::vector&lt; unsigned int &gt; &amp;vec, unsigned int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBit           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the nth bit. 
<p>

</div>
</div><p>
<a class="anchor" name="9bbe06daca0e9e000492cc6a89d7dabd"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Fold" ref="9bbe06daca0e9e000492cc6a89d7dabd" args="(std::vector&lt; unsigned int &gt; &amp;vec, unsigned int nbits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Fold           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>nbits</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Repeatedly ORs the top half with the bottom half until no smaller than nbits. 
<p>

</div>
</div><p>
<a class="anchor" name="462db518c432fa8fab958b8dd32d8a05"></a><!-- doxytag: member="OpenBabel::OBFingerprint::GetFingerprint" ref="462db518c432fa8fab958b8dd32d8a05" args="(OBBase *pOb, std::vector&lt; unsigned int &gt; &amp;fp, int nbits=0)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool GetFingerprint           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>fp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>nbits</em> = <code>0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>fingerprint in vector, which may be resized, folded to nbits (if nbits!=0) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="27d4c993fe4e0f2f075a14f2585c7f87"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Description" ref="27d4c993fe4e0f2f075a14f2585c7f87" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string Description           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Required short description of the fingerprint type. 
<p>

</div>
</div><p>
<a class="anchor" name="94a94537cc5ba96b1876db1b612b91a3"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Flags" ref="94a94537cc5ba96b1876db1b612b91a3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int Flags           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f244b13b4b50bb9343f3026d7372e964"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Tanimoto" ref="f244b13b4b50bb9343f3026d7372e964" args="(const std::vector&lt; unsigned int &gt; &amp;vec1, const std::vector&lt; unsigned int &gt; &amp;vec2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Tanimoto           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vec1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vec2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the Tanimoto coefficient between two vectors (vector&lt;unsigned int&gt;&amp; SeekPositions) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="e6df021d906a48593e8f9ed11bd8d128"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Tanimoto" ref="e6df021d906a48593e8f9ed11bd8d128" args="(const std::vector&lt; unsigned int &gt; &amp;vec1, const unsigned int *p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static double Tanimoto           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vec1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int *&nbsp;</td>
          <td class="paramname"> <em>p2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Inline version of <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#f244b13b4b50bb9343f3026d7372e964" title="the Tanimoto coefficient between two vectors (vector<unsigned int>&amp; SeekPositions)...">Tanimoto()</a> taking a pointer for the second vector. 
<p>

<p>
If used for two vectors, vec1 and vec2, call as Tanimoto(vec1, &amp;vec2[0]); 
</div>
</div><p>
<a class="anchor" name="d9ecfee3be06f4c37ef48506100f6f0c"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Getbitsperint" ref="d9ecfee3be06f4c37ef48506100f6f0c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int Getbitsperint           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="41cc5e112f9a56041d24456899450198"></a><!-- doxytag: member="OpenBabel::OBFingerprint::FindFingerprint" ref="41cc5e112f9a56041d24456899450198" args="(const std::string &amp;ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>* FindFingerprint           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>ID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>a pointer to a fingerprint (the default if ID is empty), or NULL if not available For backward compatibility; prefer FindType (in <a class="el" href="pluginiter_8h.shtml" title="Simplify 'plugin' classes to be discovered and/or loaded at runtime.">pluginiter.h</a>) instead </dd></dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="fingerprint_8h-source.shtml">fingerprint.h</a><li><a class="el" href="fingerprint_8cpp.shtml">fingerprint.cpp</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:14 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
