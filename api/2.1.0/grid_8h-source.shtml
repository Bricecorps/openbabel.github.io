<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: grid.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>grid.h</h1><a href="grid_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">grid.h - Handle grids of values.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_GRID_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_GRID_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;iosfwd&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="keyword">namespace </span>OpenBabel
<a name="l00031"></a>00031 {
<a name="l00032"></a>00032 
<a name="l00033"></a>00033   <span class="comment">// Forward declaration</span>
<a name="l00034"></a>00034   <span class="keyword">class </span>OBMol;
<a name="l00035"></a>00035 
<a name="l00038"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml">00038</a>  <span class="keyword">class </span>OBAPI OBGrid: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>
<a name="l00039"></a>00039   {
<a name="l00040"></a>00040   <span class="keyword">protected</span>: 
<a name="l00041"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#d2367ec6a3d166e433fec916c5826aa1">00041</a>     <span class="keywordtype">double</span> _xmin,_xmax,_ymin,_ymax,_zmin,_zmax; 
<a name="l00042"></a>00042 
<a name="l00043"></a>00043   <span class="keyword">public</span>:
<a name="l00044"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#907e18c9891f0d2bf379c3f9be6b6dc2">00044</a>     OBGrid() {}
<a name="l00045"></a>00045 
<a name="l00049"></a>00049     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Init(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;box);
<a name="l00050"></a>00050 
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#78a7421f0b86f78f1e71d5f7dde5d888">00052</a>     <span class="keywordtype">double</span> GetXmin()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_xmin);    }
<a name="l00054"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#483c002bee156c03432dd5c21b72ebfb">00054</a>     <span class="keywordtype">double</span> GetYmin()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_ymin);    }
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#5912d4a44bca1102e5ef4f8bdacbd567">00056</a>     <span class="keywordtype">double</span> GetZmin()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_zmin);    }
<a name="l00058"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#90db322584c8fb78b834a9c4795eb76b">00058</a>     <span class="keywordtype">double</span> GetXmax()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_xmax);    }
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#9bb464c60f78a58fe15143ec8aeff03d">00060</a>     <span class="keywordtype">double</span> GetYmax()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_ymax);    }
<a name="l00062"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#ca980d893a90a00e425dbb83a97b20c8">00062</a>     <span class="keywordtype">double</span> GetZmax()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_zmax);    }
<a name="l00063"></a>00063 
<a name="l00065"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#2a499643ad2be70afaa1607b4affb310">00065</a>     <span class="keywordtype">bool</span> PointIsInBox(<span class="keywordtype">double</span> x,<span class="keywordtype">double</span> y,<span class="keywordtype">double</span> z)
<a name="l00066"></a>00066     {
<a name="l00067"></a>00067       <span class="keywordflow">return</span> (x&gt;=_xmin) &amp;&amp; (x&lt;=_xmax) &amp;&amp;
<a name="l00068"></a>00068         (y&gt;=_ymin) &amp;&amp; (y&lt;=_ymax) &amp;&amp;
<a name="l00069"></a>00069         (z&gt;=_zmin) &amp;&amp; (z&lt;=_zmax);
<a name="l00070"></a>00070     }
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#d557d62926d0bc4cea092baba4466906">00072</a>     <span class="keywordtype">bool</span> PointIsInBox(<span class="keywordtype">double</span> *c)
<a name="l00073"></a>00073     {
<a name="l00074"></a>00074       <span class="keywordflow">return</span> (c[0]&gt;=_xmin) &amp;&amp; (c[0]&lt;=_xmax) &amp;&amp;
<a name="l00075"></a>00075         (c[1]&gt;=_ymin) &amp;&amp; (c[1]&lt;=_ymax) &amp;&amp;
<a name="l00076"></a>00076         (c[2]&gt;=_zmin) &amp;&amp; (c[2]&lt;=_zmax);
<a name="l00077"></a>00077     }
<a name="l00078"></a>00078   };
<a name="l00079"></a>00079 
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml">00085</a>  <span class="keyword">class </span>OBAPI OBFloatGrid: <span class="keyword">public</span> OBGrid
<a name="l00086"></a>00086   {
<a name="l00087"></a>00087   <span class="keyword">protected</span>:
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#f19e1e36137b490606f0e841e239c209">00088</a>     <span class="keywordtype">double</span> *_val;             
<a name="l00089"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#87d1e1b6b09eecaec2670dd0f8caa6a1">00089</a>     <span class="keywordtype">int</span>   *_ival;             
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#63f7b06cde4a057a2c76f8af0ff28e91">00090</a>     <span class="keywordtype">double</span> _midz,_midx,_midy; 
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#a4d2282bc8cc51ffa66eb6c17aae17ee">00091</a>     <span class="keywordtype">int</span> _ydim,_xdim,_zdim;    
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#382cc46cd19ec2a1e726d9c8191cedea">00092</a>     <span class="keywordtype">double</span> _spacing,_inv_spa; 
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#314a0d1d51e74f040278d0de06f075b5">00093</a>     <span class="keywordtype">double</span> _halfSpace;        
<a name="l00094"></a>00094 
<a name="l00095"></a>00095   <span class="keyword">public</span>:
<a name="l00096"></a>00096 
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#7ddbf2110b572079e0dee5def5b97cf9">00097</a>   OBFloatGrid() : _val(NULL), _ival(NULL), _halfSpace(0.0) {}
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#d84f091329edc731ab0fb4c53640923b">00098</a>     ~OBFloatGrid()
<a name="l00099"></a>00099       {
<a name="l00100"></a>00100         <span class="keywordflow">if</span> (_ival) <span class="keyword">delete</span> [] _ival;
<a name="l00101"></a>00101         <span class="keywordflow">if</span> (_val)  <span class="keyword">delete</span> [] _val;
<a name="l00102"></a>00102       }
<a name="l00105"></a>00105     <span class="keywordtype">void</span> Init(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;box,<span class="keywordtype">double</span> spacing, <span class="keywordtype">double</span> pad= 0.0);
<a name="l00106"></a>00106 
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#b3d065904c33ecf6eaae0199fe6d0592">00107</a>     <span class="keywordtype">void</span> GetMin(<span class="keywordtype">double</span> *a)
<a name="l00108"></a>00108     {
<a name="l00109"></a>00109       a[0]=_xmin;
<a name="l00110"></a>00110       a[1]=_ymin;
<a name="l00111"></a>00111       a[2]=_zmin;
<a name="l00112"></a>00112     }
<a name="l00113"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#1aa43bea8911cf7665f6e2fd151b609c">00113</a>     <span class="keywordtype">void</span> GetMax(<span class="keywordtype">double</span> *a)
<a name="l00114"></a>00114     {
<a name="l00115"></a>00115       a[0]=_xmax;
<a name="l00116"></a>00116       a[1]=_ymax;
<a name="l00117"></a>00117       a[2]=_zmax;
<a name="l00118"></a>00118     }
<a name="l00119"></a>00119 
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#242bb524b66c483b2eb2e2f625be2d3b">00120</a>     <span class="keywordtype">double</span> GetSpacing()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_spacing); }
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#78f75c8108f8539c255711029b37cedc">00121</a>     <span class="keywordtype">void</span> GetSpacing(<span class="keywordtype">double</span> &amp;s)
<a name="l00122"></a>00122     {
<a name="l00123"></a>00123       s=_spacing;
<a name="l00124"></a>00124     }
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#073500c7bf85d4fed293f6e787a47c74">00125</a>     <span class="keywordtype">double</span> GetScale()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span>(_inv_spa); }
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#9aaf6a660eaea40e1fdcefb551b6bd34">00126</a>     <span class="keywordtype">double</span> GetHalfSpace()<span class="keyword"> const </span>{<span class="keywordflow">return</span>(_halfSpace);}
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#76dd008ad044b4949752cef1d6c79762">00127</a>     <span class="keywordtype">int</span> GetXdim()<span class="keyword"> const       </span>{ <span class="keywordflow">return</span>(_xdim);    }
<a name="l00128"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#c6fa0902563ad245871c7de6b6ac2fed">00128</a>     <span class="keywordtype">int</span> GetYdim()<span class="keyword"> const       </span>{ <span class="keywordflow">return</span>(_ydim);    }
<a name="l00129"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#2e66afdee43c90d94197c4f246e3b7ea">00129</a>     <span class="keywordtype">int</span> GetZdim()<span class="keyword"> const       </span>{ <span class="keywordflow">return</span>(_zdim);    }
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#6e6665768ad3b8fc18276c6517c0b03d">00130</a>     <span class="keywordtype">void</span> GetDim(<span class="keywordtype">int</span> *a)
<a name="l00131"></a>00131     {
<a name="l00132"></a>00132       a[0]=_xdim;
<a name="l00133"></a>00133       a[1]=_ydim;
<a name="l00134"></a>00134       a[2]=_zdim;
<a name="l00135"></a>00135     }
<a name="l00136"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#ccffd942b323dd88aebc6fb6c20e1e18">00136</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetMidpointVector()
<a name="l00137"></a>00137     {
<a name="l00138"></a>00138       <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v;
<a name="l00139"></a>00139       v.<a class="code" href="classOpenBabel_1_1vector3.shtml#685349dbc9e2d99a19616763811cbfba" title="Set x,y and z-component of a vector.">Set</a>(_midx,_midy,_midz);
<a name="l00140"></a>00140       <span class="keywordflow">return</span>(v);
<a name="l00141"></a>00141     }
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#5eb7667a7f7ac9876e632c35231fc44a">00142</a>     <span class="keywordtype">double</span> *GetVals()    {        <span class="keywordflow">return</span>(_val);    }
<a name="l00143"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#70b7ebc269d7a65e00d8eae51a5f01f4">00143</a>     <span class="keywordtype">void</span> SetVals(<span class="keywordtype">double</span> *ptr)    {  _val = ptr;    }
<a name="l00144"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#2a6903cb1be80ac1055925f1074b75a7">00144</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> Center()
<a name="l00145"></a>00145     {
<a name="l00146"></a>00146       <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>(_midx,_midy,_midz);
<a name="l00147"></a>00147     }
<a name="l00148"></a>00148 
<a name="l00149"></a>00149     <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#70c653ee69fdbd27f77d430e4aed3cad" title="Prints a representation of the vector as a row vector of the form "<0.1,1,2>".">operator&lt;&lt; </a>( std::ostream&amp;, <span class="keyword">const</span> OBFloatGrid&amp; ) ;
<a name="l00150"></a>00150     <span class="keyword">friend</span> std::istream&amp; <a class="code" href="namespaceOpenBabel.shtml#3a21f3b512cf9bbc16301c29079c99c8">operator&gt;&gt; </a>( std::istream&amp;,OBFloatGrid&amp; ) ;
<a name="l00151"></a>00151 
<a name="l00153"></a>00153     <span class="keywordtype">double</span> Inject(<span class="keywordtype">double</span> x,<span class="keywordtype">double</span> y,<span class="keywordtype">double</span> z);
<a name="l00154"></a>00154 
<a name="l00155"></a>00155     <span class="keywordtype">void</span> IndexToCoords(<span class="keywordtype">int</span> idx, <span class="keywordtype">double</span> &amp;x, <span class="keywordtype">double</span> &amp;y, <span class="keywordtype">double</span> &amp;z);
<a name="l00156"></a>00156     <span class="keywordtype">void</span> CoordsToIndex(<span class="keywordtype">int</span>*,<span class="keywordtype">double</span>*);
<a name="l00157"></a>00157     <span class="keywordtype">int</span> CoordsToIndex(<span class="keywordtype">double</span> &amp;x, <span class="keywordtype">double</span> &amp;y, <span class="keywordtype">double</span> &amp;z);
<a name="l00159"></a>00159     <span class="keywordtype">double</span> Interpolate(<span class="keywordtype">double</span>,<span class="keywordtype">double</span>,<span class="keywordtype">double</span>);
<a name="l00161"></a>00161     <span class="keywordtype">double</span> InterpolateDerivatives(<span class="keywordtype">double</span>,<span class="keywordtype">double</span>,<span class="keywordtype">double</span>,<span class="keywordtype">double</span> *derivatives);
<a name="l00162"></a>00162   };
<a name="l00163"></a>00163 
<a name="l00164"></a>00164 <span class="preprocessor">#ifndef OBPolarGrid</span>
<a name="l00165"></a><a class="code" href="grid_8h.shtml#42518804e5759469eaa8ff61664c91b0">00165</a> <span class="preprocessor"></span><span class="preprocessor">#define OBPolarGrid 0x01 </span><span class="comment">/* polar interactions? */</span>
<a name="l00166"></a>00166 <span class="preprocessor">#endif //OBPolarGrid</span>
<a name="l00167"></a>00167 <span class="preprocessor"></span>
<a name="l00168"></a>00168 <span class="preprocessor">#ifndef OBLipoGrid</span>
<a name="l00169"></a><a class="code" href="grid_8h.shtml#ff71b2a63281edf45027696def551dae">00169</a> <span class="preprocessor"></span><span class="preprocessor">#define OBLipoGrid 0x02 </span><span class="comment">/* lipophilicity? */</span>
<a name="l00170"></a>00170 <span class="preprocessor">#endif //OBLipoGrid</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml">00175</a>  <span class="keyword">class </span>OBAPI OBProxGrid: <span class="keyword">public</span> OBGrid
<a name="l00176"></a>00176   {
<a name="l00177"></a>00177   <span class="keyword">protected</span>:
<a name="l00178"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#82f62033e7d83304ab2da3418f6be612">00178</a>     <span class="keywordtype">int</span> _gridtype;
<a name="l00179"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#76fe34283476439a274c9a7f099aeaae">00179</a>     <span class="keywordtype">int</span> _nxinc,_nyinc,_nzinc,_maxinc;
<a name="l00180"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#ab8d6695bce362b593ab3dd8c021700b">00180</a>     <span class="keywordtype">double</span> _inc;
<a name="l00181"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#359e5bb0c1ace1a8d23717ae05ce804b">00181</a>     std::vector&lt;std::vector&lt;int&gt; &gt; cell;
<a name="l00182"></a>00182     
<a name="l00183"></a>00183   <span class="keyword">public</span>:
<a name="l00184"></a>00184 
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#5d96dd1fe7ca31c165a7ba46527b9f94">00185</a>     OBProxGrid(<span class="keywordtype">int</span> gridtype=0)
<a name="l00186"></a>00186       {
<a name="l00187"></a>00187         _gridtype=gridtype;
<a name="l00188"></a>00188       }
<a name="l00189"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#4505a0fdb45f7049f787a3af0c6507e9">00189</a>     ~OBProxGrid()
<a name="l00190"></a>00190       {}
<a name="l00191"></a>00191     <span class="keywordtype">void</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol,<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;box, <span class="keywordtype">double</span> cutoff,<span class="keywordtype">double</span> resolution = 0.5);
<a name="l00192"></a>00192     <span class="keywordtype">void</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol,<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;box, <span class="keywordtype">double</span> cutoff,
<a name="l00193"></a>00193                std::vector&lt;bool&gt; &amp;use,<span class="keywordtype">double</span> resolution = 0.5);
<a name="l00194"></a>00194     std::vector&lt;int&gt; *GetProxVector(<span class="keywordtype">double</span>,<span class="keywordtype">double</span>,<span class="keywordtype">double</span>);
<a name="l00195"></a>00195     std::vector&lt;int&gt; *GetProxVector(<span class="keywordtype">double</span>*);
<a name="l00196"></a>00196 
<a name="l00197"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#c83fec56359c563116ec5a845ae20e3e">00197</a>     <span class="keywordtype">bool</span> LipoGrid()
<a name="l00198"></a>00198     {
<a name="l00199"></a>00199       <span class="keywordflow">return</span>((_gridtype&amp;<a class="code" href="grid_8h.shtml#ff71b2a63281edf45027696def551dae">OBLipoGrid</a>) ? <span class="keyword">true</span> : <span class="keyword">false</span>);
<a name="l00200"></a>00200     }
<a name="l00201"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#68fd875c6e50932b149919ebf5fd486a">00201</a>     <span class="keywordtype">bool</span> PolarGrid()
<a name="l00202"></a>00202     {
<a name="l00203"></a>00203       <span class="keywordflow">return</span>(_gridtype&amp;<a class="code" href="grid_8h.shtml#42518804e5759469eaa8ff61664c91b0">OBPolarGrid</a>);
<a name="l00204"></a>00204     }
<a name="l00205"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#018163ad162fcb4394833ac8c1a370e3">00205</a>     <span class="keywordtype">void</span> SetGridType(<span class="keywordtype">int</span> gridtype)
<a name="l00206"></a>00206     {
<a name="l00207"></a>00207       _gridtype = gridtype;
<a name="l00208"></a>00208     }
<a name="l00209"></a>00209   };
<a name="l00210"></a>00210 
<a name="l00211"></a>00211   <span class="comment">// scoring function used: PLP = Piecewise Linear Potential or ChemScore algorithm</span>
<a name="l00212"></a><a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f18f893264a00711081b62de694f99db4">00212</a>   <span class="keyword">typedef</span> <span class="keyword">enum</span> { <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f18f893264a00711081b62de694f99db4">Undefined</a> = -1, <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f39cfa0b4108a78db97edfb547ad3af91">PLP</a>, <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2fe5edd6b49548b767c8b120ad2640b28c">ChemScore</a> } <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f">score_t</a>;
<a name="l00213"></a>00213 
<a name="l00217"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml">00217</a>   <span class="keyword">class </span>OBAPI OBScoreGrid
<a name="l00218"></a>00218   {
<a name="l00219"></a>00219   <span class="keyword">protected</span>:
<a name="l00220"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#04fe4b9911de166e526288d95b4ce6e1">00220</a>     <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f">score_t</a> gridtype;
<a name="l00221"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#b3f078684998b83967d507d0f453f454">00221</a>     <span class="keywordtype">bool</span> verbose;
<a name="l00222"></a>00222 
<a name="l00223"></a>00223   <span class="keyword">public</span>:
<a name="l00224"></a>00224 
<a name="l00225"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#40a24ec85daa9ac70aa74e4ca744f838">00225</a>     <span class="keywordtype">double</span> score;
<a name="l00226"></a>00226 
<a name="l00227"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#ea55db91f06422c171c3939dd5691b0a">00227</a>     OBScoreGrid(<span class="keywordtype">void</span>)                 {  verbose = <span class="keyword">false</span>;      }
<a name="l00228"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#14f9977e97f604f4e2f4f09ce7d6cb1b">00228</a>     <span class="keyword">virtual</span> ~OBScoreGrid(<span class="keywordtype">void</span>) {}
<a name="l00229"></a>00229 
<a name="l00230"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#25911a8785e3fff79ce03278e09c74f1">00230</a>     <span class="keywordtype">void</span>    SetVerbose(<span class="keywordtype">bool</span> v)        {      verbose = v;      }
<a name="l00231"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#81dba3e924fddc20b688ca613ec2636e">00231</a>     <span class="keywordtype">void</span>    SetType(<a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f">score_t</a> type)     {      gridtype = type;  }
<a name="l00232"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#de656857818e093c4caeada3babafd21">00232</a>     <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f">score_t</a> GetType(<span class="keywordtype">void</span>)             {    <span class="keywordflow">return</span> gridtype;    }
<a name="l00233"></a>00233 
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#114a309251a09c82e63645b8eaa79f33">00234</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Clear(<span class="keywordtype">void</span>)        { }
<a name="l00235"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#1973f00ba0ab103d78305ba01323f18f">00235</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span>  Eval(<span class="keywordtype">double</span> *)    {       <span class="keywordflow">return</span> -1;       }
<a name="l00236"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#17b8bb0e69ea72ff166768a24f84a03f">00236</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span>  Eval(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol){<span class="keywordflow">return</span> Eval(mol.<a class="code" href="classOpenBabel_1_1OBMol.shtml#d11003513310725bd54265ef5bf004c0" title="the set of all atomic coordinates. See OBAtom::GetCoordPtr for more">GetCoordinates</a>());}
<a name="l00237"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#b885605cebc669554a96c7ebf10ed1e9">00237</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Init(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;, <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;, std::string &amp;, <span class="keywordtype">double</span>){}
<a name="l00238"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#dc3c7c5a6cb7592aff127db9b0ed320e">00238</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;) {}
<a name="l00239"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#c766aa1aa09c55ea699945dba5fecc7b">00239</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;, std::vector&lt;int&gt; &amp;){}
<a name="l00240"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#18f46d19bc8a15c0c1f2ceacd3d16e7a">00240</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Setup(std::vector&lt;int&gt; &amp;) {}
<a name="l00241"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#76941ad7910ff3d3864f3a0368836efd">00241</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Config(std::string) {}
<a name="l00242"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#c66c4ef5deacb26c213a9f46a15600c7">00242</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span>   Read(std::string)   {      <span class="keywordflow">return</span> <span class="keyword">false</span>;    }
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#85fb990e29228c904dfcd80a3c9ed0dd">00243</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span>   Write(std::string)  {      <span class="keywordflow">return</span> <span class="keyword">false</span>;    }
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#1563b71f50c0192978cecaed6fc11fcb">00244</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> Center()           {      <span class="keywordflow">return</span> <a class="code" href="namespaceOpenBabel.shtml#3752b8b2cb2b0485307ec67623d7e2c5" title="The zero vector: &lt;0.0, 0.0, 0.0&gt;.">VZero</a>;    }
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#f6996bda138d1b637cf36db2fab269d8">00245</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> CenterMol(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;) {      <span class="keywordflow">return</span> <a class="code" href="namespaceOpenBabel.shtml#3752b8b2cb2b0485307ec67623d7e2c5" title="The zero vector: &lt;0.0, 0.0, 0.0&gt;.">VZero</a>;    }
<a name="l00246"></a>00246   };
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 <span class="preprocessor">#endif // OB_GRID_H</span>
<a name="l00251"></a>00251 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:04 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
