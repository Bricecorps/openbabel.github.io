<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: xml.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>xml.h</h1><a href="xml_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">xml.h Declaration of XMLConversion, </span>
<a name="l00003"></a>00003 <span class="comment">declaration and definition of XMLBaseFormat and XMLMoleculeFormat </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2005-2006 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00011"></a>00011 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00012"></a>00012 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00013"></a>00013 <span class="comment">GNU General Public License for more details.</span>
<a name="l00014"></a>00014 <span class="comment">***********************************************************************/</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">openbabel/mol.h</a>&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;<a class="code" href="obconversion_8h.shtml" title="Handle file conversions. Declaration of OBFormat, OBConversion.">openbabel/obconversion.h</a>&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;<a class="code" href="obmolecformat_8h.shtml" title="Subclass of OBFormat for conversion of OBMol.">openbabel/obmolecformat.h</a>&gt;</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;libxml/xmlreader.h&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;libxml/xmlwriter.h&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="keyword">namespace </span>OpenBabel
<a name="l00024"></a>00024 {
<a name="l00025"></a>00025 
<a name="l00026"></a>00026   <span class="comment">// This macro is used in DLL builds. If it has not</span>
<a name="l00027"></a>00027   <span class="comment">// been set in babelconfig.h, define it as nothing.</span>
<a name="l00028"></a>00028 <span class="preprocessor">#ifndef OBCOMMON</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#define OBCOMMON</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span>
<a name="l00032"></a>00032   <span class="comment">//forward declaration</span>
<a name="l00033"></a>00033   <span class="keyword">class </span>XMLBaseFormat;
<a name="l00034"></a>00034 
<a name="l00035"></a>00035   <span class="comment">//******************************************************</span>
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml">00052</a> <span class="comment"></span>  <span class="keyword">class </span>OBCOMMON XMLConversion : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>
<a name="l00053"></a>00053     {
<a name="l00054"></a>00054     <span class="keyword">public</span>:
<a name="l00056"></a>00056       XMLConversion(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv);
<a name="l00057"></a>00057                 
<a name="l00059"></a>00059       ~XMLConversion();
<a name="l00060"></a>00060 
<a name="l00061"></a>00061       <span class="keywordtype">bool</span> SetupReader();
<a name="l00062"></a>00062       <span class="keywordtype">bool</span> SetupWriter();
<a name="l00063"></a>00063 
<a name="l00065"></a>00065       <span class="keywordtype">bool</span> ReadXML(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* pFormat, <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb);
<a name="l00066"></a>00066 
<a name="l00069"></a>00069       <span class="keywordtype">int</span> SkipXML(<span class="keyword">const</span> <span class="keywordtype">char</span>* ctag);
<a name="l00070"></a>00070 
<a name="l00071"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6fbcab1e9ed906780aa61cba35c3744a">00071</a>       <span class="keyword">typedef</span> std::map&lt;std::string, XMLBaseFormat*&gt; <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>;
<a name="l00072"></a>00072 
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#b188d28fc6fab286f1b4ff18c0a81ae1">00075</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>&amp; Namespaces()
<a name="l00076"></a>00076         {
<a name="l00077"></a>00077           <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>* nsm = NULL;
<a name="l00078"></a>00078           <span class="keywordflow">if</span> (!nsm)
<a name="l00079"></a>00079             nsm = <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>;
<a name="l00080"></a>00080           <span class="keywordflow">return</span> *nsm;
<a name="l00081"></a>00081         };
<a name="l00082"></a>00082 
<a name="l00083"></a>00083       <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterXMLFormat(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* pFormat,
<a name="l00084"></a>00084                                     <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* uri=NULL);
<a name="l00085"></a>00085 
<a name="l00087"></a>00087       <span class="keyword">static</span> XMLConversion* GetDerived(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv, <span class="keywordtype">bool</span> ForReading=<span class="keyword">true</span>);
<a name="l00088"></a>00088 
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#0cc38e7988805424c15d68f5444a2a5d">00091</a>       <span class="keywordtype">bool</span> IsLast()
<a name="l00092"></a>00092         { <span class="keywordflow">return</span> _pConv-&gt;IsLast(); }
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#162677bee472136c7078735ac5a3142b">00093</a>       <span class="keywordtype">int</span> GetOutputIndex()
<a name="l00094"></a>00094         { <span class="keywordflow">return</span>  _pConv-&gt;GetOutputIndex(); }
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#503005e902a848ab2ec665e1ebcab06e">00097</a>       xmlTextReaderPtr GetReader()<span class="keyword"> const</span>
<a name="l00098"></a>00098 <span class="keyword">        </span>{ <span class="keywordflow">return</span> _reader;       };
<a name="l00099"></a>00099 
<a name="l00100"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#e1b388db38d0ea2f4c7d94bf0c1c2090">00100</a>       xmlTextWriterPtr GetWriter()<span class="keyword"> const</span>
<a name="l00101"></a>00101 <span class="keyword">        </span>{ <span class="keywordflow">return</span> _writer;       };
<a name="l00102"></a>00102 
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#4964d8defcb0f638a51963d436188f12">00103</a>       <span class="keywordtype">void</span> OutputToStream()
<a name="l00104"></a>00104         {
<a name="l00105"></a>00105           xmlOutputBufferFlush(_buf);
<a name="l00106"></a>00106         }
<a name="l00107"></a>00107 
<a name="l00108"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#2edcc253b10dd0b9f5e1b600a1dc24e9">00108</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* GetDefaultXMLClass() <span class="comment">//TODO make dependent on object type</span>
<a name="l00109"></a>00109         { <span class="keywordflow">return</span> _pDefault;};
<a name="l00110"></a>00110 
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#82425091d5dc3a7becda24e6cd3d13db">00111</a>       <span class="keywordtype">void</span> LookForNamespace()
<a name="l00112"></a>00112         { _LookingForNamespace = <span class="keyword">true</span>; };
<a name="l00113"></a>00113 
<a name="l00115"></a>00115       <span class="keyword">static</span> <span class="keywordtype">int</span> ReadStream(<span class="keywordtype">void</span> * context, <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);
<a name="l00116"></a>00116       <span class="keyword">static</span> <span class="keywordtype">int</span> WriteStream(<span class="keywordtype">void</span> * context, <span class="keyword">const</span> <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);
<a name="l00117"></a>00117       <span class="comment">//static int CloseStream(void* context);</span>
<a name="l00118"></a>00118 
<a name="l00119"></a>00119       std::string GetAttribute(<span class="keyword">const</span> <span class="keywordtype">char</span>* attrname);
<a name="l00120"></a>00120 
<a name="l00122"></a>00122       std::string GetContent();
<a name="l00123"></a>00123 
<a name="l00125"></a>00125       <span class="keywordtype">bool</span>    GetContentInt(<span class="keywordtype">int</span>&amp; value);
<a name="l00126"></a>00126 
<a name="l00128"></a>00128       <span class="keywordtype">bool</span> GetContentDouble(<span class="keywordtype">double</span>&amp; value);
<a name="l00129"></a>00129 
<a name="l00130"></a>00130     <span class="keyword">private</span>:
<a name="l00131"></a>00131       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* _pDefault;
<a name="l00132"></a>00132       <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* _pConv;
<a name="l00133"></a>00133       std::streampos  _requestedpos, _lastpos;  
<a name="l00134"></a>00134       xmlTextReaderPtr _reader;
<a name="l00135"></a>00135       xmlTextWriterPtr _writer;
<a name="l00136"></a>00136       xmlOutputBufferPtr _buf;
<a name="l00137"></a>00137       <span class="comment">//        xmlBufferPtr _buf;</span>
<a name="l00138"></a>00138       <span class="keywordtype">bool</span> _LookingForNamespace;
<a name="l00139"></a>00139     <span class="keyword">public</span>:     
<a name="l00140"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#fecc511417086050a7506ca632546cdb">00140</a>       <span class="keywordtype">bool</span> _SkipNextRead;
<a name="l00141"></a>00141     };
<a name="l00142"></a>00142 
<a name="l00143"></a>00143   <span class="comment">//*************************************************</span>
<a name="l00146"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">00146</a> <span class="comment"></span>  <span class="keyword">class </span>OBCOMMON XMLBaseFormat : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>
<a name="l00147"></a>00147     {
<a name="l00148"></a>00148     <span class="keyword">protected</span>:
<a name="l00149"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">00149</a>       XMLConversion* _pxmlConv;
<a name="l00150"></a>00150         
<a name="l00151"></a>00151       <span class="comment">//formating for output</span>
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#5fd9fbe1a6ecd9798543ec2a55c472a8">00152</a>       std::string _prefix;
<a name="l00153"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#4b00721003b8d35559a55c9098ff36c5">00153</a>       <span class="keywordtype">int</span> baseindent, ind;
<a name="l00154"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#8000c477c493f1dc954e8a538ae6fda8">00154</a>       std::string nsdecl;
<a name="l00155"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#c0224265e7d214b7ed98e091fe559c88">00155</a>       <span class="keywordtype">int</span> _embedlevel;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157     <span class="keyword">public</span>:
<a name="l00158"></a>00158       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* NamespaceURI()<span class="keyword">const</span>=0;
<a name="l00159"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#6b007f43192f527944eef5136e4b2703">00159</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> DoElement(<span class="keyword">const</span> std::string&amp; ElName){<span class="keywordflow">return</span> <span class="keyword">false</span>;};
<a name="l00160"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#0e59feda5d3eb85765b53cf4b42f77ef">00160</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> EndElement(<span class="keyword">const</span> std::string&amp; ElName){<span class="keywordflow">return</span> <span class="keyword">false</span>;};
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#d2f75af8aac19e5c3c48dc26c1fa319c">00162</a>       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* EndTag(){<span class="keywordflow">return</span> <span class="stringliteral">"&gt;"</span>;};
<a name="l00163"></a>00163         
<a name="l00164"></a>00164     <span class="keyword">protected</span>:
<a name="l00165"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#4f78f6b785dbc43f74d44c6bb39cfb78">00165</a>       xmlTextReaderPtr reader()<span class="keyword"> const</span>
<a name="l00166"></a>00166 <span class="keyword">        </span>{
<a name="l00167"></a>00167           <span class="keywordflow">return</span> _pxmlConv-&gt;GetReader();
<a name="l00168"></a>00168         }
<a name="l00169"></a>00169 
<a name="l00170"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b13d5085d6f8bb5fc391fdc1ad1f8000">00170</a>       xmlTextWriterPtr writer()<span class="keyword"> const</span>
<a name="l00171"></a>00171 <span class="keyword">        </span>{
<a name="l00172"></a>00172           <span class="keywordflow">return</span> _pxmlConv-&gt;GetWriter();
<a name="l00173"></a>00173         }
<a name="l00174"></a>00174         
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#4964d8defcb0f638a51963d436188f12">00175</a>       <span class="keywordtype">void</span> OutputToStream()
<a name="l00176"></a>00176         {
<a name="l00177"></a>00177           _pxmlConv-&gt;OutputToStream();
<a name="l00178"></a>00178         }
<a name="l00179"></a>00179         
<a name="l00182"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#dfcd8e84805c262d8cbca79a83f9d4cc">00182</a>       <span class="keyword">virtual</span> <span class="keywordtype">int</span> SkipObjects(<span class="keywordtype">int</span> n, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00183"></a>00183         {
<a name="l00184"></a>00184           <span class="comment">//don't implement on base class</span>
<a name="l00185"></a>00185           <span class="keywordflow">if</span>(*EndTag()==<span class="charliteral">'&gt;'</span>)
<a name="l00186"></a>00186             <span class="keywordflow">return</span> 0;
<a name="l00187"></a>00187 
<a name="l00188"></a>00188           <span class="comment">//Set up XMLConversion class with reader </span>
<a name="l00189"></a>00189           _pxmlConv = <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#482fc8135a5ecf62b88f7e5348e62fbf" title="Returns the extended OBConversion class, making it if necessary.">XMLConversion::GetDerived</a>(pConv,<span class="keyword">true</span>);
<a name="l00190"></a>00190           <span class="keywordflow">if</span>(!_pxmlConv)
<a name="l00191"></a>00191             <span class="keywordflow">return</span> -1;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193           <span class="comment">//always find the end of at least 1 object</span>
<a name="l00194"></a>00194           <span class="keywordflow">if</span>(n==0)++n;
<a name="l00195"></a>00195                 
<a name="l00196"></a>00196           <span class="comment">//Skip n objects, returning -1 if not successful</span>
<a name="l00197"></a>00197           <span class="keywordtype">int</span> i;
<a name="l00198"></a>00198           <span class="keywordflow">for</span>(i=0; i&lt;n; ++i)
<a name="l00199"></a>00199             <span class="keywordflow">if</span>(_pxmlConv-&gt;SkipXML(EndTag())!=1)
<a name="l00200"></a>00200               <span class="keywordflow">return</span> -1;
<a name="l00201"></a>00201                 
<a name="l00202"></a>00202           <span class="keywordflow">return</span> 1;       
<a name="l00203"></a>00203         }
<a name="l00204"></a>00204 
<a name="l00205"></a>00205     };
<a name="l00206"></a>00206 
<a name="l00207"></a>00207   <span class="comment">//*************************************************</span>
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">00210</a> <span class="comment"></span>  <span class="keyword">class </span>OBCOMMON XMLMoleculeFormat : <span class="keyword">public</span> XMLBaseFormat
<a name="l00211"></a>00211     {
<a name="l00212"></a>00212     <span class="keyword">protected</span>:
<a name="l00213"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#e286ac3ecc365473ace5c0da2c656ffe">00213</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>* _pmol;
<a name="l00214"></a>00214 
<a name="l00215"></a>00215     <span class="keyword">public</span>:
<a name="l00216"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#9acd362b27e30c19a2c870ca71592723">00216</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ReadChemObject(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00217"></a>00217         {
<a name="l00218"></a>00218           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml#4273e4d8b5279f4d5a5015e369b85bbe" title="Static routine, which can be called from elsewhere.">OBMoleculeFormat::ReadChemObjectImpl</a>(pConv, <span class="keyword">this</span>);
<a name="l00219"></a>00219         };
<a name="l00220"></a>00220 
<a name="l00221"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#39c2aaf250dde6e85d05ff9357d8b003">00221</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WriteChemObject(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00222"></a>00222         {
<a name="l00223"></a>00223           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml#1f7b3f1711e8742722dda80539ee7a26" title="Static routine, which can be called from elsewhere.">OBMoleculeFormat::WriteChemObjectImpl</a>(pConv, <span class="keyword">this</span>);
<a name="l00224"></a>00224         };
<a name="l00225"></a>00225 
<a name="l00226"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#5a3cd5ffc0d21fe9b95d804c44e7d146">00226</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ReadMolecule(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00227"></a>00227         {
<a name="l00228"></a>00228           _pmol = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>*<span class="keyword">&gt;</span>(pOb);
<a name="l00229"></a>00229           <span class="keywordflow">if</span>(!_pmol)
<a name="l00230"></a>00230             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00231"></a>00231 
<a name="l00232"></a>00232           _pxmlConv = <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#482fc8135a5ecf62b88f7e5348e62fbf" title="Returns the extended OBConversion class, making it if necessary.">XMLConversion::GetDerived</a>(pConv,<span class="keyword">true</span>);
<a name="l00233"></a>00233           <span class="keywordflow">if</span>(!_pxmlConv)
<a name="l00234"></a>00234             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00235"></a>00235           _embedlevel = -1;
<a name="l00236"></a>00236           <span class="keywordflow">return</span> _pxmlConv-&gt;ReadXML(<span class="keyword">this</span>,pOb);
<a name="l00237"></a>00237         };
<a name="l00238"></a>00238 
<a name="l00239"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#54e576034bd51c66256aa6a98f81d644">00239</a>       <span class="keyword">const</span> std::type_info&amp; GetType()
<a name="l00240"></a>00240         {
<a name="l00241"></a>00241           <span class="keywordflow">return</span> <span class="keyword">typeid</span>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>*);
<a name="l00242"></a>00242         };
<a name="l00243"></a>00243 
<a name="l00244"></a>00244     };
<a name="l00245"></a>00245 
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 }<span class="comment">//namespace</span>
<a name="l00248"></a>00248 
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Tue Apr 24 18:08:06 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
