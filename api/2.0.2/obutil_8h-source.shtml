<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: obutil.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>obutil.h</h1><a href="obutil_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obutil.h - Various utility methods.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_UTIL_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_UTIL_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include "babelconfig.h"</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#if HAVE_IOSTREAM</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#elif HAVE_IOSTREAM_H</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#endif</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span>
<a name="l00031"></a>00031 <span class="preprocessor">#if TIME_WITH_SYS_TIME</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#include &lt;sys/time.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#else</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">#if HAVE_SYS_TIME_H</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="preprocessor">#include &lt;sys/time.h&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#else</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#endif</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="keyword">namespace </span>OpenBabel
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">// class introduction in obutil.cpp</span>
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1OBStopwatch.shtml">00048</a> <span class="keyword">class </span>OBAPI OBStopwatch
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050 <span class="preprocessor">#if HAVE_CLOCK_T</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span>    clock_t start, stop;
<a name="l00052"></a>00052 <span class="preprocessor">#else</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a>00054     timeval start;
<a name="l00055"></a>00055     timeval stop;
<a name="l00056"></a>00056 <span class="preprocessor">#endif</span>
<a name="l00057"></a>00057 <span class="preprocessor"></span>
<a name="l00058"></a>00058 <span class="keyword">public</span>:
<a name="l00059"></a>00059 <span class="preprocessor">#if HAVE_CLOCK_T</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span>
<a name="l00061"></a><a class="code" href="classOpenBabel_1_1OBStopwatch.shtml#07aaf1227e4d645f15e0a964f54ef291">00061</a>     <span class="keywordtype">void</span>  Start()
<a name="l00062"></a>00062     {
<a name="l00063"></a>00063         start= clock();
<a name="l00064"></a>00064     }
<a name="l00065"></a><a class="code" href="classOpenBabel_1_1OBStopwatch.shtml#594d12c3e3c5ff7b9903a4bdc24ea1b4">00065</a>     <span class="keywordtype">double</span> Lap()
<a name="l00066"></a>00066     {
<a name="l00067"></a>00067         stop= clock();
<a name="l00068"></a>00068         <span class="keywordflow">return</span>((<span class="keywordtype">double</span>)(stop - start) / CLOCKS_PER_SEC);
<a name="l00069"></a>00069     }
<a name="l00070"></a>00070 <span class="preprocessor">#else</span>
<a name="l00071"></a>00071 <span class="preprocessor"></span>    <span class="keywordtype">void</span> Start()
<a name="l00072"></a>00072     {
<a name="l00073"></a>00073         gettimeofday(&amp;start,(<span class="keyword">struct</span> timezone *)NULL);
<a name="l00074"></a>00074     }
<a name="l00075"></a>00075     <span class="keywordtype">double</span> Lap()
<a name="l00076"></a>00076     {
<a name="l00077"></a>00077         gettimeofday(&amp;stop,(<span class="keyword">struct</span> timezone *)NULL);
<a name="l00078"></a>00078         <span class="keywordflow">return</span>((stop.tv_sec - start.tv_sec)
<a name="l00079"></a>00079                + (<span class="keywordtype">double</span>)(stop.tv_usec - start.tv_usec)/1000000.0);
<a name="l00080"></a>00080     }
<a name="l00081"></a>00081 <span class="preprocessor">#endif</span>
<a name="l00082"></a><a class="code" href="classOpenBabel_1_1OBStopwatch.shtml#9e01ac3f5e0f092b6dffe54421ce9c33">00082</a> <span class="preprocessor"></span>    <span class="keywordtype">double</span> Elapsed()
<a name="l00083"></a>00083     {
<a name="l00084"></a>00084         <span class="keywordflow">return</span>(Lap());
<a name="l00085"></a>00085     }
<a name="l00086"></a>00086 };
<a name="l00087"></a>00087 
<a name="l00088"></a>00088 
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml">00090</a> <span class="keyword">class </span>OBAPI OBSqrtTbl
<a name="l00091"></a>00091 {
<a name="l00092"></a>00092     <span class="keywordtype">double</span> _max,_incr,*_tbl;
<a name="l00093"></a>00093 <span class="keyword">public</span>:
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#f238629f406442e9c3e03aab5f92e5db">00094</a>     OBSqrtTbl()
<a name="l00095"></a>00095     {
<a name="l00096"></a>00096         _tbl=NULL;
<a name="l00097"></a>00097         _max = _incr = 0.0;
<a name="l00098"></a>00098     }
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#5204f799d9a3abed847b03b0e2fa4af2">00099</a>     OBSqrtTbl(<span class="keywordtype">double</span> max,<span class="keywordtype">double</span> incr)
<a name="l00100"></a>00100     {
<a name="l00101"></a>00101         Init(max,incr);
<a name="l00102"></a>00102     }
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#c88c1cb13c0f062f244660ed46baea4d">00103</a>     ~OBSqrtTbl()
<a name="l00104"></a>00104     {
<a name="l00105"></a>00105         <span class="keywordflow">if</span> (_tbl)
<a name="l00106"></a>00106         {
<a name="l00107"></a>00107             <span class="keyword">delete</span> [] _tbl;
<a name="l00108"></a>00108             _tbl = NULL;
<a name="l00109"></a>00109         }
<a name="l00110"></a>00110     }
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#a6ee1e071d972c9705b60eadc3428c0b">00111</a>     <span class="keywordtype">double</span> Sqrt(<span class="keywordtype">double</span> d2)<span class="keyword"> const</span>
<a name="l00112"></a>00112 <span class="keyword">    </span>{
<a name="l00113"></a>00113         <span class="keywordflow">if</span> (_tbl)
<a name="l00114"></a>00114             <span class="keywordflow">return</span>((d2 &lt; _max) ? _tbl[(<span class="keywordtype">int</span>)(d2*_incr)]:sqrt(d2));
<a name="l00115"></a>00115         <span class="keywordflow">else</span>
<a name="l00116"></a>00116             <span class="keywordflow">return</span> 0.0;
<a name="l00117"></a>00117     }
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#01dd1b037ecbe7bd8d23b50689fa6b50">00118</a>     <span class="keywordtype">void</span> Init(<span class="keywordtype">double</span> max,<span class="keywordtype">double</span> incr)
<a name="l00119"></a>00119     {
<a name="l00120"></a>00120         <span class="keywordtype">int</span> i;
<a name="l00121"></a>00121         <span class="keywordtype">double</span> r;
<a name="l00122"></a>00122         _max = max*max;
<a name="l00123"></a>00123         _incr = incr;
<a name="l00124"></a>00124         <span class="comment">//array size needs to be large enough to account for fp error</span>
<a name="l00125"></a>00125         _tbl = <span class="keyword">new</span> <span class="keywordtype">double</span> [(<span class="keywordtype">unsigned</span> int)((_max/_incr)+10)];
<a name="l00126"></a>00126         <span class="keywordflow">for</span> (r = (_incr/2.0),i=0;r &lt;= _max;r += _incr,i++)
<a name="l00127"></a>00127             _tbl[i] = sqrt(r);
<a name="l00128"></a>00128 
<a name="l00129"></a>00129         _incr = 1/_incr;
<a name="l00130"></a>00130     }
<a name="l00131"></a>00131 };
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="comment">//******************************************</span>
<a name="l00136"></a>00136 <span class="comment">//*** Stuff for random number generation ***</span>
<a name="l00137"></a>00137 <span class="comment">//******************************************</span>
<a name="l00138"></a>00138 
<a name="l00140"></a><a class="code" href="structOpenBabel_1_1DoubleType.shtml">00140</a> <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00141"></a>00141 <span class="keyword"></span>{
<a name="l00142"></a><a class="code" href="structOpenBabel_1_1DoubleType.shtml#8b464957786ffe5a3406a4060f0da97f">00142</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> hi;
<a name="l00143"></a><a class="code" href="structOpenBabel_1_1DoubleType.shtml#f0c1fc19ce0b4c36f5b6a41b90012403">00143</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lo;
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 <a class="code" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a>;
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#28466e08c61853737ac9bdeaeee495cc">DoubleMultiply</a>( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>,<a class="code" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a>*);
<a name="l00148"></a>00148 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#7fe18b3a86010f2fbbeeda7a6ed635a4">DoubleAdd</a>( <a class="code" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a>*,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
<a name="l00149"></a>00149 OBAPI <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a995f2456608bb27a86fef9460f9e8e0">DoubleModulus</a>( <a class="code" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a>*,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
<a name="l00150"></a>00150 
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBRandom.shtml">00152</a> <span class="keyword">class </span>OBAPI OBRandom
<a name="l00153"></a>00153 {
<a name="l00154"></a>00154     <a class="code" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> d;
<a name="l00155"></a>00155     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m,a,c;
<a name="l00156"></a>00156     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> p;
<a name="l00157"></a>00157     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;
<a name="l00158"></a>00158     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="matrix3x3_8cpp.shtml#6c4b361d72eb3767ba424ac9a6ecf52b">x</a>;
<a name="l00159"></a>00159     <span class="keywordtype">bool</span> OBRandomUseSysRand;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 <span class="keyword">public</span>:
<a name="l00162"></a>00162     OBRandom(<span class="keywordtype">bool</span> useSys= <span class="keyword">false</span>);
<a name="l00163"></a><a class="code" href="classOpenBabel_1_1OBRandom.shtml#381897e3c19642c65d3784c94f3572d8">00163</a>     <span class="keywordtype">void</span> Seed(<span class="keywordtype">int</span> seed)
<a name="l00164"></a>00164     {
<a name="l00165"></a>00165         <a class="code" href="matrix3x3_8cpp.shtml#6c4b361d72eb3767ba424ac9a6ecf52b">x</a> = seed;
<a name="l00166"></a>00166     }
<a name="l00167"></a>00167     <span class="keywordtype">void</span> TimeSeed();
<a name="l00168"></a>00168     <span class="keywordtype">int</span> NextInt();
<a name="l00169"></a>00169     <span class="keywordtype">double</span> NextFloat();
<a name="l00170"></a>00170 };
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="comment">//***RMS helper methods***/</span>
<a name="l00173"></a>00173 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00174"></a>00174 <span class="preprocessor"></span>OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#037d5f246395ec725489c655344a958a">rotate_coords</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span> m[3][3],<span class="keywordtype">int</span>);
<a name="l00175"></a>00175 <span class="preprocessor">#endif</span>
<a name="l00176"></a>00176 <span class="preprocessor"></span>OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#25d610b9255993505f2dbdd9690d068f">calc_rms</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
<a name="l00177"></a>00177 
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 <span class="comment">// Documentation in obutil.cpp</span>
<a name="l00181"></a>00181 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#ae157b7c5a3145dff9e938888d41d46f">ToUpper</a>(std::string&amp;);
<a name="l00182"></a>00182 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#ae157b7c5a3145dff9e938888d41d46f">ToUpper</a>(<span class="keywordtype">char</span>*);
<a name="l00183"></a>00183 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#8e8df618618aa53bf4cf202b0230c7ac">ToLower</a>(std::string&amp;);
<a name="l00184"></a>00184 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#8e8df618618aa53bf4cf202b0230c7ac">ToLower</a>(<span class="keywordtype">char</span> *);
<a name="l00186"></a>00186 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#e7fd604c6cfd7cbb0067721106af8ca9">CleanAtomType</a>(<span class="keywordtype">char</span>*);
<a name="l00188"></a>00188 
<a name="l00190"></a>00190 OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#0ad9e2f40cfd6f64e1a38b37e907791b">OBCompareInt</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;,<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;);
<a name="l00192"></a>00192 OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#b52d1c0b21967edcbb5b69830c53326f">OBCompareUnsigned</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;,<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;);
<a name="l00194"></a>00194 OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#069eef95c9b9f60d4df0f9f8d2fdccb2">IsNear</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> epsilon=2e-6);
<a name="l00196"></a>00196 OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#e413a69dbd2152e5aba9ecbe75285113">IsNearZero</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> epsilon=2e-6);
<a name="l00197"></a>00197 
<a name="l00198"></a>00198 <span class="comment">//******************triple template*************************</span>
<a name="l00200"></a>00200 <span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2, <span class="keyword">class</span> T3&gt;
<a name="l00201"></a><a class="code" href="structOpenBabel_1_1triple.shtml">00201</a> <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1triple.shtml">triple</a>
<a name="l00202"></a>00202 {
<a name="l00203"></a>00203     <span class="comment">//type names for the values</span>
<a name="l00204"></a><a class="code" href="structOpenBabel_1_1triple.shtml#2ff1057d713f47338b9b6c4a60e5ab87">00204</a>     <span class="keyword">typedef</span> T1 <a class="code" href="classOpenBabel_1_1OBAtom.shtml">first_type</a>;
<a name="l00205"></a><a class="code" href="structOpenBabel_1_1triple.shtml#75b41637f35c1f6bbf8ec5c0ebb79728">00205</a>     <span class="keyword">typedef</span> T2 <a class="code" href="classOpenBabel_1_1OBAtom.shtml">second_type</a>;
<a name="l00206"></a><a class="code" href="structOpenBabel_1_1triple.shtml#32442a804e500a7dc9ecb4a3feeb143d">00206</a>     <span class="keyword">typedef</span> T3 <a class="code" href="structOpenBabel_1_1triple.shtml#32442a804e500a7dc9ecb4a3feeb143d">third_type</a>;
<a name="l00207"></a>00207 
<a name="l00208"></a>00208     <span class="comment">//member</span>
<a name="l00209"></a><a class="code" href="structOpenBabel_1_1triple.shtml#e885a6822c40e26649c9dd8b476942f8">00209</a>     T1 <a class="code" href="structOpenBabel_1_1triple.shtml#e885a6822c40e26649c9dd8b476942f8">first</a>;
<a name="l00210"></a><a class="code" href="structOpenBabel_1_1triple.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">00210</a>     T2 <a class="code" href="structOpenBabel_1_1triple.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>;
<a name="l00211"></a><a class="code" href="structOpenBabel_1_1triple.shtml#b02b336e2ad870f773affd07b0f68ef8">00211</a>     T3 <a class="code" href="structOpenBabel_1_1triple.shtml#b02b336e2ad870f773affd07b0f68ef8">third</a>;
<a name="l00212"></a>00212   
<a name="l00216"></a><a class="code" href="structOpenBabel_1_1triple.shtml#87aa95191f543f716183080f7bfcbfd0">00216</a>   <a class="code" href="structOpenBabel_1_1triple.shtml#87aa95191f543f716183080f7bfcbfd0">triple</a>():
<a name="l00217"></a>00217     <a class="code" href="structOpenBabel_1_1triple.shtml#e885a6822c40e26649c9dd8b476942f8">first</a>(T1()),<a class="code" href="structOpenBabel_1_1triple.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>(T2()),<a class="code" href="structOpenBabel_1_1triple.shtml#b02b336e2ad870f773affd07b0f68ef8">third</a>(T3())
<a name="l00218"></a>00218   {}
<a name="l00219"></a>00219 
<a name="l00221"></a><a class="code" href="structOpenBabel_1_1triple.shtml#a519d64ebe02cf77be9fce8401bbfc59">00221</a>   <a class="code" href="structOpenBabel_1_1triple.shtml#87aa95191f543f716183080f7bfcbfd0">triple</a>(<span class="keyword">const</span> T1 &amp;a, <span class="keyword">const</span> T2 &amp;b, <span class="keyword">const</span> T3 &amp;c):
<a name="l00222"></a>00222     <a class="code" href="structOpenBabel_1_1triple.shtml#e885a6822c40e26649c9dd8b476942f8">first</a>(a), <a class="code" href="structOpenBabel_1_1triple.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>(b), <a class="code" href="structOpenBabel_1_1triple.shtml#b02b336e2ad870f773affd07b0f68ef8">third</a>(c)
<a name="l00223"></a>00223   {}
<a name="l00224"></a>00224 
<a name="l00226"></a>00226   <span class="keyword">template</span>&lt;<span class="keyword">class</span> U, <span class="keyword">class</span> V, <span class="keyword">class</span> W&gt;
<a name="l00227"></a><a class="code" href="structOpenBabel_1_1triple.shtml#ad33c815591f3f00892a727ee9bec59b">00227</a>     <a class="code" href="structOpenBabel_1_1triple.shtml#87aa95191f543f716183080f7bfcbfd0">triple</a>(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1triple.shtml">triple&lt;U,V,W&gt;</a> &amp;t):
<a name="l00228"></a>00228       <a class="code" href="structOpenBabel_1_1triple.shtml#e885a6822c40e26649c9dd8b476942f8">first</a>(t.<a class="code" href="structOpenBabel_1_1triple.shtml#e885a6822c40e26649c9dd8b476942f8">first</a>), <a class="code" href="structOpenBabel_1_1triple.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>(t.<a class="code" href="structOpenBabel_1_1triple.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>), <a class="code" href="structOpenBabel_1_1triple.shtml#b02b336e2ad870f773affd07b0f68ef8">third</a>(t.<a class="code" href="structOpenBabel_1_1triple.shtml#b02b336e2ad870f773affd07b0f68ef8">third</a>)
<a name="l00229"></a>00229   {}
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 };
<a name="l00232"></a>00232 
<a name="l00233"></a>00233 <span class="comment">//**************quad template********************</span>
<a name="l00235"></a>00235 <span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2, <span class="keyword">class</span> T3, <span class="keyword">class</span> T4&gt;
<a name="l00236"></a><a class="code" href="structOpenBabel_1_1quad.shtml">00236</a> <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1quad.shtml">quad</a>
<a name="l00237"></a>00237 {
<a name="l00238"></a>00238     <span class="comment">//type names for the values</span>
<a name="l00239"></a><a class="code" href="structOpenBabel_1_1quad.shtml#2ff1057d713f47338b9b6c4a60e5ab87">00239</a>     <span class="keyword">typedef</span> T1 <a class="code" href="structOpenBabel_1_1quad.shtml#2ff1057d713f47338b9b6c4a60e5ab87">first_type</a>;
<a name="l00240"></a><a class="code" href="structOpenBabel_1_1quad.shtml#75b41637f35c1f6bbf8ec5c0ebb79728">00240</a>     <span class="keyword">typedef</span> T2 <a class="code" href="structOpenBabel_1_1quad.shtml#75b41637f35c1f6bbf8ec5c0ebb79728">second_type</a>;
<a name="l00241"></a><a class="code" href="structOpenBabel_1_1quad.shtml#32442a804e500a7dc9ecb4a3feeb143d">00241</a>     <span class="keyword">typedef</span> T3 <a class="code" href="structOpenBabel_1_1quad.shtml#32442a804e500a7dc9ecb4a3feeb143d">third_type</a>;
<a name="l00242"></a><a class="code" href="structOpenBabel_1_1quad.shtml#003e496cf073cdc37c84c12aecee9605">00242</a>     <span class="keyword">typedef</span> T4 <a class="code" href="structOpenBabel_1_1quad.shtml#003e496cf073cdc37c84c12aecee9605">fourth_type</a>;
<a name="l00243"></a>00243 
<a name="l00244"></a>00244     <span class="comment">//member</span>
<a name="l00245"></a><a class="code" href="structOpenBabel_1_1quad.shtml#e885a6822c40e26649c9dd8b476942f8">00245</a>     T1 <a class="code" href="structOpenBabel_1_1quad.shtml#e885a6822c40e26649c9dd8b476942f8">first</a>;
<a name="l00246"></a><a class="code" href="structOpenBabel_1_1quad.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">00246</a>     T2 <a class="code" href="structOpenBabel_1_1quad.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>;
<a name="l00247"></a><a class="code" href="structOpenBabel_1_1quad.shtml#b02b336e2ad870f773affd07b0f68ef8">00247</a>     T3 <a class="code" href="structOpenBabel_1_1quad.shtml#b02b336e2ad870f773affd07b0f68ef8">third</a>;
<a name="l00248"></a><a class="code" href="structOpenBabel_1_1quad.shtml#603db4ed74155df96d6d73e4287baf66">00248</a>     T4 <a class="code" href="structOpenBabel_1_1quad.shtml#603db4ed74155df96d6d73e4287baf66">fourth</a>;
<a name="l00249"></a>00249 
<a name="l00253"></a><a class="code" href="structOpenBabel_1_1quad.shtml#2e71f961e39f3cad1898d5adee3ab328">00253</a>   <a class="code" href="structOpenBabel_1_1quad.shtml#2e71f961e39f3cad1898d5adee3ab328">quad</a>():
<a name="l00254"></a>00254     <a class="code" href="structOpenBabel_1_1quad.shtml#e885a6822c40e26649c9dd8b476942f8">first</a>(T1()),<a class="code" href="structOpenBabel_1_1quad.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>(T2()),<a class="code" href="structOpenBabel_1_1quad.shtml#b02b336e2ad870f773affd07b0f68ef8">third</a>(T3()),<a class="code" href="structOpenBabel_1_1quad.shtml#603db4ed74155df96d6d73e4287baf66">fourth</a>(T4())
<a name="l00255"></a>00255   {}
<a name="l00256"></a>00256 
<a name="l00258"></a><a class="code" href="structOpenBabel_1_1quad.shtml#bfcbd8a7eb6b09894cba7994ef1a3eac">00258</a>   <a class="code" href="structOpenBabel_1_1quad.shtml#2e71f961e39f3cad1898d5adee3ab328">quad</a>(<span class="keyword">const</span> T1 &amp;a, <span class="keyword">const</span> T2 &amp;b, <span class="keyword">const</span> T3 &amp;c, <span class="keyword">const</span> T4 &amp;d):
<a name="l00259"></a>00259     <a class="code" href="structOpenBabel_1_1quad.shtml#e885a6822c40e26649c9dd8b476942f8">first</a>(a), <a class="code" href="structOpenBabel_1_1quad.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>(b), <a class="code" href="structOpenBabel_1_1quad.shtml#b02b336e2ad870f773affd07b0f68ef8">third</a>(c), <a class="code" href="structOpenBabel_1_1quad.shtml#603db4ed74155df96d6d73e4287baf66">fourth</a>(d)
<a name="l00260"></a>00260   {}
<a name="l00261"></a>00261 
<a name="l00263"></a>00263   <span class="keyword">template</span>&lt;<span class="keyword">class</span> U, <span class="keyword">class</span> V, <span class="keyword">class</span> W, <span class="keyword">class</span> X&gt;
<a name="l00264"></a><a class="code" href="structOpenBabel_1_1quad.shtml#b42beb8e4a502204a0e67fc443414c58">00264</a>     <a class="code" href="structOpenBabel_1_1quad.shtml#2e71f961e39f3cad1898d5adee3ab328">quad</a>(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1quad.shtml">quad&lt;U,V,W,X&gt;</a> &amp;q):
<a name="l00265"></a>00265       <a class="code" href="structOpenBabel_1_1quad.shtml#e885a6822c40e26649c9dd8b476942f8">first</a>(q.<a class="code" href="structOpenBabel_1_1quad.shtml#e885a6822c40e26649c9dd8b476942f8">first</a>), <a class="code" href="structOpenBabel_1_1quad.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>(q.<a class="code" href="structOpenBabel_1_1quad.shtml#9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>), <a class="code" href="structOpenBabel_1_1quad.shtml#b02b336e2ad870f773affd07b0f68ef8">third</a>(q.<a class="code" href="structOpenBabel_1_1quad.shtml#b02b336e2ad870f773affd07b0f68ef8">third</a>), <a class="code" href="structOpenBabel_1_1quad.shtml#603db4ed74155df96d6d73e4287baf66">fourth</a>(q.<a class="code" href="structOpenBabel_1_1quad.shtml#603db4ed74155df96d6d73e4287baf66">fourth</a>)
<a name="l00266"></a>00266   {}
<a name="l00267"></a>00267 
<a name="l00268"></a>00268 };
<a name="l00269"></a>00269 
<a name="l00270"></a>00270 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00271"></a>00271 
<a name="l00272"></a>00272 <span class="preprocessor">#endif // OBUTIL_H</span>
<a name="l00273"></a>00273 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:01 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
