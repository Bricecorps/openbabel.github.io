<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: base.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>base.h</h1><a href="base_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">base.h - Base classes to build a graph</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_BASE_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_BASE_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include "babelconfig.h"</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#if HAVE_IOSTREAM</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#elif HAVE_IOSTREAM_H</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="keyword">namespace </span>OpenBabel
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">class </span>OBBase;
<a name="l00038"></a>00038 <span class="keyword">class </span>OBNodeBase;
<a name="l00039"></a>00039 <span class="keyword">class </span>OBEdgeBase;
<a name="l00040"></a>00040 <span class="keyword">class </span>OBGraphBase;
<a name="l00041"></a>00041 
<a name="l00047"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml">00047</a> <span class="keyword">class </span>OBAPI OBBase
<a name="l00048"></a>00048 {
<a name="l00049"></a>00049 <span class="keyword">public</span>:
<a name="l00050"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#7a58af02c4e2dd0d9b174b3032f1ffa3">00050</a>     <span class="keyword">virtual</span> ~OBBase()
<a name="l00051"></a>00051     {}
<a name="l00052"></a>00052     ; <span class="comment">//NF</span>
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#85efd9cd89e1611737080229ec6cc38b">00053</a>     <span class="keyword">virtual</span> OBBase* DoTransformations(<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;*pOptions)
<a name="l00054"></a>00054     {
<a name="l00055"></a>00055         <span class="keywordflow">return</span> <span class="keyword">this</span>;
<a name="l00056"></a>00056     } <span class="comment">//NF Base type does nothing</span>
<a name="l00057"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#6bb6ed5c064e3957d8dd03aba51e61f7">00057</a>     <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ClassDescription()
<a name="l00058"></a>00058     {
<a name="l00059"></a>00059         <span class="keywordflow">return</span> <span class="stringliteral">""</span>;
<a name="l00060"></a>00060     } <span class="comment">//NF</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 };
<a name="l00063"></a>00063 
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml">00068</a> <span class="keyword">class </span>OBAPI OBNodeBase : <span class="keyword">public</span> OBBase
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070 <span class="keyword">protected</span>:
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#891ad63852015fb2ddaed4d177e4a104">00072</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>  _idx;
<a name="l00074"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#9e9a06b4e445a3cbe5d4e09695620dcb">00074</a>     <a class="code" href="classOpenBabel_1_1OBGraphBase.shtml">OBGraphBase</a>        *_parent;
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#9c8e30c37e33bb11c5dade3984d71200">00078</a>     std::vector&lt;OBEdgeBase*&gt; _vbond;
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="keyword">public</span>:
<a name="l00082"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#6368d7673f23186649b2969ade3661d7">00082</a>     <span class="keywordtype">bool</span> Visit;
<a name="l00083"></a>00083 
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#8b24e99e94c5bd5e19f4600edd2952f9">00085</a>     OBNodeBase()
<a name="l00086"></a>00086     {
<a name="l00087"></a>00087         Visit = <span class="keyword">false</span>;
<a name="l00088"></a>00088     }
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#10d76187fda772eb7aa8c617102ffb72">00090</a>     <span class="keyword">virtual</span> ~OBNodeBase()
<a name="l00091"></a>00091     {}
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#8e7a42e07b55f9e486bafbbb968bc5e1">00092</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  GetIdx()<span class="keyword">                   const</span>
<a name="l00093"></a>00093 <span class="keyword">    </span>{
<a name="l00094"></a>00094         <span class="keywordflow">return</span>(_idx);
<a name="l00095"></a>00095     }
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#b994a975e39f5c62288f4f972b6f90c9">00097</a>     <span class="keywordtype">void</span>                  SetIdx(<span class="keywordtype">int</span> idx)
<a name="l00098"></a>00098     {
<a name="l00099"></a>00099         _idx = idx;
<a name="l00100"></a>00100     }
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#205872bb6f0f1bc7ba69b7264025d4fe">00101</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGraphBase.shtml">OBGraphBase</a>  *GetParent()
<a name="l00102"></a>00102     {
<a name="l00103"></a>00103         <span class="keywordflow">return</span>(_parent);
<a name="l00104"></a>00104     }
<a name="l00106"></a>00106     <span class="keywordtype">void</span>                  SetParent(<a class="code" href="classOpenBabel_1_1OBGraphBase.shtml">OBGraphBase</a>*);
<a name="l00108"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#e5a35d614adf46bcd523bf62de9c81c0">00108</a>     <span class="keywordtype">void</span>                  AddEdge(<a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> *b)
<a name="l00109"></a>00109     {
<a name="l00110"></a>00110         _vbond.push_back(b);
<a name="l00111"></a>00111     }
<a name="l00113"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#15a0f5a268fc6b9105528741e5ab2f4c">00113</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  GetValence()<span class="keyword">               const</span>
<a name="l00114"></a>00114 <span class="keyword">    </span>{
<a name="l00115"></a>00115         <span class="keywordflow">return</span>(_vbond.size());
<a name="l00116"></a>00116     }
<a name="l00118"></a>00118     OBNodeBase           *BeginNbr(std::vector&lt;OBEdgeBase*&gt;::iterator&amp;);
<a name="l00119"></a>00119     OBNodeBase           *NextNbr(std::vector&lt;OBEdgeBase*&gt;::iterator&amp;);
<a name="l00121"></a>00121     <a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a>           *Begin(std::vector&lt;OBEdgeBase*&gt;::iterator&amp;);
<a name="l00122"></a>00122     <a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a>           *Next(std::vector&lt;OBEdgeBase*&gt;::iterator&amp;);
<a name="l00124"></a>00124     <span class="keyword">virtual</span> <span class="keywordtype">bool</span>          IsConnected(OBNodeBase*);
<a name="l00125"></a>00125 
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#035ad93c9b173681b6a1829020ee11ca">00127</a>     <span class="keywordtype">void</span> Error(<span class="keywordtype">int</span> f)
<a name="l00128"></a>00128     {
<a name="l00129"></a>00129         std::cerr &lt;&lt; <span class="stringliteral">"atom vf called = "</span> &lt;&lt; f &lt;&lt; std::endl;
<a name="l00130"></a>00130     }
<a name="l00136"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#4bf501ba9df18879fa9bc371299f014f">00136</a>     <span class="keyword">virtual</span> <span class="keywordtype">int</span>           GetFormalCharge()<span class="keyword">          const</span>
<a name="l00137"></a>00137 <span class="keyword">    </span>{
<a name="l00138"></a>00138         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(1);
<a name="l00139"></a>00139         <span class="keywordflow">return</span>(0);
<a name="l00140"></a>00140     }
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#6141b303b81c1c161ebc740dbdddd5af">00141</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ExplicitHydrogenCount()<span class="keyword">    const</span>
<a name="l00142"></a>00142 <span class="keyword">    </span>{
<a name="l00143"></a>00143         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(22);
<a name="l00144"></a>00144         <span class="keywordflow">return</span>(0);
<a name="l00145"></a>00145     }
<a name="l00146"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#49e6bbcbaad4751595a237ccf4a726f7">00146</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ImplicitHydrogenCount()<span class="keyword">    const</span>
<a name="l00147"></a>00147 <span class="keyword">    </span>{
<a name="l00148"></a>00148         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(22);
<a name="l00149"></a>00149         <span class="keywordflow">return</span>(0);
<a name="l00150"></a>00150     }
<a name="l00151"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#c510917e32915fe4fcc1b5eec6da59b8">00151</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  GetImplicitValence()<span class="keyword">       const</span>
<a name="l00152"></a>00152 <span class="keyword">    </span>{
<a name="l00153"></a>00153         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(3);
<a name="l00154"></a>00154         <span class="keywordflow">return</span>(0);
<a name="l00155"></a>00155     }
<a name="l00156"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#3559c2d9e22d0a6614c73662cd872f8b">00156</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  GetHvyValence()<span class="keyword">            const</span>
<a name="l00157"></a>00157 <span class="keyword">    </span>{
<a name="l00158"></a>00158         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(4);
<a name="l00159"></a>00159         <span class="keywordflow">return</span>(0);
<a name="l00160"></a>00160     }
<a name="l00161"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#84c924914199f9814c2d456b827398a9">00161</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  KBOSum()<span class="keyword">                const</span>
<a name="l00162"></a>00162 <span class="keyword">    </span>{
<a name="l00163"></a>00163         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(5);
<a name="l00164"></a>00164         <span class="keywordflow">return</span>(0);
<a name="l00165"></a>00165     }
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#9de09505cf4b48dac1bcee09489d2cfa">00166</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  GetHyb()<span class="keyword">                   const</span>
<a name="l00167"></a>00167 <span class="keyword">    </span>{
<a name="l00168"></a>00168         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(6);
<a name="l00169"></a>00169         <span class="keywordflow">return</span>(0);
<a name="l00170"></a>00170     }
<a name="l00171"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#f92192d67101c6e3c6a28e2c773a38ea">00171</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  MemberOfRingCount()<span class="keyword">        const</span>
<a name="l00172"></a>00172 <span class="keyword">    </span>{
<a name="l00173"></a>00173         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(7);
<a name="l00174"></a>00174         <span class="keywordflow">return</span>(0);
<a name="l00175"></a>00175     }
<a name="l00176"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#b069256061518868c3414ee9adce4060">00176</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  GetAtomicNum()<span class="keyword">                         const</span>
<a name="l00177"></a>00177 <span class="keyword">    </span>{
<a name="l00178"></a>00178         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(8);
<a name="l00179"></a>00179         <span class="keywordflow">return</span>(0);
<a name="l00180"></a>00180     }
<a name="l00181"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#10bf6a8a013d39a410b9103b958eac71">00181</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>          SetMatch(OBNodeBase*)
<a name="l00182"></a>00182     {}
<a name="l00183"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#dd9c2a84d6715cf67f8ff53089d0dbc4">00183</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>          SetAromatic()
<a name="l00184"></a>00184     {}
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#18e68974cbaa19171dfe33026ba8f7b4">00185</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span>          IsInRingSize(<span class="keywordtype">int</span>)<span class="keyword">          const</span>
<a name="l00186"></a>00186 <span class="keyword">    </span>{
<a name="l00187"></a>00187         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(9);
<a name="l00188"></a>00188         <span class="keywordflow">return</span>(<span class="keyword">false</span>);
<a name="l00189"></a>00189     }
<a name="l00190"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#c2162768d8f994785a10b3db8f948e2f">00190</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span>          IsAromatic()<span class="keyword">               const</span>
<a name="l00191"></a>00191 <span class="keyword">    </span>{
<a name="l00192"></a>00192         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(10);
<a name="l00193"></a>00193         <span class="keywordflow">return</span>(<span class="keyword">false</span>);
<a name="l00194"></a>00194     }
<a name="l00195"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#a5d38b127e602f58df9d62a21b8cc083">00195</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span>          IsInRing()<span class="keyword">                 const</span>
<a name="l00196"></a>00196 <span class="keyword">    </span>{
<a name="l00197"></a>00197         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(11);
<a name="l00198"></a>00198         <span class="keywordflow">return</span>(<span class="keyword">false</span>);
<a name="l00199"></a>00199     }
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#675a2d5448e71b736a5e5141911c4250">00200</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span>          Eval(OBNodeBase*)<span class="keyword">          const</span>
<a name="l00201"></a>00201 <span class="keyword">    </span>{
<a name="l00202"></a>00202         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(12);
<a name="l00203"></a>00203         <span class="keywordflow">return</span>(<span class="keyword">false</span>);
<a name="l00204"></a>00204     }
<a name="l00205"></a><a class="code" href="classOpenBabel_1_1OBNodeBase.shtml#9c4ebfa43ec90acf76520e6227d1a067">00205</a>     <span class="keyword">virtual</span> OBNodeBase   *GetMatch()
<a name="l00206"></a>00206     {
<a name="l00207"></a>00207         ((OBNodeBase*)<span class="keyword">this</span>)-&gt;Error(13);
<a name="l00208"></a>00208         <span class="keywordflow">return</span>(NULL);
<a name="l00209"></a>00209     }
<a name="l00211"></a>00211 };
<a name="l00212"></a>00212 
<a name="l00217"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml">00217</a> <span class="keyword">class </span>OBAPI OBEdgeBase : <span class="keyword">public</span> OBBase
<a name="l00218"></a>00218 {
<a name="l00219"></a>00219 <span class="keyword">protected</span>:
<a name="l00221"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#891ad63852015fb2ddaed4d177e4a104">00221</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> _idx;
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#7105fc6ae12fcc1a59cfdaa4f21ec457">00222</a>     OBNodeBase        *_bgn;     
<a name="l00223"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#7fc178365db79d69aa75a47f778e39cb">00223</a>     OBNodeBase        *_end;     
<a name="l00224"></a>00224 
<a name="l00225"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#9e9a06b4e445a3cbe5d4e09695620dcb">00225</a>     <a class="code" href="classOpenBabel_1_1OBGraphBase.shtml">OBGraphBase</a>       *_parent;
<a name="l00226"></a>00226 <span class="keyword">public</span>:
<a name="l00227"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#6368d7673f23186649b2969ade3661d7">00227</a>     <span class="keywordtype">bool</span> Visit;
<a name="l00228"></a>00228 
<a name="l00230"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#9eac7ad8a83987116095b57eda170456">00230</a>     OBEdgeBase()
<a name="l00231"></a>00231     {
<a name="l00232"></a>00232         Visit = <span class="keyword">false</span>;
<a name="l00233"></a>00233         _bgn = _end = NULL;
<a name="l00234"></a>00234     }
<a name="l00236"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#583123f0c338dfed85f7c3f82a9955e8">00236</a>     OBEdgeBase(OBNodeBase *bgn,OBNodeBase *end)
<a name="l00237"></a>00237     {}
<a name="l00239"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#9058d96bfd359b18f74c17e899d8545f">00239</a>     <span class="keyword">virtual</span> ~OBEdgeBase()
<a name="l00240"></a>00240     {}
<a name="l00241"></a>00241 
<a name="l00242"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#205872bb6f0f1bc7ba69b7264025d4fe">00242</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGraphBase.shtml">OBGraphBase</a>* GetParent()
<a name="l00243"></a>00243     {
<a name="l00244"></a>00244         <span class="keywordflow">return</span>(_parent);
<a name="l00245"></a>00245     }
<a name="l00246"></a>00246     <span class="keywordtype">void</span> SetParent(<a class="code" href="classOpenBabel_1_1OBGraphBase.shtml">OBGraphBase</a>*);
<a name="l00247"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#a2c7ad30f78e489d19549acd0d0f56e6">00247</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetIdx()
<a name="l00248"></a>00248     {
<a name="l00249"></a>00249         <span class="keywordflow">return</span>(_idx);
<a name="l00250"></a>00250     }
<a name="l00251"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#b994a975e39f5c62288f4f972b6f90c9">00251</a>     <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)
<a name="l00252"></a>00252     {
<a name="l00253"></a>00253         _idx = idx;
<a name="l00254"></a>00254     }
<a name="l00255"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#68b67df27b5d4333da806fe81b9a9aa5">00255</a>     <span class="keywordtype">void</span> SetBgn(OBNodeBase *n)
<a name="l00256"></a>00256     {
<a name="l00257"></a>00257         _bgn = n;
<a name="l00258"></a>00258     }
<a name="l00259"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#a57da819e34f00190ce2a5920bf1873f">00259</a>     <span class="keywordtype">void</span> SetEnd(OBNodeBase *n)
<a name="l00260"></a>00260     {
<a name="l00261"></a>00261         _end = n;
<a name="l00262"></a>00262     }
<a name="l00263"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#146205b1cc9ff426896d81bb311501a5">00263</a>     <span class="keywordtype">void</span> SwapEnds()
<a name="l00264"></a>00264     {
<a name="l00265"></a>00265         std::swap(_bgn,_end);
<a name="l00266"></a>00266     }
<a name="l00267"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#972811763a2cb54bf216ae5a58386d33">00267</a>     OBNodeBase *GetBgn()
<a name="l00268"></a>00268     {
<a name="l00269"></a>00269         <span class="keywordflow">return</span>(_bgn);
<a name="l00270"></a>00270     }
<a name="l00271"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#14e039be5793f80142b33daab9d2cde0">00271</a>     OBNodeBase *GetEnd()
<a name="l00272"></a>00272     {
<a name="l00273"></a>00273         <span class="keywordflow">return</span>(_end);
<a name="l00274"></a>00274     }
<a name="l00275"></a>00275 
<a name="l00276"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#035ad93c9b173681b6a1829020ee11ca">00276</a>     <span class="keywordtype">void</span> Error(<span class="keywordtype">int</span> f)
<a name="l00277"></a>00277     {
<a name="l00278"></a>00278         std::cerr &lt;&lt; <span class="stringliteral">"bond vf err = "</span> &lt;&lt; f &lt;&lt; std::endl;
<a name="l00279"></a>00279     }
<a name="l00285"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#0fda5b90ae8edbf5caf727ff3f7af108">00285</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetClosure()
<a name="l00286"></a>00286     {}
<a name="l00287"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#c2162768d8f994785a10b3db8f948e2f">00287</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsAromatic()<span class="keyword">      const</span>
<a name="l00288"></a>00288 <span class="keyword">    </span>{
<a name="l00289"></a>00289         ((OBEdgeBase*)<span class="keyword">this</span>)-&gt;Error(1);
<a name="l00290"></a>00290         <span class="keywordflow">return</span>(<span class="keyword">false</span>);
<a name="l00291"></a>00291     }
<a name="l00292"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#a5d38b127e602f58df9d62a21b8cc083">00292</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsInRing()<span class="keyword">        const</span>
<a name="l00293"></a>00293 <span class="keyword">    </span>{
<a name="l00294"></a>00294         ((OBEdgeBase*)<span class="keyword">this</span>)-&gt;Error(2);
<a name="l00295"></a>00295         <span class="keywordflow">return</span>(<span class="keyword">false</span>);
<a name="l00296"></a>00296     }
<a name="l00297"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#fcd83b68c6187de29a8213a8ceab91cc">00297</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsClosure()
<a name="l00298"></a>00298     {
<a name="l00299"></a>00299         ((OBEdgeBase*)<span class="keyword">this</span>)-&gt;Error(3);
<a name="l00300"></a>00300         <span class="keywordflow">return</span>(<span class="keyword">false</span>);
<a name="l00301"></a>00301     }
<a name="l00302"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#659eb5765ac99f43e03e545ea60147e5">00302</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Eval(OBEdgeBase*)
<a name="l00303"></a>00303     {
<a name="l00304"></a>00304         ((OBEdgeBase*)<span class="keyword">this</span>)-&gt;Error(4);
<a name="l00305"></a>00305         <span class="keywordflow">return</span>(<span class="keyword">false</span>);
<a name="l00306"></a>00306     }
<a name="l00307"></a><a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml#b6d2a99ec1887fb1d60f3d7ee31e56a3">00307</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  GetBO()<span class="keyword">  const</span>
<a name="l00308"></a>00308 <span class="keyword">    </span>{
<a name="l00309"></a>00309         ((OBEdgeBase*)<span class="keyword">this</span>)-&gt;Error(5);
<a name="l00310"></a>00310         <span class="keywordflow">return</span>(0);
<a name="l00311"></a>00311     }
<a name="l00313"></a>00313 };
<a name="l00314"></a>00314 
<a name="l00320"></a><a class="code" href="classOpenBabel_1_1OBGraphBase.shtml">00320</a> <span class="keyword">class </span>OBAPI OBGraphBase : <span class="keyword">public</span> OBBase
<a name="l00321"></a>00321 {
<a name="l00322"></a>00322 <span class="keyword">protected</span>:
<a name="l00323"></a><a class="code" href="classOpenBabel_1_1OBGraphBase.shtml#d424b97b106cf7fce3fee757b9891e7d">00323</a>     <span class="keywordtype">bool</span>                 _vlock;
<a name="l00324"></a><a class="code" href="classOpenBabel_1_1OBGraphBase.shtml#6879e9281c9de472ed9182c0886c59d9">00324</a>     std::vector&lt;OBNodeBase*&gt;  _vatom;
<a name="l00325"></a><a class="code" href="classOpenBabel_1_1OBGraphBase.shtml#9c8e30c37e33bb11c5dade3984d71200">00325</a>     std::vector&lt;OBEdgeBase*&gt;  _vbond;
<a name="l00326"></a>00326 <span class="keyword">public</span>:
<a name="l00327"></a><a class="code" href="classOpenBabel_1_1OBGraphBase.shtml#72a1506944afd07c74a8e8423c52a771">00327</a>     OBGraphBase()
<a name="l00328"></a>00328     {
<a name="l00329"></a>00329         _vlock = <span class="keyword">false</span>;
<a name="l00330"></a>00330         _vatom.clear();
<a name="l00331"></a>00331         _vbond.clear();
<a name="l00332"></a>00332     }
<a name="l00333"></a><a class="code" href="classOpenBabel_1_1OBGraphBase.shtml#f36413b6fdcf73e6b9fdd799bd482e26">00333</a>     OBGraphBase(<span class="keyword">const</span> OBGraphBase &amp;src) : OBBase() { }
<a name="l00334"></a><a class="code" href="classOpenBabel_1_1OBGraphBase.shtml#6237d765cf2cf822e0227ba943ee451a">00334</a>     <span class="keyword">virtual</span>     ~OBGraphBase()          { }
<a name="l00335"></a><a class="code" href="classOpenBabel_1_1OBGraphBase.shtml#22960ac779b08ab4314a81917c71585b">00335</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumNodes()
<a name="l00336"></a>00336     {
<a name="l00337"></a>00337         <span class="keywordflow">return</span>(_vatom.empty() ? 0 : _vatom.size());
<a name="l00338"></a>00338     }
<a name="l00339"></a><a class="code" href="classOpenBabel_1_1OBGraphBase.shtml#a0eee9548abefd1ecbd9799c43195313">00339</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumEdges()
<a name="l00340"></a>00340     {
<a name="l00341"></a>00341         <span class="keywordflow">return</span>(_vbond.empty() ? 0 : _vbond.size());
<a name="l00342"></a>00342     }
<a name="l00343"></a>00343     <span class="keywordtype">void</span>        ResetVisitFlags();
<a name="l00344"></a>00344     <span class="keywordtype">bool</span>        SetVisitLock(<span class="keywordtype">bool</span>);
<a name="l00345"></a><a class="code" href="classOpenBabel_1_1OBGraphBase.shtml#33e96b9f1d6f78d25204d073b6d59a31">00345</a>     <span class="keywordtype">bool</span>        GetVisitLock()
<a name="l00346"></a>00346     {
<a name="l00347"></a>00347         <span class="keywordflow">return</span>(_vlock);
<a name="l00348"></a>00348     }
<a name="l00349"></a>00349     OBNodeBase *Begin(std::vector&lt;OBNodeBase*&gt;::iterator&amp;);
<a name="l00350"></a>00350     OBNodeBase *Next(std::vector&lt;OBNodeBase*&gt;::iterator&amp;);
<a name="l00351"></a>00351     OBEdgeBase *Begin(std::vector&lt;OBEdgeBase*&gt;::iterator&amp;);
<a name="l00352"></a>00352     OBEdgeBase *Next(std::vector&lt;OBEdgeBase*&gt;::iterator&amp;);
<a name="l00353"></a>00353         
<a name="l00354"></a>00354 <span class="comment">/*The following (placeholder) routines removed to avoid finding solution to</span>
<a name="l00355"></a>00355 <span class="comment">iterators being illegally returned as NULL</span>
<a name="l00356"></a>00356 <span class="comment">    //substructure search functions</span>
<a name="l00357"></a>00357 <span class="comment">    virtual bool SingleMatch()                  const</span>
<a name="l00358"></a>00358 <span class="comment">    {</span>
<a name="l00359"></a>00359 <span class="comment">        return(false);</span>
<a name="l00360"></a>00360 <span class="comment">    }</span>
<a name="l00361"></a>00361 <span class="comment">    virtual void SetSingleMatch(bool)</span>
<a name="l00362"></a>00362 <span class="comment">    {}</span>
<a name="l00363"></a>00363 <span class="comment">    virtual bool FinishedMatch()                const</span>
<a name="l00364"></a>00364 <span class="comment">    {</span>
<a name="l00365"></a>00365 <span class="comment">        return(false);</span>
<a name="l00366"></a>00366 <span class="comment">    }</span>
<a name="l00367"></a>00367 <span class="comment">    virtual void SetFinishedMatch(bool)</span>
<a name="l00368"></a>00368 <span class="comment">    {}</span>
<a name="l00369"></a>00369 <span class="comment">    virtual void ClearMatches()</span>
<a name="l00370"></a>00370 <span class="comment">    {}</span>
<a name="l00371"></a>00371 <span class="comment">    virtual void PushBack(std::vector&lt;OBNodeBase*&gt;&amp;)</span>
<a name="l00372"></a>00372 <span class="comment">    {}</span>
<a name="l00373"></a>00373 <span class="comment">    virtual void PrepForMatch()</span>
<a name="l00374"></a>00374 <span class="comment">    {}</span>
<a name="l00375"></a>00375 <span class="comment">        virtual std::vector&lt;std::pair&lt;OBNodeBase*,std::vector&lt;OBEdgeBase*&gt; &gt; &gt;::iterator BgnMatch()</span>
<a name="l00376"></a>00376 <span class="comment">    {</span>
<a name="l00377"></a>00377 <span class="comment">        return((std::vector&lt;std::pair&lt;OBNodeBase*,std::vector&lt;OBEdgeBase*&gt; &gt; &gt;::iterator) NULL);</span>
<a name="l00378"></a>00378 <span class="comment">    }</span>
<a name="l00379"></a>00379 <span class="comment">    virtual std::vector&lt;std::pair&lt;OBNodeBase*,std::vector&lt;OBEdgeBase*&gt; &gt; &gt;::iterator EndMatch()</span>
<a name="l00380"></a>00380 <span class="comment">    {</span>
<a name="l00381"></a>00381 <span class="comment">        return((std::vector&lt;std::pair&lt;OBNodeBase*,std::vector&lt;OBEdgeBase*&gt; &gt; &gt;::iterator) NULL);</span>
<a name="l00382"></a>00382 <span class="comment">    }</span>
<a name="l00383"></a>00383 <span class="comment">        virtual OBNodeBase *GetFirstSeed()</span>
<a name="l00384"></a>00384 <span class="comment">    {</span>
<a name="l00385"></a>00385 <span class="comment">        return((OBNodeBase*)NULL);</span>
<a name="l00386"></a>00386 <span class="comment">    }</span>
<a name="l00387"></a>00387 <span class="comment">    bool Match(OBGraphBase &amp;,bool singleMatch=false);</span>
<a name="l00388"></a>00388 <span class="comment">    bool Match(OBGraphBase &amp;,</span>
<a name="l00389"></a>00389 <span class="comment">               std::vector&lt;std::pair&lt;OBNodeBase*,std::vector&lt;OBEdgeBase*&gt; &gt; &gt;::iterator,</span>
<a name="l00390"></a>00390 <span class="comment">               std::vector&lt;OBEdgeBase*&gt;::iterator);</span>
<a name="l00391"></a>00391 <span class="comment">*/</span>
<a name="l00392"></a>00392 };
<a name="l00393"></a>00393 
<a name="l00394"></a>00394 } <span class="comment">//namespace OpenBabel</span>
<a name="l00395"></a>00395 
<a name="l00396"></a>00396 <span class="preprocessor">#endif // OB_BASE_H</span>
<a name="l00397"></a>00397 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:00 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
