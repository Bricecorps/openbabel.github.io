<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: DLHandler Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li id="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<h1>DLHandler Class Reference</h1><!-- doxytag: class="DLHandler" -->Interface for dynamic libraries.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="dlhandler_8h-source.shtml">dlhandler.h</a>&gt;</code>
<p>
<a href="classDLHandler-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#796e3b4c52affa6141048aa12d326ac5">getConvDirectory</a> (std::string &amp;convPath)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#fbc430181268f2ea18cf3f5a9a6198ab">findFiles</a> (std::vector&lt; std::string &gt; &amp;file_list, const std::string &amp;pattern, const std::string &amp;path)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#87db0476cc4091a16b9e7a67309253dc">findFiles</a> (std::vector&lt; std::string &gt; &amp;file_list, const std::string &amp;filename)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#ace44b593957d50c6396a1e23d67189d">openLib</a> (const std::string &amp;lib_name)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#853b3b684971405e16e9f2b464b950bc">getFormatFilePattern</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static char&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#e7b0bd97cdb5896fd2731f2d856f525a">getSeparator</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#c640b35541b94f0d35525de80c2b003d">Sleep</a> (int n)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Interface for dynamic libraries. 
<p>
This class defines an interface for finding and opening dynamic loadable libraries on different platforms (e.g., modular plugins) via different source code files. It has only what is needed for <a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a> and is not intended to be general purpose. Internally, it is used for dynamic loading and unloading OBFormat file translation modules. 
<p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="796e3b4c52affa6141048aa12d326ac5"></a><!-- doxytag: member="DLHandler::getConvDirectory" ref="796e3b4c52affa6141048aa12d326ac5" args="(std::string &amp;convPath)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool getConvDirectory           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>convPath</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Provides the path from which the conversion dynamic library, (OBConv.dll in Windows) was loaded. This is the default directory for the format files (*.obf in Windows) 
</div>
</div><p>
<a class="anchor" name="fbc430181268f2ea18cf3f5a9a6198ab"></a><!-- doxytag: member="DLHandler::findFiles" ref="fbc430181268f2ea18cf3f5a9a6198ab" args="(std::vector&lt; std::string &gt; &amp;file_list, const std::string &amp;pattern, const std::string &amp;path)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int findFiles           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>file_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>path</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Searches a directory specified by path for files whose name matches a pattern which can include * as a wildcard. The path name should include a final separator (\ or /). The routine fills a vector of strings with the matching file names (including path). Note that this is not recursive: it only matches files in the specified path. For example, if path = e:\path\to\ and pattern = *.obf it will return vector entries lik e:\path\to\cmlformat.obf <dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of valid files. </dd></dl>

</div>
</div><p>
<a class="anchor" name="87db0476cc4091a16b9e7a67309253dc"></a><!-- doxytag: member="DLHandler::findFiles" ref="87db0476cc4091a16b9e7a67309253dc" args="(std::vector&lt; std::string &gt; &amp;file_list, const std::string &amp;filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int findFiles           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>file_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>filename</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Searches for files which match a full filename (including the path) which contains a wildcard. The routine adds matching file names (including path) to a vector of strings . <dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of matching files. If no wildcard in name adds name to vector and returns -1. </dd></dl>

</div>
</div><p>
<a class="anchor" name="ace44b593957d50c6396a1e23d67189d"></a><!-- doxytag: member="DLHandler::openLib" ref="ace44b593957d50c6396a1e23d67189d" args="(const std::string &amp;lib_name)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool openLib           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>lib_name</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Opens a dynamic library 
</div>
</div><p>
<a class="anchor" name="853b3b684971405e16e9f2b464b950bc"></a><!-- doxytag: member="DLHandler::getFormatFilePattern" ref="853b3b684971405e16e9f2b464b950bc" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * getFormatFilePattern           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="e7b0bd97cdb5896fd2731f2d856f525a"></a><!-- doxytag: member="DLHandler::getSeparator" ref="e7b0bd97cdb5896fd2731f2d856f525a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char getSeparator           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c640b35541b94f0d35525de80c2b003d"></a><!-- doxytag: member="DLHandler::Sleep" ref="c640b35541b94f0d35525de80c2b003d" args="(int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Sleep           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>n</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="dlhandler_8h-source.shtml">dlhandler.h</a><li><a class="el" href="dlhandler__unix_8cpp.shtml">dlhandler_unix.cpp</a><li><a class="el" href="dlhandler__win32_8cpp.shtml">dlhandler_win32.cpp</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:02 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
