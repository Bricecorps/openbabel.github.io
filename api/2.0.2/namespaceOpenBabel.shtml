<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OpenBabel Namespace Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li id="current"><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="namespaces.shtml"><span>Namespace List</span></a></li>
    <li><a href="namespacemembers.shtml"><span>Namespace&nbsp;Members</span></a></li>
  </ul></div>
<h1>OpenBabel Namespace Reference</h1>Global namespace for all Open Babel code.  
<a href="#_details">More...</a>
<p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Base Class.  <a href="classOpenBabel_1_1OBBase.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Node Base Class.  <a href="classOpenBabel_1_1OBNodeBase.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Edge Base Class.  <a href="classOpenBabel_1_1OBEdgeBase.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml">OBGraphBase</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Graph Base Class.  <a href="classOpenBabel_1_1OBGraphBase.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Fast and efficient bitstring class.  <a href="classOpenBabel_1_1OBBitVec.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assigns bond types for file formats without bond information.  <a href="classOpenBabel_1_1OBBondTyper.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Perceives peptide or nucleotide chains and residues in an <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>.  <a href="classOpenBabel_1_1OBChainsParser.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml">OBGlobalDataBase</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Base data table class, handles reading data files.  <a href="classOpenBabel_1_1OBGlobalDataBase.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBElement.shtml">OBElement</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Individual element data type.  <a href="classOpenBabel_1_1OBElement.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Periodic Table of the Elements.  <a href="classOpenBabel_1_1OBElementTable.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Table of atomic isotope masses.  <a href="classOpenBabel_1_1OBIsotopeTable.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Atom Type Translation Table.  <a href="classOpenBabel_1_1OBTypeTable.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Table of common biomolecule residues (for PDB or other files). Can assign atom types and bond orders for arbitrary residues.  <a href="classOpenBabel_1_1OBResidueData.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The base class for fingerprints.  <a href="classOpenBabel_1_1OBFingerprint.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1FptIndexHeader.shtml">FptIndexHeader</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Header for fastsearch index file.  <a href="structOpenBabel_1_1FptIndexHeader.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1FptIndex.shtml">FptIndex</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Structure of fastsearch index files.  <a href="structOpenBabel_1_1FptIndex.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FastSearch.shtml">FastSearch</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Class to search fingerprint index files.  <a href="classOpenBabel_1_1FastSearch.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FastSearchIndexer.shtml">FastSearchIndexer</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Class to prepare fingerprint index files See <a class="el" href="classOpenBabel_1_1FastSearch.shtml">FastSearch</a> class for details.  <a href="classOpenBabel_1_1FastSearchIndexer.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Base class for generic data.  <a href="classOpenBabel_1_1OBGenericData.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBCommentData.shtml">OBCommentData</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to store a comment string (can be multiple lines long).  <a href="classOpenBabel_1_1OBCommentData.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBExternalBond.shtml">OBExternalBond</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to store information on an external bond (e.g., SMILES fragments).  <a href="classOpenBabel_1_1OBExternalBond.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBExternalBondData.shtml">OBExternalBondData</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to store information on external bonds (e.g., in SMILES fragments).  <a href="classOpenBabel_1_1OBExternalBondData.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPairData.shtml">OBPairData</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to store arbitrary attribute/value relationships.  <a href="classOpenBabel_1_1OBPairData.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBVirtualBond.shtml">OBVirtualBond</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to temporarily store bonds that reference an atom that has not yet been added to a molecule.  <a href="classOpenBabel_1_1OBVirtualBond.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRingData.shtml">OBRingData</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to store the SSSR set (filled in by <a class="el" href="classOpenBabel_1_1OBMol.shtml#0f6bce457ef6f963b8e4ba7c4be23775">OBMol::GetSSSR()</a>).  <a href="classOpenBabel_1_1OBRingData.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBUnitCell.shtml">OBUnitCell</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used for storing information about periodic boundary conditions with conversion to/from translation vectors and (a, b, c, alpha, beta, gamma).  <a href="classOpenBabel_1_1OBUnitCell.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConformerData.shtml">OBConformerData</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to hold data on conformers or geometry optimization steps.  <a href="classOpenBabel_1_1OBConformerData.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSymmetryData.shtml">OBSymmetryData</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to hold the point-group and/or space-group symmetry.  <a href="classOpenBabel_1_1OBSymmetryData.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTorsion.shtml">OBTorsion</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to hold the torsion data for a single rotatable bond and all four atoms around it.  <a href="classOpenBabel_1_1OBTorsion.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTorsionData.shtml">OBTorsionData</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to hold torsions as generic data for <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>. Filled by <a class="el" href="classOpenBabel_1_1OBMol.shtml#1ce9b09fb625faffaae648d7beae9598">OBMol::FindTorsions()</a>.  <a href="classOpenBabel_1_1OBTorsionData.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAngle.shtml">OBAngle</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to hold the 3 atoms in an angle and the angle itself.  <a href="classOpenBabel_1_1OBAngle.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAngleData.shtml">OBAngleData</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to hold all angles in a molecule as generic data for <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>.  <a href="classOpenBabel_1_1OBAngleData.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChiralData.shtml">OBChiralData</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to hold chiral inforamtion about the atom as <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>.  <a href="classOpenBabel_1_1OBChiralData.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSerialNums.shtml">OBSerialNums</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Defines a map between serial numbers (e.g., in a PDB file) and <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> objects.  <a href="classOpenBabel_1_1OBSerialNums.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBProxGrid.shtml">OBProxGrid</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A grid for determining the proximity of a given point to atoms in an <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>.  <a href="classOpenBabel_1_1OBProxGrid.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml">OBFloatGrid</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Handle floating-point 3D grids (i.e., charge density around an <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>).  <a href="classOpenBabel_1_1OBFloatGrid.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBScoreGrid.shtml">OBScoreGrid</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A base class for scoring docking interactions between multiple molecules.  <a href="classOpenBabel_1_1OBScoreGrid.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a real 3x3 matrix.  <a href="classOpenBabel_1_1matrix3x3.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Represents a vector in the 3-dimensional real space.  <a href="classOpenBabel_1_1vector3.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Residue information.  <a href="classOpenBabel_1_1OBResidue.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Atom class.  <a href="classOpenBabel_1_1OBAtom.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Bond class.  <a href="classOpenBabel_1_1OBBond.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Molecule Class.  <a href="classOpenBabel_1_1OBMol.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to transform from z-matrix to cartesian coordinates.  <a href="classOpenBabel_1_1OBInternalCoord.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGastChrg.shtml">OBGastChrg</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assigns Gasteiger partial charges.  <a href="classOpenBabel_1_1OBGastChrg.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1GasteigerState.shtml">GasteigerState</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Helper class for <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml">OBGastChrg</a> which stores the Gasteiger states of a given atom.  <a href="classOpenBabel_1_1GasteigerState.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Base class for file formats.  <a href="classOpenBabel_1_1OBFormat.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Case insensitive string comparison for FormatsMap key.  <a href="structOpenBabel_1_1CharPtrLess.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Class to convert from one format to another.  <a href="classOpenBabel_1_1OBConversion.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBError.shtml">OBError</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Customizable error handling and logging -- store a message, including the method yielding the error, causes, etc.  <a href="classOpenBabel_1_1OBError.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Handle error messages, warnings, debugging information and the like.  <a href="classOpenBabel_1_1OBMessageHandler.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1obLogBuf.shtml">obLogBuf</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A minimal streambuf derivative to wrap calls to cerr into calls to <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> as needed.  <a href="classOpenBabel_1_1obLogBuf.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Iterate over all atoms in an <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>.  <a href="classOpenBabel_1_1OBMolAtomIter.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Iterate over all bonds in an <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>.  <a href="classOpenBabel_1_1OBMolBondIter.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Iterate over all neighboring atoms to an <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>.  <a href="classOpenBabel_1_1OBAtomAtomIter.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Iterate over all bonds on an <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>.  <a href="classOpenBabel_1_1OBAtomBondIter.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Iterate over all residues in an <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>.  <a href="classOpenBabel_1_1OBResidueIter.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Iterate over all atoms in an <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>.  <a href="classOpenBabel_1_1OBResidueAtomIter.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml">OBMoleculeFormat</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">An <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> convenience subclass for conversion to/from <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> data.  <a href="classOpenBabel_1_1OBMoleculeFormat.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStopwatch.shtml">OBStopwatch</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Stopwatch class used for timing length of execution.  <a href="classOpenBabel_1_1OBStopwatch.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml">OBSqrtTbl</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">sqrt lookup table - given a distance squared returns distance  <a href="classOpenBabel_1_1OBSqrtTbl.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used for internal random number generation <a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> (unless the system random generaor is used).  <a href="structOpenBabel_1_1DoubleType.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Random number generator.  <a href="classOpenBabel_1_1OBRandom.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1triple.shtml">triple</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A 3-element templated, based on the design of the STL pair&lt;&gt;.  <a href="structOpenBabel_1_1triple.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1quad.shtml">quad</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A 4-element templated, based on the design of the STL pair&lt;&gt;.  <a href="structOpenBabel_1_1quad.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">union &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">_AtomExpr</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A SMARTS parser internal atomic expression.  <a href="unionOpenBabel_1_1__AtomExpr.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">union &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">_BondExpr</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A SMARTS parser internal bond expression.  <a href="unionOpenBabel_1_1__BondExpr.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1BondSpec.shtml">BondSpec</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A SMARTS parser internal bond specification.  <a href="structOpenBabel_1_1BondSpec.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1AtomSpec.shtml">AtomSpec</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A SMARTS parser internal bond specification.  <a href="structOpenBabel_1_1AtomSpec.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A SMARTS parser internal pattern.  <a href="structOpenBabel_1_1Pattern.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">SMARTS (SMiles ARbitrary Target Specification) substructure searching.  <a href="classOpenBabel_1_1OBSmartsPattern.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSSMatch.shtml">OBSSMatch</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Performs fast, exhaustive matching used to find just a single match in <a class="el" href="namespaceOpenBabel.shtml#35936bb63b733842d0c671cd895c83e4">match()</a> using recursion and explicit stack handling.  <a href="classOpenBabel_1_1OBSSMatch.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml">patty</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Programmable Atom Typer.  <a href="classOpenBabel_1_1patty.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml">OBChemTsfm</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">SMARTS based structural modification (chemical transformation).  <a href="classOpenBabel_1_1OBChemTsfm.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Corrections for pH used by <a class="el" href="classOpenBabel_1_1OBMol.shtml#6f282bb48885fa887dd2a65b546ef1b4">OBMol::CorrectForPH()</a>.  <a href="classOpenBabel_1_1OBPhModel.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml">OBReaction</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Used to store chemical reactions (i.e., reactants -&gt; products).  <a href="classOpenBabel_1_1OBReaction.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Internal class for <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> search algorithms to create a search tree of <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> objects.  <a href="classOpenBabel_1_1OBRTree.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Stores information on rings in a molecule from SSSR perception.  <a href="classOpenBabel_1_1OBRing.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRingSearch.shtml">OBRingSearch</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Internal class to facilitate <a class="el" href="classOpenBabel_1_1OBMol.shtml#d4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>.  <a href="classOpenBabel_1_1OBRingSearch.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml">OBRotamerList</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Supports a set of rotomer coordinate sets for some number of potentially rotatable bonds.  <a href="classOpenBabel_1_1OBRotamerList.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotorRule.shtml">OBRotorRule</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A rule for torsional conformer searching, defined by a SMARTS pattern.  <a href="classOpenBabel_1_1OBRotorRule.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotorRules.shtml">OBRotorRules</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Database of default hybridization torsional rules and SMARTS-defined <a class="el" href="classOpenBabel_1_1OBRotorRule.shtml">OBRotorRule</a> objects.  <a href="classOpenBabel_1_1OBRotorRules.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A single rotatable <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> as part of rotomer searching.  <a href="classOpenBabel_1_1OBRotor.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Given an <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>, set up a list of possibly rotatable torsions,.  <a href="classOpenBabel_1_1OBRotorList.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assigns atom types, hybridization, implicit valence and formal charges.  <a href="classOpenBabel_1_1OBAtomTyper.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assigns aromatic typing to atoms and bonds.  <a href="classOpenBabel_1_1OBAromaticTyper.shtml#_details">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Namespaces</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml">OBGenericDataType</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Classification of data stored via <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> class and subclasses. <br></td></tr>

<p>
<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBAminoAcidProperty.shtml">OBAminoAcidProperty</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Residue property definitions. <br></td></tr>

<p>
<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBResidueAtomProperty.shtml">OBResidueAtomProperty</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Residue atom properties. <br></td></tr>

<p>
<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBResidueIndex.shtml">OBResidueIndex</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Residue names. <br></td></tr>

<p>
<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBResidueProperty.shtml">OBResidueProperty</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Residue types. <br></td></tr>

<p>
<tr><td colspan="2"><br><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef <a class="el" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">OpenBabel::Template</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">Template</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Template for backbone atoms in chain perception.  <a href="#b9f43ad5d3c98972a7c624fc02cc861b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef OpenBabel::_ByteCode&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#bcd91e4b018d533740f00f35ae44e4f3">ByteCode</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Chemical graph matching virtual machine.  <a href="#bcd91e4b018d533740f00f35ae44e4f3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef <a class="el" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">Template</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#e1eceda9d35f6ef989b038cd7d0ac811">Template</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef std::map&lt; string,<br>
 int &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#9ed63a20c9bf8053a51a7d6a298076f7">OPAMapType</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef std::map&lt; const char *,<br>
 <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#92e73e2fb2bb989421e95ab53825a00b">FMapType</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef FMapType::iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#5a287ebeb1e3d52f518c10409eb12bbd">Formatpos</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">OpenBabel::_AtomExpr</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A SMARTS parser internal atomic expression.  <a href="#8df92ddf377e8839e49c4c1d4a617f1e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">OpenBabel::_BondExpr</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A SMARTS parser internal bond expression.  <a href="#c7bd9a9f7066eb36f2cfa568d180cb80"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Enumerations</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> { <a class="el" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8e6eb596f7e638118128651043ff38545">output</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b837943061a284187ff6e555ac7093f528">input</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8103458136e7028a1a9b7349e64967810">calcvolume</a>
 }</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f">score_t</a> { <a class="el" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f18f893264a00711081b62de694f99db4">Undefined</a> =  -1, 
<a class="el" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f39cfa0b4108a78db97edfb547ad3af91">PLP</a>, 
<a class="el" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2fe5edd6b49548b767c8b120ad2640b28c">ChemScore</a>
 }</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> { <br>
&nbsp;&nbsp;<a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fbf66ee4ae8ad04bc5003a16aa9b2b77">obError</a>, 
<a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9600e966aac7d34fec05f2067eb6b989b">obWarning</a>, 
<a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d98239e6e8daa5c812be192e6447979814">obInfo</a>, 
<a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fca370a4ce993c0a266c7d120c3a6310">obAuditMsg</a>, 
<br>
&nbsp;&nbsp;<a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce">obDebug</a>
<br>
 }</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Levels of error and audit messages to allow filtering.  <a href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#56bd19e6ce3d11cd0ccdc0420e91ada3">ApplyRotMatToBond</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a1, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c14fac6aa218b66e1e27e74608f186cd">operator|</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#d58c7e11e884e3db8fccd812d39d7040">operator &amp;</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#05b0056b593f42ad241165f517d9780a">operator^</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c001b331f648fbbd8590576f59d4d2ab">operator==</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#14a5c6428fbea264e97b9e3958d168bc">operator-</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">istream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#3a21f3b512cf9bbc16301c29079c99c8">operator&gt;&gt;</a> (istream &amp;is, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1b1f9788bcd49d24cf27daca2a569210">operator&lt;&lt;</a> (ostream &amp;os, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#cb0124a1ab83523d88207f71f037ec59">Tanimoto</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function can change the size of second parameter. There is an alternative with different parameters.  <a href="#cb0124a1ab83523d88207f71f037ec59"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError</a> (char *str)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#bcd91e4b018d533740f00f35ae44e4f3">ByteCode</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#818fd93f0aa1e1f5b3c63bbbc8013cca">AllocateByteCode</a> (int type)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#cc9426f6c6d58198a97d8c726660559d">DeleteByteCode</a> (<a class="el" href="namespaceOpenBabel.shtml#bcd91e4b018d533740f00f35ae44e4f3">ByteCode</a> *node)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Free a ByteCode and all corresponding data.  <a href="#cc9426f6c6d58198a97d8c726660559d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#59c2e046bb935ac3eba0d3b003d10176">FatalMemoryError</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1748035db13037545433f80148a7c928">GenerateByteCodes</a> (<a class="el" href="namespaceOpenBabel.shtml#bcd91e4b018d533740f00f35ae44e4f3">ByteCode</a> **node, int resid, int curr, int prev, int bond)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#d7009a91e72c28783be5346611efde3e">GetChirality</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; int &gt; &amp;chirality)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#44f1ea0160214a835ed072505339bd77">GetParity4Ref</a> (vector&lt; unsigned int &gt; pref)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#eb79da476dd9337a67c593c39b6c998e">CorrectChirality</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atm, <a class="el" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> i, <a class="el" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> o)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#fb987d4d3652e35921927fc0b72ba4da">CalcSignedVolume</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate the signed volume for an atom.  <a href="#fb987d4d3652e35921927fc0b72ba4da"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#07c3e3dff340f78121cc2c15da53cdb2">signed_volume</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate a signed volume given a set of 4 coordinates.  <a href="#07c3e3dff340f78121cc2c15da53cdb2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#f4c135379236431c7436651de978ef32">GraphPotentials</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; double &gt; &amp;pot)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate the Graph Potentials of a molecule.  <a href="#f4c135379236431c7436651de978ef32"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#49d9094d3843107b37a072e7e4597fc3">construct_g_matrix</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#e050b0cbe133308c07688d2438155504">construct_c_matrix</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#44f1ea0160214a835ed072505339bd77">GetParity4Ref</a> (vector&lt; unsigned int &gt; pref)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates parity of a vector of 4 items.  <a href="#44f1ea0160214a835ed072505339bd77"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1ea11acf2b1952b517470849055dd9d9">Toupper</a> (string &amp;s)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1853c7aae336e34aaf9e3bf5098f6998">Tolower</a> (string &amp;s)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1ad32121c54dc696e80158701faa0ec8">tokenize</a> (vector&lt; string &gt; &amp;, const char *, const char *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">fingerprint2&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#76f0f83a78e94f3c8070248120315ef4">thefingerprint2</a> (&quot;FP2&quot;, true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">PatternFP&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#d738a9b0d3a2af80de1daaaa279a460c">thePatternFP</a> (&quot;FP3&quot;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">PatternFP&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#71111c8181fefe3fb692c4b03dbb249d">FP4PatternFP</a> (&quot;FP4&quot;,&quot;SMARTS_InteLigand.txt&quot;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a064ed729569f7924bd33b939245dc4e">Trim</a> (std::string &amp;txt)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">remove leading and trailing whitespace from a string  <a href="#a064ed729569f7924bd33b939245dc4e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#dfcd0e581453354d7c779541ec58c491">operator&lt;&lt;</a> (ostream &amp;os, const <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml">OBFloatGrid</a> &amp;fg)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">istream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#dc71eb19ad3b4c729264738f6d69d1d3">operator&gt;&gt;</a> (istream &amp;is, <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml">OBFloatGrid</a> &amp;fg)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#88f82b7288a2db09434d0a0aee1583d3">operator *</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#48ad8d76826fb55c60d0726991c453d8">operator *</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;A, const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;B)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#590374f29c633247d07b75e43ae89f9d">operator&lt;&lt;</a> (ostream &amp;co, const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#e266dae0cf878cc7847440967f2ffd82">center_coords</a> (double *, int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#798bf64bedc402dad8b611a61d1ebc08">operator&lt;&lt;</a> (ostream &amp;co, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#2922e0f6a76643c3f0d1f00dbc4cbdfd">operator==</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae234beb565bd1a8c1217bef05fe9a3c">operator!=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#32a70eb5e04f4e10a386089723f05b2a">dot</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#62600a5c541628173aa762c5997a9b2e">cross</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#fdb63edd6d5f38c9cc7b20008002281a">vectorAngle</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#129200e1128cbbbf7fdb7ff980334ec2">CalcTorsionAngle</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#d0e0c09ef7c92973447c46d3ad3f3f8d">Point2Plane</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> b, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> c, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> d)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate the distance of point a to the plane determined by b,c,d.  <a href="#d0e0c09ef7c92973447c46d3ad3f3f8d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b5741f7ec581130f899f17f4d9477aea">print_matrix</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b323a3745c477d9eb4c796786db39075">print_matrix_f</a> (double *m, int rows, int cols)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c09eff5e59b6a7dd424dc71f4a37e464">print_matrix_ff</a> (double **m, int rows, int cols)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#3b2b9be34ace132aa9506d9ee043824f">mult_matrix</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;c, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;a, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;b)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#067494738d0f55b9df745866cdc3fe56">mult_matrix_f</a> (double *c, double *a, double *b, int rows, int cols)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#37830c949ab96aad9b5041a82895ba8e">mult_matrix_ff</a> (double **c, double **a, double **b, int rows, int cols)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#8c18bd6b308179e5aaa364d2661e18b7">invert_matrix</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;mat, double &amp;det)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#4e64f2298199f8311ab832a7ed6e83ed">invert_matrix_f</a> (double *mat, double &amp;det, int rows, int cols)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#76d2f16d86326e6701c76d48ef6277ae">invert_matrix_ff</a> (double **mat, double &amp;det, int rows, int cols)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#8580b3fa2a0435b2d073c22097d1d35e">convert_matrix_f</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double *dst)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b06c9b9e02affa91406755a0b9fb28e1">convert_matrix_ff</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double **dst)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#6b2a8069e01dd4287fb85f90a991972c">convert_matrix_f</a> (double *src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#050184ff6264447d6923e1be4df061b3">convert_matrix_ff</a> (double **src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#cbf2348ce7eae39aca355a630f06484c">convert_matrix_f_ff</a> (double *src, double **dst, int rows, int cols)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#8a3508df81e444f875d5f493a1bcbe28">convert_matrix_ff_f</a> (double **src, double *dst, int rows, int cols)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#74797fbdbf190ac9522db1f2d582581b">SortVVInt</a> (const vector&lt; int &gt; &amp;a, const vector&lt; int &gt; &amp;b)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c44ee11ab4413a4b1cb20b5bd24f183f">SortAtomZ</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, double &gt; &amp;a, const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, double &gt; &amp;b)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#f4da122a7830becd4fa38b8792671cdd">OBComparePairSecond</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;a, const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;b)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#83d991b1e233b11b794e4ab3f87b52cc">OBComparePairFirst</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;a, const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;b)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#be5da6d31a3fcc23a2efd77085c8c2d4">ClassCount</a> (vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;vp, unsigned int &amp;count)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">counts the number of unique symmetry classes in a list  <a href="#be5da6d31a3fcc23a2efd77085c8c2d4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#8f302cc167630d63e3ca5a4c4d86e41b">CreateNewClassVector</a> (vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;vp1, vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;vp2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#8e455dc2d94f2394a21dd76db3af8325">ValenceSum</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#8d72e30a8da1c39c9906a27ef62dd5f6">KekulePropagate</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, vector&lt; int &gt; &amp;visit, vector&lt; int &gt; &amp;ival, int depth)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#d87b019400c810f14603c6532435030b">GetCurrentValence</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#bd8700d3f0f83bc73abf81b76ffa6254">ExpandKekule</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt; &amp;va, vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt;::iterator i, vector&lt; int &gt; &amp;maxv, bool secondpass)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#13eb26f56a8a475622fba5fc01d4d50e">CorrectBadResonanceForm</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#7654363e339f0fe07323c9f7e542d4db">WriteTitles</a> (ostream &amp;ofs, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#f588d26d4839ac7350aa6a35a9ca8ee8">tokenize</a> (std::vector&lt; std::string &gt; &amp;, std::string &amp;, const char *delimstr=&quot; \t\n&quot;, int limit=-1)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c9aac27fe3b12d7201f8eb7cb95a3c57">ThrowError</a> (std::string &amp;str)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#7145217d4de73e243d2d3888dac404ba">CartesianToInternal</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt; &amp;, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#e82e7b7b74e5212eada681c15afb77f4">InternalToCartesian</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt; &amp;, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c1c62bdae6cf7a9195c470e7d0e29883">NewExtension</a> (string &amp;src, char *ext)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Utility function: replace the last extension in string &amp;src with new extension char *ext.  <a href="#c1c62bdae6cf7a9195c470e7d0e29883"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#8aa7959b427e1c630f14732c2ad642c8">get_rmat</a> (double *, double *, double *, int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#7e02cd2874a2a4826c8587da507f62ef">ob_make_rmat</a> (double mat[3][3], double rmat[9])</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#594933a93529376dbae80405cf23afa8">qtrfit</a> (double *r, double *f, int size, double u[3][3])</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose</a> (double *, double *, int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#0ad9e2f40cfd6f64e1a38b37e907791b">OBCompareInt</a> (const int &amp;, const int &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Comparison -- returns true if first parameter less than second.  <a href="#0ad9e2f40cfd6f64e1a38b37e907791b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b52d1c0b21967edcbb5b69830c53326f">OBCompareUnsigned</a> (const unsigned int &amp;, const unsigned int &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Comparison -- returns true if first parameter less than second.  <a href="#b52d1c0b21967edcbb5b69830c53326f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#069eef95c9b9f60d4df0f9f8d2fdccb2">IsNear</a> (const double &amp;, const double &amp;, const double epsilon=2e-6)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Safe comparison for floats/doubles: true if a and b are closer than epsilon.  <a href="#069eef95c9b9f60d4df0f9f8d2fdccb2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#e413a69dbd2152e5aba9ecbe75285113">IsNearZero</a> (const double &amp;, const double epsilon=2e-6)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Safe comparison for floats/doubles: true if a is less than epsilon.  <a href="#e413a69dbd2152e5aba9ecbe75285113"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abfd0c1c9630002b16c782ad7d39790f">center_coords</a> (double *c, unsigned int size)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#037d5f246395ec725489c655344a958a">rotate_coords</a> (double *c, double m[3][3], unsigned int size)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#25d610b9255993505f2dbdd9690d068f">calc_rms</a> (double *r, double *f, unsigned int N)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculate the RMS deviation between the first N coordinates of *r and *f.  <a href="#25d610b9255993505f2dbdd9690d068f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#95b4ba35439691534ac9c74c47a4b688">SetRotorToAngle</a> (double *c, vector&lt; int &gt; &amp;tor, double ang, vector&lt; int &gt; &amp;atoms)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#cc8e0e275f8e0d6c33a7ec9a285546b7">SafeOpen</a> (ifstream &amp;fs, char *filename)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#20aa097c17efe6b6b6957345b166b3ae">SafeOpen</a> (ofstream &amp;fs, char *filename)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#be640b5146a0de7f348aabb005599ec9">SafeOpen</a> (ifstream &amp;fs, string &amp;filename)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1f75a80e371a52bab23a23e5da7d52fd">SafeOpen</a> (ofstream &amp;fs, string &amp;filename)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7ec675d10f9071757b87d4952938b65">get_roots_3_3</a> (double mat[3][3], double roots[3])</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#28466e08c61853737ac9bdeaeee495cc">DoubleMultiply</a> (unsigned int, unsigned int, <a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#7fe18b3a86010f2fbbeeda7a6ed635a4">DoubleAdd</a> (<a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *, unsigned int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a995f2456608bb27a86fef9460f9e8e0">DoubleModulus</a> (<a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *, unsigned int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ba342317b300fb21524feff7c97eb589">rotate_coords</a> (double *, double m[3][3], int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#35936bb63b733842d0c671cd895c83e4">match</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;mlist, bool single=false)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b4a0d92e86679641956c11c5b6c24366">EvalAtomExpr</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *expr, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1e110eb63b05e4092efea843872a3152">EvalBondExpr</a> (<a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr, <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#4bc7dc392771810667924051fd54b031">GetVectorBinding</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#5ef07c8230811964a209e423abea11d2">CreateAtom</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *, int, int vb=0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a43d0c163d486db98bf0c3db5faf72c5">FatalAllocationError</a> (char *ptr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#dda2fb3f1a00bdee06b36a3a56ecab0a">FreePattern</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1fea358f643e1a4c2969fe9fc367372b">CopyPattern</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a06090c65ac9acea8044a078064142d6">AllocAtomExpr</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c86a92f114ff5ab6ee7357352682922c">CopyAtomExpr</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#e445247649429e110f031d235bc4d465">FreeAtomExpr</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#9cf9b8eaac01d8b3edecdc32e0d73512">BuildAtomLeaf</a> (int prop, int val)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#03cacdaa8b1851aa9f927a8108b9e3ea">BuildAtomNot</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#61fd91da70225bf05011639396d23b10">BuildAtomBin</a> (int op, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *lft, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *rgt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#2c7a4877081dd4f7ab5966e1cb506895">BuildAtomRecurs</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#7d8b74f86bd19e5c64c5cfafbc0f5fc8">GenerateElement</a> (int elem)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#df5c0e4e485dfa0a5b9854063d0e75be">GenerateAromElem</a> (int elem, int flag)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#8d298e86b8ff500e158a8410aa5aa732">IsInvalidAtom</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c80b9ed98f3d3d577e051b6dd2870cef">AllocBondExpr</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#308583e0ca7df091c7a7e3b9fb321805">CopyBondExpr</a> (<a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#62e1c3bdf62c95fbff1b64cb4996eccb">EquivalentBondExpr</a> (<a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr1, <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ec5ad77869a83b4b1f65bcfcb065d98f">FreeBondExpr</a> (<a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b0f9c1d3ab7ba35f0083c342db724359">BuildBondLeaf</a> (int prop, int val)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#558423c98a7710dccb8d9234a8c0d2cc">BuildBondNot</a> (<a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#6fc2b0b41adf46651940ca2c9410ed0d">BuildBondBin</a> (int op, <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *lft, <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *rgt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#d1d85b6d3bd9953ffd9a3ffc5545bcfc">GenerateDefaultBond</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#17874fdfb56af286f64cbf9471772daa">AllocPattern</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#0dc584d0582e8f76b7c9873dc1ccf569">CreateBond</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr, int src, int dst)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c59e6e611cd53496ba95a90a48d1425d">ParseSMARTSPattern</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a4cf9d88ceaac2b4e4fcc9ecb649acab">ParseSMARTSPart</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *, int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1fa34f6508dd267438166db49b36a440">SMARTSError</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#4af6bd742fd5fca5352f8b30c40861da">ParseSimpleAtomPrimitive</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c1e19307ea3994d3cac92d0f959fecb8">ParseComplexAtomPrimitive</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#5048662d463319b746f598a337efdd3e">ParseAtomExpr</a> (int level)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#4cfae9196d472762835bf290c64ed7d8">ParseBondPrimitive</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1f0768e8f6c5310297e66aac6bd9feb">ParseBondExpr</a> (int level)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#8187c4db4baa4338bf24a11ef5d18533">ParseSMARTSError</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#2e04d082f6b656801096b30962949238">SMARTSParser</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, ParseState *stat, int prev, int part)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c16aac0b5b4c8698863437383b747a5c">MarkGrowBonds</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#308bf98f43b9e6d709f17b2e83617d6f">GetChiralFlag</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#4248ca82ac0af4e768f1ae8ccedb9535">ParseSMARTSString</a> (char *ptr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#3c435d3b70fc9784a4f0079e6fa8158f">ParseSMARTSRecord</a> (char *ptr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#2bd45607819b8a55aae877d1b4e6e919">TraverseSMARTS</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, int i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#67a769d9ce95278983a65764b363188c">NotAtomExpr</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a31643b98610c21a70246529ae43a3c0">AndAtomExpr</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ecadd7da4b4879ed4274e628fc440f4f">OrAtomExpr</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c613f2b30f871cd23e63b8573372b2a4">IsBooleanAtomLeaf</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#93043bdcf295c9daa7efb45bc31182ce">IsNegatingAtomLeaf</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#19b1b9103d86b579bb44d777db593c73">EqualAtomExpr</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *lft, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *rgt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#40de5efd81cb1bca8ff737a1507deeb0">OrderAtomExpr</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *lft, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *rgt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#58b602c6be0aa88f69fbaecd71a82b7a">AtomLeafConflict</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *lft, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *rgt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#6419b054750512355f620886990ae725">AtomExprConflict</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *lft, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *rgt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#fe1606ae8fc8753791a06f48e1beaf4f">AtomLeafImplies</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *lft, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *rgt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#53bb1c96f3be289fbe52bdb65afe3b13">AtomExprImplied</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *lft, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *rgt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#5efeaba0de04686b85e1cd11296bb76f">AtomExprImplies</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *lft, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *rgt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ec3b3cd6bc1ab563427c7a03d52d7c0c">AndAtomExprLeaf</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *lft, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *rgt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afea7a59ad4cbb9bda87187210befbc5">ConstrainRecursion</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *recur, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#44c137e83dc2832887a5db79ceb19dbf">OrAtomExprLeaf</a> (<a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *lft, <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *rgt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#cad25a1857223a2e76c6c122821320e8">GetBondLeafIndex</a> (<a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c8bb61cff2335d3f1e6b9956d3044071">GetBondExprIndex</a> (<a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#9f566dc44824213b954c864f36cf0bea">NotBondExpr</a> (<a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#9d3a8296fef0c62168f18827b8a74e31">TransformBondExpr</a> (<a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#320206d402c913055e4b9391af74ac72">SetupAtomMatchTable</a> (std::vector&lt; std::vector&lt; bool &gt; &gt; &amp;<a class="el" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">ttab</a>, <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#7d5f2f720799ac68c463094c368f299a">FastSingleMatch</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;mlist)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#cc7a90098a2f71e1480986f513426244">GetExprOrder</a> (<a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1be5369686428b6311fc8f79baf855c5">SmartsLexReplace</a> (std::string &amp;s, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;vlex)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#6b397e6876fbb7f13d0e4a3cac7edfdc">SmartsLexReplace</a> (std::string &amp;, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#cf0cdead441d34bce09b5dffbd031e94">isqrt</a> (unsigned int val)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#f4d8217756622db102e25941df848d37">IsOddPrime</a> (unsigned int x)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#83b9098df014b7fce40c3d29eb240240">RelativelyPrime</a> (unsigned int x, unsigned int y)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#9c9b5a925bb477e9cf899d8705defc60">LeadingZeros</a> (unsigned int x)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b39d4f554084f831800c2f18b5b0f017">DeterminePotency</a> (unsigned int m, unsigned int a)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#5e5d2c394de2985154659ef73adddea6">DetermineFactors</a> (unsigned int x, unsigned int *factors)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#368951c5db9d79bad24d0632dbaf23d4">DetermineIncrement</a> (unsigned int m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#d3a7dadaa9b14b3d1a4a521f632a2477">DetermineSequence</a> (unsigned int m, unsigned int *pm, unsigned int *pa, unsigned int *pc)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#dfc4a863d0839be0e62e9db9d585fd7e">GenerateSequence</a> (unsigned int p, unsigned int m, unsigned int a, unsigned int c)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#896fe2a9e9925cda30253ea47ab123c6">GetAtomIDNumber</a> (const char *atomid)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#822c0b4a40ee24e37bc3064b4e403458">GetResidueNumber</a> (const char *res)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#91a8965770cf999c120602edb0c09bcd">SetResidueKeys</a> (const char *residue, unsigned int &amp;reskey, unsigned int &amp;aakey)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#387eb9209ded6f58de6c672c06121ec8">DetermineFRJ</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#902077219ff1df4935790b354a00909b">BuildOBRTreeVector</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a> *, vector&lt; <a class="el" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a> * &gt; &amp;, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#73666e31fdcd78ff4d20cc2b31ad904f">CompareRingSize</a> (const <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *a, const <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *b)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#0bc08c11af150479f14d23684fab908f">FindRings</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, vector&lt; int &gt; &amp;path, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;avisit, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bvisit, int natom, int depth)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#3d3039fda855c4c8c37c8345f0b51a64">SetRotorToAngle</a> (double *c, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> **ref, double ang, vector&lt; int &gt; atoms)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#7860a87ade74d8bec88e02c18c59b638">Swab</a> (int i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#69a83bcbc3a172e306c4556518aa0999">PackCoordinate</a> (double c[3], double max[3])</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#3180afc2c45b337a776dcc164e99e89a">UnpackCoordinate</a> (double c[3], double max[3], int tmp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#534fe2a629963b79ffbd499f461ca5df">GetDFFVector</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, vector&lt; int &gt; &amp;, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#dfad2bce1feae52028bcf69d6b5de37a">CompareRotor</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, int &gt; &amp;, const pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, int &gt; &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#29e21802967a71af8d4f4828d979676b">MinimumPairRMS</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, double *, double *, bool &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b1efa641b2fa046a6c00f729818933d6">trim_spaces</a> (char *string)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Trim any trailing spaces at the end of the supplied string.  <a href="#b1efa641b2fa046a6c00f729818933d6"></a><br></td></tr>
<tr><td colspan="2"><div class="groupHeader">String conversion utilities</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae157b7c5a3145dff9e938888d41d46f">ToUpper</a> (std::string &amp;s)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Shift the supplied string to uppercase.  <a href="#ae157b7c5a3145dff9e938888d41d46f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#47cc993bd022dfca052b2b18f5cd89ea">ToUpper</a> (char *cptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Shift the supplied char* to uppercase.  <a href="#47cc993bd022dfca052b2b18f5cd89ea"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#8e8df618618aa53bf4cf202b0230c7ac">ToLower</a> (std::string &amp;s)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Shift the supplied string to lowercase.  <a href="#8e8df618618aa53bf4cf202b0230c7ac"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#47e5132fa26acd9f575c6c34e6337348">ToLower</a> (char *cptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Shift the supplied char* to lowercase.  <a href="#47e5132fa26acd9f575c6c34e6337348"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#e7fd604c6cfd7cbb0067721106af8ca9">CleanAtomType</a> (char *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">"Clean" the supplied atom type  <a href="#e7fd604c6cfd7cbb0067721106af8ca9"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Variables</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">aromtyper</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> for detecting aromatic atoms and bonds.  <a href="#36c0ee580e088fa888f7d96c16e969bd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#f4a64fa5669b273a31330641abe62978">phmodel</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">obErrorLog</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error handler.  <a href="#394eef44b3dd6a9174067715712c2d16"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#384eab3fdca5eabacaf7c1167d8fbbe8">bitsoff</a> [SETWORD]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">aromtyper</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> for detecting aromatic atoms and bonds.  <a href="#36c0ee580e088fa888f7d96c16e969bd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ba95148bad1cac8e3abb51a485c17cac">bondtyper</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a> for perception of bond order assignment.  <a href="#ba95148bad1cac8e3abb51a485c17cac"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b81925dbd111f3bf1733a4cbba547131">chainsparser</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">Template</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#26e55b55a5d9997fa7e9326cd603fcdd">Peptide</a> [MAXPEPTIDE]</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Generic template for peptide residue backbone.  <a href="#26e55b55a5d9997fa7e9326cd603fcdd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">Template</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b4cf89b53bf070dafd1717b69e89d8a0">Nucleotide</a> [MAXNUCLEIC]</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Generic template for peptide nucleotide backbone.  <a href="#b4cf89b53bf070dafd1717b69e89d8a0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static char&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#7b064978f82414d1a9805ac383a5cac5">ChainsAtomName</a> [ATOMMAX][4]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static ResidType&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#0f1fa68f20787eefe51bc205d70bf141">AminoAcids</a> [AMINOMAX]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static ResidType&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#2326ccdc5fd0c0b5cfd5842cf4c7da03">Nucleotides</a> [NUCLEOMAX]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static MonoAtomType&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#6d27c5a78720907303f7345d7f972f36">MonoAtom</a> [MaxMonoAtom]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static MonoBondType&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#424ffb435ce72308ed456dd1c8e5de60">MonoBond</a> [MaxMonoBond]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#4f891e27abe7998822f22e513182317a">MonoAtomCount</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#fe6df7aef6454d16dfbde0b74a516b63">MonoBondCount</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static StackType&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#9e0089655dc8a4d83d40dcbe519ca9bb">Stack</a> [STACKSIZE]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#5e019437eb125244e080ac8bee696b05">StackPtr</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#08aed91cf3c0528c11e2c383078b9e52">AtomIndex</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b8cd0fea55be4772aece582108b664c9">BondIndex</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#f4e7dde6c2732deca11bff4c63c46372">StrictFlag</a> = false</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1e53ca6bf87ac2f6447c9ef2332c9418">etab</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">ttab</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#35082995377e56142ee5a9fd351c7a70">isotab</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#30154f62f3bd1a1b8613a080444e69d7">resdat</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#7126b9414c30e5eaea055745183b0dcc">VZero</a> (0.0, 0.0, 0.0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a107deadee657e5c8402f1215dc6f647">VX</a> (1.0, 0.0, 0.0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#4387b07aaaffe697c871025a292787e3">VY</a> (0.0, 1.0, 0.0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#bbc57f9cd53a327cdbca503f0c3bb51c">VZ</a> (0.0, 0.0, 1.0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#3752b8b2cb2b0485307ec67623d7e2c5">VZero</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#79aa4a2ccde7b610aaafd56443df9caa">VX</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#7a35811d97bde7af938e487190130adf">VY</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a43d198e9c7aa867c29bfe09a0ccab84">VZ</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#0f472e5d0ca7766299073faae4a40a30">SwabInt</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#f4a64fa5669b273a31330641abe62978">phmodel</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">aromtyper</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> for detecting aromatic atoms and bonds.  <a href="#36c0ee580e088fa888f7d96c16e969bd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ba95148bad1cac8e3abb51a485c17cac">bondtyper</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a> for perception of bond order assignment.  <a href="#ba95148bad1cac8e3abb51a485c17cac"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#1e53ca6bf87ac2f6447c9ef2332c9418">etab</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a> for element properties.  <a href="#1e53ca6bf87ac2f6447c9ef2332c9418"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">ttab</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#35082995377e56142ee5a9fd351c7a70">isotab</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a> for isotope properties.  <a href="#35082995377e56142ee5a9fd351c7a70"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">aromtyper</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> for detecting aromatic atoms and bonds.  <a href="#36c0ee580e088fa888f7d96c16e969bd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#b81925dbd111f3bf1733a4cbba547131">chainsparser</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a> for detecting macromolecular chains and residues.  <a href="#b81925dbd111f3bf1733a4cbba547131"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">obErrorLog</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error handler.  <a href="#394eef44b3dd6a9174067715712c2d16"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#30154f62f3bd1a1b8613a080444e69d7">resdat</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a> biomolecule residue database.  <a href="#30154f62f3bd1a1b8613a080444e69d7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">obErrorLog</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error handler.  <a href="#394eef44b3dd6a9174067715712c2d16"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">obErrorLog</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error handler.  <a href="#394eef44b3dd6a9174067715712c2d16"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#19c1a2a80cf2af5131ca597d0ce38192">Roots</a> [4]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::pair&lt; <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *,<br>
 std::vector&lt; bool &gt; &gt; &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#e89648d7638bd2299f581267f41badca">RSCACHE</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#2860b525fbfe4f29b416c37f8b13f561">MainPtr</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#24f5f7e6d2d4aeccecabdbbf89719bc5">LexPtr</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static char&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#9d7048d0658df11d0d0d760df86308e2">Buffer</a> [BUFMAX]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static char&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#2c982581984b8ec596674fb8385c58d9">Descr</a> [BUFMAX]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#f4a64fa5669b273a31330641abe62978">phmodel</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#dddfd42867b5aaa0caaa3a793a8f69e2">primes</a> [MAXPRIMES]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static char&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#2146236221110653a42a5bea9ff0b3d0">Residue</a> [MAXRES][4]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static char&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#c4446d5164a574e6858d42178978e7f5">ElemDesc</a> [MAXELEM][4]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#f4a6dc069703276b9476ce6b7c5f018e">ResNo</a> = MINRES</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#508adcc5794ff87b21a2e5fc0d752b17">ElemNo</a> = MINELEM</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#e3c640db1cce9cd703ef7c5429de5453">SINT</a> = 0x00000001</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static unsigned char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#0cc646b14fcc04a16103f6bd73382d17">STPTR</a> = (unsigned char*)&amp;<a class="el" href="namespaceOpenBabel.shtml#e3c640db1cce9cd703ef7c5429de5453">SINT</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#0afcf921bfdabceef6c6cf00836ae203">SwabInt</a> = (<a class="el" href="namespaceOpenBabel.shtml#0cc646b14fcc04a16103f6bd73382d17">STPTR</a>[0]!=0)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">aromtyper</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> for detecting aromatic atoms and bonds.  <a href="#36c0ee580e088fa888f7d96c16e969bd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Global namespace for all Open Babel code. <hr><h2>Typedef Documentation</h2>
<a class="anchor" name="b9f43ad5d3c98972a7c624fc02cc861b"></a><!-- doxytag: member="OpenBabel::Template" ref="b9f43ad5d3c98972a7c624fc02cc861b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">OpenBabel::Template</a>
   <a class="el" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">Template</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Template for backbone atoms in chain perception. 
<p>

</div>
</div><p>
<a class="anchor" name="bcd91e4b018d533740f00f35ae44e4f3"></a><!-- doxytag: member="OpenBabel::ByteCode" ref="bcd91e4b018d533740f00f35ae44e4f3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef union OpenBabel::_ByteCode  <a class="el" href="namespaceOpenBabel.shtml#bcd91e4b018d533740f00f35ae44e4f3">ByteCode</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Chemical graph matching virtual machine. 
<p>

</div>
</div><p>
<a class="anchor" name="e1eceda9d35f6ef989b038cd7d0ac811"></a><!-- doxytag: member="OpenBabel::Template" ref="e1eceda9d35f6ef989b038cd7d0ac811" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">Template</a> <a class="el" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">Template</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Structure for atomic patterns (templates) in residues for <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a> Implementation and documentation in <a class="el" href="chains_8cpp.shtml">chains.cpp</a> 
</div>
</div><p>
<a class="anchor" name="9ed63a20c9bf8053a51a7d6a298076f7"></a><!-- doxytag: member="OpenBabel::OPAMapType" ref="9ed63a20c9bf8053a51a7d6a298076f7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;string,int&gt; <a class="el" href="namespaceOpenBabel.shtml#9ed63a20c9bf8053a51a7d6a298076f7">OPAMapType</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="92e73e2fb2bb989421e95ab53825a00b"></a><!-- doxytag: member="OpenBabel::FMapType" ref="92e73e2fb2bb989421e95ab53825a00b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;const char*,<a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*,<a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt; <a class="el" href="namespaceOpenBabel.shtml#92e73e2fb2bb989421e95ab53825a00b">FMapType</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5a287ebeb1e3d52f518c10409eb12bbd"></a><!-- doxytag: member="OpenBabel::Formatpos" ref="5a287ebeb1e3d52f518c10409eb12bbd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef FMapType::iterator <a class="el" href="namespaceOpenBabel.shtml#5a287ebeb1e3d52f518c10409eb12bbd">Formatpos</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8df92ddf377e8839e49c4c1d4a617f1e"></a><!-- doxytag: member="OpenBabel::AtomExpr" ref="8df92ddf377e8839e49c4c1d4a617f1e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef union <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">OpenBabel::_AtomExpr</a>  <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
A SMARTS parser internal atomic expression. 
<p>

</div>
</div><p>
<a class="anchor" name="c7bd9a9f7066eb36f2cfa568d180cb80"></a><!-- doxytag: member="OpenBabel::BondExpr" ref="c7bd9a9f7066eb36f2cfa568d180cb80" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef union <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">OpenBabel::_BondExpr</a>  <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
A SMARTS parser internal bond expression. 
<p>

</div>
</div><p>
<hr><h2>Enumeration Type Documentation</h2>
<a class="anchor" name="a88341c74a59194a8884e929f97b87b8"></a><!-- doxytag: member="OpenBabel::atomreftype" ref="a88341c74a59194a8884e929f97b87b8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="a88341c74a59194a8884e929f97b87b8e6eb596f7e638118128651043ff38545"></a><!-- doxytag: member="output" ref="a88341c74a59194a8884e929f97b87b8e6eb596f7e638118128651043ff38545" args="" -->output</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" name="a88341c74a59194a8884e929f97b87b837943061a284187ff6e555ac7093f528"></a><!-- doxytag: member="input" ref="a88341c74a59194a8884e929f97b87b837943061a284187ff6e555ac7093f528" args="" -->input</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" name="a88341c74a59194a8884e929f97b87b8103458136e7028a1a9b7349e64967810"></a><!-- doxytag: member="calcvolume" ref="a88341c74a59194a8884e929f97b87b8103458136e7028a1a9b7349e64967810" args="" -->calcvolume</em>&nbsp;</td><td>
</td></tr>
</table>
</dl>

</div>
</div><p>
<a class="anchor" name="d5725304290545e0b3b549501893ce2f"></a><!-- doxytag: member="OpenBabel::score_t" ref="d5725304290545e0b3b549501893ce2f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f">score_t</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="d5725304290545e0b3b549501893ce2f18f893264a00711081b62de694f99db4"></a><!-- doxytag: member="Undefined" ref="d5725304290545e0b3b549501893ce2f18f893264a00711081b62de694f99db4" args="" -->Undefined</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" name="d5725304290545e0b3b549501893ce2f39cfa0b4108a78db97edfb547ad3af91"></a><!-- doxytag: member="PLP" ref="d5725304290545e0b3b549501893ce2f39cfa0b4108a78db97edfb547ad3af91" args="" -->PLP</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" name="d5725304290545e0b3b549501893ce2fe5edd6b49548b767c8b120ad2640b28c"></a><!-- doxytag: member="ChemScore" ref="d5725304290545e0b3b549501893ce2fe5edd6b49548b767c8b120ad2640b28c" args="" -->ChemScore</em>&nbsp;</td><td>
</td></tr>
</table>
</dl>

</div>
</div><p>
<a class="anchor" name="cf195409ac7024002db5c178f20862d9"></a><!-- doxytag: member="OpenBabel::obMessageLevel" ref="cf195409ac7024002db5c178f20862d9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Levels of error and audit messages to allow filtering. 
<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="cf195409ac7024002db5c178f20862d9fbf66ee4ae8ad04bc5003a16aa9b2b77"></a><!-- doxytag: member="obError" ref="cf195409ac7024002db5c178f20862d9fbf66ee4ae8ad04bc5003a16aa9b2b77" args="" -->obError</em>&nbsp;</td><td>
for critical errors (e.g., cannot read a file) </td></tr>
<tr><td valign="top"><em><a class="anchor" name="cf195409ac7024002db5c178f20862d9600e966aac7d34fec05f2067eb6b989b"></a><!-- doxytag: member="obWarning" ref="cf195409ac7024002db5c178f20862d9600e966aac7d34fec05f2067eb6b989b" args="" -->obWarning</em>&nbsp;</td><td>
for non-critical problems (e.g., molecule appears empty) </td></tr>
<tr><td valign="top"><em><a class="anchor" name="cf195409ac7024002db5c178f20862d98239e6e8daa5c812be192e6447979814"></a><!-- doxytag: member="obInfo" ref="cf195409ac7024002db5c178f20862d98239e6e8daa5c812be192e6447979814" args="" -->obInfo</em>&nbsp;</td><td>
for informative messages (e.g., file is a non-standard format) </td></tr>
<tr><td valign="top"><em><a class="anchor" name="cf195409ac7024002db5c178f20862d9fca370a4ce993c0a266c7d120c3a6310"></a><!-- doxytag: member="obAuditMsg" ref="cf195409ac7024002db5c178f20862d9fca370a4ce993c0a266c7d120c3a6310" args="" -->obAuditMsg</em>&nbsp;</td><td>
for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.) </td></tr>
<tr><td valign="top"><em><a class="anchor" name="cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce"></a><!-- doxytag: member="obDebug" ref="cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce" args="" -->obDebug</em>&nbsp;</td><td>
for messages only useful for debugging purposes </td></tr>
</table>
</dl>

</div>
</div><p>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="56bd19e6ce3d11cd0ccdc0420e91ada3"></a><!-- doxytag: member="OpenBabel::ApplyRotMatToBond" ref="56bd19e6ce3d11cd0ccdc0420e91ada3" args="(OBMol &amp;mol, matrix3x3 &amp;m, OBAtom *a1, OBAtom *a2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::ApplyRotMatToBond           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">matrix3x3 &amp;&nbsp;</td>
          <td class="paramname"> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&nbsp;</td>
          <td class="paramname"> <em>a1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&nbsp;</td>
          <td class="paramname"> <em>a2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c14fac6aa218b66e1e27e74608f186cd"></a><!-- doxytag: member="OpenBabel::operator|" ref="c14fac6aa218b66e1e27e74608f186cd" args="(OBBitVec &amp;bv1, OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator|           </td>
          <td>(</td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d58c7e11e884e3db8fccd812d39d7040"></a><!-- doxytag: member="OpenBabel::operator &amp;" ref="d58c7e11e884e3db8fccd812d39d7040" args="(OBBitVec &amp;bv1, OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator &amp;           </td>
          <td>(</td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="05b0056b593f42ad241165f517d9780a"></a><!-- doxytag: member="OpenBabel::operator^" ref="05b0056b593f42ad241165f517d9780a" args="(OBBitVec &amp;bv1, OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator^           </td>
          <td>(</td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c001b331f648fbbd8590576f59d4d2ab"></a><!-- doxytag: member="OpenBabel::operator==" ref="c001b331f648fbbd8590576f59d4d2ab" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::operator==           </td>
          <td>(</td>
          <td class="paramtype">const OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="14a5c6428fbea264e97b9e3958d168bc"></a><!-- doxytag: member="OpenBabel::operator-" ref="14a5c6428fbea264e97b9e3958d168bc" args="(OBBitVec &amp;bv1, OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator-           </td>
          <td>(</td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="3a21f3b512cf9bbc16301c29079c99c8"></a><!-- doxytag: member="OpenBabel::operator&gt;&gt;" ref="3a21f3b512cf9bbc16301c29079c99c8" args="(istream &amp;is, OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">istream&amp; OpenBabel::operator&gt;&gt;           </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&nbsp;</td>
          <td class="paramname"> <em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1b1f9788bcd49d24cf27daca2a569210"></a><!-- doxytag: member="OpenBabel::operator&lt;&lt;" ref="1b1f9788bcd49d24cf27daca2a569210" args="(ostream &amp;os, const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ostream&amp; OpenBabel::operator&lt;&lt;           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="cb0124a1ab83523d88207f71f037ec59"></a><!-- doxytag: member="OpenBabel::Tanimoto" ref="cb0124a1ab83523d88207f71f037ec59" args="(OBBitVec &amp;, OBBitVec &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Tanimoto           </td>
          <td>(</td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function can change the size of second parameter. There is an alternative with different parameters. 
<p>

</div>
</div><p>
<a class="anchor" name="32ba50e0b43cb1dfdf1978d1e72099c5"></a><!-- doxytag: member="OpenBabel::ThrowError" ref="32ba50e0b43cb1dfdf1978d1e72099c5" args="(char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ThrowError           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>str</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000011">Deprecated:</a></b></dt><dd>-- use <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> class instead </dd></dl>

</div>
</div><p>
<a class="anchor" name="818fd93f0aa1e1f5b3c63bbbc8013cca"></a><!-- doxytag: member="OpenBabel::AllocateByteCode" ref="818fd93f0aa1e1f5b3c63bbbc8013cca" args="(int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#bcd91e4b018d533740f00f35ae44e4f3">ByteCode</a>* OpenBabel::AllocateByteCode           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>type</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="cc9426f6c6d58198a97d8c726660559d"></a><!-- doxytag: member="OpenBabel::DeleteByteCode" ref="cc9426f6c6d58198a97d8c726660559d" args="(ByteCode *node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::DeleteByteCode           </td>
          <td>(</td>
          <td class="paramtype">ByteCode *&nbsp;</td>
          <td class="paramname"> <em>node</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Free a ByteCode and all corresponding data. 
<p>

</div>
</div><p>
<a class="anchor" name="59c2e046bb935ac3eba0d3b003d10176"></a><!-- doxytag: member="OpenBabel::FatalMemoryError" ref="59c2e046bb935ac3eba0d3b003d10176" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FatalMemoryError           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1748035db13037545433f80148a7c928"></a><!-- doxytag: member="OpenBabel::GenerateByteCodes" ref="1748035db13037545433f80148a7c928" args="(ByteCode **node, int resid, int curr, int prev, int bond)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::GenerateByteCodes           </td>
          <td>(</td>
          <td class="paramtype">ByteCode **&nbsp;</td>
          <td class="paramname"> <em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>resid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>curr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>prev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>bond</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d7009a91e72c28783be5346611efde3e"></a><!-- doxytag: member="OpenBabel::GetChirality" ref="d7009a91e72c28783be5346611efde3e" args="(OBMol &amp;mol, std::vector&lt; int &gt; &amp;chirality)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetChirality           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>chirality</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="44f1ea0160214a835ed072505339bd77"></a><!-- doxytag: member="OpenBabel::GetParity4Ref" ref="44f1ea0160214a835ed072505339bd77" args="(vector&lt; unsigned int &gt; pref)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::GetParity4Ref           </td>
          <td>(</td>
          <td class="paramtype">vector&lt; unsigned int &gt;&nbsp;</td>
          <td class="paramname"> <em>pref</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="eb79da476dd9337a67c593c39b6c998e"></a><!-- doxytag: member="OpenBabel::CorrectChirality" ref="eb79da476dd9337a67c593c39b6c998e" args="(OBMol &amp;mol, OBAtom *atm, atomreftype i, atomreftype o)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CorrectChirality           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&nbsp;</td>
          <td class="paramname"> <em>atm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">atomreftype&nbsp;</td>
          <td class="paramname"> <em>i</em> = <code>input</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">atomreftype&nbsp;</td>
          <td class="paramname"> <em>o</em> = <code>output</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fb987d4d3652e35921927fc0b72ba4da"></a><!-- doxytag: member="OpenBabel::CalcSignedVolume" ref="fb987d4d3652e35921927fc0b72ba4da" args="(OBMol &amp;mol, OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double CalcSignedVolume           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&nbsp;</td>
          <td class="paramname"> <em>atm</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate the signed volume for an atom. 
<p>
Calculate the signed volume for an atom. If the atom has a valence of 3 the coordinates of an attached hydrogen are calculated Puts attached Hydrogen last at the moment, like mol V3000 format. 
</div>
</div><p>
<a class="anchor" name="07c3e3dff340f78121cc2c15da53cdb2"></a><!-- doxytag: member="OpenBabel::signed_volume" ref="07c3e3dff340f78121cc2c15da53cdb2" args="(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double signed_volume           </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>d</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate a signed volume given a set of 4 coordinates. 
<p>

</div>
</div><p>
<a class="anchor" name="f4c135379236431c7436651de978ef32"></a><!-- doxytag: member="OpenBabel::GraphPotentials" ref="f4c135379236431c7436651de978ef32" args="(OBMol &amp;mol, std::vector&lt; double &gt; &amp;pot)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GraphPotentials           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>pot</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate the Graph Potentials of a molecule. 
<p>
based on V.E. and Rozenblit, A.B. Golender <em>Logical and Combinatorial Algorithms for Drug Design</em>. <br>
 For an example see: Walters, W. P., Yalkowsky, S. H., <em>JCICS</em>, 1996, 36(5), 1015-1017. <a href="http://dx.doi.org/10.1021/ci950278o">DOI: 10.1021/ci950278o</a> 
</div>
</div><p>
<a class="anchor" name="49d9094d3843107b37a072e7e4597fc3"></a><!-- doxytag: member="OpenBabel::construct_g_matrix" ref="49d9094d3843107b37a072e7e4597fc3" args="(OBMol &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void construct_g_matrix           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>m</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the matrix G, which puts each atoms valence+1 on the diagonal and and -1 on the off diagonal if two atoms are connected. 
</div>
</div><p>
<a class="anchor" name="e050b0cbe133308c07688d2438155504"></a><!-- doxytag: member="OpenBabel::construct_c_matrix" ref="e050b0cbe133308c07688d2438155504" args="(OBMol &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void construct_c_matrix           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>m</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct the matrix C, which is simply a column vector consisting of the valence for each atom 
</div>
</div><p>
<a class="anchor" name="44f1ea0160214a835ed072505339bd77"></a><!-- doxytag: member="OpenBabel::GetParity4Ref" ref="44f1ea0160214a835ed072505339bd77" args="(vector&lt; unsigned int &gt; pref)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::GetParity4Ref           </td>
          <td>(</td>
          <td class="paramtype">vector&lt; unsigned int &gt;&nbsp;</td>
          <td class="paramname"> <em>pref</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculates parity of a vector of 4 items. 
<p>

</div>
</div><p>
<a class="anchor" name="1ea11acf2b1952b517470849055dd9d9"></a><!-- doxytag: member="OpenBabel::Toupper" ref="1ea11acf2b1952b517470849055dd9d9" args="(string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::Toupper           </td>
          <td>(</td>
          <td class="paramtype">string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1853c7aae336e34aaf9e3bf5098f6998"></a><!-- doxytag: member="OpenBabel::Tolower" ref="1853c7aae336e34aaf9e3bf5098f6998" args="(string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::Tolower           </td>
          <td>(</td>
          <td class="paramtype">string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1ad32121c54dc696e80158701faa0ec8"></a><!-- doxytag: member="OpenBabel::tokenize" ref="1ad32121c54dc696e80158701faa0ec8" args="(vector&lt; string &gt; &amp;, const char *, const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool tokenize           </td>
          <td>(</td>
          <td class="paramtype">vector&lt; string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vcr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>delimstr</em> = <code>&quot;&nbsp;\t\n&quot;</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Break a string (supplied as the second argument) into tokens, returned in the first argument. Tokens are determined by the delimiters supplied (defaults to whitespace (i.e., spaces, tabs, newlines) 
</div>
</div><p>
<a class="anchor" name="76f0f83a78e94f3c8070248120315ef4"></a><!-- doxytag: member="OpenBabel::thefingerprint2" ref="76f0f83a78e94f3c8070248120315ef4" args="(&quot;FP2&quot;, true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">fingerprint2 OpenBabel::thefingerprint2           </td>
          <td>(</td>
          <td class="paramtype">&quot;FP2&quot;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">true&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d738a9b0d3a2af80de1daaaa279a460c"></a><!-- doxytag: member="OpenBabel::thePatternFP" ref="d738a9b0d3a2af80de1daaaa279a460c" args="(&quot;FP3&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PatternFP OpenBabel::thePatternFP           </td>
          <td>(</td>
          <td class="paramtype">&quot;FP3&quot;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="71111c8181fefe3fb692c4b03dbb249d"></a><!-- doxytag: member="OpenBabel::FP4PatternFP" ref="71111c8181fefe3fb692c4b03dbb249d" args="(&quot;FP4&quot;,&quot;SMARTS_InteLigand.txt&quot;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PatternFP OpenBabel::FP4PatternFP           </td>
          <td>(</td>
          <td class="paramtype">&quot;FP4&quot;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&quot;SMARTS_InteLigand.txt&quot;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a064ed729569f7924bd33b939245dc4e"></a><!-- doxytag: member="OpenBabel::Trim" ref="a064ed729569f7924bd33b939245dc4e" args="(std::string &amp;txt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Trim           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>txt</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
remove leading and trailing whitespace from a string 
<p>

</div>
</div><p>
<a class="anchor" name="dfcd0e581453354d7c779541ec58c491"></a><!-- doxytag: member="OpenBabel::operator&lt;&lt;" ref="dfcd0e581453354d7c779541ec58c491" args="(ostream &amp;os, const OBFloatGrid &amp;fg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ostream&amp; OpenBabel::operator&lt;&lt;           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBFloatGrid &amp;&nbsp;</td>
          <td class="paramname"> <em>fg</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="dc71eb19ad3b4c729264738f6d69d1d3"></a><!-- doxytag: member="OpenBabel::operator&gt;&gt;" ref="dc71eb19ad3b4c729264738f6d69d1d3" args="(istream &amp;is, OBFloatGrid &amp;fg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">istream&amp; OpenBabel::operator&gt;&gt;           </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&nbsp;</td>
          <td class="paramname"> <em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBFloatGrid &amp;&nbsp;</td>
          <td class="paramname"> <em>fg</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="88f82b7288a2db09434d0a0aee1583d3"></a><!-- doxytag: member="OpenBabel::operator *" ref="88f82b7288a2db09434d0a0aee1583d3" args="(const matrix3x3 &amp;m, const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator *           </td>
          <td>(</td>
          <td class="paramtype">const matrix3x3 &amp;&nbsp;</td>
          <td class="paramname"> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
calculates the product m*v of the matrix m and the column vector represented by v 
</div>
</div><p>
<a class="anchor" name="48ad8d76826fb55c60d0726991c453d8"></a><!-- doxytag: member="OpenBabel::operator *" ref="48ad8d76826fb55c60d0726991c453d8" args="(const matrix3x3 &amp;A, const matrix3x3 &amp;B)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> OpenBabel::operator *           </td>
          <td>(</td>
          <td class="paramtype">const matrix3x3 &amp;&nbsp;</td>
          <td class="paramname"> <em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const matrix3x3 &amp;&nbsp;</td>
          <td class="paramname"> <em>B</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="590374f29c633247d07b75e43ae89f9d"></a><!-- doxytag: member="OpenBabel::operator&lt;&lt;" ref="590374f29c633247d07b75e43ae89f9d" args="(ostream &amp;co, const matrix3x3 &amp;m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ostream&amp; OpenBabel::operator&lt;&lt;           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>co</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const matrix3x3 &amp;&nbsp;</td>
          <td class="paramname"> <em>m</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="e266dae0cf878cc7847440967f2ffd82"></a><!-- doxytag: member="OpenBabel::center_coords" ref="e266dae0cf878cc7847440967f2ffd82" args="(double *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> center_coords           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="798bf64bedc402dad8b611a61d1ebc08"></a><!-- doxytag: member="OpenBabel::operator&lt;&lt;" ref="798bf64bedc402dad8b611a61d1ebc08" args="(ostream &amp;co, const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ostream&amp; OpenBabel::operator&lt;&lt;           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>co</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2922e0f6a76643c3f0d1f00dbc4cbdfd"></a><!-- doxytag: member="OpenBabel::operator==" ref="2922e0f6a76643c3f0d1f00dbc4cbdfd" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::operator==           </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ae234beb565bd1a8c1217bef05fe9a3c"></a><!-- doxytag: member="OpenBabel::operator!=" ref="ae234beb565bd1a8c1217bef05fe9a3c" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::operator!=           </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="32a70eb5e04f4e10a386089723f05b2a"></a><!-- doxytag: member="OpenBabel::dot" ref="32a70eb5e04f4e10a386089723f05b2a" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double OpenBabel::dot           </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="62600a5c541628173aa762c5997a9b2e"></a><!-- doxytag: member="OpenBabel::cross" ref="62600a5c541628173aa762c5997a9b2e" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::cross           </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fdb63edd6d5f38c9cc7b20008002281a"></a><!-- doxytag: member="OpenBabel::vectorAngle" ref="fdb63edd6d5f38c9cc7b20008002281a" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double OpenBabel::vectorAngle           </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This method calculates the angle between two vectors<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>If length() of any of the two vectors is == 0.0, this method will divide by zero. If the product of the length() of the two vectors is very close to 0.0, but not == 0.0, this method may behave in unexpected ways and return almost random results; details may depend on your particular floating point implementation. The use of this method is therefore highly discouraged, unless you are certain that the length()es are in a reasonable range, away from 0.0 (Stefan Kebekus)</dd></dl>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000009">Deprecated:</a></b></dt><dd>This method will probably replaced by a safer algorithm in the future.</dd></dl>
<dl compact><dt><b><a class="el" href="todo.shtml#_todo000009">Todo:</a></b></dt><dd>Replace this method with a more fool-proof version.</dd></dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the angle in degrees (0-360) </dd></dl>

</div>
</div><p>
<a class="anchor" name="129200e1128cbbbf7fdb7ff980334ec2"></a><!-- doxytag: member="OpenBabel::CalcTorsionAngle" ref="129200e1128cbbbf7fdb7ff980334ec2" args="(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double OpenBabel::CalcTorsionAngle           </td>
          <td>(</td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector3 &amp;&nbsp;</td>
          <td class="paramname"> <em>d</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function calculates the torsion angle of three vectors, represented by four points A--B--C--D, i.e. B and C are vertexes, but none of A--B, B--C, and C--D are colinear. A "torsion angle" is the amount of "twist" or torsion needed around the B--C axis to bring A--B into the same plane as B--C--D. The torsion is measured by "looking down" the vector B--C so that B is superimposed on C, then noting how far you'd have to rotate A--B to superimpose A over D. Angles are + in the anticlockwise direction. The operation is symmetrical in that if you reverse the image (look from C to B and rotate D over A), you get the same answer. 
</div>
</div><p>
<a class="anchor" name="d0e0c09ef7c92973447c46d3ad3f3f8d"></a><!-- doxytag: member="OpenBabel::Point2Plane" ref="d0e0c09ef7c92973447c46d3ad3f3f8d" args="(vector3 a, vector3 b, vector3 c, vector3 d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Point2Plane           </td>
          <td>(</td>
          <td class="paramtype">vector3&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector3&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector3&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector3&nbsp;</td>
          <td class="paramname"> <em>d</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate the distance of point a to the plane determined by b,c,d. 
<p>

</div>
</div><p>
<a class="anchor" name="b5741f7ec581130f899f17f4d9477aea"></a><!-- doxytag: member="OpenBabel::print_matrix" ref="b5741f7ec581130f899f17f4d9477aea" args="(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_matrix           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>m</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b323a3745c477d9eb4c796786db39075"></a><!-- doxytag: member="OpenBabel::print_matrix_f" ref="b323a3745c477d9eb4c796786db39075" args="(double *m, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_matrix_f           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>cols</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c09eff5e59b6a7dd424dc71f4a37e464"></a><!-- doxytag: member="OpenBabel::print_matrix_ff" ref="c09eff5e59b6a7dd424dc71f4a37e464" args="(double **m, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_matrix_ff           </td>
          <td>(</td>
          <td class="paramtype">double **&nbsp;</td>
          <td class="paramname"> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>cols</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="3b2b9be34ace132aa9506d9ee043824f"></a><!-- doxytag: member="OpenBabel::mult_matrix" ref="3b2b9be34ace132aa9506d9ee043824f" args="(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;c, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;a, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mult_matrix           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="067494738d0f55b9df745866cdc3fe56"></a><!-- doxytag: member="OpenBabel::mult_matrix_f" ref="067494738d0f55b9df745866cdc3fe56" args="(double *c, double *a, double *b, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mult_matrix_f           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>cols</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="37830c949ab96aad9b5041a82895ba8e"></a><!-- doxytag: member="OpenBabel::mult_matrix_ff" ref="37830c949ab96aad9b5041a82895ba8e" args="(double **c, double **a, double **b, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mult_matrix_ff           </td>
          <td>(</td>
          <td class="paramtype">double **&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>cols</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8c18bd6b308179e5aaa364d2661e18b7"></a><!-- doxytag: member="OpenBabel::invert_matrix" ref="8c18bd6b308179e5aaa364d2661e18b7" args="(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;mat, double &amp;det)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool invert_matrix           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>mat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&nbsp;</td>
          <td class="paramname"> <em>det</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4e64f2298199f8311ab832a7ed6e83ed"></a><!-- doxytag: member="OpenBabel::invert_matrix_f" ref="4e64f2298199f8311ab832a7ed6e83ed" args="(double *mat, double &amp;det, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool invert_matrix_f           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>mat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&nbsp;</td>
          <td class="paramname"> <em>det</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>cols</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="76d2f16d86326e6701c76d48ef6277ae"></a><!-- doxytag: member="OpenBabel::invert_matrix_ff" ref="76d2f16d86326e6701c76d48ef6277ae" args="(double **mat, double &amp;det, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool invert_matrix_ff           </td>
          <td>(</td>
          <td class="paramtype">double **&nbsp;</td>
          <td class="paramname"> <em>mat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&nbsp;</td>
          <td class="paramname"> <em>det</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>cols</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8580b3fa2a0435b2d073c22097d1d35e"></a><!-- doxytag: member="OpenBabel::convert_matrix_f" ref="8580b3fa2a0435b2d073c22097d1d35e" args="(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double *dst)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_f           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>dst</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b06c9b9e02affa91406755a0b9fb28e1"></a><!-- doxytag: member="OpenBabel::convert_matrix_ff" ref="b06c9b9e02affa91406755a0b9fb28e1" args="(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double **dst)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_ff           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&nbsp;</td>
          <td class="paramname"> <em>dst</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6b2a8069e01dd4287fb85f90a991972c"></a><!-- doxytag: member="OpenBabel::convert_matrix_f" ref="6b2a8069e01dd4287fb85f90a991972c" args="(double *src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_f           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>cols</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="050184ff6264447d6923e1be4df061b3"></a><!-- doxytag: member="OpenBabel::convert_matrix_ff" ref="050184ff6264447d6923e1be4df061b3" args="(double **src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_ff           </td>
          <td>(</td>
          <td class="paramtype">double **&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>cols</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="cbf2348ce7eae39aca355a630f06484c"></a><!-- doxytag: member="OpenBabel::convert_matrix_f_ff" ref="cbf2348ce7eae39aca355a630f06484c" args="(double *src, double **dst, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_f_ff           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>cols</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8a3508df81e444f875d5f493a1bcbe28"></a><!-- doxytag: member="OpenBabel::convert_matrix_ff_f" ref="8a3508df81e444f875d5f493a1bcbe28" args="(double **src, double *dst, int rows, int cols)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_ff_f           </td>
          <td>(</td>
          <td class="paramtype">double **&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>cols</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="74797fbdbf190ac9522db1f2d582581b"></a><!-- doxytag: member="OpenBabel::SortVVInt" ref="74797fbdbf190ac9522db1f2d582581b" args="(const vector&lt; int &gt; &amp;a, const vector&lt; int &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SortVVInt           </td>
          <td>(</td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c44ee11ab4413a4b1cb20b5bd24f183f"></a><!-- doxytag: member="OpenBabel::SortAtomZ" ref="c44ee11ab4413a4b1cb20b5bd24f183f" args="(const pair&lt; OBAtom *, double &gt; &amp;a, const pair&lt; OBAtom *, double &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SortAtomZ           </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; OBAtom *, double &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; OBAtom *, double &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f4da122a7830becd4fa38b8792671cdd"></a><!-- doxytag: member="OpenBabel::OBComparePairSecond" ref="f4da122a7830becd4fa38b8792671cdd" args="(const pair&lt; OBAtom *, unsigned int &gt; &amp;a, const pair&lt; OBAtom *, unsigned int &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::OBComparePairSecond           </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; OBAtom *, unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; OBAtom *, unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="83d991b1e233b11b794e4ab3f87b52cc"></a><!-- doxytag: member="OpenBabel::OBComparePairFirst" ref="83d991b1e233b11b794e4ab3f87b52cc" args="(const pair&lt; OBAtom *, unsigned int &gt; &amp;a, const pair&lt; OBAtom *, unsigned int &gt; &amp;b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::OBComparePairFirst           </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; OBAtom *, unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; OBAtom *, unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="be5da6d31a3fcc23a2efd77085c8c2d4"></a><!-- doxytag: member="OpenBabel::ClassCount" ref="be5da6d31a3fcc23a2efd77085c8c2d4" args="(vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp, unsigned int &amp;count)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::ClassCount           </td>
          <td>(</td>
          <td class="paramtype">vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&nbsp;</td>
          <td class="paramname"> <em>count</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
counts the number of unique symmetry classes in a list 
<p>

</div>
</div><p>
<a class="anchor" name="8f302cc167630d63e3ca5a4c4d86e41b"></a><!-- doxytag: member="OpenBabel::CreateNewClassVector" ref="8f302cc167630d63e3ca5a4c4d86e41b" args="(vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp1, vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;vp2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::CreateNewClassVector           </td>
          <td>(</td>
          <td class="paramtype">vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vp1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; pair&lt; OBAtom *, unsigned int &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vp2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
creates a new vector of symmetry classes base on an existing vector helper routine to GetGIDVector 
</div>
</div><p>
<a class="anchor" name="8e455dc2d94f2394a21dd76db3af8325"></a><!-- doxytag: member="OpenBabel::ValenceSum" ref="8e455dc2d94f2394a21dd76db3af8325" args="(OBAtom *atom)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::ValenceSum           </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&nbsp;</td>
          <td class="paramname"> <em>atom</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8d72e30a8da1c39c9906a27ef62dd5f6"></a><!-- doxytag: member="OpenBabel::KekulePropagate" ref="8d72e30a8da1c39c9906a27ef62dd5f6" args="(OBAtom *atom, vector&lt; int &gt; &amp;visit, vector&lt; int &gt; &amp;ival, int depth)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::KekulePropagate           </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&nbsp;</td>
          <td class="paramname"> <em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>visit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>ival</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>depth</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d87b019400c810f14603c6532435030b"></a><!-- doxytag: member="OpenBabel::GetCurrentValence" ref="d87b019400c810f14603c6532435030b" args="(OBAtom *atom)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::GetCurrentValence           </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&nbsp;</td>
          <td class="paramname"> <em>atom</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="bd8700d3f0f83bc73abf81b76ffa6254"></a><!-- doxytag: member="OpenBabel::ExpandKekule" ref="bd8700d3f0f83bc73abf81b76ffa6254" args="(OBMol &amp;mol, vector&lt; OBNodeBase * &gt; &amp;va, vector&lt; OBNodeBase * &gt;::iterator i, vector&lt; int &gt; &amp;maxv, bool secondpass)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::ExpandKekule           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; OBNodeBase * &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>va</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; OBNodeBase * &gt;::iterator&nbsp;</td>
          <td class="paramname"> <em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>maxv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>secondpass</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="13eb26f56a8a475622fba5fc01d4d50e"></a><!-- doxytag: member="OpenBabel::CorrectBadResonanceForm" ref="13eb26f56a8a475622fba5fc01d4d50e" args="(OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::CorrectBadResonanceForm           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7654363e339f0fe07323c9f7e542d4db"></a><!-- doxytag: member="OpenBabel::WriteTitles" ref="7654363e339f0fe07323c9f7e542d4db" args="(ostream &amp;ofs, OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::WriteTitles           </td>
          <td>(</td>
          <td class="paramtype">ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>ofs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f588d26d4839ac7350aa6a35a9ca8ee8"></a><!-- doxytag: member="OpenBabel::tokenize" ref="f588d26d4839ac7350aa6a35a9ca8ee8" args="(std::vector&lt; std::string &gt; &amp;, std::string &amp;, const char *delimstr=&quot; \t\n&quot;, int limit=-1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool tokenize           </td>
          <td>(</td>
          <td class="paramtype">vector&lt; string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vcr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>delimstr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>limit</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Break a string (supplied as the second argument) into tokens, returned in the first argument. Tokens are determined by the delimiters supplied (defaults to whitespace (i.e., spaces, tabs, newlines) Only breaks at most 'limit' tokens and the last item in the vector may include un-parsed tokens. 
</div>
</div><p>
<a class="anchor" name="c9aac27fe3b12d7201f8eb7cb95a3c57"></a><!-- doxytag: member="OpenBabel::ThrowError" ref="c9aac27fe3b12d7201f8eb7cb95a3c57" args="(std::string &amp;str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ThrowError           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>str</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000012">Deprecated:</a></b></dt><dd>-- use <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> class instead </dd></dl>

</div>
</div><p>
<a class="anchor" name="7145217d4de73e243d2d3888dac404ba"></a><!-- doxytag: member="OpenBabel::CartesianToInternal" ref="7145217d4de73e243d2d3888dac404ba" args="(std::vector&lt; OBInternalCoord * &gt; &amp;, OBMol &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CartesianToInternal           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; OBInternalCoord * &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Use the supplied <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> and its Cartesian coordinates to generate a set of internal (z-matrix) coordinates as supplied in the vector&lt;OBInternalCoord*&gt; argument. Implements <a href="http://qsar.sourceforge.net/dicts/blue-obelisk/index.xhtml#cartesianCoordinatesIntoZmatrixCoordinates">blue-obelisk:cartesianCoordinatesIntoZmatrixCoordinates</a>. 
</div>
</div><p>
<a class="anchor" name="e82e7b7b74e5212eada681c15afb77f4"></a><!-- doxytag: member="OpenBabel::InternalToCartesian" ref="e82e7b7b74e5212eada681c15afb77f4" args="(std::vector&lt; OBInternalCoord * &gt; &amp;, OBMol &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void InternalToCartesian           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; OBInternalCoord * &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Transform the supplied vector&lt;OBInternalCoord*&gt; into cartesian and update the <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> accordingly. Implements <a href="http://qsar.sourceforge.net/dicts/blue-obelisk/index.xhtml#zmatrixCoordinatesIntoCartesianCoordinates">blue-obelisk:zmatrixCoordinatesIntoCartesianCoordinates</a> 
</div>
</div><p>
<a class="anchor" name="c1c62bdae6cf7a9195c470e7d0e29883"></a><!-- doxytag: member="OpenBabel::NewExtension" ref="c1c62bdae6cf7a9195c470e7d0e29883" args="(string &amp;src, char *ext)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string NewExtension           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Utility function: replace the last extension in string &amp;src with new extension char *ext. 
<p>

</div>
</div><p>
<a class="anchor" name="8aa7959b427e1c630f14732c2ad642c8"></a><!-- doxytag: member="OpenBabel::get_rmat" ref="8aa7959b427e1c630f14732c2ad642c8" args="(double *, double *, double *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void get_rmat           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7e02cd2874a2a4826c8587da507f62ef"></a><!-- doxytag: member="OpenBabel::ob_make_rmat" ref="7e02cd2874a2a4826c8587da507f62ef" args="(double mat[3][3], double rmat[9])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ob_make_rmat           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>mat</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>rmat</em>[9]</td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="594933a93529376dbae80405cf23afa8"></a><!-- doxytag: member="OpenBabel::qtrfit" ref="594933a93529376dbae80405cf23afa8" args="(double *r, double *f, int size, double u[3][3])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qtrfit           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>u</em>[3][3]</td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2c5374c2c0b42dee2fd36cd475a3cb1c"></a><!-- doxytag: member="OpenBabel::superimpose" ref="2c5374c2c0b42dee2fd36cd475a3cb1c" args="(double *, double *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double superimpose           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0ad9e2f40cfd6f64e1a38b37e907791b"></a><!-- doxytag: member="OpenBabel::OBCompareInt" ref="0ad9e2f40cfd6f64e1a38b37e907791b" args="(const int &amp;, const int &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OBCompareInt           </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Comparison -- returns true if first parameter less than second. 
<p>

</div>
</div><p>
<a class="anchor" name="b52d1c0b21967edcbb5b69830c53326f"></a><!-- doxytag: member="OpenBabel::OBCompareUnsigned" ref="b52d1c0b21967edcbb5b69830c53326f" args="(const unsigned int &amp;, const unsigned int &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OBCompareUnsigned           </td>
          <td>(</td>
          <td class="paramtype">const unsigned int &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Comparison -- returns true if first parameter less than second. 
<p>

</div>
</div><p>
<a class="anchor" name="069eef95c9b9f60d4df0f9f8d2fdccb2"></a><!-- doxytag: member="OpenBabel::IsNear" ref="069eef95c9b9f60d4df0f9f8d2fdccb2" args="(const double &amp;, const double &amp;, const double epsilon=2e-6)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNear           </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>epsilon</em> = <code>2e-6</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Safe comparison for floats/doubles: true if a and b are closer than epsilon. 
<p>

</div>
</div><p>
<a class="anchor" name="e413a69dbd2152e5aba9ecbe75285113"></a><!-- doxytag: member="OpenBabel::IsNearZero" ref="e413a69dbd2152e5aba9ecbe75285113" args="(const double &amp;, const double epsilon=2e-6)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNearZero           </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>epsilon</em> = <code>2e-6</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Safe comparison for floats/doubles: true if a is less than epsilon. 
<p>

</div>
</div><p>
<a class="anchor" name="abfd0c1c9630002b16c782ad7d39790f"></a><!-- doxytag: member="OpenBabel::center_coords" ref="abfd0c1c9630002b16c782ad7d39790f" args="(double *c, unsigned int size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::center_coords           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the geometric centroid to an array of coordinates in double* format and center the coordinates to the origin. Operates on the first "size" coordinates in the array. 
</div>
</div><p>
<a class="anchor" name="037d5f246395ec725489c655344a958a"></a><!-- doxytag: member="OpenBabel::rotate_coords" ref="037d5f246395ec725489c655344a958a" args="(double *c, double m[3][3], unsigned int size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::rotate_coords           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>m</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Rotates the coordinate set *c by the transformation matrix m[3][3] Operates on the first "size" coordinates in the array. 
</div>
</div><p>
<a class="anchor" name="25d610b9255993505f2dbdd9690d068f"></a><!-- doxytag: member="OpenBabel::calc_rms" ref="25d610b9255993505f2dbdd9690d068f" args="(double *r, double *f, unsigned int N)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double calc_rms           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>N</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate the RMS deviation between the first N coordinates of *r and *f. 
<p>

</div>
</div><p>
<a class="anchor" name="95b4ba35439691534ac9c74c47a4b688"></a><!-- doxytag: member="OpenBabel::SetRotorToAngle" ref="95b4ba35439691534ac9c74c47a4b688" args="(double *c, vector&lt; int &gt; &amp;tor, double ang, vector&lt; int &gt; &amp;atoms)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::SetRotorToAngle           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>tor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>ang</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>atoms</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Rotate the coordinates of 'atoms' such that tor == ang - atoms in 'tor' should be ordered such that the 3rd atom is the pivot around which atoms rotate 
</div>
</div><p>
<a class="anchor" name="cc8e0e275f8e0d6c33a7ec9a285546b7"></a><!-- doxytag: member="OpenBabel::SafeOpen" ref="cc8e0e275f8e0d6c33a7ec9a285546b7" args="(ifstream &amp;fs, char *filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SafeOpen           </td>
          <td>(</td>
          <td class="paramtype">ifstream &amp;&nbsp;</td>
          <td class="paramname"> <em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>filename</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Safely open the supplied filename and return an ifstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error log if it fails. 
</div>
</div><p>
<a class="anchor" name="20aa097c17efe6b6b6957345b166b3ae"></a><!-- doxytag: member="OpenBabel::SafeOpen" ref="20aa097c17efe6b6b6957345b166b3ae" args="(ofstream &amp;fs, char *filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SafeOpen           </td>
          <td>(</td>
          <td class="paramtype">ofstream &amp;&nbsp;</td>
          <td class="paramname"> <em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>filename</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Safely open the supplied filename and return an ofstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error log if it fails. 
</div>
</div><p>
<a class="anchor" name="be640b5146a0de7f348aabb005599ec9"></a><!-- doxytag: member="OpenBabel::SafeOpen" ref="be640b5146a0de7f348aabb005599ec9" args="(ifstream &amp;fs, string &amp;filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SafeOpen           </td>
          <td>(</td>
          <td class="paramtype">ifstream &amp;&nbsp;</td>
          <td class="paramname"> <em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string &amp;&nbsp;</td>
          <td class="paramname"> <em>filename</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Safely open the supplied filename and return an ifstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error log if it fails. 
</div>
</div><p>
<a class="anchor" name="1f75a80e371a52bab23a23e5da7d52fd"></a><!-- doxytag: member="OpenBabel::SafeOpen" ref="1f75a80e371a52bab23a23e5da7d52fd" args="(ofstream &amp;fs, string &amp;filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SafeOpen           </td>
          <td>(</td>
          <td class="paramtype">ofstream &amp;&nbsp;</td>
          <td class="paramname"> <em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string &amp;&nbsp;</td>
          <td class="paramname"> <em>filename</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Safely open the supplied filename and return an ofstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error log if it fails. 
</div>
</div><p>
<a class="anchor" name="ae157b7c5a3145dff9e938888d41d46f"></a><!-- doxytag: member="OpenBabel::ToUpper" ref="ae157b7c5a3145dff9e938888d41d46f" args="(std::string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToUpper           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Shift the supplied string to uppercase. 
<p>

</div>
</div><p>
<a class="anchor" name="47cc993bd022dfca052b2b18f5cd89ea"></a><!-- doxytag: member="OpenBabel::ToUpper" ref="47cc993bd022dfca052b2b18f5cd89ea" args="(char *cptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToUpper           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>cptr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Shift the supplied char* to uppercase. 
<p>

</div>
</div><p>
<a class="anchor" name="8e8df618618aa53bf4cf202b0230c7ac"></a><!-- doxytag: member="OpenBabel::ToLower" ref="8e8df618618aa53bf4cf202b0230c7ac" args="(std::string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToLower           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Shift the supplied string to lowercase. 
<p>

</div>
</div><p>
<a class="anchor" name="47e5132fa26acd9f575c6c34e6337348"></a><!-- doxytag: member="OpenBabel::ToLower" ref="47e5132fa26acd9f575c6c34e6337348" args="(char *cptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToLower           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>cptr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Shift the supplied char* to lowercase. 
<p>

</div>
</div><p>
<a class="anchor" name="e7fd604c6cfd7cbb0067721106af8ca9"></a><!-- doxytag: member="OpenBabel::CleanAtomType" ref="e7fd604c6cfd7cbb0067721106af8ca9" args="(char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CleanAtomType           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>id</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
"Clean" the supplied atom type 
<p>
"Clean" the supplied atom type, shifting the first character to uppercase, the second character (if it's a letter) to lowercase, and terminating with a NULL to strip off any trailing characters 
</div>
</div><p>
<a class="anchor" name="a7ec675d10f9071757b87d4952938b65"></a><!-- doxytag: member="OpenBabel::get_roots_3_3" ref="a7ec675d10f9071757b87d4952938b65" args="(double mat[3][3], double roots[3])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::get_roots_3_3           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>mat</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>roots</em>[3]</td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="28466e08c61853737ac9bdeaeee495cc"></a><!-- doxytag: member="OpenBabel::DoubleMultiply" ref="28466e08c61853737ac9bdeaeee495cc" args="(unsigned int, unsigned int, DoubleType *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DoubleMultiply           </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>int</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DoubleType *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7fe18b3a86010f2fbbeeda7a6ed635a4"></a><!-- doxytag: member="OpenBabel::DoubleAdd" ref="7fe18b3a86010f2fbbeeda7a6ed635a4" args="(DoubleType *, unsigned int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DoubleAdd           </td>
          <td>(</td>
          <td class="paramtype">DoubleType *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>int</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a995f2456608bb27a86fef9460f9e8e0"></a><!-- doxytag: member="OpenBabel::DoubleModulus" ref="a995f2456608bb27a86fef9460f9e8e0" args="(DoubleType *, unsigned int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int DoubleModulus           </td>
          <td>(</td>
          <td class="paramtype">DoubleType *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>int</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ba342317b300fb21524feff7c97eb589"></a><!-- doxytag: member="OpenBabel::rotate_coords" ref="ba342317b300fb21524feff7c97eb589" args="(double *, double m[3][3], int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::rotate_coords           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>m</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="35936bb63b733842d0c671cd895c83e4"></a><!-- doxytag: member="OpenBabel::match" ref="35936bb63b733842d0c671cd895c83e4" args="(OBMol &amp;mol, Pattern *pat, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;mlist, bool single=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool match           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname"> <em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>mlist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>single</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b4a0d92e86679641956c11c5b6c24366"></a><!-- doxytag: member="OpenBabel::EvalAtomExpr" ref="b4a0d92e86679641956c11c5b6c24366" args="(AtomExpr *expr, OBAtom *atom)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool EvalAtomExpr           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom *&nbsp;</td>
          <td class="paramname"> <em>atom</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1e110eb63b05e4092efea843872a3152"></a><!-- doxytag: member="OpenBabel::EvalBondExpr" ref="1e110eb63b05e4092efea843872a3152" args="(BondExpr *expr, OBBond *bond)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool EvalBondExpr           </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBond *&nbsp;</td>
          <td class="paramname"> <em>bond</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4bc7dc392771810667924051fd54b031"></a><!-- doxytag: member="OpenBabel::GetVectorBinding" ref="4bc7dc392771810667924051fd54b031" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int GetVectorBinding           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5ef07c8230811964a209e423abea11d2"></a><!-- doxytag: member="OpenBabel::CreateAtom" ref="5ef07c8230811964a209e423abea11d2" args="(Pattern *, AtomExpr *, int, int vb=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int CreateAtom           </td>
          <td>(</td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>vb</em> = <code>0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a43d0c163d486db98bf0c3db5faf72c5"></a><!-- doxytag: member="OpenBabel::FatalAllocationError" ref="a43d0c163d486db98bf0c3db5faf72c5" args="(char *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FatalAllocationError           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="dda2fb3f1a00bdee06b36a3a56ecab0a"></a><!-- doxytag: member="OpenBabel::FreePattern" ref="dda2fb3f1a00bdee06b36a3a56ecab0a" args="(Pattern *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void FreePattern           </td>
          <td>(</td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1fea358f643e1a4c2969fe9fc367372b"></a><!-- doxytag: member="OpenBabel::CopyPattern" ref="1fea358f643e1a4c2969fe9fc367372b" args="(Pattern *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * CopyPattern           </td>
          <td>(</td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a06090c65ac9acea8044a078064142d6"></a><!-- doxytag: member="OpenBabel::AllocAtomExpr" ref="a06090c65ac9acea8044a078064142d6" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::AllocAtomExpr           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c86a92f114ff5ab6ee7357352682922c"></a><!-- doxytag: member="OpenBabel::CopyAtomExpr" ref="c86a92f114ff5ab6ee7357352682922c" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::CopyAtomExpr           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="e445247649429e110f031d235bc4d465"></a><!-- doxytag: member="OpenBabel::FreeAtomExpr" ref="e445247649429e110f031d235bc4d465" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FreeAtomExpr           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9cf9b8eaac01d8b3edecdc32e0d73512"></a><!-- doxytag: member="OpenBabel::BuildAtomLeaf" ref="9cf9b8eaac01d8b3edecdc32e0d73512" args="(int prop, int val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::BuildAtomLeaf           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>prop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>val</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="03cacdaa8b1851aa9f927a8108b9e3ea"></a><!-- doxytag: member="OpenBabel::BuildAtomNot" ref="03cacdaa8b1851aa9f927a8108b9e3ea" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::BuildAtomNot           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="61fd91da70225bf05011639396d23b10"></a><!-- doxytag: member="OpenBabel::BuildAtomBin" ref="61fd91da70225bf05011639396d23b10" args="(int op, AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::BuildAtomBin           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>rgt</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2c7a4877081dd4f7ab5966e1cb506895"></a><!-- doxytag: member="OpenBabel::BuildAtomRecurs" ref="2c7a4877081dd4f7ab5966e1cb506895" args="(Pattern *pat)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::BuildAtomRecurs           </td>
          <td>(</td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname"> <em>pat</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7d8b74f86bd19e5c64c5cfafbc0f5fc8"></a><!-- doxytag: member="OpenBabel::GenerateElement" ref="7d8b74f86bd19e5c64c5cfafbc0f5fc8" args="(int elem)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::GenerateElement           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>elem</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="df5c0e4e485dfa0a5b9854063d0e75be"></a><!-- doxytag: member="OpenBabel::GenerateAromElem" ref="df5c0e4e485dfa0a5b9854063d0e75be" args="(int elem, int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::GenerateAromElem           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>elem</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>flag</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8d298e86b8ff500e158a8410aa5aa732"></a><!-- doxytag: member="OpenBabel::IsInvalidAtom" ref="8d298e86b8ff500e158a8410aa5aa732" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::IsInvalidAtom           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c80b9ed98f3d3d577e051b6dd2870cef"></a><!-- doxytag: member="OpenBabel::AllocBondExpr" ref="c80b9ed98f3d3d577e051b6dd2870cef" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a>* OpenBabel::AllocBondExpr           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="308583e0ca7df091c7a7e3b9fb321805"></a><!-- doxytag: member="OpenBabel::CopyBondExpr" ref="308583e0ca7df091c7a7e3b9fb321805" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a>* OpenBabel::CopyBondExpr           </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="62e1c3bdf62c95fbff1b64cb4996eccb"></a><!-- doxytag: member="OpenBabel::EquivalentBondExpr" ref="62e1c3bdf62c95fbff1b64cb4996eccb" args="(BondExpr *expr1, BondExpr *expr2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::EquivalentBondExpr           </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ec5ad77869a83b4b1f65bcfcb065d98f"></a><!-- doxytag: member="OpenBabel::FreeBondExpr" ref="ec5ad77869a83b4b1f65bcfcb065d98f" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FreeBondExpr           </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b0f9c1d3ab7ba35f0083c342db724359"></a><!-- doxytag: member="OpenBabel::BuildBondLeaf" ref="b0f9c1d3ab7ba35f0083c342db724359" args="(int prop, int val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a>* OpenBabel::BuildBondLeaf           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>prop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>val</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="558423c98a7710dccb8d9234a8c0d2cc"></a><!-- doxytag: member="OpenBabel::BuildBondNot" ref="558423c98a7710dccb8d9234a8c0d2cc" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a>* OpenBabel::BuildBondNot           </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6fc2b0b41adf46651940ca2c9410ed0d"></a><!-- doxytag: member="OpenBabel::BuildBondBin" ref="6fc2b0b41adf46651940ca2c9410ed0d" args="(int op, BondExpr *lft, BondExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a>* OpenBabel::BuildBondBin           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>rgt</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d1d85b6d3bd9953ffd9a3ffc5545bcfc"></a><!-- doxytag: member="OpenBabel::GenerateDefaultBond" ref="d1d85b6d3bd9953ffd9a3ffc5545bcfc" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a>* OpenBabel::GenerateDefaultBond           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="17874fdfb56af286f64cbf9471772daa"></a><!-- doxytag: member="OpenBabel::AllocPattern" ref="17874fdfb56af286f64cbf9471772daa" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>* OpenBabel::AllocPattern           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0dc584d0582e8f76b7c9873dc1ccf569"></a><!-- doxytag: member="OpenBabel::CreateBond" ref="0dc584d0582e8f76b7c9873dc1ccf569" args="(Pattern *pat, BondExpr *expr, int src, int dst)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::CreateBond           </td>
          <td>(</td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname"> <em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>dst</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c59e6e611cd53496ba95a90a48d1425d"></a><!-- doxytag: member="OpenBabel::ParseSMARTSPattern" ref="c59e6e611cd53496ba95a90a48d1425d" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSPattern           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a4cf9d88ceaac2b4e4fcc9ecb649acab"></a><!-- doxytag: member="OpenBabel::ParseSMARTSPart" ref="a4cf9d88ceaac2b4e4fcc9ecb649acab" args="(Pattern *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSPart           </td>
          <td>(</td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1fa34f6508dd267438166db49b36a440"></a><!-- doxytag: member="OpenBabel::SMARTSError" ref="1fa34f6508dd267438166db49b36a440" args="(Pattern *pat)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>* OpenBabel::SMARTSError           </td>
          <td>(</td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname"> <em>pat</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4af6bd742fd5fca5352f8b30c40861da"></a><!-- doxytag: member="OpenBabel::ParseSimpleAtomPrimitive" ref="4af6bd742fd5fca5352f8b30c40861da" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::ParseSimpleAtomPrimitive           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c1e19307ea3994d3cac92d0f959fecb8"></a><!-- doxytag: member="OpenBabel::ParseComplexAtomPrimitive" ref="c1e19307ea3994d3cac92d0f959fecb8" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::ParseComplexAtomPrimitive           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5048662d463319b746f598a337efdd3e"></a><!-- doxytag: member="OpenBabel::ParseAtomExpr" ref="5048662d463319b746f598a337efdd3e" args="(int level)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::ParseAtomExpr           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>level</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4cfae9196d472762835bf290c64ed7d8"></a><!-- doxytag: member="OpenBabel::ParseBondPrimitive" ref="4cfae9196d472762835bf290c64ed7d8" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a>* OpenBabel::ParseBondPrimitive           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a1f0768e8f6c5310297e66aac6bd9feb"></a><!-- doxytag: member="OpenBabel::ParseBondExpr" ref="a1f0768e8f6c5310297e66aac6bd9feb" args="(int level)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a>* OpenBabel::ParseBondExpr           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>level</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8187c4db4baa4338bf24a11ef5d18533"></a><!-- doxytag: member="OpenBabel::ParseSMARTSError" ref="8187c4db4baa4338bf24a11ef5d18533" args="(Pattern *pat, BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>* OpenBabel::ParseSMARTSError           </td>
          <td>(</td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname"> <em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2e04d082f6b656801096b30962949238"></a><!-- doxytag: member="OpenBabel::SMARTSParser" ref="2e04d082f6b656801096b30962949238" args="(Pattern *pat, ParseState *stat, int prev, int part)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>* OpenBabel::SMARTSParser           </td>
          <td>(</td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname"> <em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ParseState *&nbsp;</td>
          <td class="paramname"> <em>stat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>prev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>part</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c16aac0b5b4c8698863437383b747a5c"></a><!-- doxytag: member="OpenBabel::MarkGrowBonds" ref="c16aac0b5b4c8698863437383b747a5c" args="(Pattern *pat)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::MarkGrowBonds           </td>
          <td>(</td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname"> <em>pat</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="308bf98f43b9e6d709f17b2e83617d6f"></a><!-- doxytag: member="OpenBabel::GetChiralFlag" ref="308bf98f43b9e6d709f17b2e83617d6f" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetChiralFlag           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4248ca82ac0af4e768f1ae8ccedb9535"></a><!-- doxytag: member="OpenBabel::ParseSMARTSString" ref="4248ca82ac0af4e768f1ae8ccedb9535" args="(char *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>* OpenBabel::ParseSMARTSString           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="3c435d3b70fc9784a4f0079e6fa8158f"></a><!-- doxytag: member="OpenBabel::ParseSMARTSRecord" ref="3c435d3b70fc9784a4f0079e6fa8158f" args="(char *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>* OpenBabel::ParseSMARTSRecord           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2bd45607819b8a55aae877d1b4e6e919"></a><!-- doxytag: member="OpenBabel::TraverseSMARTS" ref="2bd45607819b8a55aae877d1b4e6e919" args="(Pattern *pat, int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::TraverseSMARTS           </td>
          <td>(</td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname"> <em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>i</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="67a769d9ce95278983a65764b363188c"></a><!-- doxytag: member="OpenBabel::NotAtomExpr" ref="67a769d9ce95278983a65764b363188c" args="(AtomExpr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> * NotAtomExpr           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a31643b98610c21a70246529ae43a3c0"></a><!-- doxytag: member="OpenBabel::AndAtomExpr" ref="a31643b98610c21a70246529ae43a3c0" args="(AtomExpr *, AtomExpr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> * AndAtomExpr           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ecadd7da4b4879ed4274e628fc440f4f"></a><!-- doxytag: member="OpenBabel::OrAtomExpr" ref="ecadd7da4b4879ed4274e628fc440f4f" args="(AtomExpr *, AtomExpr *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> * OrAtomExpr           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c613f2b30f871cd23e63b8573372b2a4"></a><!-- doxytag: member="OpenBabel::IsBooleanAtomLeaf" ref="c613f2b30f871cd23e63b8573372b2a4" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::IsBooleanAtomLeaf           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="93043bdcf295c9daa7efb45bc31182ce"></a><!-- doxytag: member="OpenBabel::IsNegatingAtomLeaf" ref="93043bdcf295c9daa7efb45bc31182ce" args="(AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::IsNegatingAtomLeaf           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="19b1b9103d86b579bb44d777db593c73"></a><!-- doxytag: member="OpenBabel::EqualAtomExpr" ref="19b1b9103d86b579bb44d777db593c73" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::EqualAtomExpr           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>rgt</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="40de5efd81cb1bca8ff737a1507deeb0"></a><!-- doxytag: member="OpenBabel::OrderAtomExpr" ref="40de5efd81cb1bca8ff737a1507deeb0" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::OrderAtomExpr           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>rgt</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="58b602c6be0aa88f69fbaecd71a82b7a"></a><!-- doxytag: member="OpenBabel::AtomLeafConflict" ref="58b602c6be0aa88f69fbaecd71a82b7a" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::AtomLeafConflict           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>rgt</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6419b054750512355f620886990ae725"></a><!-- doxytag: member="OpenBabel::AtomExprConflict" ref="6419b054750512355f620886990ae725" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::AtomExprConflict           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>rgt</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fe1606ae8fc8753791a06f48e1beaf4f"></a><!-- doxytag: member="OpenBabel::AtomLeafImplies" ref="fe1606ae8fc8753791a06f48e1beaf4f" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::AtomLeafImplies           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>rgt</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="53bb1c96f3be289fbe52bdb65afe3b13"></a><!-- doxytag: member="OpenBabel::AtomExprImplied" ref="53bb1c96f3be289fbe52bdb65afe3b13" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::AtomExprImplied           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>rgt</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5efeaba0de04686b85e1cd11296bb76f"></a><!-- doxytag: member="OpenBabel::AtomExprImplies" ref="5efeaba0de04686b85e1cd11296bb76f" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::AtomExprImplies           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>rgt</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ec3b3cd6bc1ab563427c7a03d52d7c0c"></a><!-- doxytag: member="OpenBabel::AndAtomExprLeaf" ref="ec3b3cd6bc1ab563427c7a03d52d7c0c" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::AndAtomExprLeaf           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>rgt</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="afea7a59ad4cbb9bda87187210befbc5"></a><!-- doxytag: member="OpenBabel::ConstrainRecursion" ref="afea7a59ad4cbb9bda87187210befbc5" args="(AtomExpr *recur, AtomExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::ConstrainRecursion           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>recur</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="44c137e83dc2832887a5db79ceb19dbf"></a><!-- doxytag: member="OpenBabel::OrAtomExprLeaf" ref="44c137e83dc2832887a5db79ceb19dbf" args="(AtomExpr *lft, AtomExpr *rgt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a>* OpenBabel::OrAtomExprLeaf           </td>
          <td>(</td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">AtomExpr *&nbsp;</td>
          <td class="paramname"> <em>rgt</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="cad25a1857223a2e76c6c122821320e8"></a><!-- doxytag: member="OpenBabel::GetBondLeafIndex" ref="cad25a1857223a2e76c6c122821320e8" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetBondLeafIndex           </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c8bb61cff2335d3f1e6b9956d3044071"></a><!-- doxytag: member="OpenBabel::GetBondExprIndex" ref="c8bb61cff2335d3f1e6b9956d3044071" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetBondExprIndex           </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9f566dc44824213b954c864f36cf0bea"></a><!-- doxytag: member="OpenBabel::NotBondExpr" ref="9f566dc44824213b954c864f36cf0bea" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a>* OpenBabel::NotBondExpr           </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9d3a8296fef0c62168f18827b8a74e31"></a><!-- doxytag: member="OpenBabel::TransformBondExpr" ref="9d3a8296fef0c62168f18827b8a74e31" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a>* OpenBabel::TransformBondExpr           </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="320206d402c913055e4b9391af74ac72"></a><!-- doxytag: member="OpenBabel::SetupAtomMatchTable" ref="320206d402c913055e4b9391af74ac72" args="(std::vector&lt; std::vector&lt; bool &gt; &gt; &amp;ttab, Pattern *pat, OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::SetupAtomMatchTable           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; bool &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>ttab</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname"> <em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7d5f2f720799ac68c463094c368f299a"></a><!-- doxytag: member="OpenBabel::FastSingleMatch" ref="7d5f2f720799ac68c463094c368f299a" args="(OBMol &amp;mol, Pattern *pat, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;mlist)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FastSingleMatch           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Pattern *&nbsp;</td>
          <td class="paramname"> <em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>mlist</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="cc7a90098a2f71e1480986f513426244"></a><!-- doxytag: member="OpenBabel::GetExprOrder" ref="cc7a90098a2f71e1480986f513426244" args="(BondExpr *expr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetExprOrder           </td>
          <td>(</td>
          <td class="paramtype">BondExpr *&nbsp;</td>
          <td class="paramname"> <em>expr</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1be5369686428b6311fc8f79baf855c5"></a><!-- doxytag: member="OpenBabel::SmartsLexReplace" ref="1be5369686428b6311fc8f79baf855c5" args="(std::string &amp;s, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;vlex)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::SmartsLexReplace           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vlex</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6b397e6876fbb7f13d0e4a3cac7edfdc"></a><!-- doxytag: member="OpenBabel::SmartsLexReplace" ref="6b397e6876fbb7f13d0e4a3cac7edfdc" args="(std::string &amp;, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::SmartsLexReplace           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="cf0cdead441d34bce09b5dffbd031e94"></a><!-- doxytag: member="OpenBabel::isqrt" ref="cf0cdead441d34bce09b5dffbd031e94" args="(unsigned int val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::isqrt           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>val</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f4d8217756622db102e25941df848d37"></a><!-- doxytag: member="OpenBabel::IsOddPrime" ref="f4d8217756622db102e25941df848d37" args="(unsigned int x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::IsOddPrime           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>x</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="83b9098df014b7fce40c3d29eb240240"></a><!-- doxytag: member="OpenBabel::RelativelyPrime" ref="83b9098df014b7fce40c3d29eb240240" args="(unsigned int x, unsigned int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::RelativelyPrime           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9c9b5a925bb477e9cf899d8705defc60"></a><!-- doxytag: member="OpenBabel::LeadingZeros" ref="9c9b5a925bb477e9cf899d8705defc60" args="(unsigned int x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::LeadingZeros           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>x</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b39d4f554084f831800c2f18b5b0f017"></a><!-- doxytag: member="OpenBabel::DeterminePotency" ref="b39d4f554084f831800c2f18b5b0f017" args="(unsigned int m, unsigned int a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::DeterminePotency           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>a</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5e5d2c394de2985154659ef73adddea6"></a><!-- doxytag: member="OpenBabel::DetermineFactors" ref="5e5d2c394de2985154659ef73adddea6" args="(unsigned int x, unsigned int *factors)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::DetermineFactors           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&nbsp;</td>
          <td class="paramname"> <em>factors</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="368951c5db9d79bad24d0632dbaf23d4"></a><!-- doxytag: member="OpenBabel::DetermineIncrement" ref="368951c5db9d79bad24d0632dbaf23d4" args="(unsigned int m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::DetermineIncrement           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>m</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d3a7dadaa9b14b3d1a4a521f632a2477"></a><!-- doxytag: member="OpenBabel::DetermineSequence" ref="d3a7dadaa9b14b3d1a4a521f632a2477" args="(unsigned int m, unsigned int *pm, unsigned int *pa, unsigned int *pc)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::DetermineSequence           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&nbsp;</td>
          <td class="paramname"> <em>pm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&nbsp;</td>
          <td class="paramname"> <em>pa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&nbsp;</td>
          <td class="paramname"> <em>pc</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="dfc4a863d0839be0e62e9db9d585fd7e"></a><!-- doxytag: member="OpenBabel::GenerateSequence" ref="dfc4a863d0839be0e62e9db9d585fd7e" args="(unsigned int p, unsigned int m, unsigned int a, unsigned int c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::GenerateSequence           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>c</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="896fe2a9e9925cda30253ea47ab123c6"></a><!-- doxytag: member="OpenBabel::GetAtomIDNumber" ref="896fe2a9e9925cda30253ea47ab123c6" args="(const char *atomid)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::GetAtomIDNumber           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>atomid</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="822c0b4a40ee24e37bc3064b4e403458"></a><!-- doxytag: member="OpenBabel::GetResidueNumber" ref="822c0b4a40ee24e37bc3064b4e403458" args="(const char *res)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::GetResidueNumber           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>res</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="91a8965770cf999c120602edb0c09bcd"></a><!-- doxytag: member="OpenBabel::SetResidueKeys" ref="91a8965770cf999c120602edb0c09bcd" args="(const char *residue, unsigned int &amp;reskey, unsigned int &amp;aakey)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::SetResidueKeys           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>residue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&nbsp;</td>
          <td class="paramname"> <em>reskey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&nbsp;</td>
          <td class="paramname"> <em>aakey</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="387eb9209ded6f58de6c672c06121ec8"></a><!-- doxytag: member="OpenBabel::DetermineFRJ" ref="387eb9209ded6f58de6c672c06121ec8" args="(OBMol &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static int DetermineFRJ           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="902077219ff1df4935790b354a00909b"></a><!-- doxytag: member="OpenBabel::BuildOBRTreeVector" ref="902077219ff1df4935790b354a00909b" args="(OBAtom *, OBRTree *, vector&lt; OBRTree * &gt; &amp;, OBBitVec &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void BuildOBRTreeVector           </td>
          <td>(</td>
          <td class="paramtype">OBAtom *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBRTree *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; OBRTree * &gt; &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="73666e31fdcd78ff4d20cc2b31ad904f"></a><!-- doxytag: member="OpenBabel::CompareRingSize" ref="73666e31fdcd78ff4d20cc2b31ad904f" args="(const OBRing *a, const OBRing *b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CompareRingSize           </td>
          <td>(</td>
          <td class="paramtype">const OBRing *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBRing *&nbsp;</td>
          <td class="paramname"> <em>b</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0bc08c11af150479f14d23684fab908f"></a><!-- doxytag: member="OpenBabel::FindRings" ref="0bc08c11af150479f14d23684fab908f" args="(OBMol &amp;mol, vector&lt; int &gt; &amp;path, OBBitVec &amp;avisit, OBBitVec &amp;bvisit, int natom, int depth)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static void FindRings           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>avisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"> <em>bvisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>natom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>depth</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="3d3039fda855c4c8c37c8345f0b51a64"></a><!-- doxytag: member="OpenBabel::SetRotorToAngle" ref="3d3039fda855c4c8c37c8345f0b51a64" args="(double *c, OBAtom **ref, double ang, vector&lt; int &gt; atoms)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRotorToAngle           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBAtom **&nbsp;</td>
          <td class="paramname"> <em>ref</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>ang</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt;&nbsp;</td>
          <td class="paramname"> <em>atoms</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Rotate the coordinates of 'atoms' such that tor == ang - atoms in 'tor' should be ordered such that the 3rd atom is the pivot around which atoms rotate ang is in degrees 
</div>
</div><p>
<a class="anchor" name="7860a87ade74d8bec88e02c18c59b638"></a><!-- doxytag: member="OpenBabel::Swab" ref="7860a87ade74d8bec88e02c18c59b638" args="(int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Swab           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="69a83bcbc3a172e306c4556518aa0999"></a><!-- doxytag: member="OpenBabel::PackCoordinate" ref="69a83bcbc3a172e306c4556518aa0999" args="(double c[3], double max[3])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::PackCoordinate           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>c</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>max</em>[3]</td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="3180afc2c45b337a776dcc164e99e89a"></a><!-- doxytag: member="OpenBabel::UnpackCoordinate" ref="3180afc2c45b337a776dcc164e99e89a" args="(double c[3], double max[3], int tmp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::UnpackCoordinate           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>c</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>tmp</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="534fe2a629963b79ffbd499f461ca5df"></a><!-- doxytag: member="OpenBabel::GetDFFVector" ref="534fe2a629963b79ffbd499f461ca5df" args="(OBMol &amp;, vector&lt; int &gt; &amp;, OBBitVec &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetDFFVector           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBBitVec &amp;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="dfad2bce1feae52028bcf69d6b5de37a"></a><!-- doxytag: member="OpenBabel::CompareRotor" ref="dfad2bce1feae52028bcf69d6b5de37a" args="(const pair&lt; OBBond *, int &gt; &amp;, const pair&lt; OBBond *, int &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CompareRotor           </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; OBBond *, int &gt; &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; OBBond *, int &gt; &amp;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="29e21802967a71af8d4f4828d979676b"></a><!-- doxytag: member="OpenBabel::MinimumPairRMS" ref="29e21802967a71af8d4f4828d979676b" args="(OBMol &amp;, double *, double *, bool &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static double MinimumPairRMS           </td>
          <td>(</td>
          <td class="paramtype">OBMol &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool &amp;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b1efa641b2fa046a6c00f729818933d6"></a><!-- doxytag: member="OpenBabel::trim_spaces" ref="b1efa641b2fa046a6c00f729818933d6" args="(char *string)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* OpenBabel::trim_spaces           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>string</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Trim any trailing spaces at the end of the supplied string. 
<p>

</div>
</div><p>
<hr><h2>Variable Documentation</h2>
<a class="anchor" name="36c0ee580e088fa888f7d96c16e969bd"></a><!-- doxytag: member="OpenBabel::aromtyper" ref="36c0ee580e088fa888f7d96c16e969bd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> <a class="el" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">aromtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> for detecting aromatic atoms and bonds. 
<p>

</div>
</div><p>
<a class="anchor" name="717e026b570e71d0e648d851d34b6482"></a><!-- doxytag: member="OpenBabel::atomtyper" ref="717e026b570e71d0e648d851d34b6482" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> <a class="el" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> for marking internal valence, hybridization, and atom types (for internal and external use) 
</div>
</div><p>
<a class="anchor" name="f4a64fa5669b273a31330641abe62978"></a><!-- doxytag: member="OpenBabel::phmodel" ref="f4a64fa5669b273a31330641abe62978" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a> <a class="el" href="namespaceOpenBabel.shtml#f4a64fa5669b273a31330641abe62978">phmodel</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="394eef44b3dd6a9174067715712c2d16"></a><!-- doxytag: member="OpenBabel::obErrorLog" ref="394eef44b3dd6a9174067715712c2d16" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> <a class="el" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">obErrorLog</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error handler. 
<p>

</div>
</div><p>
<a class="anchor" name="384eab3fdca5eabacaf7c1167d8fbbe8"></a><!-- doxytag: member="OpenBabel::bitsoff" ref="384eab3fdca5eabacaf7c1167d8fbbe8" args="[SETWORD]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#384eab3fdca5eabacaf7c1167d8fbbe8">bitsoff</a>[SETWORD]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<b>Initial value:</b><div class="fragment"><pre class="fragment">
    {
        0xFFFFFFFF,0xFFFFFFFE,0xFFFFFFFC,0xFFFFFFF8,0xFFFFFFF0,0xFFFFFFE0,0xFFFFFFC0,
        0xFFFFFF80,0xFFFFFF00,0xFFFFFE00,0xFFFFFC00,0xFFFFF800,0xFFFFF000,0xFFFFE000,
        0xFFFFC000,0xFFFF8000,0xFFFF0000,0xFFFE0000,0xFFFC0000,0xFFF80000,0xFFF00000,
        0xFFE00000,0xFFC00000,0xFF800000,0xFF000000,0xFE000000,0xFC000000,0xF8000000,
        0xF0000000,0xE0000000,0xC0000000,0x80000000
    }
</pre></div>
</div>
</div><p>
<a class="anchor" name="36c0ee580e088fa888f7d96c16e969bd"></a><!-- doxytag: member="OpenBabel::aromtyper" ref="36c0ee580e088fa888f7d96c16e969bd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> <a class="el" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">aromtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> for detecting aromatic atoms and bonds. 
<p>

</div>
</div><p>
<a class="anchor" name="ba95148bad1cac8e3abb51a485c17cac"></a><!-- doxytag: member="OpenBabel::bondtyper" ref="ba95148bad1cac8e3abb51a485c17cac" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a> <a class="el" href="namespaceOpenBabel.shtml#ba95148bad1cac8e3abb51a485c17cac">bondtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a> for perception of bond order assignment. 
<p>

</div>
</div><p>
<a class="anchor" name="b81925dbd111f3bf1733a4cbba547131"></a><!-- doxytag: member="OpenBabel::chainsparser" ref="b81925dbd111f3bf1733a4cbba547131" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a> <a class="el" href="namespaceOpenBabel.shtml#b81925dbd111f3bf1733a4cbba547131">chainsparser</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="26e55b55a5d9997fa7e9326cd603fcdd"></a><!-- doxytag: member="OpenBabel::Peptide" ref="26e55b55a5d9997fa7e9326cd603fcdd" args="[MAXPEPTIDE]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">Template</a> <a class="el" href="namespaceOpenBabel.shtml#26e55b55a5d9997fa7e9326cd603fcdd">Peptide</a>[MAXPEPTIDE]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
        {  0x0001, 7, 2, 0x0030, 0x0100,      0, 0 },
        {  0x0002, 7, 1, 0x0030,      0,      0, 0 },
        {  0x0004, 7, 3, 0x0030, 0x0100,     -6, 0 },
        {  0x0008, 7, 2, 0x0030,     -6,      0, 0 },
        {  0x0010, 6, 3, 0x000F, 0x0700,     -6, 0 },
        {  0x0020, 6, 2, 0x0003, 0x0700,      0, 0 },
        {  0x0100, 6, 3, 0x0030, 0x1000, 0x0005, 0 },
        {  0x0200, 6, 2, 0x0030, 0x1000,      0, 0 },
        {  0x0400, 6, 3, 0x0030, 0x1000, 0x2000, 0 },
        {  0x1000, 8, 1, 0x0700,      0,      0, 0 },
        {  0x2000, 8, 1, 0x0400,      0,      0, 0 }
  }
</pre></div>Generic template for peptide residue backbone. 
<p>

</div>
</div><p>
<a class="anchor" name="b4cf89b53bf070dafd1717b69e89d8a0"></a><!-- doxytag: member="OpenBabel::Nucleotide" ref="b4cf89b53bf070dafd1717b69e89d8a0" args="[MAXNUCLEIC]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">Template</a> <a class="el" href="namespaceOpenBabel.shtml#b4cf89b53bf070dafd1717b69e89d8a0">Nucleotide</a>[MAXNUCLEIC]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
        {  0x0001, 15, 4, 0x0004, 0x0004, 0x0008, 0x0200 },
        {  0x0002, 15, 3, 0x0004, 0x0004, 0x0008,      0 },
        {  0x0004,  8, 1, 0x0003,      0,      0,      0 },
        {  0x0008,  8, 2, 0x0020, 0x0003,      0,      0 },
        {  0x0010,  8, 1, 0x0020,      0,      0,      0 },
        {  0x0020,  6, 2, 0x0018, 0x0040,      0,      0 },
        {  0x0040,  6, 3, 0x0020, 0x0080, 0x0100,      0 },
        {  0x0080,  8, 2, 0x0040, 0x4000,      0,      0 },
        {  0x0100,  6, 3, 0x0040, 0x0600, 0x1800,      0 },
        {  0x0200,  8, 2, 0x0100, 0x0001,      0,      0 },
        {  0x0400,  8, 1, 0x0100,      0,      0,      0 },
        {  0x0800,  6, 3, 0x0100, 0x4000, 0x2000,      0 },
        {  0x1000,  6, 2, 0x0100, 0x4000,      0,      0 },
        {  0x2000,  8, 1, 0x0800,      0,      0,      0 },
        {  0x4000,  6, 3, 0x0080, 0x1800,     -7,      0 }
  }
</pre></div>Generic template for peptide nucleotide backbone. 
<p>

</div>
</div><p>
<a class="anchor" name="7b064978f82414d1a9805ac383a5cac5"></a><!-- doxytag: member="OpenBabel::ChainsAtomName" ref="7b064978f82414d1a9805ac383a5cac5" args="[ATOMMAX][4]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="namespaceOpenBabel.shtml#7b064978f82414d1a9805ac383a5cac5">ChainsAtomName</a>[ATOMMAX][4]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
PDB atom types (i.e., columns 13-16 of a PDB file) index numbers from this array are used in the pseudo-SMILES format for side-chains in the AminoAcids[] &amp; Nucleotides[] global arrays below 
</div>
</div><p>
<a class="anchor" name="0f1fa68f20787eefe51bc205d70bf141"></a><!-- doxytag: member="OpenBabel::AminoAcids" ref="0f1fa68f20787eefe51bc205d70bf141" args="[AMINOMAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ResidType <a class="el" href="namespaceOpenBabel.shtml#0f1fa68f20787eefe51bc205d70bf141">AminoAcids</a>[AMINOMAX]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
    { <span class="stringliteral">"ILE"</span>, <span class="stringliteral">"1-4(-9-14)-10"</span>                        },
    { <span class="stringliteral">"VAL"</span>, <span class="stringliteral">"1-4(-9)-10"</span>                           },
    { <span class="stringliteral">"ALA"</span>, <span class="stringliteral">"1-4"</span>                                  },
    { <span class="stringliteral">"ASN"</span>, <span class="stringliteral">"1-4-7(=15)-19"</span>                        },
    { <span class="stringliteral">"ASP"</span>, <span class="stringliteral">"1-4-7(=15)-18"</span>                        },
    { <span class="stringliteral">"ARG"</span>, <span class="stringliteral">"1-4-7-11-21-29(=34)-35"</span>               },
    { <span class="stringliteral">"CYS"</span>, <span class="stringliteral">"1-4-5"</span>                                },
    { <span class="stringliteral">"GLN"</span>, <span class="stringliteral">"1-4-7-11(=23)-27"</span>                     },
    { <span class="stringliteral">"GLU"</span>, <span class="stringliteral">"1-4-7-11(=23)-26"</span>                     },
    { <span class="stringliteral">"GLY"</span>, <span class="stringliteral">"1"</span>                                    },
    { <span class="stringliteral">"HIS"</span>, <span class="stringliteral">"1-4-7^16~22^27^17~7"</span>                  },
    { <span class="stringliteral">"HYP"</span>, <span class="stringliteral">"1-4-7(-12)-11-0"</span>                      },
    { <span class="stringliteral">"LEU"</span>, <span class="stringliteral">"1-4-7(-14)-17"</span>                        },
    { <span class="stringliteral">"LYS"</span>, <span class="stringliteral">"1-4-7-11-20-30"</span>                       },
    { <span class="stringliteral">"MET"</span>, <span class="stringliteral">"1-4-7-13-20"</span>                          },
    { <span class="stringliteral">"PHE"</span>, <span class="stringliteral">"1-4-7~14^22~29^25~17^7"</span>               },
    { <span class="stringliteral">"PRO"</span>, <span class="stringliteral">"1-4-7-11-0"</span>                           },
    { <span class="stringliteral">"SER"</span>, <span class="stringliteral">"1-4-6"</span>                                },
    { <span class="stringliteral">"THR"</span>, <span class="stringliteral">"1-4(-8)-10"</span>                           },
    { <span class="stringliteral">"TRP"</span>, <span class="stringliteral">"1-4-7~14^24^25~17(^7)^28~32^36~31^25"</span> },
    { <span class="stringliteral">"TYR"</span>, <span class="stringliteral">"1-4-7~14^22~29(-33)^25~17^7"</span>          }
  }
</pre></div>Side chains for recognized amino acids using a pseudo-SMARTS syntax for branching and bonds. Numbers indicate atom types defined by ChainsAtomName global array above 
</div>
</div><p>
<a class="anchor" name="2326ccdc5fd0c0b5cfd5842cf4c7da03"></a><!-- doxytag: member="OpenBabel::Nucleotides" ref="2326ccdc5fd0c0b5cfd5842cf4c7da03" args="[NUCLEOMAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ResidType <a class="el" href="namespaceOpenBabel.shtml#2326ccdc5fd0c0b5cfd5842cf4c7da03">Nucleotides</a>[NUCLEOMAX]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
    { <span class="stringliteral">"  A"</span>, <span class="stringliteral">"49-50-51-52-53-54(-56)-57-58-61-62(-53)-50"</span>      },
    { <span class="stringliteral">"  C"</span>, <span class="stringliteral">"49-57-58(-59)-61-62(-64)-65-67-57"</span>               },
    { <span class="stringliteral">"  G"</span>, <span class="stringliteral">"49-50-51-52-53-54(-55)-57-58(-60)-61-62(-53)-50"</span> },
    { <span class="stringliteral">"  T"</span>, <span class="stringliteral">"49-57-58(-59)-61-62(-63)-65(-66)-67-57"</span>          },
    { <span class="stringliteral">"  U"</span>, <span class="stringliteral">"49-57-58(-59)-61-62(-63)-65-67-57"</span>               },
    { <span class="stringliteral">"  I"</span>, <span class="stringliteral">"49-50-51-52-53-54(-55)-57-58-61-62(-53)-50"</span>      }
  }
</pre></div>Side chains for recognized nucleotides using a pseudo-SMARTS syntax for branching and bonds. Numbers indicate atom types defined by ChainsAtomName global array above 
</div>
</div><p>
<a class="anchor" name="6d27c5a78720907303f7345d7f972f36"></a><!-- doxytag: member="OpenBabel::MonoAtom" ref="6d27c5a78720907303f7345d7f972f36" args="[MaxMonoAtom]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">MonoAtomType <a class="el" href="namespaceOpenBabel.shtml#6d27c5a78720907303f7345d7f972f36">MonoAtom</a>[MaxMonoAtom]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="424ffb435ce72308ed456dd1c8e5de60"></a><!-- doxytag: member="OpenBabel::MonoBond" ref="424ffb435ce72308ed456dd1c8e5de60" args="[MaxMonoBond]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">MonoBondType <a class="el" href="namespaceOpenBabel.shtml#424ffb435ce72308ed456dd1c8e5de60">MonoBond</a>[MaxMonoBond]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4f891e27abe7998822f22e513182317a"></a><!-- doxytag: member="OpenBabel::MonoAtomCount" ref="4f891e27abe7998822f22e513182317a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#4f891e27abe7998822f22e513182317a">MonoAtomCount</a><code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fe6df7aef6454d16dfbde0b74a516b63"></a><!-- doxytag: member="OpenBabel::MonoBondCount" ref="fe6df7aef6454d16dfbde0b74a516b63" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#fe6df7aef6454d16dfbde0b74a516b63">MonoBondCount</a><code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9e0089655dc8a4d83d40dcbe519ca9bb"></a><!-- doxytag: member="OpenBabel::Stack" ref="9e0089655dc8a4d83d40dcbe519ca9bb" args="[STACKSIZE]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">StackType <a class="el" href="namespaceOpenBabel.shtml#9e0089655dc8a4d83d40dcbe519ca9bb">Stack</a>[STACKSIZE]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5e019437eb125244e080ac8bee696b05"></a><!-- doxytag: member="OpenBabel::StackPtr" ref="5e019437eb125244e080ac8bee696b05" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#5e019437eb125244e080ac8bee696b05">StackPtr</a><code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="08aed91cf3c0528c11e2c383078b9e52"></a><!-- doxytag: member="OpenBabel::AtomIndex" ref="08aed91cf3c0528c11e2c383078b9e52" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#08aed91cf3c0528c11e2c383078b9e52">AtomIndex</a><code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b8cd0fea55be4772aece582108b664c9"></a><!-- doxytag: member="OpenBabel::BondIndex" ref="b8cd0fea55be4772aece582108b664c9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#b8cd0fea55be4772aece582108b664c9">BondIndex</a><code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f4e7dde6c2732deca11bff4c63c46372"></a><!-- doxytag: member="OpenBabel::StrictFlag" ref="f4e7dde6c2732deca11bff4c63c46372" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="namespaceOpenBabel.shtml#f4e7dde6c2732deca11bff4c63c46372">StrictFlag</a> = false<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1e53ca6bf87ac2f6447c9ef2332c9418"></a><!-- doxytag: member="OpenBabel::etab" ref="1e53ca6bf87ac2f6447c9ef2332c9418" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a> <a class="el" href="namespaceOpenBabel.shtml#1e53ca6bf87ac2f6447c9ef2332c9418">etab</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b8d4d5690031703bcccb95ddbe7ebf0a"></a><!-- doxytag: member="OpenBabel::ttab" ref="b8d4d5690031703bcccb95ddbe7ebf0a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a> <a class="el" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">ttab</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="35082995377e56142ee5a9fd351c7a70"></a><!-- doxytag: member="OpenBabel::isotab" ref="35082995377e56142ee5a9fd351c7a70" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a> <a class="el" href="namespaceOpenBabel.shtml#35082995377e56142ee5a9fd351c7a70">isotab</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="30154f62f3bd1a1b8613a080444e69d7"></a><!-- doxytag: member="OpenBabel::resdat" ref="30154f62f3bd1a1b8613a080444e69d7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a> <a class="el" href="namespaceOpenBabel.shtml#30154f62f3bd1a1b8613a080444e69d7">resdat</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7126b9414c30e5eaea055745183b0dcc"></a><!-- doxytag: member="OpenBabel::VZero" ref="7126b9414c30e5eaea055745183b0dcc" args="(0.0, 0.0, 0.0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#7126b9414c30e5eaea055745183b0dcc">VZero</a>(0.0, 0.0, 0.0)          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a107deadee657e5c8402f1215dc6f647"></a><!-- doxytag: member="OpenBabel::VX" ref="a107deadee657e5c8402f1215dc6f647" args="(1.0, 0.0, 0.0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#a107deadee657e5c8402f1215dc6f647">VX</a>(1.0, 0.0, 0.0)          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4387b07aaaffe697c871025a292787e3"></a><!-- doxytag: member="OpenBabel::VY" ref="4387b07aaaffe697c871025a292787e3" args="(0.0, 1.0, 0.0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#4387b07aaaffe697c871025a292787e3">VY</a>(0.0, 1.0, 0.0)          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="bbc57f9cd53a327cdbca503f0c3bb51c"></a><!-- doxytag: member="OpenBabel::VZ" ref="bbc57f9cd53a327cdbca503f0c3bb51c" args="(0.0, 0.0, 1.0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#bbc57f9cd53a327cdbca503f0c3bb51c">VZ</a>(0.0, 0.0, 1.0)          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="3752b8b2cb2b0485307ec67623d7e2c5"></a><!-- doxytag: member="OpenBabel::VZero" ref="3752b8b2cb2b0485307ec67623d7e2c5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#7126b9414c30e5eaea055745183b0dcc">VZero</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="79aa4a2ccde7b610aaafd56443df9caa"></a><!-- doxytag: member="OpenBabel::VX" ref="79aa4a2ccde7b610aaafd56443df9caa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#a107deadee657e5c8402f1215dc6f647">VX</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7a35811d97bde7af938e487190130adf"></a><!-- doxytag: member="OpenBabel::VY" ref="7a35811d97bde7af938e487190130adf" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#4387b07aaaffe697c871025a292787e3">VY</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a43d198e9c7aa867c29bfe09a0ccab84"></a><!-- doxytag: member="OpenBabel::VZ" ref="a43d198e9c7aa867c29bfe09a0ccab84" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="el" href="namespaceOpenBabel.shtml#bbc57f9cd53a327cdbca503f0c3bb51c">VZ</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0f472e5d0ca7766299073faae4a40a30"></a><!-- doxytag: member="OpenBabel::SwabInt" ref="0f472e5d0ca7766299073faae4a40a30" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="namespaceOpenBabel.shtml#0f472e5d0ca7766299073faae4a40a30">SwabInt</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f4a64fa5669b273a31330641abe62978"></a><!-- doxytag: member="OpenBabel::phmodel" ref="f4a64fa5669b273a31330641abe62978" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a> <a class="el" href="namespaceOpenBabel.shtml#f4a64fa5669b273a31330641abe62978">phmodel</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="36c0ee580e088fa888f7d96c16e969bd"></a><!-- doxytag: member="OpenBabel::aromtyper" ref="36c0ee580e088fa888f7d96c16e969bd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> <a class="el" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">aromtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> for detecting aromatic atoms and bonds. 
<p>

</div>
</div><p>
<a class="anchor" name="717e026b570e71d0e648d851d34b6482"></a><!-- doxytag: member="OpenBabel::atomtyper" ref="717e026b570e71d0e648d851d34b6482" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> <a class="el" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> for marking internal valence, hybridization, and atom types (for internal and external use) 
</div>
</div><p>
<a class="anchor" name="ba95148bad1cac8e3abb51a485c17cac"></a><!-- doxytag: member="OpenBabel::bondtyper" ref="ba95148bad1cac8e3abb51a485c17cac" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a> <a class="el" href="namespaceOpenBabel.shtml#ba95148bad1cac8e3abb51a485c17cac">bondtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a> for perception of bond order assignment. 
<p>

</div>
</div><p>
<a class="anchor" name="1e53ca6bf87ac2f6447c9ef2332c9418"></a><!-- doxytag: member="OpenBabel::etab" ref="1e53ca6bf87ac2f6447c9ef2332c9418" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a> <a class="el" href="namespaceOpenBabel.shtml#1e53ca6bf87ac2f6447c9ef2332c9418">etab</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a> for element properties. 
<p>

</div>
</div><p>
<a class="anchor" name="b8d4d5690031703bcccb95ddbe7ebf0a"></a><!-- doxytag: member="OpenBabel::ttab" ref="b8d4d5690031703bcccb95ddbe7ebf0a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a> <a class="el" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">ttab</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a> for translating between different atom types (e.g., Sybyl &lt;-&gt; MM2) 
</div>
</div><p>
<a class="anchor" name="35082995377e56142ee5a9fd351c7a70"></a><!-- doxytag: member="OpenBabel::isotab" ref="35082995377e56142ee5a9fd351c7a70" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a> <a class="el" href="namespaceOpenBabel.shtml#35082995377e56142ee5a9fd351c7a70">isotab</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a> for isotope properties. 
<p>

</div>
</div><p>
<a class="anchor" name="36c0ee580e088fa888f7d96c16e969bd"></a><!-- doxytag: member="OpenBabel::aromtyper" ref="36c0ee580e088fa888f7d96c16e969bd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> <a class="el" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">aromtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> for detecting aromatic atoms and bonds. 
<p>

</div>
</div><p>
<a class="anchor" name="717e026b570e71d0e648d851d34b6482"></a><!-- doxytag: member="OpenBabel::atomtyper" ref="717e026b570e71d0e648d851d34b6482" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> <a class="el" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> for marking internal valence, hybridization, and atom types (for internal and external use) 
</div>
</div><p>
<a class="anchor" name="b81925dbd111f3bf1733a4cbba547131"></a><!-- doxytag: member="OpenBabel::chainsparser" ref="b81925dbd111f3bf1733a4cbba547131" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a> <a class="el" href="namespaceOpenBabel.shtml#b81925dbd111f3bf1733a4cbba547131">chainsparser</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a> for detecting macromolecular chains and residues. 
<p>

</div>
</div><p>
<a class="anchor" name="394eef44b3dd6a9174067715712c2d16"></a><!-- doxytag: member="OpenBabel::obErrorLog" ref="394eef44b3dd6a9174067715712c2d16" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> <a class="el" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">obErrorLog</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error handler. 
<p>

</div>
</div><p>
<a class="anchor" name="30154f62f3bd1a1b8613a080444e69d7"></a><!-- doxytag: member="OpenBabel::resdat" ref="30154f62f3bd1a1b8613a080444e69d7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a> <a class="el" href="namespaceOpenBabel.shtml#30154f62f3bd1a1b8613a080444e69d7">resdat</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a> biomolecule residue database. 
<p>

</div>
</div><p>
<a class="anchor" name="394eef44b3dd6a9174067715712c2d16"></a><!-- doxytag: member="OpenBabel::obErrorLog" ref="394eef44b3dd6a9174067715712c2d16" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> <a class="el" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">obErrorLog</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error handler. 
<p>

</div>
</div><p>
<a class="anchor" name="394eef44b3dd6a9174067715712c2d16"></a><!-- doxytag: member="OpenBabel::obErrorLog" ref="394eef44b3dd6a9174067715712c2d16" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> <a class="el" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">obErrorLog</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> error handler. 
<p>

</div>
</div><p>
<a class="anchor" name="19c1a2a80cf2af5131ca597d0ce38192"></a><!-- doxytag: member="OpenBabel::Roots" ref="19c1a2a80cf2af5131ca597d0ce38192" args="[4]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="namespaceOpenBabel.shtml#19c1a2a80cf2af5131ca597d0ce38192">Roots</a>[4]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="e89648d7638bd2299f581267f41badca"></a><!-- doxytag: member="OpenBabel::RSCACHE" ref="e89648d7638bd2299f581267f41badca" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::pair&lt;<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>*,std::vector&lt;bool&gt; &gt; &gt; <a class="el" href="namespaceOpenBabel.shtml#e89648d7638bd2299f581267f41badca">RSCACHE</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2860b525fbfe4f29b416c37f8b13f561"></a><!-- doxytag: member="OpenBabel::MainPtr" ref="2860b525fbfe4f29b416c37f8b13f561" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* <a class="el" href="namespaceOpenBabel.shtml#2860b525fbfe4f29b416c37f8b13f561">MainPtr</a><code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="24f5f7e6d2d4aeccecabdbbf89719bc5"></a><!-- doxytag: member="OpenBabel::LexPtr" ref="24f5f7e6d2d4aeccecabdbbf89719bc5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* <a class="el" href="namespaceOpenBabel.shtml#24f5f7e6d2d4aeccecabdbbf89719bc5">LexPtr</a><code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9d7048d0658df11d0d0d760df86308e2"></a><!-- doxytag: member="OpenBabel::Buffer" ref="9d7048d0658df11d0d0d760df86308e2" args="[BUFMAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="namespaceOpenBabel.shtml#9d7048d0658df11d0d0d760df86308e2">Buffer</a>[BUFMAX]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2c982581984b8ec596674fb8385c58d9"></a><!-- doxytag: member="OpenBabel::Descr" ref="2c982581984b8ec596674fb8385c58d9" args="[BUFMAX]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="namespaceOpenBabel.shtml#2c982581984b8ec596674fb8385c58d9">Descr</a>[BUFMAX]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f4a64fa5669b273a31330641abe62978"></a><!-- doxytag: member="OpenBabel::phmodel" ref="f4a64fa5669b273a31330641abe62978" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a> <a class="el" href="namespaceOpenBabel.shtml#f4a64fa5669b273a31330641abe62978">phmodel</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="717e026b570e71d0e648d851d34b6482"></a><!-- doxytag: member="OpenBabel::atomtyper" ref="717e026b570e71d0e648d851d34b6482" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> <a class="el" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> for marking internal valence, hybridization, and atom types (for internal and external use) 
</div>
</div><p>
<a class="anchor" name="dddfd42867b5aaa0caaa3a793a8f69e2"></a><!-- doxytag: member="OpenBabel::primes" ref="dddfd42867b5aaa0caaa3a793a8f69e2" args="[MAXPRIMES]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#dddfd42867b5aaa0caaa3a793a8f69e2">primes</a>[MAXPRIMES]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<b>Initial value:</b><div class="fragment"><pre class="fragment"> {
                                   1,    2,    3,    5,    7,   11,   13,   17,   19,   23,
                                   29,   31,   37,   41,   43,   47,   53,   59,   61,   67,
                                   71,   73,   79,   83,   89,   97,  101,  103,  107,  109,
                                   113,  127,  131,  137,  139,  149,  151,  157,  163,  167,
                                   173,  179,  181,  191,  193,  197,  199,  211,  223,  227,
                                   229,  233,  239,  241,  251,  257,  263,  269,  271,  277,
                                   281,  283,  293,  307,  311,  313,  317,  331,  337,  347,
                                   349,  353,  359,  367,  373,  379,  383,  389,  397,  401,
                                   409,  419,  421,  431,  433,  439,  443,  449,  457,  461,
                                   463,  467,  479,  487,  491,  499,  503,  509,  521,  523,
                                   541,  547,  557,  563,  569,  571,  577,  587,  593,  599,
                                   601,  607,  613,  617,  619,  631,  641,  643,  647,  653,
                                   659,  661,  673,  677,  683,  691,  701,  709,  719,  727,
                                   733,  739,  743,  751,  757,  761,  769,  773,  787,  797,
                                   809,  811,  821,  823,  827,  829,  839,  853,  857,  859,
                                   863,  877,  881,  883,  887,  907,  911,  919,  929,  937,
                                   941,  947,  953,  967,  971,  977,  983,  991,  997, 1009,
                                   1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063,
                                   1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129,
                                   1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217,
                                   1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289,
                                   1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367,
                                   1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447,
                                   1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499,
                                   1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579,
                                   1583, 1597, 1601, 1607, 1609, 1613
                               }
</pre></div>
</div>
</div><p>
<a class="anchor" name="2146236221110653a42a5bea9ff0b3d0"></a><!-- doxytag: member="OpenBabel::Residue" ref="2146236221110653a42a5bea9ff0b3d0" args="[MAXRES][4]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="namespaceOpenBabel.shtml#2146236221110653a42a5bea9ff0b3d0">Residue</a>[MAXRES][4]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c4446d5164a574e6858d42178978e7f5"></a><!-- doxytag: member="OpenBabel::ElemDesc" ref="c4446d5164a574e6858d42178978e7f5" args="[MAXELEM][4]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="namespaceOpenBabel.shtml#c4446d5164a574e6858d42178978e7f5">ElemDesc</a>[MAXELEM][4]<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f4a6dc069703276b9476ce6b7c5f018e"></a><!-- doxytag: member="OpenBabel::ResNo" ref="f4a6dc069703276b9476ce6b7c5f018e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="namespaceOpenBabel.shtml#f4a6dc069703276b9476ce6b7c5f018e">ResNo</a> = MINRES<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="508adcc5794ff87b21a2e5fc0d752b17"></a><!-- doxytag: member="OpenBabel::ElemNo" ref="508adcc5794ff87b21a2e5fc0d752b17" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="namespaceOpenBabel.shtml#508adcc5794ff87b21a2e5fc0d752b17">ElemNo</a> = MINELEM<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="e3c640db1cce9cd703ef7c5429de5453"></a><!-- doxytag: member="OpenBabel::SINT" ref="e3c640db1cce9cd703ef7c5429de5453" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="namespaceOpenBabel.shtml#e3c640db1cce9cd703ef7c5429de5453">SINT</a> = 0x00000001<code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0cc646b14fcc04a16103f6bd73382d17"></a><!-- doxytag: member="OpenBabel::STPTR" ref="0cc646b14fcc04a16103f6bd73382d17" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned char* <a class="el" href="namespaceOpenBabel.shtml#0cc646b14fcc04a16103f6bd73382d17">STPTR</a> = (unsigned char*)&amp;<a class="el" href="namespaceOpenBabel.shtml#e3c640db1cce9cd703ef7c5429de5453">SINT</a><code> [static]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0afcf921bfdabceef6c6cf00836ae203"></a><!-- doxytag: member="OpenBabel::SwabInt" ref="0afcf921bfdabceef6c6cf00836ae203" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool <a class="el" href="namespaceOpenBabel.shtml#0f472e5d0ca7766299073faae4a40a30">SwabInt</a> = (<a class="el" href="namespaceOpenBabel.shtml#0cc646b14fcc04a16103f6bd73382d17">STPTR</a>[0]!=0)          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="36c0ee580e088fa888f7d96c16e969bd"></a><!-- doxytag: member="OpenBabel::aromtyper" ref="36c0ee580e088fa888f7d96c16e969bd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> <a class="el" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">aromtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> for detecting aromatic atoms and bonds. 
<p>

</div>
</div><p>
<a class="anchor" name="717e026b570e71d0e648d851d34b6482"></a><!-- doxytag: member="OpenBabel::atomtyper" ref="717e026b570e71d0e648d851d34b6482" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> <a class="el" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Global <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> for marking internal valence, hybridization, and atom types (for internal and external use) 
</div>
</div><p>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:03 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
