<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBMol Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li id="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a></div>
<h1>OBMol Class Reference</h1><!-- doxytag: class="OpenBabel::OBMol" --><!-- doxytag: inherits="OpenBabel::OBGraphBase" -->Molecule Class.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="mol_8h-source.shtml">mol.h</a>&gt;</code>
<p>
Inheritance diagram for OBMol:<p><center><img src="classOpenBabel_1_1OBMol__inherit__graph.png" border="0" usemap="#OBMol__inherit__map" alt="Inheritance graph"></center>
<map name="OBMol__inherit__map">
<area href="classOpenBabel_1_1OBGraphBase.shtml" shape="rect" coords="7,82,117,109" alt="">
<area href="classOpenBabel_1_1OBBase.shtml" shape="rect" coords="26,8,98,34" alt="">
</map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center><a href="classOpenBabel_1_1OBMol-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Initialization and data (re)size methods</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#937a09d86f3f440467334e546a98d8d4">OBMol</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor.  <a href="#937a09d86f3f440467334e546a98d8d4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afa7e4623d4c3c0305b5523ca8a77e14">OBMol</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#8df0dd71ac1dba7f7876d6671279d087">~OBMol</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destructor.  <a href="#8df0dd71ac1dba7f7876d6671279d087"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#9d63c24cbe9dc1f6e82d58da2b67dafa">operator=</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assignment.  <a href="#9d63c24cbe9dc1f6e82d58da2b67dafa"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#3f9d2bbe4ae3f85ddca39be0a8ff4971">operator+=</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#723933398f0402a92916d1cfcb8dadd6">ReserveAtoms</a> (int natoms)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#fd5176ccf4c318a93379716d48ab01e8">CreateAtom</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ed69c2ff7d45271240ee8e33f4344d5a">CreateBond</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#3f8a861c8a4cd42370cda1bceaa68b4c">DestroyAtom</a> (<a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#6b76a52fe4ad31254f14dddceab59e43">DestroyBond</a> (<a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a53209ef174b454eb99e269ef59ebbe0">AddAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add an atom to a molecule.  <a href="#a53209ef174b454eb99e269ef59ebbe0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#f32be65522216c5bbb441dcf89626eb3">AddBond</a> (int, int, int, int flags=0, int insertpos=-1)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#c92c32a100a07407535d5412d1a3b3ae">AddBond</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#d656115fdd6749ef7ad8394ee687f375">AddResidue</a> (<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#bd2ad51974aaf20356fe5a07628205b9">InsertAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#8a5e93a313ba3a23f0f206363392c0e9">DeleteAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#1d6c2cf6e5b8ccca827ea3cb0c42db33">DeleteBond</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#307d74a5a8d1709bbc14e5e6b47d0d02">DeleteResidue</a> (<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#e215a7452ce2f50590d64af7a5558f0c">NewAtom</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a new atom to add to a molecule.  <a href="#e215a7452ce2f50590d64af7a5558f0c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#7662758d1fe46ab3a3392b1970c6a656">NewResidue</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Molecule modification methods</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#035de6b4d4b6834f08d08940911f645d">DoTransformations</a> (const std::map&lt; std::string, std::string &gt; *pOptions)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#d12fd937da5f4b0c4562888252fe214b">Clear</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clear all information from a molecule.  <a href="#d12fd937da5f4b0c4562888252fe214b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1eaa18d216bd6e5a49312e6acec9714">RenumberAtoms</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt; &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Renumber the atoms of this molecule according to the order in the supplied vector.  <a href="#a1eaa18d216bd6e5a49312e6acec9714"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#751725f02bf62696515d79608198cd59">ToInertialFrame</a> (int conf, double *rmat)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Translate one conformer and rotate by a rotation matrix (which is returned) to the inertial frame-of-reference.  <a href="#751725f02bf62696515d79608198cd59"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#8122f52665d60a1e5e56578561bd36b3">ToInertialFrame</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Translate all conformers to the inertial frame-of-reference.  <a href="#8122f52665d60a1e5e56578561bd36b3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#6ac0385e87d0a56901913e5f8049e45f">Translate</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Translates all conformers in the molecule by the supplied vector.  <a href="#6ac0385e87d0a56901913e5f8049e45f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#dad8d93db1fadf354b6f51687335fcb9">Translate</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, int conf)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Translates one conformer in the molecule by the supplied vector.  <a href="#dad8d93db1fadf354b6f51687335fcb9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#e330819c26c418de3a2c995fd191807b">Rotate</a> (const double u[3][3])</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#3494940b2239a5f427061d2902573efd">Rotate</a> (const double m[9])</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#7a6cf5e812be471e72ecac3ee5d0bc46">Rotate</a> (const double m[9], int nconf)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#b9f6ba6fae7e12d0f61f5fd8e746aaf3">Center</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Translate to the center of all coordinates (for this conformer).  <a href="#b9f6ba6fae7e12d0f61f5fd8e746aaf3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#457c69b9a377efcbdb9e8be871f17fc2">Kekulize</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Transform to standard Kekule bond structure (presumably from an aromatic form).  <a href="#457c69b9a377efcbdb9e8be871f17fc2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#1e9f06170626de367fba48ebbacd6f0e">PerceiveKekuleBonds</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#b74a82552a9576514b189e2a265d5f5a">NewPerceiveKekuleBonds</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Kekulize aromatic rings without using implicit valence.  <a href="#b74a82552a9576514b189e2a265d5f5a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#925b41d42ddf14c12b675d32bdf5e948">DeleteHydrogen</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#4e2ddc39752d20fabcda1afc1cc4e8e4">DeleteHydrogens</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ce02501ed235e4e6c37dca0585bb46bf">DeleteHydrogens</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#2993ead33ec2a4b15dd536d798ff844d">DeleteNonPolarHydrogens</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#fef8da7507d0f5e257d441e0dbe73a71">AddHydrogens</a> (bool polaronly=false, bool correctForPH=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#1befb9ee43954207d09e3229e4b5753b">AddHydrogens</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#9c3e3f1fa320501c56cb2b7fe4d6be34">AddPolarHydrogens</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ed4ac900f85a661c5124dd806b967101">StripSalts</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Deletes all atoms except for the largest contiguous fragment.  <a href="#ed4ac900f85a661c5124dd806b967101"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#cba192e5cf0db39c2ed6af7ba05328dc">ConvertDativeBonds</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Converts for instance [N+]([O-])=O to N(=O)=O.  <a href="#cba192e5cf0db39c2ed6af7ba05328dc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#6f282bb48885fa887dd2a65b546ef1b4">CorrectForPH</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#1a5d93623aa8ebca2bf30ef66054a9dc">AssignSpinMultiplicity</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">set spin multiplicity for H-deficient atoms  <a href="#1a5d93623aa8ebca2bf30ef66054a9dc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#9e896374801d7ea5f8986ecb2b54d65b">Center</a> (int nconf)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#90c659bf5589f52f5174d6d7dce0c9a1">SetTorsion</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, double)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the torsion defined by these atoms, rotating bonded neighbors.  <a href="#90c659bf5589f52f5174d6d7dce0c9a1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#b72bba66cc9e40fb3b657a30d87bbe6d">ClassDescription</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#22960ac779b08ab4314a81917c71585b">NumNodes</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#a0eee9548abefd1ecbd9799c43195313">NumEdges</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#acacf35932ae8262d93bfa9d1693d913">ResetVisitFlags</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#136baf9ef324d417a1fd1ea5a2e396f3">SetVisitLock</a> (bool)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#33e96b9f1d6f78d25204d073b6d59a31">GetVisitLock</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#5649ac44d7572882311ca46c5223e6cd">Begin</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt;::iterator &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#f40714d1f33a5b945b092b1e9655f99b">Begin</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> * &gt;::iterator &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#9538aa4ef5cef66087c2ec84e96a2a86">Next</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt;::iterator &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#d25f8918ec0ca3cf2fe19549feb7c3fc">Next</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> * &gt;::iterator &amp;)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Molecule modification methods</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#1b5760b4c75b7631fffb54f84140b3e3">BeginModify</a> (void)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Call when making many modifications -- clears conformer/rotomer data.  <a href="#1b5760b4c75b7631fffb54f84140b3e3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#c32ffc23db124156a953e8e5cb923ccd">EndModify</a> (bool nukePerceivedData=true)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Call when done with modificaions -- re-perceive data as needed.  <a href="#c32ffc23db124156a953e8e5cb923ccd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#c5103c8b3cbe4f961bd353209bf2860e">GetMod</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#dc36b31f851665247f3c576cdd7aa0af">IncrementMod</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#8efda275b959c94452e1ded1f568c934">DecrementMod</a> ()</td></tr>

<tr><td colspan="2"><div class="groupHeader">Generic data handling methods (via OBGenericData)</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#1e0f46181273107bdbf5b22ca78755ab">HasData</a> (std::string &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>
 <a href="#1e0f46181273107bdbf5b22ca78755ab"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#01b429ffcaf47cf265acd439ed2faca0">HasData</a> (const char *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>
 <a href="#01b429ffcaf47cf265acd439ed2faca0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#54e7fef374c6403d539d4ae484d3024c">HasData</a> (unsigned int type)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>
 <a href="#54e7fef374c6403d539d4ae484d3024c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#797e5b4d20b6233062d2fdba78a08e06">DeleteData</a> (unsigned int type)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#b586df65e3f115b69510820b34098ce9">DeleteData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af61a3ecb8f2926aaf117299388d43c2">DeleteData</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#db6b0ec89bfea783825b3b466e4dbc00">SetData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#fd4740dfd6a433f49aff61f30a143e2b">DataSize</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> items attached to this molecule. </dd></dl>
 <a href="#fd4740dfd6a433f49aff61f30a143e2b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ff0af110d6024838f92e367927ac4a69">GetData</a> (unsigned int type)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#f129944bef0a7bce21f2232108fec39a">GetData</a> (std::string &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the value given an attribute name.  <a href="#f129944bef0a7bce21f2232108fec39a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#483b277678a8ca48998742c80985fd0b">GetData</a> (const char *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the value given an attribute name.  <a href="#483b277678a8ca48998742c80985fd0b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#90a551ff0a0ed3fa58745dff0ecacdaa">GetData</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> <br>
* &gt;::iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a53a73875031660f8d63e963a248df9f">BeginData</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> <br>
* &gt;::iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#23b691092f712f20cf57065f54d2357a">EndData</a> ()</td></tr>

<tr><td colspan="2"><div class="groupHeader">Data retrieval methods</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ba761a006b56d62912a91e259ce11bb1">GetFlags</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#d4281d49a1f2b0228e4fdaff01762375">GetTitle</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the title of this molecule (often the filename) </dd></dl>
 <a href="#d4281d49a1f2b0228e4fdaff01762375"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#2f0695eb7d6ff6321032d88655ae8d25">NumAtoms</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of atoms (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> children) </dd></dl>
 <a href="#2f0695eb7d6ff6321032d88655ae8d25"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#7358c2c15c4c0d88ae2489f586bc8e0b">NumBonds</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of bonds (i.e. <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> children) </dd></dl>
 <a href="#7358c2c15c4c0d88ae2489f586bc8e0b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#fa92da4c4cfc01b7c0d4385f487b42a4">NumHvyAtoms</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of non-hydrogen atoms </dd></dl>
 <a href="#fa92da4c4cfc01b7c0d4385f487b42a4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#f641753d0dbc017405280791048f0d88">NumResidues</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of residues (i.e. <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> substituents) </dd></dl>
 <a href="#f641753d0dbc017405280791048f0d88"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#4b7d18f81253efd82ca54e4a9c0aae65">NumRotors</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of rotatble bonds. See <a class="el" href="classOpenBabel_1_1OBBond.shtml#0919315f7a2fd68937c561186be76e44">OBBond::IsRotor()</a> for details </dd></dl>
 <a href="#4b7d18f81253efd82ca54e4a9c0aae65"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#400c1ca5057984dd7e6b1a92be27c441">GetAtom</a> (int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab5e1321f7a8c6a82feeb5279f44fe60">GetFirstAtom</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#2173a88275e6c58feeb5fd84ad9d1137">GetBond</a> (int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#877ebd9ad23a6320374308e69bb26ea4">GetBond</a> (int, int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ee374d996046688f9cdb77e9a2eb2775">GetBond</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#d92709d2953323ae7dd751ce40215d2d">GetResidue</a> (int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#f5afa8a0742e0238f3fd92ada82f079d">GetInternalCoord</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#401a725a0efbc20c49783f176d78e6a7">GetTorsion</a> (int, int, int, int)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the dihedral angle between the four atoms supplied a1-a2-a3-a4) </dd></dl>
 <a href="#401a725a0efbc20c49783f176d78e6a7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#1aebfc2249c806ad2305cce9ecc379f1">GetTorsion</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the dihedral angle between the four atoms supplied a1-a2-a3-a4) </dd></dl>
 <a href="#1aebfc2249c806ad2305cce9ecc379f1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#7adc12bff502264eaebf537a5e28a43c">GetFormula</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the stochoimetric formula (e.g., C4H6O) </dd></dl>
 <a href="#7adc12bff502264eaebf537a5e28a43c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#4dcfbb9780f44d5fca2effbc30b17ce0">GetEnergy</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the heat of formation for this molecule (in kcal/mol) </dd></dl>
 <a href="#4dcfbb9780f44d5fca2effbc30b17ce0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#065d867e0f04048bc005cd306f5e1759">GetMolWt</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the standard molar mass given by IUPAC atomic masses (amu) </dd></dl>
 <a href="#065d867e0f04048bc005cd306f5e1759"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#b2945776a4f01d50e2934b4742f484eb">GetExactMass</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the mass given by isotopes (or most abundant isotope, if not specified) </dd></dl>
 <a href="#b2945776a4f01d50e2934b4742f484eb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#b78d46b60f04702fa6f450ef6f8dae62">GetTotalCharge</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the total charge on this molecule (i.e., 0 = neutral, +1, -1...) </dd></dl>
 <a href="#b78d46b60f04702fa6f450ef6f8dae62"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a431b859ed26f5a45e6ddc3448da1d1f">GetTotalSpinMultiplicity</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the total spin on this molecule (i.e., 1 = singlet, 2 = doublet...) </dd></dl>
 <a href="#a431b859ed26f5a45e6ddc3448da1d1f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned short int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#d646045c7f735c9ef05ba9e4bb768b7c">GetDimension</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the dimensionality of coordinates (i.e., 0 = unknown or no coord, 2=2D, 3=3D) </dd></dl>
 <a href="#d646045c7f735c9ef05ba9e4bb768b7c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#d11003513310725bd54265ef5bf004c0">GetCoordinates</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#0f6bce457ef6f963b8e4ba7c4be23775">GetSSSR</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Implements <a href="http://qsar.sourceforge.net/dicts/blue-obelisk/index.xhtml#findSmallestSetOfSmallestRings">blue-obelisk:findSmallestSetOfSmallestRings</a>.  <a href="#0f6bce457ef6f963b8e4ba7c4be23775"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#9f801729475d1d17415af6376458c81e">AutomaticFormalCharge</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the current flag for whether formal charges are set with pH correction.  <a href="#9f801729475d1d17415af6376458c81e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#f2ee11d3efe6526c2eb352bb67684e6c">AutomaticPartialCharge</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the current flag for whether partial charges are auto-determined.  <a href="#f2ee11d3efe6526c2eb352bb67684e6c"></a><br></td></tr>
<tr><td colspan="2"><div class="groupHeader">Data modification methods</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#cfe3b729dc90c4c5e21684e3a60653af">SetTitle</a> (const char *title)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#667324c365d3b6f20d17221295c3a89e">SetTitle</a> (std::string &amp;title)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#0a4b32a3135f26595bdd260539256c67">SetFormula</a> (std::string molFormula)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the stochiometric formula for this molecule.  <a href="#0a4b32a3135f26595bdd260539256c67"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#b78fa0a100d47ad2beb88c7cabb80e62">SetEnergy</a> (double energy)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the heat of formation for this molecule (in kcal/mol).  <a href="#b78fa0a100d47ad2beb88c7cabb80e62"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#dc2702cffcab0a0d6907958e3327284b">SetDimension</a> (unsigned short int d)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the dimension of this molecule (i.e., 0, 1 , 2, 3).  <a href="#dc2702cffcab0a0d6907958e3327284b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#58b360590ab212860dc26812ce38057d">SetTotalCharge</a> (int charge)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#2b169dc172b11341c8fa47da0bfc16f8">SetTotalSpinMultiplicity</a> (unsigned int spin)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#50a6320395d2466d277dc42f872c50f8">SetInternalCoord</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt; int_coord)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#31e0990c833c415708b3fc515dbb35d5">SetAutomaticFormalCharge</a> (bool val)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the flag for determining automatic formal charges with pH (default=true).  <a href="#31e0990c833c415708b3fc515dbb35d5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df95db3695e5e7ce263c484ce5533d">SetAutomaticPartialCharge</a> (bool val)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the flag for determining partial charges automatically (default=true).  <a href="#a8df95db3695e5e7ce263c484ce5533d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ecd431b2cfaefa64d54c2dc4088551fb">SetAromaticPerceived</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Mark that aromaticity has been perceived for this molecule (see <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>).  <a href="#ecd431b2cfaefa64d54c2dc4088551fb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ba303a094727738eb901cafbecd7c196">SetSSSRPerceived</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Mark that Smallest Set of Smallest Rings has been run (see <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> class).  <a href="#ba303a094727738eb901cafbecd7c196"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#0656401ba8b19bc9b9f2d3e8e833d3aa">SetRingAtomsAndBondsPerceived</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Mark that rings have been perceived (see <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> class for details).  <a href="#0656401ba8b19bc9b9f2d3e8e833d3aa"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a809ea95ee07e61c6dc00ae710d8a749">SetAtomTypesPerceived</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Mark that atom types have been perceived (see <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> for details).  <a href="#a809ea95ee07e61c6dc00ae710d8a749"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#537294f8e96a7ec5263a79de7454326e">SetChainsPerceived</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Mark that chains and residues have been perceived (see <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a>).  <a href="#537294f8e96a7ec5263a79de7454326e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#608e6f965afea1f4f64cb0f499a0cb27">SetChiralityPerceived</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Mark that chirality has been perceived.  <a href="#608e6f965afea1f4f64cb0f499a0cb27"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#00fd4c76a7513a9c8087d975f5d8a51b">SetPartialChargesPerceived</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Mark that partial charges have been assigned.  <a href="#00fd4c76a7513a9c8087d975f5d8a51b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#4b93b72694e8a9a970eee7f0b65ecf9a">SetHybridizationPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#9ecfb96410199c294c003f975d870832">SetImplicitValencePerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#1e298bbe286ab2c5a6f3b086a07b1a2b">SetKekulePerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#7900736a9f73a041ab8bade19be84cc9">SetClosureBondsPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#47b63124c405f9c2ecdb766c6de9c56e">SetHydrogensAdded</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#f56db37c6a9f7049ed16469ab0a270c2">SetCorrectedForPH</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#6438e097839dbc98916fb00a3dc67305">SetAromaticCorrected</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#2c81eeba803bc59d6c40f97b0e0e17fd">SetSpinMultiplicityAssigned</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#b0922e1fa0939499c024e1006433adf3">SetFlags</a> (int flags)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#88f39becfe74f62c9d0ffedfb4098b77">UnsetAromaticPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#0b8a9f6292b91ec5c4022a487e9d6092">UnsetPartialChargesPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#f673e91c4869ca8c1057f006d4f06dae">UnsetImplicitValencePerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#401b99defa8a57195dc40a2604cee115">UnsetFlag</a> (int flag)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Molecule utilities and perception methods</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#d4e3eab0d027bd8e503d02e7261ca477">FindSSSR</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Find Smallest Set of Smallest Rings (see <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> class for more details).  <a href="#d4e3eab0d027bd8e503d02e7261ca477"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#e58b3f3da59d333ffa0d5b0f005f3526">FindRingAtomsAndBonds</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#3368586a5a86bd9684f4b25ac53d2e44">FindChiralCenters</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets atom-&gt;<a class="el" href="classOpenBabel_1_1OBMol.shtml#63258442848bd8e29e0d5224e145ad83">IsChiral()</a> to true for chiral atoms.  <a href="#3368586a5a86bd9684f4b25ac53d2e44"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#bdba2f11e719fbadbc250b3608c1ff5f">FindChildren</a> (std::vector&lt; int &gt; &amp;, int, int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ce0b2f6d873cea9cc52ca6ac45c01e69">FindChildren</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt; &amp;, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#514b45960646c6f3f911c9430851d405">FindLargestFragment</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#f74913b3d793c41d1f005afdba11da35">ContigFragList</a> (std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#228de88f48ee3ca6a11554b74d82dedd">Align</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Aligns atom a on p1 and atom b along p1-&gt;p2 vector.  <a href="#228de88f48ee3ca6a11554b74d82dedd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#31d05972f7454e791641c4a7d0071d12">ConnectTheDots</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Adds single bonds based on atom proximity.  <a href="#31d05972f7454e791641c4a7d0071d12"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#c749cfb04173f6f35ef64b1ac1d87178">PerceiveBondOrders</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Attempts to perceive multiple bonds based on geometries.  <a href="#c749cfb04173f6f35ef64b1ac1d87178"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#1ce9b09fb625faffaae648d7beae9598">FindTorsions</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Fills the OBGeneric <a class="el" href="classOpenBabel_1_1OBTorsionData.shtml">OBTorsionData</a> with torsions from the mol.  <a href="#1ce9b09fb625faffaae648d7beae9598"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#c4260148aa21c7ada7d625bc0c6f2f7a">GetGTDVector</a> (std::vector&lt; int &gt; &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates the graph theoretical distance of each atom. Vector is indexed from zero.  <a href="#c4260148aa21c7ada7d625bc0c6f2f7a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#94276831221d5693b3017da7fab3ccc8">GetGIVector</a> (std::vector&lt; unsigned int &gt; &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates a set of graph invariant indexes using the graph theoretical distance, number of connected heavy atoms, aromatic boolean, ring boolean, atomic number, and summation of bond orders connected to the atom. Vector is indexed from zero.  <a href="#94276831221d5693b3017da7fab3ccc8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#de880e97f2bdf3c90e91375aec12aaf0">GetGIDVector</a> (std::vector&lt; unsigned int &gt; &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calculates a set of symmetry identifiers for a molecule. Atoms with the same symmetry ID are symmetrically equivalent. Vector is indexed from zero.  <a href="#de880e97f2bdf3c90e91375aec12aaf0"></a><br></td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods to check for existence of properties</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#36d871f2ebeaf5e767ae33ed8d35f849">Has2D</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Are there non-zero coordinates in two dimensions (i.e. X and Y)?  <a href="#36d871f2ebeaf5e767ae33ed8d35f849"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#4aaa8b5151395ad66ecfe896ca8a0114">Has3D</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Are there non-zero coordinates in all three dimensions (i.e. X, Y, Z)?  <a href="#4aaa8b5151395ad66ecfe896ca8a0114"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#bdda89a787d7ae0639d5127c2f6a4dfb">HasNonZeroCoords</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Are there any non-zero coordinates?  <a href="#bdda89a787d7ae0639d5127c2f6a4dfb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#783c51919c69da3287d51f34b2fa53a0">HasAromaticPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2c45d000ac10ad770ec5e5eff97f30">HasSSSRPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#0329d4256b426a4967afa867f415d06b">HasRingAtomsAndBondsPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#0ba2ebe76f1b15c48a8f1538efc8f9b4">HasAtomTypesPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#39df67d7e225b9dd721b9b8c7df809ce">HasChiralityPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#87c2cd2043f749d5433a98df4ad8277d">HasPartialChargesPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#908e2d394d3a47cf821014899344ca37">HasHybridizationPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#7fe699ef7fee62ca46743d6aa78bdea5">HasImplicitValencePerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afddb1ded7f589afbdd56062368602db">HasKekulePerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#fb25b05d950ca109bf9c6333b906a9ee">HasClosureBondsPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#c31a6af8f2b96fa35170523b6318c459">HasChainsPerceived</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#efc6e71556f0cd4afdd34e4a99d06025">HasHydrogensAdded</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#b57a4b5dd9752e593e2fdb80f48909d8">HasAromaticCorrected</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#fc44b8ad27a62b9cfc670d4fd29bb52f">IsCorrectedForPH</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#4a45f2c821b749250e070c3594289103">HasSpinMultiplicityAssigned</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#63258442848bd8e29e0d5224e145ad83">IsChiral</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is this molecule chiral?  <a href="#63258442848bd8e29e0d5224e145ad83"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#31d1053aee208079bcc3c5e1884774df">Empty</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Are there any atoms in this molecule?  <a href="#31d1053aee208079bcc3c5e1884774df"></a><br></td></tr>
<tr><td colspan="2"><div class="groupHeader">Multiple conformer member functions</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#37e5c0caf3b51ae81d8d3abc6ffb1a9c">NumConformers</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#95a50ee3e38bea8779b490626f65fc2e">SetConformers</a> (std::vector&lt; double * &gt; &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#7b80e7015d000221e0cc92fd3cf6f9e4">AddConformer</a> (double *f)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#e4c349e7e3920df72134c0c940318997">SetConformer</a> (int i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#518361c74904754a1dd15a0113ab88b6">CopyConformer</a> (double *, int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#7c142a648229b60ef78ff65eaf33721a">DeleteConformer</a> (int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#eae833c9dcc30e182f18554bd40242d6">GetConformer</a> (int i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#43bacf0671104e33b04835408b5c3785">BeginConformer</a> (std::vector&lt; double * &gt;::iterator &amp;i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#bd4311945a4de0a47d2f036e9632a4b9">NextConformer</a> (std::vector&lt; double * &gt;::iterator &amp;i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; double * &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#5246a44bf82aa31c2f428665db94bfb8">GetConformers</a> ()</td></tr>

<tr><td colspan="2"><div class="groupHeader">Iterator methods</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#6d600e06337a9f68aef36eecc44e1dbe">BeginAtom</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt;::iterator &amp;i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#5d9418cdabdcff9a7d09e75850536674">NextAtom</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt;::iterator &amp;i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#5f49793fba8a21464f530dda058765d2">BeginBond</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> * &gt;::iterator &amp;i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#7e5f04807d937ecd9c9eb2274b49f3fc">NextBond</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> * &gt;::iterator &amp;i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac98c1df75d7d01ae934d1871ec6501b">BeginResidue</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * &gt;::iterator &amp;i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#8b0f9378c39b849144e6ec701677d978">NextResidue</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * &gt;::iterator &amp;i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#67c061a9d850cf30b4bf5ea394760d43">BeginInternalCoord</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;::iterator &amp;i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#6680c695e3cdceb7e42a554a0ffc8a19">NextInternalCoord</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;::iterator &amp;i)</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#3a1dc0419a66d2e7288214342de43b7a">HasFlag</a> (int flag)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#dcdab8f96dc4fdc2940749e527087245">SetFlag</a> (int flag)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Internal Kekulization routines -- see kekulize.cpp and NewPerceiveKekuleBonds()</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#6d03ef3f811fa2c085694ccbf76051d4">start_kekulize</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt; &amp;cycle, std::vector&lt; int &gt; &amp;electron)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Start kekulizing one or a fused set of aromatic ring(s).  <a href="#6d03ef3f811fa2c085694ccbf76051d4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#f07b007c22a084040bc2e91b232a86b5">expand_kekulize</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom1, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom2, std::vector&lt; int &gt; &amp;currentState, std::vector&lt; int &gt; &amp;initState, std::vector&lt; int &gt; &amp;bcurrentState, std::vector&lt; int &gt; &amp;binitState, std::vector&lt; bool &gt; &amp;mark)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">recursively assign single and double bonds according to the electronical state of the atoms of the current bond  <a href="#f07b007c22a084040bc2e91b232a86b5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#f2e4cda76442b795b7e6f5d74dea0df8">getorden</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Give the priority to give two electrons instead of 1.  <a href="#f2e4cda76442b795b7e6f5d74dea0df8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#59660eb26d455ba8d1f6b1d05a4600b9">expandcycle</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;avisit)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Recursively find the aromatic atoms with an aromatic bond to the current atom.  <a href="#59660eb26d455ba8d1f6b1d05a4600b9"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4a61b1d913f2bee1e0ed5d9daf26549">_flags</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">bitfield of flags  <a href="#a4a61b1d913f2bee1e0ed5d9daf26549"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#c23878536c8da0ff97c0985627dd5646">_autoPartialCharge</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assign partial charges automatically.  <a href="#c23878536c8da0ff97c0985627dd5646"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#e1c74119422bd6a52bb7c384b42dca4c">_autoFormalCharge</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assign formal charges automatically.  <a href="#e1c74119422bd6a52bb7c384b42dca4c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#1dda4ed41c70aef0a361682dd9b2b0f9">_title</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Molecule title.  <a href="#1dda4ed41c70aef0a361682dd9b2b0f9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned short int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#601fbf5c8e5b7d92281dbe6a124d7f2c">_dimension</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Dimensionality of coordinates.  <a href="#601fbf5c8e5b7d92281dbe6a124d7f2c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#d93165c379393f8eb17506f1f9820a1a">_energy</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Molecular heat of formation (if applicable).  <a href="#d93165c379393f8eb17506f1f9820a1a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aaeee07c1d80b2638b8b9ace0095c9cd">_totalCharge</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Total charge on the molecule.  <a href="#aaeee07c1d80b2638b8b9ace0095c9cd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#7a92cb97f8aa52f145b2e928cf480a07">_totalSpin</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Total spin on the molecule (if not specified, assumes lowest possible spin).  <a href="#7a92cb97f8aa52f145b2e928cf480a07"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#706bc4f751bf06cf864893451a7d21e4">_c</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">coordinate array  <a href="#706bc4f751bf06cf864893451a7d21e4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; double * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#6fb1d704dcaeb179720ac771745850b1">_vconf</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">vector of conformers  <a href="#6fb1d704dcaeb179720ac771745850b1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned short int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#423d6b01bf56b39dda4f7b6b40d238ba">_natoms</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Number of atoms.  <a href="#423d6b01bf56b39dda4f7b6b40d238ba"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned short int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#fdd8d09e3918503bce7f3dabb3b329b7">_nbonds</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Number of bonds.  <a href="#fdd8d09e3918503bce7f3dabb3b329b7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#e1c29d0efe6187e8726962008c81e956">_residue</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Residue information (if applicable).  <a href="#e1c29d0efe6187e8726962008c81e956"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#6c2a9726c57abf03a40339776f5d9a0b">_internals</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Internal Coordinates (if applicable).  <a href="#6c2a9726c57abf03a40339776f5d9a0b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#f7811cf8aadbf3b3477c560b0ef2f797">_vdata</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Custom data -- see <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> class for more.  <a href="#f7811cf8aadbf3b3477c560b0ef2f797"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned short int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#5db8eb0124fad1bf66ddaf930b4840f0">_mod</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Number of nested calls to <a class="el" href="classOpenBabel_1_1OBMol.shtml#1b5760b4c75b7631fffb54f84140b3e3">BeginModify()</a>.  <a href="#5db8eb0124fad1bf66ddaf930b4840f0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#d424b97b106cf7fce3fee757b9891e7d">_vlock</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#6879e9281c9de472ed9182c0886c59d9">_vatom</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#9c8e30c37e33bb11c5dade3984d71200">_vbond</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Molecule Class. 
<p>
The most important class in Open Babel is <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>, or the molecule class. The <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> class is designed to store all the basic information associated with a molecule, to make manipulations on the connection table of a molecule facile, and to provide member functions which automatically perceive information about a molecule. A guided tour of the <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> class is a good place to start.<p>
An <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> class can be declared: <div class="fragment"><pre class="fragment">      <a class="code" href="classOpenBabel_1_1OBMol.shtml#937a09d86f3f440467334e546a98d8d4">OBMol</a> mol;
</pre></div><p>
For example: <div class="fragment"><pre class="fragment"><span class="preprocessor">      #include &lt;iostream.h&gt;</span>
<span class="preprocessor">      #include "<a class="code" href="mol_8h.shtml">mol.h</a>"</span>
<span class="preprocessor">      #include "<a class="code" href="obconversion_8h.shtml">obconversion.h</a>"</span>
      <span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc,<span class="keywordtype">char</span> **argv)
      {
      OBConversion conv(&amp;cin,&amp;cout);
      <span class="keywordflow">if</span>(conv.SetInAndOutFormats(<span class="stringliteral">"SDF"</span>,<span class="stringliteral">"MOL2"</span>))
      { 
      <a class="code" href="classOpenBabel_1_1OBMol.shtml#937a09d86f3f440467334e546a98d8d4">OBMol</a> mol;
      <span class="keywordflow">if</span>(conv.Read(&amp;mol))
      ...manipulate molecule 
                
      conv-&gt;Write(&amp;mol);
      }
      <span class="keywordflow">return</span>(1);
      }
</pre></div><p>
will read in a molecule in SD file format from stdin (or the C++ equivalent cin) and write a MOL2 format file out to standard out. Additionally, The input and output formats can be altered using the <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> class<p>
Once a molecule has been read into an <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> (or created via other methods) the atoms and bonds can be accessed by the following methods: <div class="fragment"><pre class="fragment">      OBAtom *atom;
      atom = mol.GetAtom(5); <span class="comment">//random access of an atom</span>
</pre></div> or <div class="fragment"><pre class="fragment">      OBBond *bond;
      bond = mol.GetBond(14); <span class="comment">//random access of a bond</span>
</pre></div> or <div class="fragment"><pre class="fragment">      FOR_ATOMS_IN_MOL(atom, mol) <span class="comment">// iterator access (see OBMolAtomIter)</span>
</pre></div> or <div class="fragment"><pre class="fragment">      FOR_BONDS_IN_MOL(bond, mol) <span class="comment">// iterator access (see OBMolBondIter)</span>
</pre></div> It is important to note that atom arrays currently begin at 1 and bond arrays begin at 0. Requesting atom 0 (<div class="fragment"><pre class="fragment">      OBAtom *atom = mol.GetAtom(0); 
</pre></div> will result in an error, but <div class="fragment"><pre class="fragment">      OBBond *bond = mol.GetBond(0);
</pre></div> is perfectly valid. Note that this is expected to change in the near future to simplify coding and improve efficiency.<p>
The ambiguity of numbering issues and off-by-one errors led to the use of iterators in Open Babel. An iterator is essentially just a pointer, but when used in conjunction with Standard Template Library (STL) vectors it provides an unambiguous way to loop over arrays. OBMols store their atom and bond information in STL vectors. Since vectors are template based, a vector of any user defined type can be declared. OBMols declare vector&lt;OBNodeBase*&gt; and vector&lt;OBEdgeBase*&gt; to store atom and bond information. Iterators are then a natural way to loop over the vectors of atoms and bonds.<p>
A variety of predefined iterators have been created to simplify common looping requests (e.g., looping over all atoms in a molecule, bonds to a given atom, etc.)<p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">      #include "<a class="code" href="obiter_8h.shtml">obiter.h</a>"</span>
      ...
      #define <a class="code" href="obiter_8h.shtml#fb051cb17b46d381998c24fc41db2a79">FOR_ATOMS_OF_MOL</a>(a,m)     for( OBMolAtomIter     a(m); a; a++ )
      <span class="preprocessor">#define FOR_BONDS_OF_MOL(b,m)     for( OBMolBondIter     b(m); b; b++ )</span>
<span class="preprocessor"></span><span class="preprocessor">      #define FOR_NBORS_OF_ATOM(a,p)    for( OBAtomAtomIter    a(p); a; a++ )</span>
<span class="preprocessor"></span><span class="preprocessor">      #define FOR_BONDS_OF_ATOM(b,p)    for( OBAtomBondIter    b(p); b; b++ )</span>
<span class="preprocessor"></span><span class="preprocessor">      #define FOR_RESIDUES_OF_MOL(r,m)  for( OBResidueIter     r(m); r; r++ )</span>
<span class="preprocessor"></span><span class="preprocessor">      #define FOR_ATOMS_OF_RESIDUE(a,r) for( OBResidueAtomIter a(r); a; a++ )</span>
<span class="preprocessor">      ...</span>
</pre></div><p>
These convenience functions can be used like so: <div class="fragment"><pre class="fragment"><span class="preprocessor">      #include "<a class="code" href="obiter_8h.shtml">obiter.h</a>"</span>
<span class="preprocessor">      #include "<a class="code" href="mol_8h.shtml">mol.h</a>"</span>

      <a class="code" href="classOpenBabel_1_1OBMol.shtml#937a09d86f3f440467334e546a98d8d4">OBMol</a> mol;
      <span class="keywordtype">double</span> exactMass = 0.0f;
      <a class="code" href="obiter_8h.shtml#fb051cb17b46d381998c24fc41db2a79">FOR_ATOMS_OF_MOL</a>(a, mol)
      {
      exactMass +=  a-&gt;GetExactMass();
      }
</pre></div><p>
Note that with these convenience macros, the iterator "a" (or whichever name you pick) is declared for you -- you do not need to do it beforehand. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="937a09d86f3f440467334e546a98d8d4"></a><!-- doxytag: member="OpenBabel::OBMol::OBMol" ref="937a09d86f3f440467334e546a98d8d4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor. 
<p>

</div>
</div><p>
<a class="anchor" name="afa7e4623d4c3c0305b5523ca8a77e14"></a><!-- doxytag: member="OpenBabel::OBMol::OBMol" ref="afa7e4623d4c3c0305b5523ca8a77e14" args="(const OBMol &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copy constructor <dl class="warning" compact><dt><b>Warning:</b></dt><dd>Currently does not copy all associated <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> This requires a (minor) API change, and will thus only be fixed in 2.1 or later releases. </dd></dl>

</div>
</div><p>
<a class="anchor" name="8df0dd71ac1dba7f7876d6671279d087"></a><!-- doxytag: member="OpenBabel::OBMol::~OBMol" ref="8df0dd71ac1dba7f7876d6671279d087" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="3a1dc0419a66d2e7288214342de43b7a"></a><!-- doxytag: member="OpenBabel::OBMol::HasFlag" ref="3a1dc0419a66d2e7288214342de43b7a" args="(int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasFlag           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>flag</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="dcdab8f96dc4fdc2940749e527087245"></a><!-- doxytag: member="OpenBabel::OBMol::SetFlag" ref="dcdab8f96dc4fdc2940749e527087245" args="(int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetFlag           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>flag</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6d03ef3f811fa2c085694ccbf76051d4"></a><!-- doxytag: member="OpenBabel::OBMol::start_kekulize" ref="6d03ef3f811fa2c085694ccbf76051d4" args="(std::vector&lt; OBAtom * &gt; &amp;cycle, std::vector&lt; int &gt; &amp;electron)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void start_kekulize           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>cycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>electron</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Start kekulizing one or a fused set of aromatic ring(s). 
<p>
The initial electronic state indicates if an atoms must make a double bond or not Kekulizing is attempted recursively for all the atoms bonded to the first atom of the cycle. 
</div>
</div><p>
<a class="anchor" name="f07b007c22a084040bc2e91b232a86b5"></a><!-- doxytag: member="OpenBabel::OBMol::expand_kekulize" ref="f07b007c22a084040bc2e91b232a86b5" args="(OBAtom *atom1, OBAtom *atom2, std::vector&lt; int &gt; &amp;currentState, std::vector&lt; int &gt; &amp;initState, std::vector&lt; int &gt; &amp;bcurrentState, std::vector&lt; int &gt; &amp;binitState, std::vector&lt; bool &gt; &amp;mark)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int expand_kekulize           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>atom1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>atom2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>currentState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>initState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>bcurrentState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>binitState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; bool &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>mark</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
recursively assign single and double bonds according to the electronical state of the atoms of the current bond 
<p>

</div>
</div><p>
<a class="anchor" name="f2e4cda76442b795b7e6f5d74dea0df8"></a><!-- doxytag: member="OpenBabel::OBMol::getorden" ref="f2e4cda76442b795b7e6f5d74dea0df8" args="(OBAtom *atom)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int getorden           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>atom</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Give the priority to give two electrons instead of 1. 
<p>

</div>
</div><p>
<a class="anchor" name="59660eb26d455ba8d1f6b1d05a4600b9"></a><!-- doxytag: member="OpenBabel::OBMol::expandcycle" ref="59660eb26d455ba8d1f6b1d05a4600b9" args="(OBAtom *atom, OBBitVec &amp;avisit)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void expandcycle           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>avisit</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Recursively find the aromatic atoms with an aromatic bond to the current atom. 
<p>

</div>
</div><p>
<a class="anchor" name="9d63c24cbe9dc1f6e82d58da2b67dafa"></a><!-- doxytag: member="OpenBabel::OBMol::operator=" ref="9d63c24cbe9dc1f6e82d58da2b67dafa" args="(const OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp; operator=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Assignment. 
<p>

</div>
</div><p>
<a class="anchor" name="3f9d2bbe4ae3f85ddca39be0a8ff4971"></a><!-- doxytag: member="OpenBabel::OBMol::operator+=" ref="3f9d2bbe4ae3f85ddca39be0a8ff4971" args="(const OBMol &amp;mol)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp; operator+=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="723933398f0402a92916d1cfcb8dadd6"></a><!-- doxytag: member="OpenBabel::OBMol::ReserveAtoms" ref="723933398f0402a92916d1cfcb8dadd6" args="(int natoms)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ReserveAtoms           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>natoms</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fd5176ccf4c318a93379716d48ab01e8"></a><!-- doxytag: member="OpenBabel::OBMol::CreateAtom" ref="fd5176ccf4c318a93379716d48ab01e8" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * CreateAtom           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ed69c2ff7d45271240ee8e33f4344d5a"></a><!-- doxytag: member="OpenBabel::OBMol::CreateBond" ref="ed69c2ff7d45271240ee8e33f4344d5a" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * CreateBond           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="3f8a861c8a4cd42370cda1bceaa68b4c"></a><!-- doxytag: member="OpenBabel::OBMol::DestroyAtom" ref="3f8a861c8a4cd42370cda1bceaa68b4c" args="(OBNodeBase *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DestroyAtom           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6b76a52fe4ad31254f14dddceab59e43"></a><!-- doxytag: member="OpenBabel::OBMol::DestroyBond" ref="6b76a52fe4ad31254f14dddceab59e43" args="(OBEdgeBase *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DestroyBond           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a53209ef174b454eb99e269ef59ebbe0"></a><!-- doxytag: member="OpenBabel::OBMol::AddAtom" ref="a53209ef174b454eb99e269ef59ebbe0" args="(OBAtom &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddAtom           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>atom</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Add an atom to a molecule. 
<p>
Also checks bond_queue for any bonds that should be made to the new atom 
</div>
</div><p>
<a class="anchor" name="f32be65522216c5bbb441dcf89626eb3"></a><!-- doxytag: member="OpenBabel::OBMol::AddBond" ref="f32be65522216c5bbb441dcf89626eb3" args="(int, int, int, int flags=0, int insertpos=-1)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddBond           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>flags</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>insertpos</em> = <code>-1</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c92c32a100a07407535d5412d1a3b3ae"></a><!-- doxytag: member="OpenBabel::OBMol::AddBond" ref="c92c32a100a07407535d5412d1a3b3ae" args="(OBBond &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddBond           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d656115fdd6749ef7ad8394ee687f375"></a><!-- doxytag: member="OpenBabel::OBMol::AddResidue" ref="d656115fdd6749ef7ad8394ee687f375" args="(OBResidue &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddResidue           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="bd2ad51974aaf20356fe5a07628205b9"></a><!-- doxytag: member="OpenBabel::OBMol::InsertAtom" ref="bd2ad51974aaf20356fe5a07628205b9" args="(OBAtom &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool InsertAtom           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8a5e93a313ba3a23f0f206363392c0e9"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteAtom" ref="8a5e93a313ba3a23f0f206363392c0e9" args="(OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteAtom           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1d6c2cf6e5b8ccca827ea3cb0c42db33"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteBond" ref="1d6c2cf6e5b8ccca827ea3cb0c42db33" args="(OBBond *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteBond           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="307d74a5a8d1709bbc14e5e6b47d0d02"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteResidue" ref="307d74a5a8d1709bbc14e5e6b47d0d02" args="(OBResidue *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteResidue           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="e215a7452ce2f50590d64af7a5558f0c"></a><!-- doxytag: member="OpenBabel::OBMol::NewAtom" ref="e215a7452ce2f50590d64af7a5558f0c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * NewAtom           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get a new atom to add to a molecule. 
<p>
Also checks bond_queue for any bonds that should be made to the new atom 
</div>
</div><p>
<a class="anchor" name="7662758d1fe46ab3a3392b1970c6a656"></a><!-- doxytag: member="OpenBabel::OBMol::NewResidue" ref="7662758d1fe46ab3a3392b1970c6a656" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * NewResidue           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1b5760b4c75b7631fffb54f84140b3e3"></a><!-- doxytag: member="OpenBabel::OBMol::BeginModify" ref="1b5760b4c75b7631fffb54f84140b3e3" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void BeginModify           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Call when making many modifications -- clears conformer/rotomer data. 
<p>

</div>
</div><p>
<a class="anchor" name="c32ffc23db124156a953e8e5cb923ccd"></a><!-- doxytag: member="OpenBabel::OBMol::EndModify" ref="c32ffc23db124156a953e8e5cb923ccd" args="(bool nukePerceivedData=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void EndModify           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>nukePerceivedData</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Call when done with modificaions -- re-perceive data as needed. 
<p>

</div>
</div><p>
<a class="anchor" name="c5103c8b3cbe4f961bd353209bf2860e"></a><!-- doxytag: member="OpenBabel::OBMol::GetMod" ref="c5103c8b3cbe4f961bd353209bf2860e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetMod           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="dc36b31f851665247f3c576cdd7aa0af"></a><!-- doxytag: member="OpenBabel::OBMol::IncrementMod" ref="dc36b31f851665247f3c576cdd7aa0af" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void IncrementMod           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8efda275b959c94452e1ded1f568c934"></a><!-- doxytag: member="OpenBabel::OBMol::DecrementMod" ref="8efda275b959c94452e1ded1f568c934" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DecrementMod           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1e0f46181273107bdbf5b22ca78755ab"></a><!-- doxytag: member="OpenBabel::OBMol::HasData" ref="1e0f46181273107bdbf5b22ca78755ab" args="(std::string &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="01b429ffcaf47cf265acd439ed2faca0"></a><!-- doxytag: member="OpenBabel::OBMol::HasData" ref="01b429ffcaf47cf265acd439ed2faca0" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="54e7fef374c6403d539d4ae484d3024c"></a><!-- doxytag: member="OpenBabel::OBMol::HasData" ref="54e7fef374c6403d539d4ae484d3024c" args="(unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>type</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="797e5b4d20b6233062d2fdba78a08e06"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteData" ref="797e5b4d20b6233062d2fdba78a08e06" args="(unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>type</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b586df65e3f115b69510820b34098ce9"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteData" ref="b586df65e3f115b69510820b34098ce9" args="(OBGenericData *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="af61a3ecb8f2926aaf117299388d43c2"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteData" ref="af61a3ecb8f2926aaf117299388d43c2" args="(std::vector&lt; OBGenericData * &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="db6b0ec89bfea783825b3b466e4dbc00"></a><!-- doxytag: member="OpenBabel::OBMol::SetData" ref="db6b0ec89bfea783825b3b466e4dbc00" args="(OBGenericData *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetData           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td>
          <td class="paramname"> <em>d</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fd4740dfd6a433f49aff61f30a143e2b"></a><!-- doxytag: member="OpenBabel::OBMol::DataSize" ref="fd4740dfd6a433f49aff61f30a143e2b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int DataSize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> items attached to this molecule. </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="ff0af110d6024838f92e367927ac4a69"></a><!-- doxytag: member="OpenBabel::OBMol::GetData" ref="ff0af110d6024838f92e367927ac4a69" args="(unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>type</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f129944bef0a7bce21f2232108fec39a"></a><!-- doxytag: member="OpenBabel::OBMol::GetData" ref="f129944bef0a7bce21f2232108fec39a" args="(std::string &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the value given an attribute name. 
<p>

</div>
</div><p>
<a class="anchor" name="483b277678a8ca48998742c80985fd0b"></a><!-- doxytag: member="OpenBabel::OBMol::GetData" ref="483b277678a8ca48998742c80985fd0b" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the value given an attribute name. 
<p>

</div>
</div><p>
<a class="anchor" name="90a551ff0a0ed3fa58745dff0ecacdaa"></a><!-- doxytag: member="OpenBabel::OBMol::GetData" ref="90a551ff0a0ed3fa58745dff0ecacdaa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt;&amp; GetData           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a53a73875031660f8d63e963a248df9f"></a><!-- doxytag: member="OpenBabel::OBMol::BeginData" ref="a53a73875031660f8d63e963a248df9f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt;::iterator BeginData           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="23b691092f712f20cf57065f54d2357a"></a><!-- doxytag: member="OpenBabel::OBMol::EndData" ref="23b691092f712f20cf57065f54d2357a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt;::iterator EndData           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ba761a006b56d62912a91e259ce11bb1"></a><!-- doxytag: member="OpenBabel::OBMol::GetFlags" ref="ba761a006b56d62912a91e259ce11bb1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetFlags           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d4281d49a1f2b0228e4fdaff01762375"></a><!-- doxytag: member="OpenBabel::OBMol::GetTitle" ref="d4281d49a1f2b0228e4fdaff01762375" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* GetTitle           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the title of this molecule (often the filename) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="2f0695eb7d6ff6321032d88655ae8d25"></a><!-- doxytag: member="OpenBabel::OBMol::NumAtoms" ref="2f0695eb7d6ff6321032d88655ae8d25" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumAtoms           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of atoms (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> children) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="7358c2c15c4c0d88ae2489f586bc8e0b"></a><!-- doxytag: member="OpenBabel::OBMol::NumBonds" ref="7358c2c15c4c0d88ae2489f586bc8e0b" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumBonds           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of bonds (i.e. <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> children) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="fa92da4c4cfc01b7c0d4385f487b42a4"></a><!-- doxytag: member="OpenBabel::OBMol::NumHvyAtoms" ref="fa92da4c4cfc01b7c0d4385f487b42a4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumHvyAtoms           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of non-hydrogen atoms </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="f641753d0dbc017405280791048f0d88"></a><!-- doxytag: member="OpenBabel::OBMol::NumResidues" ref="f641753d0dbc017405280791048f0d88" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumResidues           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of residues (i.e. <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> substituents) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="4b7d18f81253efd82ca54e4a9c0aae65"></a><!-- doxytag: member="OpenBabel::OBMol::NumRotors" ref="4b7d18f81253efd82ca54e4a9c0aae65" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumRotors           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of rotatble bonds. See <a class="el" href="classOpenBabel_1_1OBBond.shtml#0919315f7a2fd68937c561186be76e44">OBBond::IsRotor()</a> for details </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="400c1ca5057984dd7e6b1a92be27c441"></a><!-- doxytag: member="OpenBabel::OBMol::GetAtom" ref="400c1ca5057984dd7e6b1a92be27c441" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * GetAtom           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>idx</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns a pointer to the atom after a safety check 0 &lt; idx &lt;= NumAtoms 
</div>
</div><p>
<a class="anchor" name="ab5e1321f7a8c6a82feeb5279f44fe60"></a><!-- doxytag: member="OpenBabel::OBMol::GetFirstAtom" ref="ab5e1321f7a8c6a82feeb5279f44fe60" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * GetFirstAtom           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2173a88275e6c58feeb5fd84ad9d1137"></a><!-- doxytag: member="OpenBabel::OBMol::GetBond" ref="2173a88275e6c58feeb5fd84ad9d1137" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * GetBond           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>idx</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns a pointer to the bond after a safety check 0 &lt;= idx &lt; NumBonds 
</div>
</div><p>
<a class="anchor" name="877ebd9ad23a6320374308e69bb26ea4"></a><!-- doxytag: member="OpenBabel::OBMol::GetBond" ref="877ebd9ad23a6320374308e69bb26ea4" args="(int, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * GetBond           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ee374d996046688f9cdb77e9a2eb2775"></a><!-- doxytag: member="OpenBabel::OBMol::GetBond" ref="ee374d996046688f9cdb77e9a2eb2775" args="(OBAtom *, OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * GetBond           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d92709d2953323ae7dd751ce40215d2d"></a><!-- doxytag: member="OpenBabel::OBMol::GetResidue" ref="d92709d2953323ae7dd751ce40215d2d" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * GetResidue           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f5afa8a0742e0238f3fd92ada82f079d"></a><!-- doxytag: member="OpenBabel::OBMol::GetInternalCoord" ref="f5afa8a0742e0238f3fd92ada82f079d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt; GetInternalCoord           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="401a725a0efbc20c49783f176d78e6a7"></a><!-- doxytag: member="OpenBabel::OBMol::GetTorsion" ref="401a725a0efbc20c49783f176d78e6a7" args="(int, int, int, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetTorsion           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the dihedral angle between the four atoms supplied a1-a2-a3-a4) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="1aebfc2249c806ad2305cce9ecc379f1"></a><!-- doxytag: member="OpenBabel::OBMol::GetTorsion" ref="1aebfc2249c806ad2305cce9ecc379f1" args="(OBAtom *, OBAtom *, OBAtom *, OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetTorsion           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the dihedral angle between the four atoms supplied a1-a2-a3-a4) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="7adc12bff502264eaebf537a5e28a43c"></a><!-- doxytag: member="OpenBabel::OBMol::GetFormula" ref="7adc12bff502264eaebf537a5e28a43c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string GetFormula           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the stochoimetric formula (e.g., C4H6O) </dd></dl>

<p>
Stochoimetric formula (e.g., C4H6O). This is either set by <a class="el" href="classOpenBabel_1_1OBMol.shtml#0a4b32a3135f26595bdd260539256c67">OBMol::SetFormula()</a> or generated on-the-fly using the "Hill order" -- i.e., C first if present, then H if present all other elements in alphabetical order. 
</div>
</div><p>
<a class="anchor" name="4dcfbb9780f44d5fca2effbc30b17ce0"></a><!-- doxytag: member="OpenBabel::OBMol::GetEnergy" ref="4dcfbb9780f44d5fca2effbc30b17ce0" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetEnergy           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the heat of formation for this molecule (in kcal/mol) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="065d867e0f04048bc005cd306f5e1759"></a><!-- doxytag: member="OpenBabel::OBMol::GetMolWt" ref="065d867e0f04048bc005cd306f5e1759" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetMolWt           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the standard molar mass given by IUPAC atomic masses (amu) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="b2945776a4f01d50e2934b4742f484eb"></a><!-- doxytag: member="OpenBabel::OBMol::GetExactMass" ref="b2945776a4f01d50e2934b4742f484eb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetExactMass           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the mass given by isotopes (or most abundant isotope, if not specified) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="b78d46b60f04702fa6f450ef6f8dae62"></a><!-- doxytag: member="OpenBabel::OBMol::GetTotalCharge" ref="b78d46b60f04702fa6f450ef6f8dae62" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetTotalCharge           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the total charge on this molecule (i.e., 0 = neutral, +1, -1...) </dd></dl>

<p>
Returns the total molecular charge -- if it has not previously been set it is calculated from the atomic formal charge information. (This may or may not be correct!) If you set atomic charges with <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a1d084182d025e6fa000b928807d7689">OBAtom::SetFormalCharge()</a> you really should set the molecular charge with <a class="el" href="classOpenBabel_1_1OBMol.shtml#58b360590ab212860dc26812ce38057d">OBMol::SetTotalCharge()</a> 
</div>
</div><p>
<a class="anchor" name="a431b859ed26f5a45e6ddc3448da1d1f"></a><!-- doxytag: member="OpenBabel::OBMol::GetTotalSpinMultiplicity" ref="a431b859ed26f5a45e6ddc3448da1d1f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetTotalSpinMultiplicity           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the total spin on this molecule (i.e., 1 = singlet, 2 = doublet...) </dd></dl>

<p>
Returns the total spin multiplicity -- if it has not previously been set it is calculated from the atomic spin multiplicity information assuming the high-spin case (i.e. it simply sums the atomic spins, making no attempt to pair spins). However, if you set atomic spins with <a class="el" href="classOpenBabel_1_1OBAtom.shtml#299285ee1effd21803b3c042a376e149">OBAtom::SetSpinMultiplicity()</a> you really should set the molecular spin with <a class="el" href="classOpenBabel_1_1OBMol.shtml#2b169dc172b11341c8fa47da0bfc16f8">OBMol::SetTotalSpinMultiplicity()</a> 
</div>
</div><p>
<a class="anchor" name="d646045c7f735c9ef05ba9e4bb768b7c"></a><!-- doxytag: member="OpenBabel::OBMol::GetDimension" ref="d646045c7f735c9ef05ba9e4bb768b7c" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int GetDimension           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the dimensionality of coordinates (i.e., 0 = unknown or no coord, 2=2D, 3=3D) </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="d11003513310725bd54265ef5bf004c0"></a><!-- doxytag: member="OpenBabel::OBMol::GetCoordinates" ref="d11003513310725bd54265ef5bf004c0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* GetCoordinates           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0f6bce457ef6f963b8e4ba7c4be23775"></a><!-- doxytag: member="OpenBabel::OBMol::GetSSSR" ref="0f6bce457ef6f963b8e4ba7c4be23775" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp; GetSSSR           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Implements <a href="http://qsar.sourceforge.net/dicts/blue-obelisk/index.xhtml#findSmallestSetOfSmallestRings">blue-obelisk:findSmallestSetOfSmallestRings</a>. 
<p>

</div>
</div><p>
<a class="anchor" name="9f801729475d1d17415af6376458c81e"></a><!-- doxytag: member="OpenBabel::OBMol::AutomaticFormalCharge" ref="9f801729475d1d17415af6376458c81e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AutomaticFormalCharge           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the current flag for whether formal charges are set with pH correction. 
<p>

</div>
</div><p>
<a class="anchor" name="f2ee11d3efe6526c2eb352bb67684e6c"></a><!-- doxytag: member="OpenBabel::OBMol::AutomaticPartialCharge" ref="f2ee11d3efe6526c2eb352bb67684e6c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AutomaticPartialCharge           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the current flag for whether partial charges are auto-determined. 
<p>

</div>
</div><p>
<a class="anchor" name="cfe3b729dc90c4c5e21684e3a60653af"></a><!-- doxytag: member="OpenBabel::OBMol::SetTitle" ref="cfe3b729dc90c4c5e21684e3a60653af" args="(const char *title)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTitle           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>title</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="667324c365d3b6f20d17221295c3a89e"></a><!-- doxytag: member="OpenBabel::OBMol::SetTitle" ref="667324c365d3b6f20d17221295c3a89e" args="(std::string &amp;title)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTitle           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>title</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0a4b32a3135f26595bdd260539256c67"></a><!-- doxytag: member="OpenBabel::OBMol::SetFormula" ref="0a4b32a3135f26595bdd260539256c67" args="(std::string molFormula)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetFormula           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>molFormula</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the stochiometric formula for this molecule. 
<p>

</div>
</div><p>
<a class="anchor" name="b78fa0a100d47ad2beb88c7cabb80e62"></a><!-- doxytag: member="OpenBabel::OBMol::SetEnergy" ref="b78fa0a100d47ad2beb88c7cabb80e62" args="(double energy)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetEnergy           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>energy</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the heat of formation for this molecule (in kcal/mol). 
<p>

</div>
</div><p>
<a class="anchor" name="dc2702cffcab0a0d6907958e3327284b"></a><!-- doxytag: member="OpenBabel::OBMol::SetDimension" ref="dc2702cffcab0a0d6907958e3327284b" args="(unsigned short int d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetDimension           </td>
          <td>(</td>
          <td class="paramtype">unsigned short int&nbsp;</td>
          <td class="paramname"> <em>d</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the dimension of this molecule (i.e., 0, 1 , 2, 3). 
<p>

</div>
</div><p>
<a class="anchor" name="58b360590ab212860dc26812ce38057d"></a><!-- doxytag: member="OpenBabel::OBMol::SetTotalCharge" ref="58b360590ab212860dc26812ce38057d" args="(int charge)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTotalCharge           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>charge</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2b169dc172b11341c8fa47da0bfc16f8"></a><!-- doxytag: member="OpenBabel::OBMol::SetTotalSpinMultiplicity" ref="2b169dc172b11341c8fa47da0bfc16f8" args="(unsigned int spin)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTotalSpinMultiplicity           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>spin</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="50a6320395d2466d277dc42f872c50f8"></a><!-- doxytag: member="OpenBabel::OBMol::SetInternalCoord" ref="50a6320395d2466d277dc42f872c50f8" args="(std::vector&lt; OBInternalCoord * &gt; int_coord)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetInternalCoord           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;&nbsp;</td>
          <td class="paramname"> <em>int_coord</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="31e0990c833c415708b3fc515dbb35d5"></a><!-- doxytag: member="OpenBabel::OBMol::SetAutomaticFormalCharge" ref="31e0990c833c415708b3fc515dbb35d5" args="(bool val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAutomaticFormalCharge           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>val</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the flag for determining automatic formal charges with pH (default=true). 
<p>

</div>
</div><p>
<a class="anchor" name="a8df95db3695e5e7ce263c484ce5533d"></a><!-- doxytag: member="OpenBabel::OBMol::SetAutomaticPartialCharge" ref="a8df95db3695e5e7ce263c484ce5533d" args="(bool val)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAutomaticPartialCharge           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>val</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the flag for determining partial charges automatically (default=true). 
<p>

</div>
</div><p>
<a class="anchor" name="ecd431b2cfaefa64d54c2dc4088551fb"></a><!-- doxytag: member="OpenBabel::OBMol::SetAromaticPerceived" ref="ecd431b2cfaefa64d54c2dc4088551fb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAromaticPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Mark that aromaticity has been perceived for this molecule (see <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>). 
<p>

</div>
</div><p>
<a class="anchor" name="ba303a094727738eb901cafbecd7c196"></a><!-- doxytag: member="OpenBabel::OBMol::SetSSSRPerceived" ref="ba303a094727738eb901cafbecd7c196" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetSSSRPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Mark that Smallest Set of Smallest Rings has been run (see <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> class). 
<p>

</div>
</div><p>
<a class="anchor" name="0656401ba8b19bc9b9f2d3e8e833d3aa"></a><!-- doxytag: member="OpenBabel::OBMol::SetRingAtomsAndBondsPerceived" ref="0656401ba8b19bc9b9f2d3e8e833d3aa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRingAtomsAndBondsPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Mark that rings have been perceived (see <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> class for details). 
<p>

</div>
</div><p>
<a class="anchor" name="a809ea95ee07e61c6dc00ae710d8a749"></a><!-- doxytag: member="OpenBabel::OBMol::SetAtomTypesPerceived" ref="a809ea95ee07e61c6dc00ae710d8a749" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAtomTypesPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Mark that atom types have been perceived (see <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> for details). 
<p>

</div>
</div><p>
<a class="anchor" name="537294f8e96a7ec5263a79de7454326e"></a><!-- doxytag: member="OpenBabel::OBMol::SetChainsPerceived" ref="537294f8e96a7ec5263a79de7454326e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetChainsPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Mark that chains and residues have been perceived (see <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a>). 
<p>

</div>
</div><p>
<a class="anchor" name="608e6f965afea1f4f64cb0f499a0cb27"></a><!-- doxytag: member="OpenBabel::OBMol::SetChiralityPerceived" ref="608e6f965afea1f4f64cb0f499a0cb27" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetChiralityPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Mark that chirality has been perceived. 
<p>

</div>
</div><p>
<a class="anchor" name="00fd4c76a7513a9c8087d975f5d8a51b"></a><!-- doxytag: member="OpenBabel::OBMol::SetPartialChargesPerceived" ref="00fd4c76a7513a9c8087d975f5d8a51b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetPartialChargesPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Mark that partial charges have been assigned. 
<p>

</div>
</div><p>
<a class="anchor" name="4b93b72694e8a9a970eee7f0b65ecf9a"></a><!-- doxytag: member="OpenBabel::OBMol::SetHybridizationPerceived" ref="4b93b72694e8a9a970eee7f0b65ecf9a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetHybridizationPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9ecfb96410199c294c003f975d870832"></a><!-- doxytag: member="OpenBabel::OBMol::SetImplicitValencePerceived" ref="9ecfb96410199c294c003f975d870832" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetImplicitValencePerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1e298bbe286ab2c5a6f3b086a07b1a2b"></a><!-- doxytag: member="OpenBabel::OBMol::SetKekulePerceived" ref="1e298bbe286ab2c5a6f3b086a07b1a2b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetKekulePerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7900736a9f73a041ab8bade19be84cc9"></a><!-- doxytag: member="OpenBabel::OBMol::SetClosureBondsPerceived" ref="7900736a9f73a041ab8bade19be84cc9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetClosureBondsPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="47b63124c405f9c2ecdb766c6de9c56e"></a><!-- doxytag: member="OpenBabel::OBMol::SetHydrogensAdded" ref="47b63124c405f9c2ecdb766c6de9c56e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetHydrogensAdded           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f56db37c6a9f7049ed16469ab0a270c2"></a><!-- doxytag: member="OpenBabel::OBMol::SetCorrectedForPH" ref="f56db37c6a9f7049ed16469ab0a270c2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetCorrectedForPH           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6438e097839dbc98916fb00a3dc67305"></a><!-- doxytag: member="OpenBabel::OBMol::SetAromaticCorrected" ref="6438e097839dbc98916fb00a3dc67305" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAromaticCorrected           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2c81eeba803bc59d6c40f97b0e0e17fd"></a><!-- doxytag: member="OpenBabel::OBMol::SetSpinMultiplicityAssigned" ref="2c81eeba803bc59d6c40f97b0e0e17fd" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetSpinMultiplicityAssigned           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b0922e1fa0939499c024e1006433adf3"></a><!-- doxytag: member="OpenBabel::OBMol::SetFlags" ref="b0922e1fa0939499c024e1006433adf3" args="(int flags)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetFlags           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>flags</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="88f39becfe74f62c9d0ffedfb4098b77"></a><!-- doxytag: member="OpenBabel::OBMol::UnsetAromaticPerceived" ref="88f39becfe74f62c9d0ffedfb4098b77" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetAromaticPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0b8a9f6292b91ec5c4022a487e9d6092"></a><!-- doxytag: member="OpenBabel::OBMol::UnsetPartialChargesPerceived" ref="0b8a9f6292b91ec5c4022a487e9d6092" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetPartialChargesPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f673e91c4869ca8c1057f006d4f06dae"></a><!-- doxytag: member="OpenBabel::OBMol::UnsetImplicitValencePerceived" ref="f673e91c4869ca8c1057f006d4f06dae" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetImplicitValencePerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="401b99defa8a57195dc40a2604cee115"></a><!-- doxytag: member="OpenBabel::OBMol::UnsetFlag" ref="401b99defa8a57195dc40a2604cee115" args="(int flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetFlag           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>flag</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="035de6b4d4b6834f08d08940911f645d"></a><!-- doxytag: member="OpenBabel::OBMol::DoTransformations" ref="035de6b4d4b6834f08d08940911f645d" args="(const std::map&lt; std::string, std::string &gt; *pOptions)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> * DoTransformations           </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::string &gt; *&nbsp;</td>
          <td class="paramname"> <em>pOptions</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#85efd9cd89e1611737080229ec6cc38b">OBBase</a>.
</div>
</div><p>
<a class="anchor" name="b72bba66cc9e40fb3b657a30d87bbe6d"></a><!-- doxytag: member="OpenBabel::OBMol::ClassDescription" ref="b72bba66cc9e40fb3b657a30d87bbe6d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * ClassDescription           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#6bb6ed5c064e3957d8dd03aba51e61f7">OBBase</a>.
</div>
</div><p>
<a class="anchor" name="d12fd937da5f4b0c4562888252fe214b"></a><!-- doxytag: member="OpenBabel::OBMol::Clear" ref="d12fd937da5f4b0c4562888252fe214b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Clear           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Clear all information from a molecule. 
<p>

</div>
</div><p>
<a class="anchor" name="a1eaa18d216bd6e5a49312e6acec9714"></a><!-- doxytag: member="OpenBabel::OBMol::RenumberAtoms" ref="a1eaa18d216bd6e5a49312e6acec9714" args="(std::vector&lt; OBNodeBase * &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RenumberAtoms           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Renumber the atoms of this molecule according to the order in the supplied vector. 
<p>
Renumber the atoms in this molecule according to the order in the supplied vector. This will return without action if the supplied vector is empty or does not have the same number of atoms as the molecule. 
</div>
</div><p>
<a class="anchor" name="751725f02bf62696515d79608198cd59"></a><!-- doxytag: member="OpenBabel::OBMol::ToInertialFrame" ref="751725f02bf62696515d79608198cd59" args="(int conf, double *rmat)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToInertialFrame           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>conf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>rmat</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Translate one conformer and rotate by a rotation matrix (which is returned) to the inertial frame-of-reference. 
<p>

</div>
</div><p>
<a class="anchor" name="8122f52665d60a1e5e56578561bd36b3"></a><!-- doxytag: member="OpenBabel::OBMol::ToInertialFrame" ref="8122f52665d60a1e5e56578561bd36b3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToInertialFrame           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Translate all conformers to the inertial frame-of-reference. 
<p>

</div>
</div><p>
<a class="anchor" name="6ac0385e87d0a56901913e5f8049e45f"></a><!-- doxytag: member="OpenBabel::OBMol::Translate" ref="6ac0385e87d0a56901913e5f8049e45f" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Translate           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Translates all conformers in the molecule by the supplied vector. 
<p>
this method adds the vector v to all atom positions in all conformers 
</div>
</div><p>
<a class="anchor" name="dad8d93db1fadf354b6f51687335fcb9"></a><!-- doxytag: member="OpenBabel::OBMol::Translate" ref="dad8d93db1fadf354b6f51687335fcb9" args="(const vector3 &amp;v, int conf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Translate           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>nconf</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Translates one conformer in the molecule by the supplied vector. 
<p>
this method adds the vector v to all atom positions in the conformer nconf. If nconf == OB_CURRENT_CONFORMER, then the atom positions in the current conformer are translated. 
</div>
</div><p>
<a class="anchor" name="e330819c26c418de3a2c995fd191807b"></a><!-- doxytag: member="OpenBabel::OBMol::Rotate" ref="e330819c26c418de3a2c995fd191807b" args="(const double u[3][3])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rotate           </td>
          <td>(</td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>u</em>[3][3]          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="3494940b2239a5f427061d2902573efd"></a><!-- doxytag: member="OpenBabel::OBMol::Rotate" ref="3494940b2239a5f427061d2902573efd" args="(const double m[9])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rotate           </td>
          <td>(</td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>m</em>[9]          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7a6cf5e812be471e72ecac3ee5d0bc46"></a><!-- doxytag: member="OpenBabel::OBMol::Rotate" ref="7a6cf5e812be471e72ecac3ee5d0bc46" args="(const double m[9], int nconf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rotate           </td>
          <td>(</td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>m</em>[9], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>nconf</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b9f6ba6fae7e12d0f61f5fd8e746aaf3"></a><!-- doxytag: member="OpenBabel::OBMol::Center" ref="b9f6ba6fae7e12d0f61f5fd8e746aaf3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Center           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Translate to the center of all coordinates (for this conformer). 
<p>

</div>
</div><p>
<a class="anchor" name="457c69b9a377efcbdb9e8be871f17fc2"></a><!-- doxytag: member="OpenBabel::OBMol::Kekulize" ref="457c69b9a377efcbdb9e8be871f17fc2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Kekulize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Transform to standard Kekule bond structure (presumably from an aromatic form). 
<p>

</div>
</div><p>
<a class="anchor" name="1e9f06170626de367fba48ebbacd6f0e"></a><!-- doxytag: member="OpenBabel::OBMol::PerceiveKekuleBonds" ref="1e9f06170626de367fba48ebbacd6f0e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool PerceiveKekuleBonds           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b74a82552a9576514b189e2a265d5f5a"></a><!-- doxytag: member="OpenBabel::OBMol::NewPerceiveKekuleBonds" ref="b74a82552a9576514b189e2a265d5f5a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void NewPerceiveKekuleBonds           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Kekulize aromatic rings without using implicit valence. 
<p>
This new perceive kekule bonds function has been especifically designed to handle molecule files without explicit hydrogens such as pdb or xyz. The function does not rely on GetImplicitValence function The function looks for groups of aromatic cycle For each group it tries to guess the number of electrons given by each atom in order to satisfy the huckel (4n+2) rule If the huckel rule cannot be satisfied the algorithm try with its best alternative guess Then it recursively walk on the atoms of the cycle and assign single and double bonds 
</div>
</div><p>
<a class="anchor" name="925b41d42ddf14c12b675d32bdf5e948"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteHydrogen" ref="925b41d42ddf14c12b675d32bdf5e948" args="(OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteHydrogen           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4e2ddc39752d20fabcda1afc1cc4e8e4"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteHydrogens" ref="4e2ddc39752d20fabcda1afc1cc4e8e4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteHydrogens           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ce02501ed235e4e6c37dca0585bb46bf"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteHydrogens" ref="ce02501ed235e4e6c37dca0585bb46bf" args="(OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteHydrogens           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2993ead33ec2a4b15dd536d798ff844d"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteNonPolarHydrogens" ref="2993ead33ec2a4b15dd536d798ff844d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteNonPolarHydrogens           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fef8da7507d0f5e257d441e0dbe73a71"></a><!-- doxytag: member="OpenBabel::OBMol::AddHydrogens" ref="fef8da7507d0f5e257d441e0dbe73a71" args="(bool polaronly=false, bool correctForPH=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddHydrogens           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>polaronly</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>correctForPH</em> = <code>true</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1befb9ee43954207d09e3229e4b5753b"></a><!-- doxytag: member="OpenBabel::OBMol::AddHydrogens" ref="1befb9ee43954207d09e3229e4b5753b" args="(OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddHydrogens           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9c3e3f1fa320501c56cb2b7fe4d6be34"></a><!-- doxytag: member="OpenBabel::OBMol::AddPolarHydrogens" ref="9c3e3f1fa320501c56cb2b7fe4d6be34" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddPolarHydrogens           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ed4ac900f85a661c5124dd806b967101"></a><!-- doxytag: member="OpenBabel::OBMol::StripSalts" ref="ed4ac900f85a661c5124dd806b967101" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool StripSalts           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Deletes all atoms except for the largest contiguous fragment. 
<p>

</div>
</div><p>
<a class="anchor" name="cba192e5cf0db39c2ed6af7ba05328dc"></a><!-- doxytag: member="OpenBabel::OBMol::ConvertDativeBonds" ref="cba192e5cf0db39c2ed6af7ba05328dc" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ConvertDativeBonds           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Converts for instance [N+]([O-])=O to N(=O)=O. 
<p>

</div>
</div><p>
<a class="anchor" name="6f282bb48885fa887dd2a65b546ef1b4"></a><!-- doxytag: member="OpenBabel::OBMol::CorrectForPH" ref="6f282bb48885fa887dd2a65b546ef1b4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CorrectForPH           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1a5d93623aa8ebca2bf30ef66054a9dc"></a><!-- doxytag: member="OpenBabel::OBMol::AssignSpinMultiplicity" ref="1a5d93623aa8ebca2bf30ef66054a9dc" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AssignSpinMultiplicity           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
set spin multiplicity for H-deficient atoms 
<p>

</div>
</div><p>
<a class="anchor" name="9e896374801d7ea5f8986ecb2b54d65b"></a><!-- doxytag: member="OpenBabel::OBMol::Center" ref="9e896374801d7ea5f8986ecb2b54d65b" args="(int nconf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> Center           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>nconf</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="90c659bf5589f52f5174d6d7dce0c9a1"></a><!-- doxytag: member="OpenBabel::OBMol::SetTorsion" ref="90c659bf5589f52f5174d6d7dce0c9a1" args="(OBAtom *, OBAtom *, OBAtom *, OBAtom *, double)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTorsion           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the torsion defined by these atoms, rotating bonded neighbors. 
<p>

</div>
</div><p>
<a class="anchor" name="d4e3eab0d027bd8e503d02e7261ca477"></a><!-- doxytag: member="OpenBabel::OBMol::FindSSSR" ref="d4e3eab0d027bd8e503d02e7261ca477" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindSSSR           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Find Smallest Set of Smallest Rings (see <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> class for more details). 
<p>

</div>
</div><p>
<a class="anchor" name="e58b3f3da59d333ffa0d5b0f005f3526"></a><!-- doxytag: member="OpenBabel::OBMol::FindRingAtomsAndBonds" ref="e58b3f3da59d333ffa0d5b0f005f3526" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindRingAtomsAndBonds           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="3368586a5a86bd9684f4b25ac53d2e44"></a><!-- doxytag: member="OpenBabel::OBMol::FindChiralCenters" ref="3368586a5a86bd9684f4b25ac53d2e44" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindChiralCenters           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets atom-&gt;<a class="el" href="classOpenBabel_1_1OBMol.shtml#63258442848bd8e29e0d5224e145ad83">IsChiral()</a> to true for chiral atoms. 
<p>

</div>
</div><p>
<a class="anchor" name="bdba2f11e719fbadbc250b3608c1ff5f"></a><!-- doxytag: member="OpenBabel::OBMol::FindChildren" ref="bdba2f11e719fbadbc250b3608c1ff5f" args="(std::vector&lt; int &gt; &amp;, int, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindChildren           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>children</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>second</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
locates all atoms for which there exists a path to 'second' without going through 'first' children must not include 'second' 
</div>
</div><p>
<a class="anchor" name="ce0b2f6d873cea9cc52ca6ac45c01e69"></a><!-- doxytag: member="OpenBabel::OBMol::FindChildren" ref="ce0b2f6d873cea9cc52ca6ac45c01e69" args="(std::vector&lt; OBAtom * &gt; &amp;, OBAtom *, OBAtom *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindChildren           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>children</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>bgn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname"> <em>end</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
locates all atoms for which there exists a path to 'end' without going through 'bgn' children must not include 'end' 
</div>
</div><p>
<a class="anchor" name="514b45960646c6f3f911c9430851d405"></a><!-- doxytag: member="OpenBabel::OBMol::FindLargestFragment" ref="514b45960646c6f3f911c9430851d405" args="(OBBitVec &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindLargestFragment           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f74913b3d793c41d1f005afdba11da35"></a><!-- doxytag: member="OpenBabel::OBMol::ContigFragList" ref="f74913b3d793c41d1f005afdba11da35" args="(std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ContigFragList           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sort a list of contig fragments by size from largest to smallest Each vector&lt;int&gt; contains the atom numbers of a contig fragment 
</div>
</div><p>
<a class="anchor" name="228de88f48ee3ca6a11554b74d82dedd"></a><!-- doxytag: member="OpenBabel::OBMol::Align" ref="228de88f48ee3ca6a11554b74d82dedd" args="(OBAtom *, OBAtom *, vector3 &amp;, vector3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Align           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Aligns atom a on p1 and atom b along p1-&gt;p2 vector. 
<p>

</div>
</div><p>
<a class="anchor" name="31d05972f7454e791641c4a7d0071d12"></a><!-- doxytag: member="OpenBabel::OBMol::ConnectTheDots" ref="31d05972f7454e791641c4a7d0071d12" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ConnectTheDots           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Adds single bonds based on atom proximity. 
<p>
This method adds single bonds between all atoms closer than their combined atomic covalent radii, then "cleans up" making sure bonded atoms are not closer than 0.4A and the atom does not exceed its valence. It implements blue-obelisk:rebondFrom3DCoordinates. 
</div>
</div><p>
<a class="anchor" name="c749cfb04173f6f35ef64b1ac1d87178"></a><!-- doxytag: member="OpenBabel::OBMol::PerceiveBondOrders" ref="c749cfb04173f6f35ef64b1ac1d87178" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PerceiveBondOrders           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Attempts to perceive multiple bonds based on geometries. 
<p>
This method uses bond angles and geometries from current connectivity to guess atom types and then filling empty valences with multiple bonds. It currently has a pass to detect some frequent functional groups. It still needs a pass to detect aromatic rings to "clean up." 
</div>
</div><p>
<a class="anchor" name="1ce9b09fb625faffaae648d7beae9598"></a><!-- doxytag: member="OpenBabel::OBMol::FindTorsions" ref="1ce9b09fb625faffaae648d7beae9598" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindTorsions           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Fills the OBGeneric <a class="el" href="classOpenBabel_1_1OBTorsionData.shtml">OBTorsionData</a> with torsions from the mol. 
<p>

</div>
</div><p>
<a class="anchor" name="c4260148aa21c7ada7d625bc0c6f2f7a"></a><!-- doxytag: member="OpenBabel::OBMol::GetGTDVector" ref="c4260148aa21c7ada7d625bc0c6f2f7a" args="(std::vector&lt; int &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetGTDVector           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculates the graph theoretical distance of each atom. Vector is indexed from zero. 
<p>

</div>
</div><p>
<a class="anchor" name="94276831221d5693b3017da7fab3ccc8"></a><!-- doxytag: member="OpenBabel::OBMol::GetGIVector" ref="94276831221d5693b3017da7fab3ccc8" args="(std::vector&lt; unsigned int &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetGIVector           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculates a set of graph invariant indexes using the graph theoretical distance, number of connected heavy atoms, aromatic boolean, ring boolean, atomic number, and summation of bond orders connected to the atom. Vector is indexed from zero. 
<p>

</div>
</div><p>
<a class="anchor" name="de880e97f2bdf3c90e91375aec12aaf0"></a><!-- doxytag: member="OpenBabel::OBMol::GetGIDVector" ref="de880e97f2bdf3c90e91375aec12aaf0" args="(std::vector&lt; unsigned int &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetGIDVector           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculates a set of symmetry identifiers for a molecule. Atoms with the same symmetry ID are symmetrically equivalent. Vector is indexed from zero. 
<p>

</div>
</div><p>
<a class="anchor" name="36d871f2ebeaf5e767ae33ed8d35f849"></a><!-- doxytag: member="OpenBabel::OBMol::Has2D" ref="36d871f2ebeaf5e767ae33ed8d35f849" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Has2D           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Are there non-zero coordinates in two dimensions (i.e. X and Y)? 
<p>

</div>
</div><p>
<a class="anchor" name="4aaa8b5151395ad66ecfe896ca8a0114"></a><!-- doxytag: member="OpenBabel::OBMol::Has3D" ref="4aaa8b5151395ad66ecfe896ca8a0114" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Has3D           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Are there non-zero coordinates in all three dimensions (i.e. X, Y, Z)? 
<p>

</div>
</div><p>
<a class="anchor" name="bdda89a787d7ae0639d5127c2f6a4dfb"></a><!-- doxytag: member="OpenBabel::OBMol::HasNonZeroCoords" ref="bdda89a787d7ae0639d5127c2f6a4dfb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasNonZeroCoords           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Are there any non-zero coordinates? 
<p>

</div>
</div><p>
<a class="anchor" name="783c51919c69da3287d51f34b2fa53a0"></a><!-- doxytag: member="OpenBabel::OBMol::HasAromaticPerceived" ref="783c51919c69da3287d51f34b2fa53a0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasAromaticPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ac2c45d000ac10ad770ec5e5eff97f30"></a><!-- doxytag: member="OpenBabel::OBMol::HasSSSRPerceived" ref="ac2c45d000ac10ad770ec5e5eff97f30" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasSSSRPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0329d4256b426a4967afa867f415d06b"></a><!-- doxytag: member="OpenBabel::OBMol::HasRingAtomsAndBondsPerceived" ref="0329d4256b426a4967afa867f415d06b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasRingAtomsAndBondsPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0ba2ebe76f1b15c48a8f1538efc8f9b4"></a><!-- doxytag: member="OpenBabel::OBMol::HasAtomTypesPerceived" ref="0ba2ebe76f1b15c48a8f1538efc8f9b4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasAtomTypesPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="39df67d7e225b9dd721b9b8c7df809ce"></a><!-- doxytag: member="OpenBabel::OBMol::HasChiralityPerceived" ref="39df67d7e225b9dd721b9b8c7df809ce" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasChiralityPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="87c2cd2043f749d5433a98df4ad8277d"></a><!-- doxytag: member="OpenBabel::OBMol::HasPartialChargesPerceived" ref="87c2cd2043f749d5433a98df4ad8277d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasPartialChargesPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="908e2d394d3a47cf821014899344ca37"></a><!-- doxytag: member="OpenBabel::OBMol::HasHybridizationPerceived" ref="908e2d394d3a47cf821014899344ca37" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasHybridizationPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7fe699ef7fee62ca46743d6aa78bdea5"></a><!-- doxytag: member="OpenBabel::OBMol::HasImplicitValencePerceived" ref="7fe699ef7fee62ca46743d6aa78bdea5" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasImplicitValencePerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="afddb1ded7f589afbdd56062368602db"></a><!-- doxytag: member="OpenBabel::OBMol::HasKekulePerceived" ref="afddb1ded7f589afbdd56062368602db" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasKekulePerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fb25b05d950ca109bf9c6333b906a9ee"></a><!-- doxytag: member="OpenBabel::OBMol::HasClosureBondsPerceived" ref="fb25b05d950ca109bf9c6333b906a9ee" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasClosureBondsPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c31a6af8f2b96fa35170523b6318c459"></a><!-- doxytag: member="OpenBabel::OBMol::HasChainsPerceived" ref="c31a6af8f2b96fa35170523b6318c459" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasChainsPerceived           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="efc6e71556f0cd4afdd34e4a99d06025"></a><!-- doxytag: member="OpenBabel::OBMol::HasHydrogensAdded" ref="efc6e71556f0cd4afdd34e4a99d06025" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasHydrogensAdded           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b57a4b5dd9752e593e2fdb80f48909d8"></a><!-- doxytag: member="OpenBabel::OBMol::HasAromaticCorrected" ref="b57a4b5dd9752e593e2fdb80f48909d8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasAromaticCorrected           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fc44b8ad27a62b9cfc670d4fd29bb52f"></a><!-- doxytag: member="OpenBabel::OBMol::IsCorrectedForPH" ref="fc44b8ad27a62b9cfc670d4fd29bb52f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCorrectedForPH           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4a45f2c821b749250e070c3594289103"></a><!-- doxytag: member="OpenBabel::OBMol::HasSpinMultiplicityAssigned" ref="4a45f2c821b749250e070c3594289103" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasSpinMultiplicityAssigned           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="63258442848bd8e29e0d5224e145ad83"></a><!-- doxytag: member="OpenBabel::OBMol::IsChiral" ref="63258442848bd8e29e0d5224e145ad83" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsChiral           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Is this molecule chiral? 
<p>

</div>
</div><p>
<a class="anchor" name="31d1053aee208079bcc3c5e1884774df"></a><!-- doxytag: member="OpenBabel::OBMol::Empty" ref="31d1053aee208079bcc3c5e1884774df" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Empty           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Are there any atoms in this molecule? 
<p>

</div>
</div><p>
<a class="anchor" name="37e5c0caf3b51ae81d8d3abc6ffb1a9c"></a><!-- doxytag: member="OpenBabel::OBMol::NumConformers" ref="37e5c0caf3b51ae81d8d3abc6ffb1a9c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int NumConformers           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="95a50ee3e38bea8779b490626f65fc2e"></a><!-- doxytag: member="OpenBabel::OBMol::SetConformers" ref="95a50ee3e38bea8779b490626f65fc2e" args="(std::vector&lt; double * &gt; &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetConformers           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double * &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7b80e7015d000221e0cc92fd3cf6f9e4"></a><!-- doxytag: member="OpenBabel::OBMol::AddConformer" ref="7b80e7015d000221e0cc92fd3cf6f9e4" args="(double *f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddConformer           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>f</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="e4c349e7e3920df72134c0c940318997"></a><!-- doxytag: member="OpenBabel::OBMol::SetConformer" ref="e4c349e7e3920df72134c0c940318997" args="(int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetConformer           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="518361c74904754a1dd15a0113ab88b6"></a><!-- doxytag: member="OpenBabel::OBMol::CopyConformer" ref="518361c74904754a1dd15a0113ab88b6" args="(double *, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CopyConformer           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7c142a648229b60ef78ff65eaf33721a"></a><!-- doxytag: member="OpenBabel::OBMol::DeleteConformer" ref="7c142a648229b60ef78ff65eaf33721a" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteConformer           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="eae833c9dcc30e182f18554bd40242d6"></a><!-- doxytag: member="OpenBabel::OBMol::GetConformer" ref="eae833c9dcc30e182f18554bd40242d6" args="(int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* GetConformer           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="43bacf0671104e33b04835408b5c3785"></a><!-- doxytag: member="OpenBabel::OBMol::BeginConformer" ref="43bacf0671104e33b04835408b5c3785" args="(std::vector&lt; double * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* BeginConformer           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="bd4311945a4de0a47d2f036e9632a4b9"></a><!-- doxytag: member="OpenBabel::OBMol::NextConformer" ref="bd4311945a4de0a47d2f036e9632a4b9" args="(std::vector&lt; double * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* NextConformer           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5246a44bf82aa31c2f428665db94bfb8"></a><!-- doxytag: member="OpenBabel::OBMol::GetConformers" ref="5246a44bf82aa31c2f428665db94bfb8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double*&gt;&amp; GetConformers           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6d600e06337a9f68aef36eecc44e1dbe"></a><!-- doxytag: member="OpenBabel::OBMol::BeginAtom" ref="6d600e06337a9f68aef36eecc44e1dbe" args="(std::vector&lt; OBNodeBase * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * BeginAtom           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000022">Deprecated:</a></b></dt><dd>Use FOR_ATOMS_OF_MOL and <a class="el" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a> instead </dd></dl>

</div>
</div><p>
<a class="anchor" name="5d9418cdabdcff9a7d09e75850536674"></a><!-- doxytag: member="OpenBabel::OBMol::NextAtom" ref="5d9418cdabdcff9a7d09e75850536674" args="(std::vector&lt; OBNodeBase * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * NextAtom           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000023">Deprecated:</a></b></dt><dd>Use FOR_ATOMS_OF_MOL and <a class="el" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a> instead </dd></dl>

</div>
</div><p>
<a class="anchor" name="5f49793fba8a21464f530dda058765d2"></a><!-- doxytag: member="OpenBabel::OBMol::BeginBond" ref="5f49793fba8a21464f530dda058765d2" args="(std::vector&lt; OBEdgeBase * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * BeginBond           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000024">Deprecated:</a></b></dt><dd>Use FOR_BONDS_OF_MOL and <a class="el" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a> instead </dd></dl>

</div>
</div><p>
<a class="anchor" name="7e5f04807d937ecd9c9eb2274b49f3fc"></a><!-- doxytag: member="OpenBabel::OBMol::NextBond" ref="7e5f04807d937ecd9c9eb2274b49f3fc" args="(std::vector&lt; OBEdgeBase * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * NextBond           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000025">Deprecated:</a></b></dt><dd>Use FOR_BONDS_OF_MOL and <a class="el" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a> instead </dd></dl>

</div>
</div><p>
<a class="anchor" name="ac98c1df75d7d01ae934d1871ec6501b"></a><!-- doxytag: member="OpenBabel::OBMol::BeginResidue" ref="ac98c1df75d7d01ae934d1871ec6501b" args="(std::vector&lt; OBResidue * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>* BeginResidue           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000026">Deprecated:</a></b></dt><dd>Use FOR_RESIDUES_OF_MOL and <a class="el" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a> instead </dd></dl>

</div>
</div><p>
<a class="anchor" name="8b0f9378c39b849144e6ec701677d978"></a><!-- doxytag: member="OpenBabel::OBMol::NextResidue" ref="8b0f9378c39b849144e6ec701677d978" args="(std::vector&lt; OBResidue * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>* NextResidue           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000027">Deprecated:</a></b></dt><dd>Use FOR_RESIDUES_OF_MOL and <a class="el" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a> instead </dd></dl>

</div>
</div><p>
<a class="anchor" name="67c061a9d850cf30b4bf5ea394760d43"></a><!-- doxytag: member="OpenBabel::OBMol::BeginInternalCoord" ref="67c061a9d850cf30b4bf5ea394760d43" args="(std::vector&lt; OBInternalCoord * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a>* BeginInternalCoord           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6680c695e3cdceb7e42a554a0ffc8a19"></a><!-- doxytag: member="OpenBabel::OBMol::NextInternalCoord" ref="6680c695e3cdceb7e42a554a0ffc8a19" args="(std::vector&lt; OBInternalCoord * &gt;::iterator &amp;i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a>* NextInternalCoord           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="22960ac779b08ab4314a81917c71585b"></a><!-- doxytag: member="OpenBabel::OBMol::NumNodes" ref="22960ac779b08ab4314a81917c71585b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumNodes           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a0eee9548abefd1ecbd9799c43195313"></a><!-- doxytag: member="OpenBabel::OBMol::NumEdges" ref="a0eee9548abefd1ecbd9799c43195313" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumEdges           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="acacf35932ae8262d93bfa9d1693d913"></a><!-- doxytag: member="OpenBabel::OBMol::ResetVisitFlags" ref="acacf35932ae8262d93bfa9d1693d913" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ResetVisitFlags           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="136baf9ef324d417a1fd1ea5a2e396f3"></a><!-- doxytag: member="OpenBabel::OBMol::SetVisitLock" ref="136baf9ef324d417a1fd1ea5a2e396f3" args="(bool)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetVisitLock           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="33e96b9f1d6f78d25204d073b6d59a31"></a><!-- doxytag: member="OpenBabel::OBMol::GetVisitLock" ref="33e96b9f1d6f78d25204d073b6d59a31" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetVisitLock           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5649ac44d7572882311ca46c5223e6cd"></a><!-- doxytag: member="OpenBabel::OBMol::Begin" ref="5649ac44d7572882311ca46c5223e6cd" args="(std::vector&lt; OBNodeBase * &gt;::iterator &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * Begin           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f40714d1f33a5b945b092b1e9655f99b"></a><!-- doxytag: member="OpenBabel::OBMol::Begin" ref="f40714d1f33a5b945b092b1e9655f99b" args="(std::vector&lt; OBEdgeBase * &gt;::iterator &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> * Begin           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9538aa4ef5cef66087c2ec84e96a2a86"></a><!-- doxytag: member="OpenBabel::OBMol::Next" ref="9538aa4ef5cef66087c2ec84e96a2a86" args="(std::vector&lt; OBNodeBase * &gt;::iterator &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * Next           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d25f8918ec0ca3cf2fe19549feb7c3fc"></a><!-- doxytag: member="OpenBabel::OBMol::Next" ref="d25f8918ec0ca3cf2fe19549feb7c3fc" args="(std::vector&lt; OBEdgeBase * &gt;::iterator &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> * Next           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a> * &gt;::iterator &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="a4a61b1d913f2bee1e0ed5d9daf26549"></a><!-- doxytag: member="OpenBabel::OBMol::_flags" ref="a4a61b1d913f2bee1e0ed5d9daf26549" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBMol.shtml#a4a61b1d913f2bee1e0ed5d9daf26549">_flags</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
bitfield of flags 
<p>

</div>
</div><p>
<a class="anchor" name="c23878536c8da0ff97c0985627dd5646"></a><!-- doxytag: member="OpenBabel::OBMol::_autoPartialCharge" ref="c23878536c8da0ff97c0985627dd5646" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBMol.shtml#c23878536c8da0ff97c0985627dd5646">_autoPartialCharge</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Assign partial charges automatically. 
<p>

</div>
</div><p>
<a class="anchor" name="e1c74119422bd6a52bb7c384b42dca4c"></a><!-- doxytag: member="OpenBabel::OBMol::_autoFormalCharge" ref="e1c74119422bd6a52bb7c384b42dca4c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBMol.shtml#e1c74119422bd6a52bb7c384b42dca4c">_autoFormalCharge</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Assign formal charges automatically. 
<p>

</div>
</div><p>
<a class="anchor" name="1dda4ed41c70aef0a361682dd9b2b0f9"></a><!-- doxytag: member="OpenBabel::OBMol::_title" ref="1dda4ed41c70aef0a361682dd9b2b0f9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBMol.shtml#1dda4ed41c70aef0a361682dd9b2b0f9">_title</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Molecule title. 
<p>

</div>
</div><p>
<a class="anchor" name="601fbf5c8e5b7d92281dbe6a124d7f2c"></a><!-- doxytag: member="OpenBabel::OBMol::_dimension" ref="601fbf5c8e5b7d92281dbe6a124d7f2c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int <a class="el" href="classOpenBabel_1_1OBMol.shtml#601fbf5c8e5b7d92281dbe6a124d7f2c">_dimension</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Dimensionality of coordinates. 
<p>

</div>
</div><p>
<a class="anchor" name="d93165c379393f8eb17506f1f9820a1a"></a><!-- doxytag: member="OpenBabel::OBMol::_energy" ref="d93165c379393f8eb17506f1f9820a1a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classOpenBabel_1_1OBMol.shtml#d93165c379393f8eb17506f1f9820a1a">_energy</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Molecular heat of formation (if applicable). 
<p>

</div>
</div><p>
<a class="anchor" name="aaeee07c1d80b2638b8b9ace0095c9cd"></a><!-- doxytag: member="OpenBabel::OBMol::_totalCharge" ref="aaeee07c1d80b2638b8b9ace0095c9cd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBMol.shtml#aaeee07c1d80b2638b8b9ace0095c9cd">_totalCharge</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Total charge on the molecule. 
<p>

</div>
</div><p>
<a class="anchor" name="7a92cb97f8aa52f145b2e928cf480a07"></a><!-- doxytag: member="OpenBabel::OBMol::_totalSpin" ref="7a92cb97f8aa52f145b2e928cf480a07" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBMol.shtml#7a92cb97f8aa52f145b2e928cf480a07">_totalSpin</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Total spin on the molecule (if not specified, assumes lowest possible spin). 
<p>

</div>
</div><p>
<a class="anchor" name="706bc4f751bf06cf864893451a7d21e4"></a><!-- doxytag: member="OpenBabel::OBMol::_c" ref="706bc4f751bf06cf864893451a7d21e4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double* <a class="el" href="classOpenBabel_1_1OBMol.shtml#706bc4f751bf06cf864893451a7d21e4">_c</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
coordinate array 
<p>

</div>
</div><p>
<a class="anchor" name="6fb1d704dcaeb179720ac771745850b1"></a><!-- doxytag: member="OpenBabel::OBMol::_vconf" ref="6fb1d704dcaeb179720ac771745850b1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double*&gt; <a class="el" href="classOpenBabel_1_1OBMol.shtml#6fb1d704dcaeb179720ac771745850b1">_vconf</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
vector of conformers 
<p>

</div>
</div><p>
<a class="anchor" name="423d6b01bf56b39dda4f7b6b40d238ba"></a><!-- doxytag: member="OpenBabel::OBMol::_natoms" ref="423d6b01bf56b39dda4f7b6b40d238ba" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int <a class="el" href="classOpenBabel_1_1OBMol.shtml#423d6b01bf56b39dda4f7b6b40d238ba">_natoms</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Number of atoms. 
<p>

</div>
</div><p>
<a class="anchor" name="fdd8d09e3918503bce7f3dabb3b329b7"></a><!-- doxytag: member="OpenBabel::OBMol::_nbonds" ref="fdd8d09e3918503bce7f3dabb3b329b7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int <a class="el" href="classOpenBabel_1_1OBMol.shtml#fdd8d09e3918503bce7f3dabb3b329b7">_nbonds</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Number of bonds. 
<p>

</div>
</div><p>
<a class="anchor" name="e1c29d0efe6187e8726962008c81e956"></a><!-- doxytag: member="OpenBabel::OBMol::_residue" ref="e1c29d0efe6187e8726962008c81e956" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>*&gt; <a class="el" href="classOpenBabel_1_1OBMol.shtml#e1c29d0efe6187e8726962008c81e956">_residue</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Residue information (if applicable). 
<p>

</div>
</div><p>
<a class="anchor" name="6c2a9726c57abf03a40339776f5d9a0b"></a><!-- doxytag: member="OpenBabel::OBMol::_internals" ref="6c2a9726c57abf03a40339776f5d9a0b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a>*&gt; <a class="el" href="classOpenBabel_1_1OBMol.shtml#6c2a9726c57abf03a40339776f5d9a0b">_internals</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Internal Coordinates (if applicable). 
<p>

</div>
</div><p>
<a class="anchor" name="f7811cf8aadbf3b3477c560b0ef2f797"></a><!-- doxytag: member="OpenBabel::OBMol::_vdata" ref="f7811cf8aadbf3b3477c560b0ef2f797" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt; <a class="el" href="classOpenBabel_1_1OBMol.shtml#f7811cf8aadbf3b3477c560b0ef2f797">_vdata</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Custom data -- see <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> class for more. 
<p>

</div>
</div><p>
<a class="anchor" name="5db8eb0124fad1bf66ddaf930b4840f0"></a><!-- doxytag: member="OpenBabel::OBMol::_mod" ref="5db8eb0124fad1bf66ddaf930b4840f0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int <a class="el" href="classOpenBabel_1_1OBMol.shtml#5db8eb0124fad1bf66ddaf930b4840f0">_mod</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Number of nested calls to <a class="el" href="classOpenBabel_1_1OBMol.shtml#1b5760b4c75b7631fffb54f84140b3e3">BeginModify()</a>. 
<p>

</div>
</div><p>
<a class="anchor" name="d424b97b106cf7fce3fee757b9891e7d"></a><!-- doxytag: member="OpenBabel::OBMol::_vlock" ref="d424b97b106cf7fce3fee757b9891e7d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#d424b97b106cf7fce3fee757b9891e7d">_vlock</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6879e9281c9de472ed9182c0886c59d9"></a><!-- doxytag: member="OpenBabel::OBMol::_vatom" ref="6879e9281c9de472ed9182c0886c59d9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a>*&gt; <a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#6879e9281c9de472ed9182c0886c59d9">_vatom</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9c8e30c37e33bb11c5dade3984d71200"></a><!-- doxytag: member="OpenBabel::OBMol::_vbond" ref="9c8e30c37e33bb11c5dade3984d71200" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a>*&gt; <a class="el" href="classOpenBabel_1_1OBGraphBase.shtml#9c8e30c37e33bb11c5dade3984d71200">_vbond</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="mol_8h-source.shtml">mol.h</a><li><a class="el" href="chiral_8cpp.shtml">chiral.cpp</a><li><a class="el" href="kekulize_8cpp.shtml">kekulize.cpp</a><li><a class="el" href="mol_8cpp.shtml">mol.cpp</a><li><a class="el" href="ring_8cpp.shtml">ring.cpp</a><li><a class="el" href="transform_8cpp.shtml">transform.cpp</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:10 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
