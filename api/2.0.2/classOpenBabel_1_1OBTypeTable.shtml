<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBTypeTable Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li id="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a></div>
<h1>OBTypeTable Class Reference</h1><!-- doxytag: class="OpenBabel::OBTypeTable" --><!-- doxytag: inherits="OpenBabel::OBGlobalDataBase" -->Atom Type Translation Table.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="data_8h-source.shtml">data.h</a>&gt;</code>
<p>
Inheritance diagram for OBTypeTable:<p><center><img src="classOpenBabel_1_1OBTypeTable__inherit__graph.png" border="0" usemap="#OBTypeTable__inherit__map" alt="Inheritance graph"></center>
<map name="OBTypeTable__inherit__map">
<area href="classOpenBabel_1_1OBGlobalDataBase.shtml" shape="rect" coords="7,7,149,34" alt="">
</map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center><a href="classOpenBabel_1_1OBTypeTable-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#35e30738b52f297cdffdc3b1505d278f">OBTypeTable</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#72cd4a33759982430a7db60c3d392fee">~OBTypeTable</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#e59fef8af62e52629bf2576e34a26801">ParseLine</a> (const char *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Specified by particular table classes (parses an individual data line).  <a href="#e59fef8af62e52629bf2576e34a26801"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#93721b9b970ca9a8160f7b831ae7e9d4">GetSize</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of atom types in the translation table </dd></dl>
 <a href="#93721b9b970ca9a8160f7b831ae7e9d4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#9b40b242258cc488f341d06412a1fb89">SetFromType</a> (const char *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the initial atom type to be translated.  <a href="#9b40b242258cc488f341d06412a1fb89"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#eb07d37f2d18888127964d11e28c1c12">SetToType</a> (const char *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the destination atom type for translation.  <a href="#eb07d37f2d18888127964d11e28c1c12"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#9c5ec7f3f42fea1f014ac3f346c7aef4">Translate</a> (char *to, const char *from)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Translate atom types.  <a href="#9c5ec7f3f42fea1f014ac3f346c7aef4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#613e0ea0da4b4b0d26ea29439e3554a8">Translate</a> (std::string &amp;to, const std::string &amp;from)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Translate atom types.  <a href="#613e0ea0da4b4b0d26ea29439e3554a8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#1a9fe7160061744082f703249badf036">GetFromType</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the initial atom type to be translated </dd></dl>
 <a href="#1a9fe7160061744082f703249badf036"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#f9d611bffc1f340b6017ad203493ec25">GetToType</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight"><dl class="return" compact><dt><b>Returns:</b></dt><dd>the destination atom type for translation </dd></dl>
 <a href="#f9d611bffc1f340b6017ad203493ec25"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#1e3b6d38df0786ccf7f938d60e386aae">Init</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Read in the data file, falling back as needed.  <a href="#1e3b6d38df0786ccf7f938d60e386aae"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#49002f92ad6a1c71d7f9148271770b7a">SetReadDirectory</a> (char *dir)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the directory before calling <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#1e3b6d38df0786ccf7f938d60e386aae">Init()</a>.  <a href="#49002f92ad6a1c71d7f9148271770b7a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#2bd0630d27e20f38de4c753ca68e2282">SetEnvironmentVariable</a> (char *var)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the environment variable to use before calling <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#1e3b6d38df0786ccf7f938d60e386aae">Init()</a>.  <a href="#2bd0630d27e20f38de4c753ca68e2282"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#40756214f69d1c40ad70b64ae9fdc08d">_init</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">whether the data been read already  <a href="#40756214f69d1c40ad70b64ae9fdc08d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#45a08560f2b4885250c586c550f2d7af">_dataptr</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">default data table if file is unreadable  <a href="#45a08560f2b4885250c586c550f2d7af"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#895aefe990ffe9af66bb5cd4e37d3579">_filename</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">file to search for  <a href="#895aefe990ffe9af66bb5cd4e37d3579"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#2c2f62a9907553e5feb1ecef65c6c386">_dir</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">data directory for file if _envvar fails  <a href="#2c2f62a9907553e5feb1ecef65c6c386"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#5d93159b6eee0cb302451621106f61c7">_subdir</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">subdirectory (if using environment variable)  <a href="#5d93159b6eee0cb302451621106f61c7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#87d06c3aed77fb9e118b337bed557928">_envvar</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">environment variable to check first  <a href="#87d06c3aed77fb9e118b337bed557928"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Atom Type Translation Table. 
<p>
Molecular file formats frequently store information about atoms in an atom type field. Some formats store only the element for each atom, while others include hybridization and local environments, such as the Sybyl mol2 atom type field. The <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a> class acts as a translation table to convert atom types between a number of different molecular file formats. The constructor for <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a> automatically reads the text file types.txt. Just as <a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a>, an instance of <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a> (ttab) is declared external in <a class="el" href="data_8cpp.shtml">data.cpp</a> and is referenced as extern <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a> ttab in <a class="el" href="mol_8h.shtml">mol.h</a>. The following code demonstrates how to use the <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a> class to translate the internal representation of atom types in an <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> Internal to Sybyl Mol2 atom types.<p>
<div class="fragment"><pre class="fragment">      <a class="code" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">ttab</a>.SetFromType(<span class="stringliteral">"INT"</span>);
      <a class="code" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">ttab</a>.SetToType(<span class="stringliteral">"SYB"</span>);
      OBAtom *atom;
      vector&lt;OBAtom*&gt;::iterator i;
      string src,dst;
      <span class="keywordflow">for</span> (atom = mol.BeginAtom(i);atom;atom = mol.EndAtom(i))
      {
      src = atom-&gt;GetType();
      <a class="code" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">ttab</a>.Translate(dst,src);
      cout &lt;&lt; <span class="stringliteral">"atom number "</span> &lt;&lt; atom-&gt;GetIdx() &lt;&lt; <span class="stringliteral">"has mol2 type "</span> &lt;&lt; dst &lt;&lt; endl;
      }
</pre></div><p>
Current atom types include (defined in the top line of the data file types.txt):<ul>
<li>INT (Open Babel internal codes)</li><li>ATN (atomic numbers)</li><li>HYB (hybridization)</li><li>MMD</li><li>MM2 (MM2 force field)</li><li>XYZ (element symbols from XYZ file format)</li><li>ALC (Alchemy file)</li><li>HAD</li><li>MCML</li><li>C3D (Chem3D)</li><li>SYB (Sybyl mol2)</li><li>MOL</li><li>MAP</li><li>DRE</li><li>XED (XED format)</li><li>DOK (Dock)</li><li>M3D </li></ul>

<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="35e30738b52f297cdffdc3b1505d278f"></a><!-- doxytag: member="OpenBabel::OBTypeTable::OBTypeTable" ref="35e30738b52f297cdffdc3b1505d278f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a>           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="72cd4a33759982430a7db60c3d392fee"></a><!-- doxytag: member="OpenBabel::OBTypeTable::~OBTypeTable" ref="72cd4a33759982430a7db60c3d392fee" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="e59fef8af62e52629bf2576e34a26801"></a><!-- doxytag: member="OpenBabel::OBTypeTable::ParseLine" ref="e59fef8af62e52629bf2576e34a26801" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ParseLine           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>buffer</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Specified by particular table classes (parses an individual data line). 
<p>

<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#9a84dbfb089769dec48cd6f6eca1057b">OBGlobalDataBase</a>.
</div>
</div><p>
<a class="anchor" name="93721b9b970ca9a8160f7b831ae7e9d4"></a><!-- doxytag: member="OpenBabel::OBTypeTable::GetSize" ref="93721b9b970ca9a8160f7b831ae7e9d4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetSize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of atom types in the translation table </dd></dl>

<p>

<p>
Reimplemented from <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#79821726c4064984b8847a7bba55f6d3">OBGlobalDataBase</a>.
</div>
</div><p>
<a class="anchor" name="9b40b242258cc488f341d06412a1fb89"></a><!-- doxytag: member="OpenBabel::OBTypeTable::SetFromType" ref="9b40b242258cc488f341d06412a1fb89" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetFromType           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the initial atom type to be translated. 
<p>

</div>
</div><p>
<a class="anchor" name="eb07d37f2d18888127964d11e28c1c12"></a><!-- doxytag: member="OpenBabel::OBTypeTable::SetToType" ref="eb07d37f2d18888127964d11e28c1c12" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetToType           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the destination atom type for translation. 
<p>

</div>
</div><p>
<a class="anchor" name="9c5ec7f3f42fea1f014ac3f346c7aef4"></a><!-- doxytag: member="OpenBabel::OBTypeTable::Translate" ref="9c5ec7f3f42fea1f014ac3f346c7aef4" args="(char *to, const char *from)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Translate           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>from</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Translate atom types. 
<p>
Translates atom types (to, from), checking for size of destination string and null-terminating as needed <dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000002">Deprecated:</a></b></dt><dd>Because there is no guarantee on the length of an atom type you should consider using std::string instead </dd></dl>

</div>
</div><p>
<a class="anchor" name="613e0ea0da4b4b0d26ea29439e3554a8"></a><!-- doxytag: member="OpenBabel::OBTypeTable::Translate" ref="613e0ea0da4b4b0d26ea29439e3554a8" args="(std::string &amp;to, const std::string &amp;from)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Translate           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>to</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>from</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Translate atom types. 
<p>

</div>
</div><p>
<a class="anchor" name="1a9fe7160061744082f703249badf036"></a><!-- doxytag: member="OpenBabel::OBTypeTable::GetFromType" ref="1a9fe7160061744082f703249badf036" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetFromType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the initial atom type to be translated </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="f9d611bffc1f340b6017ad203493ec25"></a><!-- doxytag: member="OpenBabel::OBTypeTable::GetToType" ref="f9d611bffc1f340b6017ad203493ec25" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetToType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the destination atom type for translation </dd></dl>

<p>

</div>
</div><p>
<a class="anchor" name="1e3b6d38df0786ccf7f938d60e386aae"></a><!-- doxytag: member="OpenBabel::OBTypeTable::Init" ref="1e3b6d38df0786ccf7f938d60e386aae" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Init           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Read in the data file, falling back as needed. 
<p>

</div>
</div><p>
<a class="anchor" name="49002f92ad6a1c71d7f9148271770b7a"></a><!-- doxytag: member="OpenBabel::OBTypeTable::SetReadDirectory" ref="49002f92ad6a1c71d7f9148271770b7a" args="(char *dir)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetReadDirectory           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>dir</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the directory before calling <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#1e3b6d38df0786ccf7f938d60e386aae">Init()</a>. 
<p>

</div>
</div><p>
<a class="anchor" name="2bd0630d27e20f38de4c753ca68e2282"></a><!-- doxytag: member="OpenBabel::OBTypeTable::SetEnvironmentVariable" ref="2bd0630d27e20f38de4c753ca68e2282" args="(char *var)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetEnvironmentVariable           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>var</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the environment variable to use before calling <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#1e3b6d38df0786ccf7f938d60e386aae">Init()</a>. 
<p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="40756214f69d1c40ad70b64ae9fdc08d"></a><!-- doxytag: member="OpenBabel::OBTypeTable::_init" ref="40756214f69d1c40ad70b64ae9fdc08d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#40756214f69d1c40ad70b64ae9fdc08d">_init</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
whether the data been read already 
<p>

</div>
</div><p>
<a class="anchor" name="45a08560f2b4885250c586c550f2d7af"></a><!-- doxytag: member="OpenBabel::OBTypeTable::_dataptr" ref="45a08560f2b4885250c586c550f2d7af" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#45a08560f2b4885250c586c550f2d7af">_dataptr</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
default data table if file is unreadable 
<p>

</div>
</div><p>
<a class="anchor" name="895aefe990ffe9af66bb5cd4e37d3579"></a><!-- doxytag: member="OpenBabel::OBTypeTable::_filename" ref="895aefe990ffe9af66bb5cd4e37d3579" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#895aefe990ffe9af66bb5cd4e37d3579">_filename</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
file to search for 
<p>

</div>
</div><p>
<a class="anchor" name="2c2f62a9907553e5feb1ecef65c6c386"></a><!-- doxytag: member="OpenBabel::OBTypeTable::_dir" ref="2c2f62a9907553e5feb1ecef65c6c386" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#2c2f62a9907553e5feb1ecef65c6c386">_dir</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
data directory for file if _envvar fails 
<p>

</div>
</div><p>
<a class="anchor" name="5d93159b6eee0cb302451621106f61c7"></a><!-- doxytag: member="OpenBabel::OBTypeTable::_subdir" ref="5d93159b6eee0cb302451621106f61c7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#5d93159b6eee0cb302451621106f61c7">_subdir</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
subdirectory (if using environment variable) 
<p>

</div>
</div><p>
<a class="anchor" name="87d06c3aed77fb9e118b337bed557928"></a><!-- doxytag: member="OpenBabel::OBTypeTable::_envvar" ref="87d06c3aed77fb9e118b337bed557928" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#87d06c3aed77fb9e118b337bed557928">_envvar</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
environment variable to check first 
<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="data_8h-source.shtml">data.h</a><li><a class="el" href="data_8cpp.shtml">data.cpp</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:04 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
