<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: obconversion.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>obconversion.h</h1><a href="obconversion_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obconversion.h - Handle file conversions. Declaration of OBFormat, OBConversion</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2004-2005 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"></span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_CONV_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_CONV_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include "babelconfig.h"</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#if HAVE_IOSTREAM</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#elif HAVE_IOSTREAM_H</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream.h&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#endif</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#if HAVE_FSTREAM</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span><span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#elif HAVE_FSTREAM_H</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#include &lt;fstream.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#endif</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="preprocessor">#if HAVE_SSTREAM</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="preprocessor">        #include &lt;sstream&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#elif</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">        #include &lt;sstream.h&gt;</span>
<a name="l00039"></a>00039 <span class="preprocessor">#endif</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="preprocessor">#include "<a class="code" href="dlhandler_8h.shtml">dlhandler.h</a>"</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">// These macros are used in DLL builds. If they have not</span>
<a name="l00048"></a>00048 <span class="comment">// been set in babelconfig.h, define them as nothing.</span>
<a name="l00049"></a>00049 <span class="preprocessor">#ifndef OBCONV</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span><span class="preprocessor">        #define OBCONV</span>
<a name="l00051"></a>00051 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span><span class="preprocessor">#ifndef OBDLL</span>
<a name="l00053"></a>00053 <span class="preprocessor"></span><span class="preprocessor">        #define OBDLL</span>
<a name="l00054"></a>00054 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>
<a name="l00056"></a>00056 <span class="comment">//using namespace std;</span>
<a name="l00057"></a>00057 <span class="keyword">namespace </span>OpenBabel {
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="keyword">class </span>OBBase;
<a name="l00061"></a>00061 <span class="keyword">class </span>OBConversion;
<a name="l00062"></a>00062 <span class="comment">//*************************************************</span>
<a name="l00063"></a>00063 
<a name="l00065"></a>00065 
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml">00083</a> <span class="keyword">class </span>OBCONV OBFormat
<a name="l00084"></a>00084 {
<a name="l00085"></a>00085 <span class="keyword">public</span>:
<a name="l00087"></a>00087 
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#1e309febfaef70cc3c8d98afc1540931">00091</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ReadMolecule(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00092"></a>00092                 { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid input format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00093"></a>00093 
<a name="l00095"></a>00095 
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#6044ced825a2a83b7cfe7c45eea63c99">00099</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ReadChemObject(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00100"></a>00100                 { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid input format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00101"></a>00101 
<a name="l00103"></a>00103 
<a name="l00108"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#663171ec9788e2d1621d374848b3888b">00108</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WriteMolecule(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00109"></a>00109                 { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid output format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00110"></a>00110 
<a name="l00112"></a>00112 
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#5ea5d9623cd9594549a52e116caecaa2">00116</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WriteChemObject(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00117"></a>00117                 { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid output format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00118"></a>00118 
<a name="l00120"></a>00120 
<a name="l00124"></a>00124         <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description()=0;
<a name="l00125"></a>00125         
<a name="l00127"></a>00127 
<a name="l00129"></a>00129         <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* TargetClassDescription();
<a name="l00130"></a>00130 
<a name="l00132"></a>00132 
<a name="l00135"></a>00135         <span class="keyword">virtual</span> <span class="keyword">const</span> std::type_info&amp; GetType();
<a name="l00136"></a>00136         
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#1d3a8785a0ad0c85b98fa3406a64d50f">00138</a>         <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* SpecificationURL() { <span class="keywordflow">return</span> <span class="stringliteral">""</span>; }
<a name="l00139"></a>00139 
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#0e10219d8aedefa78ef16fc7fded85ec">00141</a>         <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* GetMIMEType() { <span class="keywordflow">return</span> <span class="stringliteral">""</span>; }
<a name="l00142"></a>00142 
<a name="l00144"></a>00144    
<a name="l00148"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#94a94537cc5ba96b1876db1b612b91a3">00148</a>         <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Flags() { <span class="keywordflow">return</span> 0;}; 
<a name="l00149"></a>00149 
<a name="l00151"></a>00151 
<a name="l00153"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#1f0ee7ba19cc62b53a7ee06fa4f91509">00153</a>       <span class="keyword">virtual</span> <span class="keywordtype">int</span> SkipObjects(<span class="keywordtype">int</span> <span class="comment">/*n*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00154"></a>00154         {
<a name="l00155"></a>00155                 <span class="keywordflow">return</span> 0; <span class="comment">//shows not implemented in the format class</span>
<a name="l00156"></a>00156         };
<a name="l00157"></a>00157 
<a name="l00159"></a>00159 
<a name="l00163"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#0924b1a442d147fa036bff23a4cf04ef">00163</a>         <span class="keyword">virtual</span> OBFormat* MakeNewInstance()
<a name="l00164"></a>00164         {
<a name="l00165"></a>00165                 <span class="keywordflow">return</span> NULL; <span class="comment">//shows not implemented in the format class</span>
<a name="l00166"></a>00166         }
<a name="l00167"></a>00167 
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#ebe7951587dde866be926712693e285b">00169</a>         <span class="keyword">virtual</span> ~OBFormat(){};
<a name="l00170"></a>00170 };
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="comment">//*************************************************</span>
<a name="l00174"></a><a class="code" href="structOpenBabel_1_1CharPtrLess.shtml">00174</a> <span class="comment"></span>        <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> : <span class="keyword">public</span> std::binary_function&lt;const char*,const char*, bool&gt;
<a name="l00175"></a>00175         {
<a name="l00176"></a><a class="code" href="structOpenBabel_1_1CharPtrLess.shtml#c2505b03ab30bfd419b570e0324743ab">00176</a>                 <span class="keywordtype">bool</span> <a class="code" href="structOpenBabel_1_1CharPtrLess.shtml#c2505b03ab30bfd419b570e0324743ab">operator()</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* p1,<span class="keyword">const</span> <span class="keywordtype">char</span>* p2)<span class="keyword"> const</span>
<a name="l00177"></a>00177 <span class="keyword">                </span>{ <span class="keywordflow">return</span> strcasecmp(p1,p2)&lt;0; }
<a name="l00178"></a>00178         };
<a name="l00179"></a>00179 
<a name="l00180"></a><a class="code" href="namespaceOpenBabel.shtml#92e73e2fb2bb989421e95ab53825a00b">00180</a>         <span class="keyword">typedef</span> std::map&lt;const char*,OBFormat*,CharPtrLess &gt; <a class="code" href="namespaceOpenBabel.shtml#92e73e2fb2bb989421e95ab53825a00b">FMapType</a>;
<a name="l00181"></a><a class="code" href="namespaceOpenBabel.shtml#5a287ebeb1e3d52f518c10409eb12bbd">00181</a>         <span class="keyword">typedef</span> FMapType::iterator <a class="code" href="namespaceOpenBabel.shtml#5a287ebeb1e3d52f518c10409eb12bbd">Formatpos</a>;
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 <span class="comment">//*************************************************</span>
<a name="l00184"></a>00184 
<a name="l00186"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml">00186</a> <span class="keyword">class </span>OBCONV OBConversion
<a name="l00187"></a>00187 {
<a name="l00189"></a>00189 <span class="keyword">public</span>:
<a name="l00191"></a>00191 
<a name="l00192"></a>00192                                                         OBConversion(std::istream* is=NULL, std::ostream* os=NULL);
<a name="l00194"></a>00194                                                         OBConversion(<span class="keyword">const</span> OBConversion&amp; o);
<a name="l00195"></a>00195         <span class="keyword">virtual</span>     ~OBConversion(); 
<a name="l00197"></a>00197 
<a name="l00198"></a>00198 
<a name="l00199"></a>00199 
<a name="l00200"></a>00200         <span class="keyword">static</span> <span class="keywordtype">int</span>                              RegisterFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, OBFormat* pFormat, <span class="keyword">const</span> <span class="keywordtype">char</span>* MIME = NULL);
<a name="l00202"></a>00202         <span class="keyword">static</span> OBFormat*        FindFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID);
<a name="l00204"></a>00204         <span class="keyword">static</span> OBFormat*        FormatFromExt(<span class="keyword">const</span> <span class="keywordtype">char</span>* filename);
<a name="l00206"></a>00206         <span class="keyword">static</span> OBFormat*        FormatFromMIME(<span class="keyword">const</span> <span class="keywordtype">char</span>* MIME);
<a name="l00207"></a>00207 
<a name="l00209"></a>00209         <span class="keyword">static</span> <span class="keywordtype">bool</span>             GetNextFormat(<a class="code" href="namespaceOpenBabel.shtml#5a287ebeb1e3d52f518c10409eb12bbd">Formatpos</a>&amp; itr, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; str,OBFormat*&amp; pFormat);
<a name="l00211"></a>00211                 
<a name="l00213"></a>00213 
<a name="l00214"></a>00214         <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description(); <span class="comment">//generic conversion options</span>
<a name="l00216"></a>00216 <span class="comment"></span>
<a name="l00218"></a>00218 
<a name="l00219"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3d20fbc61e06b34c849384597ba8e0cc">00219</a>         std::istream* GetInStream()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pInStream;};
<a name="l00220"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#1784444b6d9c8a5f3c3d0514e2684ec6">00220</a>         std::ostream* GetOutStream()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pOutStream;};
<a name="l00221"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#be2cafdff8bf62ae36fbbfca3eb836bf">00221</a>         <span class="keywordtype">void</span>          SetInStream(std::istream* pIn){pInStream=pIn;};
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7520c6b17b3cf9c506738794baab99b1">00222</a>         <span class="keywordtype">void</span>          SetOutStream(std::ostream* pOut){pOutStream=pOut;};
<a name="l00223"></a>00223         <span class="keywordtype">bool</span>          SetInAndOutFormats(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID, <span class="keyword">const</span> <span class="keywordtype">char</span>* outID);
<a name="l00224"></a>00224         <span class="keywordtype">bool</span>          SetInAndOutFormats(OBFormat* pIn, OBFormat* pOut);
<a name="l00225"></a>00225         <span class="keywordtype">bool</span>          SetInFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID);
<a name="l00226"></a>00226         <span class="keywordtype">bool</span>          SetInFormat(OBFormat* pIn);
<a name="l00227"></a>00227         <span class="keywordtype">bool</span>          SetOutFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* outID);
<a name="l00228"></a>00228         <span class="keywordtype">bool</span>          SetOutFormat(OBFormat* pOut);
<a name="l00229"></a>00229 
<a name="l00230"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#94e958a40abf04e41dde68b5e466bd31">00230</a>         OBFormat*   GetInFormat()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pInFormat;};
<a name="l00231"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#f3d45af23c80e2d89974ed5472ab187b">00231</a>         OBFormat*   GetOutFormat()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pOutFormat;};
<a name="l00232"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#cc8e32bcf9191debcf526f1b32e7b9dc">00232</a>         std::string GetInFilename()<span class="keyword"> const</span>{<span class="keywordflow">return</span> InFilename;};
<a name="l00233"></a>00233         
<a name="l00235"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#f867d03338ae3ab3f85fc614cb1a0591">00235</a>         std::streampos GetInPos()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInpos;}; 
<a name="l00236"></a>00236 
<a name="l00238"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#f646f7b39aeeefb64394aba10a85cfdf">00238</a>         size_t GetInLen()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInlen;}; 
<a name="l00239"></a>00239 
<a name="l00241"></a>00241         <span class="keyword">const</span> <span class="keywordtype">char</span>* GetTitle() <span class="keyword">const</span>;
<a name="l00242"></a>00242 
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#8c0cb28a16189434c940a205ff8f3e99">00244</a>         OBConversion* GetAuxConv()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pAuxConv;};
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#53a1041e7803e63b9bca06ad18bea4fe">00245</a>         <span class="keywordtype">void</span>          SetAuxConv(OBConversion* pConv) {pAuxConv=pConv;};
<a name="l00247"></a>00247 
<a name="l00248"></a>00248 
<a name="l00249"></a>00249 
<a name="l00250"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">00250</a>         <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> { INOPTIONS, OUTOPTIONS, GENOPTIONS };
<a name="l00251"></a>00251 
<a name="l00253"></a>00253         <span class="keyword">const</span> <span class="keywordtype">char</span>* IsOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt,Option_type opttyp=OUTOPTIONS);
<a name="l00254"></a>00254         
<a name="l00256"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7da66ef30fd0af867e9d3bd0df15f4a2">00256</a>         <span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* GetOptions(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp)
<a name="l00257"></a>00257         { <span class="keywordflow">return</span> &amp;OptionsArray[opttyp];};
<a name="l00258"></a>00258 
<a name="l00260"></a>00260         <span class="keywordtype">void</span> AddOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, Option_type opttyp, <span class="keyword">const</span> <span class="keywordtype">char</span>* txt=NULL);
<a name="l00261"></a>00261         
<a name="l00262"></a>00262         <span class="keywordtype">bool</span> RemoveOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, Option_type optype);
<a name="l00263"></a>00263 
<a name="l00265"></a>00265         <span class="keywordtype">void</span> SetOptions(<span class="keyword">const</span> <span class="keywordtype">char</span>* options, Option_type opttyp);
<a name="l00266"></a>00266 
<a name="l00268"></a>00268         <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterOptionParam(std::string name, OBFormat* pFormat,
<a name="l00269"></a>00269                                               <span class="keywordtype">int</span> numberParams=0, Option_type typ=OUTOPTIONS);
<a name="l00270"></a>00270 
<a name="l00272"></a>00272         <span class="keyword">static</span> <span class="keywordtype">int</span> GetOptionParams(std::string name, Option_type typ);
<a name="l00274"></a>00274 
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 
<a name="l00278"></a>00278         <span class="keywordtype">int</span>         Convert(std::istream* is, std::ostream* os);
<a name="l00279"></a>00279 
<a name="l00281"></a>00281         <span class="keywordtype">int</span>         Convert();
<a name="l00282"></a>00282 
<a name="l00285"></a>00285         <span class="keywordtype">int</span>                                     FullConvert(std::vector&lt;std::string&gt;&amp; FileList,
<a name="l00286"></a>00286                                                                                 std::string&amp; OutputFileName, std::vector&lt;std::string&gt;&amp; OutputFileList);
<a name="l00288"></a>00288 
<a name="l00290"></a>00290 
<a name="l00291"></a>00291         <span class="keywordtype">int</span>                                     AddChemObject(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb);
<a name="l00292"></a>00292         <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*                 GetChemObject(); 
<a name="l00293"></a>00293         <span class="keywordtype">bool</span>                            IsLast();
<a name="l00294"></a>00294         <span class="keywordtype">bool</span>                            IsFirstInput();
<a name="l00295"></a>00295         <span class="keywordtype">int</span>         GetOutputIndex() <span class="keyword">const </span>;
<a name="l00296"></a>00296         <span class="keywordtype">void</span>                            SetOutputIndex(<span class="keywordtype">int</span> indx);
<a name="l00297"></a>00297         <span class="keywordtype">void</span>                            SetMoreFilesToCome();
<a name="l00298"></a>00298         <span class="keywordtype">void</span>                            SetOneObjectOnly();
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 
<a name="l00301"></a>00301 
<a name="l00302"></a>00302 
<a name="l00303"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#442b17995d84d654e33ede11a63d7f80">00303</a>         <span class="keyword">static</span> OBFormat* GetDefaultFormat(){<span class="keywordflow">return</span> pDefaultFormat;};
<a name="l00304"></a>00304 
<a name="l00306"></a>00306         
<a name="l00309"></a>00309         <span class="keywordtype">bool</span>                            Write(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::ostream* pout=NULL);
<a name="l00310"></a>00310 
<a name="l00312"></a>00312         
<a name="l00316"></a>00316         std::string                     WriteString(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb);
<a name="l00317"></a>00317 
<a name="l00319"></a>00319         
<a name="l00324"></a>00324         <span class="keywordtype">bool</span>                            WriteFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string filePath);
<a name="l00325"></a>00325 
<a name="l00327"></a>00327         
<a name="l00331"></a>00331         <span class="keywordtype">bool</span>    Read(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::istream* pin=NULL);
<a name="l00332"></a>00332 
<a name="l00334"></a>00334         
<a name="l00338"></a>00338           <span class="keywordtype">bool</span>  ReadString(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b837943061a284187ff6e555ac7093f528">input</a>);
<a name="l00339"></a>00339 
<a name="l00341"></a>00341         
<a name="l00347"></a>00347           <span class="keywordtype">bool</span>  ReadFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string filePath);
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 
<a name="l00351"></a>00351         <span class="keyword">static</span> std::string BatchFileName(std::string&amp; BaseName, std::string&amp; InFile);
<a name="l00353"></a>00353         <span class="keyword">static</span> std::string IncrementedFileName(std::string&amp; BaseName, <span class="keyword">const</span> <span class="keywordtype">int</span> Count);
<a name="l00355"></a>00355 
<a name="l00356"></a>00356 <span class="keyword">protected</span>:
<a name="l00357"></a>00357         <span class="keywordtype">bool</span>             SetStartAndEnd();
<a name="l00358"></a>00358         <span class="keyword">static</span> <a class="code" href="namespaceOpenBabel.shtml#92e73e2fb2bb989421e95ab53825a00b">FMapType</a>&amp; FormatsMap();
<a name="l00359"></a>00359         <span class="keyword">static</span> <a class="code" href="namespaceOpenBabel.shtml#92e73e2fb2bb989421e95ab53825a00b">FMapType</a>&amp; FormatsMIMEMap();
<a name="l00360"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">00360</a>         <span class="keyword">typedef</span> std::map&lt;std::string,int&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">OPAMapType</a>;
<a name="l00361"></a>00361         <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">OPAMapType</a>&amp; OptionParamArray(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ);
<a name="l00362"></a>00362         <span class="keyword">static</span> <span class="keywordtype">int</span>       LoadFormatFiles();
<a name="l00363"></a>00363         <span class="keywordtype">bool</span>             OpenAndSetFormat(<span class="keywordtype">bool</span> SetFormat, std::ifstream* is);
<a name="l00364"></a>00364 
<a name="l00365"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#20354c0458b4e08dc62db4a4e8717c61">00365</a>         std::string       InFilename;
<a name="l00366"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b965c6baeb6893dd15a2fefefce795df">00366</a>         std::istream*     pInStream;
<a name="l00367"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#efeab37b3ca85a70cef740bb1636b353">00367</a>         std::ostream*     pOutStream;
<a name="l00368"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3ccf12afddd45bc1777272f27c35cb48">00368</a>         <span class="keyword">static</span> OBFormat*  pDefaultFormat;
<a name="l00369"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#70c004d49155986bcc163bac07df0e4e">00369</a>         OBFormat*         pInFormat;
<a name="l00370"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#4d630735f21540de237cdcc32916bffb">00370</a>         OBFormat*         pOutFormat;
<a name="l00371"></a>00371 
<a name="l00372"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3d9e064f9e26ed2e52b140b7cc34a8d6">00372</a>         std::map&lt;std::string,std::string&gt; OptionsArray[3];
<a name="l00373"></a>00373 
<a name="l00374"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#075e1e3c9dd399cef584d7338cc37938">00374</a>         <span class="keywordtype">int</span>               Index;
<a name="l00375"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#c52d6fdbe254370662cccd43af0248f2">00375</a>         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      StartNumber;
<a name="l00376"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#db31d46cbf6e64e86bae6d24d90c9702">00376</a>         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      EndNumber;
<a name="l00377"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ad462966ed963f892117056de1eba502">00377</a>         <span class="keywordtype">int</span>               Count;
<a name="l00378"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#6025251d18641dab4058222b69d1a98c">00378</a>         <span class="keywordtype">bool</span>              m_IsLast;
<a name="l00379"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b4ec386870233b42d353a4d66d7b0cee">00379</a>         <span class="keywordtype">bool</span>              MoreFilesToCome;
<a name="l00380"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7002deaca76f3fc235c76be1fcc38dfa">00380</a>         <span class="keywordtype">bool</span>              OneObjectOnly;
<a name="l00381"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#9bdd5c815677e240cec9c2e4a71d73f2">00381</a>         <span class="keywordtype">bool</span>              ReadyToInput;
<a name="l00382"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#e0c8e3d58dc0c0d9713ca7a7d27b8c4d">00382</a>         <span class="keywordtype">bool</span>              CheckedForGzip; 
<a name="l00383"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#501b1ec0c0e4fe9e78398e3837a759ec">00383</a>         <span class="keyword">static</span> <span class="keywordtype">int</span> FormatFilesLoaded;
<a name="l00384"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#20a1d62cb932144d66e52d7c823fb0a1">00384</a>         <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*           pOb1;
<a name="l00385"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b77068f3bb4cb88694a6be653c00f04e">00385</a>         std::streampos wInpos; 
<a name="l00386"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#545a1341008a23c2dd0721c164a9ad89">00386</a>         std::streampos rInpos; 
<a name="l00387"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#fee7e5bffccd262faaff0417e5ae9af3">00387</a>         size_t wInlen; 
<a name="l00388"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#1a897c3f35235e4ca7da37ca245db065">00388</a>         size_t rInlen; 
<a name="l00389"></a>00389         
<a name="l00390"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3846aa2ce719d5820b66e302c6aeaa8a">00390</a>         OBConversion* pAuxConv;
<a name="l00391"></a>00391 };
<a name="l00392"></a>00392 
<a name="l00394"></a><a class="code" href="obconversion_8h.shtml#5d766d529e097f852406cf0c434e54e0">00394</a> <span class="preprocessor">#define NOTREADABLE     0x01</span>
<a name="l00395"></a><a class="code" href="obconversion_8h.shtml#ec13538a29f6a7d630b3a59ccce0e03c">00395</a> <span class="preprocessor"></span><span class="preprocessor">#define READONEONLY     0x02</span>
<a name="l00396"></a><a class="code" href="obconversion_8h.shtml#95479d1fb64936c936077e47356bf6e2">00396</a> <span class="preprocessor"></span><span class="preprocessor">#define READBINARY      0x04</span>
<a name="l00397"></a><a class="code" href="obconversion_8h.shtml#201c57b6b8e95558ead652e391d2e157">00397</a> <span class="preprocessor"></span><span class="preprocessor">#define NOTWRITABLE     0x10</span>
<a name="l00398"></a><a class="code" href="obconversion_8h.shtml#b95246c97f4ade91aee102631b6b8666">00398</a> <span class="preprocessor"></span><span class="preprocessor">#define WRITEONEONLY    0x20</span>
<a name="l00399"></a><a class="code" href="obconversion_8h.shtml#655ed7589181707a2c6d18d7777cb1c6">00399</a> <span class="preprocessor"></span><span class="preprocessor">#define WRITEBINARY     0x40</span>
<a name="l00400"></a><a class="code" href="obconversion_8h.shtml#114620de287b71102355c29edc4b0115">00400</a> <span class="preprocessor"></span><span class="preprocessor">#define DEFAULTFORMAT 0x4000</span>
<a name="l00401"></a>00401 <span class="preprocessor"></span>
<a name="l00402"></a>00402 } <span class="comment">//namespace OpenBabel</span>
<a name="l00403"></a>00403 <span class="preprocessor">#endif //OB_CONV_H</span>
<a name="l00404"></a>00404 <span class="preprocessor"></span>
<a name="l00407"></a>00407 
<a name="l00408"></a>00408  
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:01 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
