<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: ring.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>ring.h</h1><a href="ring_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">ring.h - Deal with rings, find smallest set of smallest rings (SSSR).</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_RING_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_RING_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;deque&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="keyword">namespace </span>OpenBabel
<a name="l00027"></a>00027 {
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="keyword">class </span>OBMol;
<a name="l00030"></a>00030 <span class="keyword">class </span>OBAtom;
<a name="l00031"></a>00031 <span class="keyword">class </span>OBBond;
<a name="l00032"></a>00032 
<a name="l00034"></a><a class="code" href="classOpenBabel_1_1OBRTree.shtml">00034</a> <span class="keyword">class </span>OBAPI OBRTree
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036   <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>  *_atom; 
<a name="l00037"></a>00037   OBRTree *_prv; 
<a name="l00038"></a>00038 <span class="keyword">public</span>:
<a name="l00039"></a>00039   OBRTree(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,OBRTree*);
<a name="l00040"></a><a class="code" href="classOpenBabel_1_1OBRTree.shtml#552ea16c4bb845b80b7cd56c2bd5c87d">00040</a>   ~OBRTree()    {}
<a name="l00041"></a>00041   
<a name="l00043"></a>00043   <span class="keywordtype">int</span>  GetAtomIdx();
<a name="l00045"></a>00045   <span class="keywordtype">void</span> PathToRoot(std::vector&lt;OBNodeBase*&gt;&amp;);
<a name="l00046"></a>00046 };
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="comment">// class introduction in ring.cpp</span>
<a name="l00049"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml">00049</a> <span class="keyword">class </span>OBAPI OBRing
<a name="l00050"></a>00050 {
<a name="l00051"></a>00051     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;
<a name="l00052"></a>00052 <span class="keyword">public</span>:
<a name="l00053"></a>00053     <span class="comment">//public data members</span>
<a name="l00054"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#86d1b14f3c439c5be01e0f6c9dc60a1d">00054</a>     std::vector&lt;int&gt; _path;
<a name="l00055"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#babc3e7a7e660eba9b2dfa3b2bc28782">00055</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> _pathset;
<a name="l00056"></a>00056     <span class="keywordtype">bool</span> findCenterAndNormal(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp; center, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;norm1, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;norm2);
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="comment">//constructors</span>
<a name="l00059"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#ca37bf71481749f6555e916555d9e7a2">00059</a>     OBRing()    {}
<a name="l00060"></a>00060     OBRing(std::vector&lt;int&gt;&amp;,<span class="keywordtype">int</span>);
<a name="l00061"></a>00061     OBRing(<span class="keyword">const</span> OBRing &amp;src);
<a name="l00062"></a>00062     OBRing&amp; operator=(<span class="keyword">const</span> OBRing &amp;src);
<a name="l00063"></a>00063 
<a name="l00064"></a>00064     <span class="comment">//member functions</span>
<a name="l00065"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#24926108b770033792d015cb86aeffb3">00065</a>     <span class="keywordtype">int</span>    Size()<span class="keyword">     const</span>
<a name="l00066"></a>00066 <span class="keyword">    </span>{
<a name="l00067"></a>00067         <span class="keywordflow">return</span>(_path.size());
<a name="l00068"></a>00068     }
<a name="l00069"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#0524371fb8d3859ad2f9b4cd3f5a4f69">00069</a>     <span class="keywordtype">int</span>    PathSize()<span class="keyword"> const</span>
<a name="l00070"></a>00070 <span class="keyword">    </span>{
<a name="l00071"></a>00071         <span class="keywordflow">return</span>(_path.size());
<a name="l00072"></a>00072     }
<a name="l00073"></a>00073     <span class="keywordtype">bool</span>   IsMember(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a);
<a name="l00074"></a>00074     <span class="keywordtype">bool</span>         IsMember(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *b);
<a name="l00075"></a>00075     <span class="keywordtype">bool</span>   IsAromatic();
<a name="l00076"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#87c9cc8c92936bd191dca74f78fb84cb">00076</a>     <span class="keywordtype">bool</span>   IsInRing(<span class="keywordtype">int</span> i)
<a name="l00077"></a>00077     {
<a name="l00078"></a>00078         <span class="keywordflow">return</span>(_pathset.BitIsOn(i));
<a name="l00079"></a>00079     }
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#82ba3a4d5db75e9f11d3ea8dd5ef32b8">00080</a>     <span class="keywordtype">void</span>   SetParent(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *m)
<a name="l00081"></a>00081     {
<a name="l00082"></a>00082         _parent = m;
<a name="l00083"></a>00083     }
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#d8480b61159bc6cb861b17341dc2b29a">00084</a>     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *GetParent()
<a name="l00085"></a>00085     {
<a name="l00086"></a>00086         <span class="keywordflow">return</span>(_parent);
<a name="l00087"></a>00087     }
<a name="l00088"></a>00088 };
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#73666e31fdcd78ff4d20cc2b31ad904f">CompareRingSize</a>(<span class="keyword">const</span> OBRing *,<span class="keyword">const</span> OBRing *);
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml">00094</a> <span class="keyword">class </span>OBAPI OBRingSearch
<a name="l00095"></a>00095 {
<a name="l00096"></a>00096     std::vector&lt;OBBond*&gt; _bonds;
<a name="l00097"></a>00097     std::vector&lt;OBRing*&gt; _rlist;
<a name="l00098"></a>00098 <span class="keyword">public</span>:
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#f1211b4680e59ac34a16593ddcdb2761">00099</a>     OBRingSearch()    {}
<a name="l00100"></a>00100     ~OBRingSearch();
<a name="l00101"></a>00101 
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#cd7836d1e4e1ab6fbd3faa49403e5503">00103</a>     <span class="keywordtype">void</span>    SortRings()
<a name="l00104"></a>00104     {
<a name="l00105"></a>00105         std::sort(_rlist.begin(),_rlist.end(),<a class="code" href="namespaceOpenBabel.shtml#73666e31fdcd78ff4d20cc2b31ad904f">CompareRingSize</a>);
<a name="l00106"></a>00106     }
<a name="l00108"></a>00108     <span class="keywordtype">void</span>    RemoveRedundant(<span class="keywordtype">int</span>);
<a name="l00109"></a>00109     <span class="keywordtype">void</span>    AddRingFromClosure(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;,<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *);
<a name="l00111"></a>00111     <span class="keywordtype">void</span>    WriteRings();
<a name="l00112"></a>00112 
<a name="l00113"></a>00113     <span class="keywordtype">bool</span>    SaveUniqueRing(std::deque&lt;int&gt;&amp;,std::deque&lt;int&gt;&amp;);
<a name="l00114"></a>00114 
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#a1a05257821a8156625beabb7dd58e0b">00115</a>     std::vector&lt;OBRing*&gt;::iterator BeginRings()
<a name="l00116"></a>00116     {
<a name="l00117"></a>00117         <span class="keywordflow">return</span>(_rlist.begin());
<a name="l00118"></a>00118     }
<a name="l00119"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#07ad405727c652a6a280d821b9d1ac47">00119</a>     std::vector&lt;OBRing*&gt;::iterator EndRings()
<a name="l00120"></a>00120     {
<a name="l00121"></a>00121         <span class="keywordflow">return</span>(_rlist.end());
<a name="l00122"></a>00122     }
<a name="l00123"></a>00123 };
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 <span class="preprocessor">#endif // OB_RING_H</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:01 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
