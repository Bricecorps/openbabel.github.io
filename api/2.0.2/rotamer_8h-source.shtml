<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: rotamer.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>rotamer.h</h1><a href="rotamer_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">rotamer.h - Handle rotamer list data.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2000 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_ROTAMER_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_ROTAMER_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#if HAVE_FSTREAM</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#elif HAVE_FSTREAM_H</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#include &lt;fstream.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#endif</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span>
<a name="l00032"></a>00032 <span class="preprocessor">#include "<a class="code" href="mol_8h.shtml">mol.h</a>"</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include "<a class="code" href="rotor_8h.shtml">rotor.h</a>"</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include "<a class="code" href="generic_8h.shtml">generic.h</a>"</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">namespace </span>OpenBabel
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 
<a name="l00040"></a><a class="code" href="classOpenBabel_1_1OBRotamerList.shtml">00040</a> <span class="keyword">class </span>OBAPI OBRotamerList : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                         _NBaseCoords;
<a name="l00043"></a>00043     std::vector&lt;double*&gt;                       _c;
<a name="l00044"></a>00044     std::vector&lt;std::vector&lt;double&gt; &gt;               _vres;
<a name="l00045"></a>00045     std::vector&lt;unsigned char*&gt;               _vrotamer;
<a name="l00046"></a>00046     std::vector&lt;std::pair&lt;OBAtom**,std::vector&lt;int&gt; &gt; &gt; _vrotor;
<a name="l00047"></a>00047 
<a name="l00048"></a>00048     OBRotamerList(<span class="keyword">const</span> OBRotamerList &amp;cpy) : <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(cpy)
<a name="l00049"></a>00049     {}
<a name="l00050"></a>00050     OBRotamerList&amp; operator =(<span class="keyword">const</span> OBRotamerList &amp;)
<a name="l00051"></a>00051     {
<a name="l00052"></a>00052         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00053"></a>00053     }
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="keyword">public</span>:
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBRotamerList.shtml#a1cef5a8affd0b0f75891495f1674805">00056</a>     OBRotamerList()
<a name="l00057"></a>00057     {
<a name="l00058"></a>00058         _NBaseCoords=0;
<a name="l00059"></a>00059         _type= <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#9421aaca7982c3bc58dcb1f7b01dd636">OBGenericDataType::RotamerList</a>;
<a name="l00060"></a>00060         _attr=<span class="stringliteral">"RotamerList"</span>;
<a name="l00061"></a>00061     }
<a name="l00062"></a>00062     ~OBRotamerList();
<a name="l00063"></a>00063     <span class="keywordtype">void</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;,<a class="code" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a>&amp;);
<a name="l00064"></a>00064     <span class="keywordtype">void</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;,<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*,<span class="keywordtype">int</span>);
<a name="l00066"></a><a class="code" href="classOpenBabel_1_1OBRotamerList.shtml#cec7eb06ebdea2ad5380429c895fbff3">00066</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumRotors()<span class="keyword">   const</span>
<a name="l00067"></a>00067 <span class="keyword">    </span>{
<a name="l00068"></a>00068         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_vrotor.size();
<a name="l00069"></a>00069     }
<a name="l00071"></a><a class="code" href="classOpenBabel_1_1OBRotamerList.shtml#dd4e6ba7b3a1dbd14607e23096de4212">00071</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumRotamers()<span class="keyword"> const</span>
<a name="l00072"></a>00072 <span class="keyword">    </span>{
<a name="l00073"></a>00073         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_vrotamer.size();
<a name="l00074"></a>00074     }
<a name="l00075"></a>00075     <span class="keywordtype">void</span> AddRotamer(<span class="keywordtype">double</span>*);
<a name="l00076"></a>00076     <span class="keywordtype">void</span> AddRotamer(<span class="keywordtype">int</span> *arr);
<a name="l00077"></a>00077     <span class="keywordtype">void</span> AddRotamer(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *arr);
<a name="l00078"></a>00078     <span class="keywordtype">void</span> AddRotamers(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*,<span class="keywordtype">int</span>);
<a name="l00079"></a>00079     <span class="keywordtype">void</span> GetReferenceArray(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*);
<a name="l00080"></a>00080     <span class="keywordtype">void</span> ExpandConformerList(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;,std::vector&lt;double*&gt;&amp;);
<a name="l00081"></a><a class="code" href="classOpenBabel_1_1OBRotamerList.shtml#2948e1a74f2c22c575d6ddc6643f6ef1">00081</a>     std::vector&lt;unsigned char*&gt;::iterator BeginRotamer()
<a name="l00082"></a>00082     {
<a name="l00083"></a>00083         <span class="keywordflow">return</span> _vrotamer.begin();
<a name="l00084"></a>00084     }
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBRotamerList.shtml#589d2df01c6f3e1cb1bf95b25e804409">00085</a>     std::vector&lt;unsigned char*&gt;::iterator EndRotamer()
<a name="l00086"></a>00086     {
<a name="l00087"></a>00087         <span class="keywordflow">return</span> _vrotamer.end();
<a name="l00088"></a>00088     }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090     <span class="comment">// Support for internal storage of base coordinate sets that</span>
<a name="l00091"></a>00091     <span class="comment">// rotamers operate on</span>
<a name="l00092"></a>00092 
<a name="l00094"></a>00094     std::vector&lt;double*&gt; CreateConformerList(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol);
<a name="l00095"></a>00095 
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBRotamerList.shtml#91c3efe37db1542a2f553440143915f9">00098</a>     <span class="keywordtype">void</span> SetBaseCoordinateSets(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol)
<a name="l00099"></a>00099     {
<a name="l00100"></a>00100         SetBaseCoordinateSets(mol.<a class="code" href="classOpenBabel_1_1OBMol.shtml#5246a44bf82aa31c2f428665db94bfb8">GetConformers</a>(),mol.<a class="code" href="classOpenBabel_1_1OBMol.shtml#2f0695eb7d6ff6321032d88655ae8d25">NumAtoms</a>());
<a name="l00101"></a>00101     }
<a name="l00102"></a>00102 
<a name="l00104"></a>00104     <span class="keywordtype">void</span> SetBaseCoordinateSets(std::vector&lt;double*&gt; bc, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N);
<a name="l00105"></a>00105 
<a name="l00106"></a><a class="code" href="classOpenBabel_1_1OBRotamerList.shtml#dc7ea5c9356d1597bec2d328bcdc3b07">00106</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumBaseCoordinateSets()<span class="keyword"> const</span>
<a name="l00107"></a>00107 <span class="keyword">    </span>{
<a name="l00108"></a>00108         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_c.size();
<a name="l00109"></a>00109     }
<a name="l00110"></a>00110 
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBRotamerList.shtml#76b427a5986251a42aa5a924282289d8">00112</a>     <span class="keywordtype">double</span> *GetBaseCoordinateSet(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i)
<a name="l00113"></a>00113     {
<a name="l00114"></a>00114         <span class="keywordflow">return</span> (i&lt;_c.size()) ? _c[i] : NULL;
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116 
<a name="l00117"></a><a class="code" href="classOpenBabel_1_1OBRotamerList.shtml#2f0695eb7d6ff6321032d88655ae8d25">00117</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumAtoms()<span class="keyword"> const</span>
<a name="l00118"></a>00118 <span class="keyword">    </span>{
<a name="l00119"></a>00119         <span class="keywordflow">return</span> _NBaseCoords;
<a name="l00120"></a>00120     }
<a name="l00121"></a>00121 };
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#7860a87ade74d8bec88e02c18c59b638">Swab</a>(<span class="keywordtype">int</span>);
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 }
<a name="l00126"></a>00126 
<a name="l00127"></a>00127 <span class="preprocessor">#endif // OB_ROTAMER_H</span>
<a name="l00128"></a>00128 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:01 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
