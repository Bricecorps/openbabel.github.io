<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: generic.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>generic.h</h1><a href="generic_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">generic.h - Handle generic data classes. Custom data for atoms, bonds, etc.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_GENERIC_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_GENERIC_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include "babelconfig.h"</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="keyword">namespace </span>OpenBabel
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">class </span>OBAtom;
<a name="l00033"></a>00033 <span class="keyword">class </span>OBBond;
<a name="l00034"></a>00034 <span class="keyword">class </span>OBRing;
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a064ed729569f7924bd33b939245dc4e">Trim</a>(std::string&amp; txt);
<a name="l00037"></a>00037 
<a name="l00049"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml">00049</a> <span class="keyword">namespace </span>OBGenericDataType
<a name="l00050"></a>00050 {
<a name="l00052"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#54707fc769d5a5a7f624dcc7648765c9">00052</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#54707fc769d5a5a7f624dcc7648765c9">UndefinedData</a> =      0;
<a name="l00053"></a>00053 
<a name="l00055"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#ab5cbd1af8318315c397fc2a309f4233">00055</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#ab5cbd1af8318315c397fc2a309f4233">PairData</a>      =      1;
<a name="l00056"></a>00056 
<a name="l00058"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#b65805ed26d98f161e4ec6ce13195be3">00058</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#b65805ed26d98f161e4ec6ce13195be3">EnergyData</a>    =      2;
<a name="l00059"></a>00059 
<a name="l00061"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#72fed2175136171801a5c4263a287ca1">00061</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#72fed2175136171801a5c4263a287ca1">CommentData</a>   =      3;
<a name="l00062"></a>00062 
<a name="l00064"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#66e4900385e2ba1f43ac1b2f63328cfe">00064</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#66e4900385e2ba1f43ac1b2f63328cfe">ConformerData</a> =      4;
<a name="l00065"></a>00065 
<a name="l00067"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#f384a97c0adb38fd899bbb9596e47558">00067</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#f384a97c0adb38fd899bbb9596e47558">ExternalBondData</a> =   5;
<a name="l00068"></a>00068 
<a name="l00070"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#9421aaca7982c3bc58dcb1f7b01dd636">00070</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#9421aaca7982c3bc58dcb1f7b01dd636">RotamerList</a> =        6;
<a name="l00071"></a>00071 
<a name="l00073"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#6fb46876841821177e41c0fc2835407f">00073</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#6fb46876841821177e41c0fc2835407f">VirtualBondData</a> =    7;
<a name="l00074"></a>00074 
<a name="l00076"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#5267c6f614f86710eed6d4bbca39139c">00076</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#5267c6f614f86710eed6d4bbca39139c">RingData</a> =           8;
<a name="l00077"></a>00077 
<a name="l00079"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#f5b2035bf8d479aabefad60216e9d088">00079</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#f5b2035bf8d479aabefad60216e9d088">TorsionData</a> =        9;
<a name="l00080"></a>00080 
<a name="l00082"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#9bef61cc424f66aaf45408b34dd2e3d6">00082</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#9bef61cc424f66aaf45408b34dd2e3d6">AngleData</a> =         10;
<a name="l00083"></a>00083 
<a name="l00085"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#d76c93228f24ae89bbce9650c832c9b1">00085</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#d76c93228f24ae89bbce9650c832c9b1">SerialNums</a> =        11;
<a name="l00086"></a>00086 
<a name="l00088"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#baed60580659cc04903745f0db5d8fad">00088</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#baed60580659cc04903745f0db5d8fad">UnitCell</a> =          12;
<a name="l00089"></a>00089 
<a name="l00091"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#f0016a09c8163a62d3faa338ba6ddd92">00091</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#f0016a09c8163a62d3faa338ba6ddd92">SpinData</a> =          13;
<a name="l00092"></a>00092 
<a name="l00094"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#8f3d1085fc5d310b4735ed49ebd9b675">00094</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#8f3d1085fc5d310b4735ed49ebd9b675">ChargeData</a> =        14;
<a name="l00095"></a>00095 
<a name="l00097"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#241a9c5d8f15a8a73cfaf5025340c6fb">00097</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#241a9c5d8f15a8a73cfaf5025340c6fb">SymmetryData</a> =      15;
<a name="l00098"></a>00098 
<a name="l00100"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#936a2998727c794854a185536e7e079a">00100</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#936a2998727c794854a185536e7e079a">ChiralData</a> =        16;
<a name="l00101"></a>00101 
<a name="l00103"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#77748d18fcbc8f6bbfbf8dac5c8a23d4">00103</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#77748d18fcbc8f6bbfbf8dac5c8a23d4">OccupationData</a> =    17;
<a name="l00104"></a>00104 
<a name="l00106"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#140be54542a11a6a26998d1ce4c2c822">00106</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#140be54542a11a6a26998d1ce4c2c822">DensityData</a> =       18;
<a name="l00107"></a>00107 
<a name="l00109"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#358ba65c067d9d8d00caa8c46f322857">00109</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#358ba65c067d9d8d00caa8c46f322857">ElectronicData</a> =    19;
<a name="l00110"></a>00110 
<a name="l00112"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#35eba540314e1b92deefc1c83886f2fb">00112</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#35eba540314e1b92deefc1c83886f2fb">VibrationData</a> =     20;
<a name="l00113"></a>00113 
<a name="l00115"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#b429e23fd3e42a69b1ea221facb6a27c">00115</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#b429e23fd3e42a69b1ea221facb6a27c">RotationData</a> =      21;
<a name="l00116"></a>00116 
<a name="l00118"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#aeceeb102b697b00b681169ee96c9e5c">00118</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#aeceeb102b697b00b681169ee96c9e5c">NuclearData</a> =       22;
<a name="l00119"></a>00119 
<a name="l00120"></a>00120   <span class="comment">// space for up to 2^14 more entries...</span>
<a name="l00121"></a>00121 
<a name="l00123"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#fe4267ab37cf325e5ac9286852497009">00123</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#fe4267ab37cf325e5ac9286852497009">CustomData0</a> = 16384;
<a name="l00124"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#3b2b59d1921d1a83f5597bd3b3011023">00124</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#3b2b59d1921d1a83f5597bd3b3011023">CustomData1</a> = 16385;
<a name="l00125"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#fc1f3081e306559f035aa6d3560430ee">00125</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#fc1f3081e306559f035aa6d3560430ee">CustomData2</a> = 16386;
<a name="l00126"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#eb15d1c46151b9474192f6a38b71331e">00126</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#eb15d1c46151b9474192f6a38b71331e">CustomData3</a> = 16387;
<a name="l00127"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#b21a58b18b06ed89ed8cf4695d502b5c">00127</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#b21a58b18b06ed89ed8cf4695d502b5c">CustomData4</a> = 16388;
<a name="l00128"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#14e73b5b69bd20285633ae54dc49c661">00128</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#14e73b5b69bd20285633ae54dc49c661">CustomData5</a> = 16389;
<a name="l00129"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#f2b3bf581823584638935c41e78d2230">00129</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#f2b3bf581823584638935c41e78d2230">CustomData6</a> = 16390;
<a name="l00130"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#505387332038167523826da6dec62719">00130</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#505387332038167523826da6dec62719">CustomData7</a> = 16391;
<a name="l00131"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#f8db80ecfa1ee0ea1eaabac55770a5e3">00131</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#f8db80ecfa1ee0ea1eaabac55770a5e3">CustomData8</a> = 16392;
<a name="l00132"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#13ee762d341e03ee6a037ffa3cb8c569">00132</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#13ee762d341e03ee6a037ffa3cb8c569">CustomData9</a> = 16393;
<a name="l00133"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#ee40de1111358ae20ca06f33e8d6638a">00133</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#ee40de1111358ae20ca06f33e8d6638a">CustomData10</a> = 16394;
<a name="l00134"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#b443115a20059785879ed053f2fa30df">00134</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#b443115a20059785879ed053f2fa30df">CustomData11</a> = 16395;
<a name="l00135"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#54cb2edff38a4145ba91f3d4a995699c">00135</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#54cb2edff38a4145ba91f3d4a995699c">CustomData12</a> = 16396;
<a name="l00136"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#6382b40be14b31534b779da02ac851f1">00136</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#6382b40be14b31534b779da02ac851f1">CustomData13</a> = 16397;
<a name="l00137"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#76ee70bdbdaa65e32e434d5723607e25">00137</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#76ee70bdbdaa65e32e434d5723607e25">CustomData14</a> = 16398;
<a name="l00138"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#03d161aae9e02389f5244bbd1a1ade8f">00138</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#03d161aae9e02389f5244bbd1a1ade8f">CustomData15</a> = 16399;
<a name="l00139"></a>00139 } <span class="comment">// end namespace</span>
<a name="l00140"></a>00140 
<a name="l00142"></a>00142 <span class="comment">// class introduction in generic.cpp</span>
<a name="l00143"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml">00143</a> <span class="keyword">class </span>OBAPI OBGenericData
<a name="l00144"></a>00144 {
<a name="l00145"></a>00145 <span class="keyword">protected</span>:
<a name="l00146"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#dceb77134f15418a66cf1124dcef1b51">00146</a>     std::string     _attr; 
<a name="l00147"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#31291823d487a4a47f24aae5870505ef">00147</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>            _type; 
<a name="l00148"></a>00148 <span class="keyword">public</span>:
<a name="l00149"></a>00149     OBGenericData();
<a name="l00150"></a>00150     OBGenericData(<span class="keyword">const</span> OBGenericData&amp;);
<a name="l00151"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#cb834533508953a264ed93b74fddad8d">00151</a>     <span class="keyword">virtual</span> ~OBGenericData()    {}
<a name="l00152"></a>00152     OBGenericData&amp; operator=(<span class="keyword">const</span> OBGenericData &amp;src);
<a name="l00153"></a>00153 
<a name="l00154"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#ae3d15983201a2a115701b2c538fef77">00154</a>     <span class="keywordtype">void</span>                      SetAttribute(<span class="keyword">const</span> std::string &amp;v)
<a name="l00155"></a>00155     {        _attr = v;        }
<a name="l00156"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#c61fc66ef692e79290d6eaf7231db92c">00156</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetAttribute()<span class="keyword">  const</span>
<a name="l00157"></a>00157 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_attr);    }
<a name="l00158"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#91834e24b299c63cdf2cb77795298446">00158</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                GetDataType()<span class="keyword">    const</span>
<a name="l00159"></a>00159 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_type);    }
<a name="l00160"></a>00160 };
<a name="l00161"></a>00161 
<a name="l00163"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml">00163</a> <span class="keyword">class </span>OBAPI OBCommentData : <span class="keyword">public</span> OBGenericData
<a name="l00164"></a>00164 {
<a name="l00165"></a>00165 <span class="keyword">protected</span>:
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#bfcfad17c10b3bb5b39412d927518e43">00166</a>     std::string _data;
<a name="l00167"></a>00167 <span class="keyword">public</span>:
<a name="l00168"></a>00168     OBCommentData();
<a name="l00169"></a>00169     OBCommentData(<span class="keyword">const</span> OBCommentData&amp;);
<a name="l00170"></a>00170     OBCommentData&amp; operator=(<span class="keyword">const</span> OBCommentData &amp;src);
<a name="l00171"></a>00171 
<a name="l00172"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#71ec30c014852fe90aed06daa76e378b">00172</a>     <span class="keywordtype">void</span>          SetData(<span class="keyword">const</span> std::string &amp;data)
<a name="l00173"></a>00173     { _data = data; <a class="code" href="namespaceOpenBabel.shtml#a064ed729569f7924bd33b939245dc4e">Trim</a>(_data); }
<a name="l00174"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#0f90c3ff45f5d9a13c71f46dba0770e5">00174</a>     <span class="keywordtype">void</span>          SetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *d)
<a name="l00175"></a>00175     {_data = d; <a class="code" href="namespaceOpenBabel.shtml#a064ed729569f7924bd33b939245dc4e">Trim</a>(_data);     }
<a name="l00176"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#181123deb29bb853771bb72608c7e81b">00176</a>     <span class="keyword">const</span> std::string &amp;GetData()<span class="keyword">              const</span>
<a name="l00177"></a>00177 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_data);      }
<a name="l00178"></a>00178 };
<a name="l00179"></a>00179 
<a name="l00182"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml">00182</a> <span class="keyword">class </span>OBAPI OBExternalBond
<a name="l00183"></a>00183 {
<a name="l00184"></a>00184     <span class="keywordtype">int</span>     _idx;
<a name="l00185"></a>00185     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_atom;
<a name="l00186"></a>00186     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *_bond;
<a name="l00187"></a>00187 <span class="keyword">public</span>:
<a name="l00188"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a3e2d107afd3e69aee9bf52b47d1444c">00188</a>     OBExternalBond()    {}
<a name="l00189"></a>00189     OBExternalBond(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *,<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *,<span class="keywordtype">int</span>);
<a name="l00190"></a>00190     OBExternalBond(<span class="keyword">const</span> OBExternalBond &amp;);
<a name="l00191"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#359543c25a72cf7a9ab33ab75b9b5f1e">00191</a>     ~OBExternalBond()   {}
<a name="l00192"></a>00192 
<a name="l00193"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#141f8abda99de827deec22f935dc9e31">00193</a>     <span class="keywordtype">int</span>     GetIdx()<span class="keyword">  const    </span>{        <span class="keywordflow">return</span>(_idx);    }
<a name="l00194"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a50dcd20da6bba326a2f820ded0c1b19">00194</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *GetAtom()<span class="keyword"> const    </span>{        <span class="keywordflow">return</span>(_atom);   }
<a name="l00195"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#61f7b16bfa66a44e7092b0605157ca10">00195</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *GetBond()<span class="keyword"> const    </span>{        <span class="keywordflow">return</span>(_bond);   }
<a name="l00196"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#b994a975e39f5c62288f4f972b6f90c9">00196</a>     <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)       {        _idx = idx;      }
<a name="l00197"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#84cdb57aaf88aa0a94f4f4a1dd0f0252">00197</a>     <span class="keywordtype">void</span> SetAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom) {        _atom = atom;    }
<a name="l00198"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#75c73979e73fb44e48424150fa0208c7">00198</a>     <span class="keywordtype">void</span> SetBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond) {        _bond = bond;    }
<a name="l00199"></a>00199 };
<a name="l00200"></a>00200 
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml">00202</a> <span class="keyword">class </span>OBAPI OBExternalBondData : <span class="keyword">public</span> OBGenericData
<a name="l00203"></a>00203 {
<a name="l00204"></a>00204 <span class="keyword">protected</span>:
<a name="l00205"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#8b0c5550b7332d65d1c285004891cff2">00205</a>     std::vector&lt;OBExternalBond&gt; _vexbnd;
<a name="l00206"></a>00206 <span class="keyword">public</span>:
<a name="l00207"></a>00207     OBExternalBondData();
<a name="l00208"></a>00208     <span class="keywordtype">void</span> SetData(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*,<span class="keywordtype">int</span>);
<a name="l00209"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#11f9065de21b2a826607337504954584">00209</a>     std::vector&lt;OBExternalBond&gt; *GetData()
<a name="l00210"></a>00210     {
<a name="l00211"></a>00211         <span class="keywordflow">return</span>(&amp;_vexbnd);
<a name="l00212"></a>00212     }
<a name="l00213"></a>00213 };
<a name="l00214"></a>00214 
<a name="l00219"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml">00219</a> <span class="keyword">class </span>OBAPI OBPairData : <span class="keyword">public</span> OBGenericData
<a name="l00220"></a>00220 {
<a name="l00221"></a>00221 <span class="keyword">protected</span>:
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#366a2531a9485fdfb2f6abbe528d99e1">00222</a>     std::string _value;
<a name="l00223"></a>00223 <span class="keyword">public</span>:
<a name="l00224"></a>00224     OBPairData();
<a name="l00225"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#ef706f61b8b25bb7de414f46bbe317b3">00225</a>     <span class="keywordtype">void</span>    SetValue(<span class="keyword">const</span> <span class="keywordtype">char</span> *v)
<a name="l00226"></a>00226     {
<a name="l00227"></a>00227         _value = v;
<a name="l00228"></a>00228     }
<a name="l00229"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#36b6ff14e0bae8e56e4637ab727fc8cb">00229</a>     <span class="keywordtype">void</span>    SetValue(<span class="keyword">const</span> std::string &amp;v)
<a name="l00230"></a>00230     {
<a name="l00231"></a>00231         _value = v;
<a name="l00232"></a>00232     }
<a name="l00233"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#c147df914005ba8c736a9b017ac8abdc">00233</a>     std::string &amp;GetValue()
<a name="l00234"></a>00234     {
<a name="l00235"></a>00235         <span class="keywordflow">return</span>(_value);
<a name="l00236"></a>00236     }
<a name="l00237"></a>00237 };
<a name="l00238"></a>00238 
<a name="l00241"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml">00241</a> <span class="keyword">class </span>OBAPI OBVirtualBond : <span class="keyword">public</span> OBGenericData
<a name="l00242"></a>00242 {
<a name="l00243"></a>00243 <span class="keyword">protected</span>:
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#eb2c09a43f4c8b6256dbed5faf85d768">00244</a>     <span class="keywordtype">int</span> _bgn;
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#bb406f6b7d63af84fda76dbcdbac66c5">00245</a>     <span class="keywordtype">int</span> _end;
<a name="l00246"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#f7c67fda80d169e7af68407f88740499">00246</a>     <span class="keywordtype">int</span> _ord;
<a name="l00247"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#a753c6ca5d794e055f8b4b590c6ba538">00247</a>     <span class="keywordtype">int</span> _stereo;
<a name="l00248"></a>00248 <span class="keyword">public</span>:
<a name="l00249"></a>00249     OBVirtualBond();
<a name="l00250"></a>00250     OBVirtualBond(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span> stereo=0);
<a name="l00251"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#064aa6b502655795918788af438b0208">00251</a>     <span class="keywordtype">int</span> GetBgn()
<a name="l00252"></a>00252     {
<a name="l00253"></a>00253         <span class="keywordflow">return</span>(_bgn);
<a name="l00254"></a>00254     }
<a name="l00255"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#fc186d85b94bae6548e433324215fff6">00255</a>     <span class="keywordtype">int</span> GetEnd()
<a name="l00256"></a>00256     {
<a name="l00257"></a>00257         <span class="keywordflow">return</span>(_end);
<a name="l00258"></a>00258     }
<a name="l00259"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#eaca5975b0354f81d10792199fee7d4d">00259</a>     <span class="keywordtype">int</span> GetOrder()
<a name="l00260"></a>00260     {
<a name="l00261"></a>00261         <span class="keywordflow">return</span>(_ord);
<a name="l00262"></a>00262     }
<a name="l00263"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#9695376d762d4fd2b12da6f51a99fb92">00263</a>     <span class="keywordtype">int</span> GetStereo()
<a name="l00264"></a>00264     {
<a name="l00265"></a>00265         <span class="keywordflow">return</span>(_stereo);
<a name="l00266"></a>00266     }
<a name="l00267"></a>00267 };
<a name="l00268"></a>00268 
<a name="l00270"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml">00270</a> <span class="keyword">class </span>OBAPI OBRingData : <span class="keyword">public</span> OBGenericData
<a name="l00271"></a>00271 {
<a name="l00272"></a>00272 <span class="keyword">protected</span>:
<a name="l00273"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#2da396a9610e4fd1218b885407375568">00273</a>     std::vector&lt;OBRing*&gt; _vr;
<a name="l00274"></a>00274 <span class="keyword">public</span>:
<a name="l00275"></a>00275     OBRingData();
<a name="l00276"></a>00276     OBRingData(<span class="keyword">const</span> OBRingData &amp;);
<a name="l00277"></a>00277     ~OBRingData();
<a name="l00278"></a>00278 
<a name="l00279"></a>00279     OBRingData &amp;operator=(<span class="keyword">const</span> OBRingData &amp;);
<a name="l00280"></a>00280 
<a name="l00281"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#45f2a0418d86a4d7f2e94f1c54e504ce">00281</a>     <span class="keywordtype">void</span> SetData(std::vector&lt;OBRing*&gt; &amp;vr)
<a name="l00282"></a>00282     {
<a name="l00283"></a>00283         _vr = vr;
<a name="l00284"></a>00284     }
<a name="l00285"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#120222dc719c5f6a711770dce699535b">00285</a>     <span class="keywordtype">void</span> PushBack(<a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *r)
<a name="l00286"></a>00286     {
<a name="l00287"></a>00287         _vr.push_back(r);
<a name="l00288"></a>00288     }
<a name="l00289"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#45043bd4256fcf9d62e0cb45e024c466">00289</a>     std::vector&lt;OBRing*&gt; &amp;GetData()
<a name="l00290"></a>00290     {
<a name="l00291"></a>00291         <span class="keywordflow">return</span>(_vr);
<a name="l00292"></a>00292     }
<a name="l00293"></a>00293 };
<a name="l00294"></a>00294 
<a name="l00298"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml">00298</a> <span class="keyword">class </span>OBAPI OBUnitCell: <span class="keyword">public</span> OBGenericData
<a name="l00299"></a>00299 {
<a name="l00300"></a>00300 <span class="keyword">protected</span>:
<a name="l00301"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#09c94aa5a87671fca3499dcf7b41d84a">00301</a>     <span class="keywordtype">double</span> _a, _b, _c, _alpha, _beta, _gamma;
<a name="l00302"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#4e04f720581a30502f781e620fb56af6">00302</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> _offset; 
<a name="l00303"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#477aabff6d508d2afbc81da2c82f7405">00303</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> _v1, _v2, _v3; 
<a name="l00304"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#472527c3649b76aaaa28597ba3f214dd">00304</a>     std::string _spaceGroup;
<a name="l00305"></a>00305 <span class="keyword">public</span>:
<a name="l00306"></a>00306     OBUnitCell();
<a name="l00307"></a>00307     OBUnitCell(<span class="keyword">const</span> OBUnitCell &amp;);
<a name="l00308"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#29eaffe421897707aa12103bec99d3c9">00308</a>     ~OBUnitCell()    {}
<a name="l00309"></a>00309 
<a name="l00310"></a>00310     OBUnitCell &amp;operator=(<span class="keyword">const</span> OBUnitCell &amp;);
<a name="l00311"></a>00311 
<a name="l00312"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#cca66a4b8a38d190c178b6ed85f9b8ed">00312</a>     <span class="keywordtype">void</span> SetData(<span class="keyword">const</span> <span class="keywordtype">double</span> a, <span class="keyword">const</span> <span class="keywordtype">double</span> b, <span class="keyword">const</span> <span class="keywordtype">double</span> c,
<a name="l00313"></a>00313                  <span class="keyword">const</span> <span class="keywordtype">double</span> alpha, <span class="keyword">const</span> <span class="keywordtype">double</span> beta, <span class="keyword">const</span> <span class="keywordtype">double</span> gamma)
<a name="l00314"></a>00314     {   _a = a; _b = b; _c = c;
<a name="l00315"></a>00315         _alpha = alpha; _beta = beta; _gamma = gamma; }
<a name="l00316"></a>00316     <span class="keywordtype">void</span> SetData(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> v1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> v2, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> v3);
<a name="l00317"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#4c53fadff602620ff82a9a0c3ceda85a">00317</a>     <span class="keywordtype">void</span> SetOffset(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> v1) { _offset = v1; }
<a name="l00321"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#76ccdf2ccfbefae104ff52932dcf11c1">00321</a>     <span class="keywordtype">void</span> SetSpaceGroup(<span class="keyword">const</span> std::string sg) { _spaceGroup = sg; }
<a name="l00322"></a>00322 
<a name="l00323"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#3bacc0010fd34814039b26758da67dae">00323</a>     <span class="keywordtype">double</span> GetA()    { <span class="keywordflow">return</span>(_a);    }
<a name="l00324"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#c0f9682b3743c4ec91dd9fd16bb5bd82">00324</a>     <span class="keywordtype">double</span> GetB()    { <span class="keywordflow">return</span>(_b);    }
<a name="l00325"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#229a18fdc499aafe149c55011f9fb2fb">00325</a>     <span class="keywordtype">double</span> GetC()    { <span class="keywordflow">return</span>(_c);    }
<a name="l00326"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#6897ba879a5e0f5ac4ac5aefeb94601d">00326</a>     <span class="keywordtype">double</span> GetAlpha(){ <span class="keywordflow">return</span>(_alpha);}
<a name="l00327"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#8b788f95c3fa1f2cc9aedaa1b92b78a1">00327</a>     <span class="keywordtype">double</span> GetBeta() { <span class="keywordflow">return</span>(_beta); }
<a name="l00328"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#53b3c98860a330a6b95074945fc2895f">00328</a>     <span class="keywordtype">double</span> GetGamma(){ <span class="keywordflow">return</span>(_gamma);}
<a name="l00329"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#545d26772ece9dda5ed6bd4a6f71f45b">00329</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> GetOffset() { <span class="keywordflow">return</span>(_offset); }
<a name="l00330"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#309d90870e421229d1719465203494c3">00330</a>     <span class="keyword">const</span> std::string GetSpaceGroup() { <span class="keywordflow">return</span>(_spaceGroup); }
<a name="l00331"></a>00331 
<a name="l00333"></a>00333     std::vector&lt;vector3&gt; GetCellVectors();
<a name="l00335"></a>00335     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>   GetCellMatrix();
<a name="l00337"></a>00337     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> GetOrthoMatrix();
<a name="l00339"></a>00339     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> GetFractionalMatrix();
<a name="l00340"></a>00340 };
<a name="l00341"></a>00341 
<a name="l00343"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml">00343</a> <span class="keyword">class </span>OBAPI OBConformerData: <span class="keyword">public</span> OBGenericData
<a name="l00344"></a>00344 {
<a name="l00345"></a>00345 <span class="keyword">protected</span>:
<a name="l00347"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#6c0b393e8fabed75f977c2ef2e9776b4">00347</a>   std::vector&lt;unsigned short&gt;              _vDimension;
<a name="l00349"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#d069a68962fcc260bd3d4a1f4fc37fcb">00349</a>   std::vector&lt;double&gt;                      _vEnergies;
<a name="l00351"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#89ef302474a75b75e95f99892462da96">00351</a>   std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vForces;
<a name="l00353"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#c6c0bfd74d984fed427c1ced49acef5a">00353</a>   std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vVelocity;
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#aea44fb2ea8511661a37ff43c6df9149">00355</a>   std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vDisplace;
<a name="l00357"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ff183e0156f477b106269c9524d8b4dd">00357</a>   std::vector&lt;std::string&gt;                 _vData;
<a name="l00358"></a>00358     
<a name="l00359"></a>00359 <span class="keyword">public</span>:
<a name="l00360"></a>00360     OBConformerData();
<a name="l00361"></a>00361     OBConformerData(<span class="keyword">const</span> OBConformerData &amp;);
<a name="l00362"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#1e909f0c20e17b79ecc51ae05b57f78f">00362</a>     ~OBConformerData()    {}
<a name="l00363"></a>00363 
<a name="l00364"></a>00364     OBConformerData &amp;operator=(<span class="keyword">const</span> OBConformerData &amp;);
<a name="l00365"></a>00365 
<a name="l00366"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#98270b6a5c308d32731da6e0347604f8">00366</a>     <span class="keywordtype">void</span> SetDimension(std::vector&lt;unsigned short&gt; vd) { _vDimension = vd; }
<a name="l00367"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#83d2707a7d694d2dcbca91b52e537953">00367</a>     <span class="keywordtype">void</span> SetEnergies(std::vector&lt;double&gt; ve) { _vEnergies = ve; }
<a name="l00368"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#e5e8b9cfa509d47b804cd62dabec4384">00368</a>     <span class="keywordtype">void</span> SetForces(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vf) {_vForces = vf;}
<a name="l00369"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#10e686c1334aab2838abd83f0e43c15d">00369</a>     <span class="keywordtype">void</span> SetVelocities(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vv)
<a name="l00370"></a>00370       { _vVelocity = vv; }
<a name="l00371"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#97fd4b5e51251d3647a1d8744f5fc178">00371</a>     <span class="keywordtype">void</span> SetDisplacements(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vd)
<a name="l00372"></a>00372       { _vDisplace = vd; }
<a name="l00373"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#6a42c8d13245d5d0c11476c56e6a6e33">00373</a>     <span class="keywordtype">void</span> SetData(std::vector&lt;std::string&gt; vdat) { _vData = vdat; }
<a name="l00374"></a>00374 
<a name="l00375"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#11ede097c372a7bca3ac9bbc8325aade">00375</a>     std::vector&lt;unsigned short&gt; GetDimension() { <span class="keywordflow">return</span> _vDimension; }
<a name="l00376"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#3d8b242eebd5ab58552d535f86bd1609">00376</a>     std::vector&lt;double&gt;         GetEnergies()  { <span class="keywordflow">return</span> _vEnergies; }
<a name="l00377"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#b47a820667f55e0899534778c414c21d">00377</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetForces() {<span class="keywordflow">return</span> _vForces; }
<a name="l00378"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#045c32551393c9123ffcaaf64b68f8df">00378</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetVelocities()
<a name="l00379"></a>00379       {<span class="keywordflow">return</span> _vVelocity;}
<a name="l00380"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#0f4fc4a438c20ca17dc4164245723b61">00380</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetDisplacements()
<a name="l00381"></a>00381       {<span class="keywordflow">return</span> _vDisplace;}
<a name="l00382"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#10bc2a88336b4e3de55ce7112ad07811">00382</a>     std::vector&lt;std::string&gt;    GetData() { <span class="keywordflow">return</span> _vData; }
<a name="l00383"></a>00383 
<a name="l00384"></a>00384 };
<a name="l00385"></a>00385 
<a name="l00389"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml">00389</a> <span class="keyword">class </span>OBAPI OBSymmetryData: <span class="keyword">public</span> OBGenericData
<a name="l00390"></a>00390 {
<a name="l00391"></a>00391 <span class="keyword">protected</span>:
<a name="l00392"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#472527c3649b76aaaa28597ba3f214dd">00392</a>     std::string _spaceGroup;
<a name="l00393"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#4a2dc3eb5d3a544b8afe7507b7189fe9">00393</a>     std::string _pointGroup;
<a name="l00394"></a>00394 <span class="keyword">public</span>:
<a name="l00395"></a>00395     OBSymmetryData();
<a name="l00396"></a>00396     OBSymmetryData(<span class="keyword">const</span> OBSymmetryData &amp;);
<a name="l00397"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#af4df0ae2afcaf39df55df81e0a18a5a">00397</a>     ~OBSymmetryData()    {}
<a name="l00398"></a>00398 
<a name="l00399"></a>00399     OBSymmetryData &amp;operator=(<span class="keyword">const</span> OBSymmetryData &amp;);
<a name="l00400"></a>00400 
<a name="l00401"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#2ceb8f352cca6f223aff43d41f4fb2f1">00401</a>     <span class="keywordtype">void</span> SetData(std::string pg, std::string sg = <span class="stringliteral">""</span>)
<a name="l00402"></a>00402       { _pointGroup = pg; _spaceGroup = sg; }
<a name="l00403"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#614446afd9dea92d4da7e8c8095aa107">00403</a>     <span class="keywordtype">void</span> SetPointGroup(std::string pg) { _pointGroup = pg; }
<a name="l00404"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#ef06d0d2bb4513684db4b052f487d45a">00404</a>     <span class="keywordtype">void</span> SetSpaceGroup(std::string sg) { _spaceGroup = sg; }
<a name="l00405"></a>00405 
<a name="l00406"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#ed0b54749bded9681b917dbbe6ce1800">00406</a>     std::string GetPointGroup() { <span class="keywordflow">return</span> _pointGroup; }
<a name="l00407"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#90903c2ee1d02cbf37d5162541691f4f">00407</a>     std::string GetSpaceGroup() { <span class="keywordflow">return</span> _spaceGroup; }
<a name="l00408"></a>00408 };
<a name="l00409"></a>00409 
<a name="l00412"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml">00412</a> <span class="keyword">class </span>OBAPI OBTorsion
<a name="l00413"></a>00413 {
<a name="l00414"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#c59e55249c26b7453efa178aab836428">00414</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00415"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#7633b32d47d66ecdfb4f3db46e7e1422">00415</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml">OBTorsionData</a>;
<a name="l00416"></a>00416 
<a name="l00417"></a>00417 <span class="keyword">protected</span>:
<a name="l00418"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a0d884087af9a4eac62349cdd16f0e52">00418</a>     std::pair&lt;OBAtom*,OBAtom*&gt; _bc;
<a name="l00420"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#dae49ee49ed76ec2af6149f2a20f34bf">00420</a>     std::vector&lt;triple&lt;OBAtom*,OBAtom*,double&gt; &gt; _ads;
<a name="l00421"></a>00421 
<a name="l00422"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#b97992a9144899afd3b91c39dcc8e5e4">00422</a>     OBTorsion()
<a name="l00423"></a>00423     {
<a name="l00424"></a>00424         _bc.first=0;
<a name="l00425"></a>00425         _bc.second=0;
<a name="l00426"></a>00426     }
<a name="l00427"></a>00427     ;  <span class="comment">//protected for use only by friend classes</span>
<a name="l00428"></a>00428     OBTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *);
<a name="l00429"></a>00429 
<a name="l00430"></a>00430     std::vector&lt;quad&lt;OBAtom*,OBAtom*,OBAtom*,OBAtom*&gt; &gt; GetTorsions();
<a name="l00431"></a>00431 
<a name="l00432"></a>00432 <span class="keyword">public</span>:
<a name="l00433"></a>00433     OBTorsion(<span class="keyword">const</span> OBTorsion &amp;);
<a name="l00434"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#42a5dd5b1bb3906af399c66764589c23">00434</a>     ~OBTorsion()
<a name="l00435"></a>00435     {}
<a name="l00436"></a>00436 
<a name="l00437"></a>00437     OBTorsion&amp; operator=(<span class="keyword">const</span> OBTorsion &amp;);
<a name="l00438"></a>00438 
<a name="l00439"></a>00439     <span class="keywordtype">void</span> Clear();
<a name="l00440"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#31d1053aee208079bcc3c5e1884774df">00440</a>     <span class="keywordtype">bool</span> Empty()
<a name="l00441"></a>00441     {
<a name="l00442"></a>00442         <span class="keywordflow">return</span>(_bc.first == 0 &amp;&amp; _bc.second == 0);
<a name="l00443"></a>00443     }
<a name="l00444"></a>00444 
<a name="l00445"></a>00445     <span class="keywordtype">bool</span> AddTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *c,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *d);
<a name="l00446"></a>00446     <span class="keywordtype">bool</span> AddTorsion(<a class="code" href="structOpenBabel_1_1quad.shtml">quad&lt;OBAtom*,OBAtom*,OBAtom*,OBAtom*&gt;</a> &amp;atoms);
<a name="l00447"></a>00447 
<a name="l00448"></a>00448     <span class="keywordtype">bool</span> SetAngle(<span class="keywordtype">double</span> radians, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index = 0);
<a name="l00449"></a>00449     <span class="keywordtype">bool</span> SetData(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond);
<a name="l00450"></a>00450 
<a name="l00451"></a>00451     <span class="keywordtype">bool</span> GetAngle(<span class="keywordtype">double</span> &amp;radians, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index =0);
<a name="l00452"></a>00452     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetBondIdx();
<a name="l00453"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#dbf6ca7c8c1512e7991441055a301c2a">00453</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize()<span class="keyword"> const</span>
<a name="l00454"></a>00454 <span class="keyword">    </span>{
<a name="l00455"></a>00455         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_ads.size();
<a name="l00456"></a>00456     }
<a name="l00457"></a>00457 
<a name="l00458"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#af3e252487bc86c35aa734263a7d67f8">00458</a>     std::pair&lt;OBAtom*,OBAtom*&gt;                  GetBC()
<a name="l00459"></a>00459     {
<a name="l00460"></a>00460         <span class="keywordflow">return</span>(_bc);
<a name="l00461"></a>00461     }
<a name="l00462"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#1f24a58280d5a27d9ce154ecd2053c29">00462</a>     std::vector&lt;triple&lt;OBAtom*,OBAtom*,double&gt; &gt; GetADs()
<a name="l00463"></a>00463     {
<a name="l00464"></a>00464         <span class="keywordflow">return</span>(_ads) ;
<a name="l00465"></a>00465     }
<a name="l00466"></a>00466 
<a name="l00467"></a>00467     <span class="keywordtype">bool</span> IsProtonRotor();
<a name="l00468"></a>00468 };
<a name="l00469"></a>00469 
<a name="l00472"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml">00472</a> <span class="keyword">class </span>OBAPI OBTorsionData : <span class="keyword">public</span> OBGenericData
<a name="l00473"></a>00473 {
<a name="l00474"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#c59e55249c26b7453efa178aab836428">00474</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00475"></a>00475 
<a name="l00476"></a>00476 <span class="keyword">protected</span>:
<a name="l00477"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#8284d9e040299fd3ee667ad31e34a8d3">00477</a>     std::vector&lt;OBTorsion&gt; _torsions;
<a name="l00478"></a>00478 
<a name="l00479"></a>00479     OBTorsionData();
<a name="l00480"></a>00480     OBTorsionData(<span class="keyword">const</span> OBTorsionData &amp;);
<a name="l00481"></a>00481 
<a name="l00482"></a>00482 <span class="keyword">public</span>:
<a name="l00483"></a>00483     OBTorsionData &amp;operator=(<span class="keyword">const</span> OBTorsionData &amp;);
<a name="l00484"></a>00484 
<a name="l00485"></a>00485     <span class="keywordtype">void</span> Clear();
<a name="l00486"></a>00486 
<a name="l00487"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#dece7e26d746de090b7d906e236367d5">00487</a>     std::vector&lt;OBTorsion&gt; GetData()<span class="keyword"> const</span>
<a name="l00488"></a>00488 <span class="keyword">    </span>{
<a name="l00489"></a>00489         <span class="keywordflow">return</span> _torsions;
<a name="l00490"></a>00490     }
<a name="l00491"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#97f2ad13e5504229db00fcbab852bdd2">00491</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      GetSize()<span class="keyword"> const</span>
<a name="l00492"></a>00492 <span class="keyword">    </span>{
<a name="l00493"></a>00493         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_torsions.size();
<a name="l00494"></a>00494     }
<a name="l00495"></a>00495 
<a name="l00496"></a>00496     <span class="keywordtype">void</span> SetData(OBTorsion &amp;torsion);
<a name="l00497"></a>00497 
<a name="l00498"></a>00498     <span class="keywordtype">bool</span> FillTorsionArray(std::vector&lt;std::vector&lt;unsigned int&gt; &gt; &amp;torsions);
<a name="l00499"></a>00499 };
<a name="l00500"></a>00500 
<a name="l00502"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml">00502</a> <span class="keyword">class </span>OBAPI OBAngle
<a name="l00503"></a>00503 {
<a name="l00504"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#c59e55249c26b7453efa178aab836428">00504</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00505"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#c2fadcaf6e1d7246db44fd04d90df423">00505</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAngleData.shtml">OBAngleData</a>;
<a name="l00506"></a>00506 
<a name="l00507"></a>00507 <span class="keyword">protected</span>:
<a name="l00508"></a>00508 
<a name="l00509"></a>00509     <span class="comment">//member data</span>
<a name="l00510"></a>00510 
<a name="l00511"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#6d6d58b7c653e7457ce0d0c2a907f9aa">00511</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>                *_vertex;
<a name="l00512"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#ed0a513f416c5140e604577971e1dd5c">00512</a>     std::pair&lt;OBAtom*,OBAtom*&gt;  _termini;
<a name="l00513"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#8ebc49284f65cb6d82c40fba0f9111b4">00513</a>     <span class="keywordtype">double</span>                  _radians;
<a name="l00514"></a>00514 
<a name="l00515"></a>00515     <span class="comment">//protected member functions</span>
<a name="l00516"></a>00516 
<a name="l00517"></a>00517     OBAngle();  <span class="comment">//protect constructor for use only by friend classes</span>
<a name="l00518"></a>00518     OBAngle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *vertex,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b);
<a name="l00519"></a>00519 
<a name="l00520"></a>00520     <a class="code" href="structOpenBabel_1_1triple.shtml">triple&lt;OBAtom*,OBAtom*,OBAtom*&gt;</a> GetAtoms();
<a name="l00521"></a>00521     <span class="keywordtype">void</span> SortByIndex();
<a name="l00522"></a>00522 
<a name="l00523"></a>00523 <span class="keyword">public</span>:
<a name="l00524"></a>00524 
<a name="l00525"></a>00525     OBAngle(<span class="keyword">const</span> OBAngle &amp;);
<a name="l00526"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#35e160e815b78f064cd07164bf5aebb2">00526</a>     ~OBAngle()
<a name="l00527"></a>00527     {
<a name="l00528"></a>00528         _vertex = NULL;
<a name="l00529"></a>00529     }
<a name="l00530"></a>00530 
<a name="l00531"></a>00531     OBAngle &amp;operator = (<span class="keyword">const</span> OBAngle &amp;);
<a name="l00532"></a>00532     <span class="keywordtype">bool</span>     <a class="code" href="namespaceOpenBabel.shtml#c001b331f648fbbd8590576f59d4d2ab">operator ==</a>(<span class="keyword">const</span> OBAngle &amp;);
<a name="l00533"></a>00533 
<a name="l00534"></a>00534     <span class="keywordtype">void</span>  Clear();
<a name="l00535"></a>00535 
<a name="l00536"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#34fe07c2cc6042c2401638e885b30776">00536</a>     <span class="keywordtype">double</span> GetAngle()<span class="keyword"> const</span>
<a name="l00537"></a>00537 <span class="keyword">    </span>{
<a name="l00538"></a>00538         <span class="keywordflow">return</span>(_radians);
<a name="l00539"></a>00539     }
<a name="l00540"></a>00540 
<a name="l00541"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#24f7ee4f0375f87faaea5ffbe45339ae">00541</a>     <span class="keywordtype">void</span>  SetAngle(<span class="keywordtype">double</span> radians)
<a name="l00542"></a>00542     {
<a name="l00543"></a>00543         _radians = radians;
<a name="l00544"></a>00544     }
<a name="l00545"></a>00545     <span class="keywordtype">void</span>  SetAtoms(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *vertex,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b);
<a name="l00546"></a>00546     <span class="keywordtype">void</span>  SetAtoms(<a class="code" href="structOpenBabel_1_1triple.shtml">triple&lt;OBAtom*,OBAtom*,OBAtom*&gt;</a> &amp;atoms);
<a name="l00547"></a>00547 
<a name="l00548"></a>00548 };
<a name="l00549"></a>00549 
<a name="l00550"></a>00550 
<a name="l00552"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml">00552</a> <span class="keyword">class </span>OBAPI OBAngleData : <span class="keyword">public</span> OBGenericData
<a name="l00553"></a>00553 {
<a name="l00554"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#c59e55249c26b7453efa178aab836428">00554</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00555"></a>00555 
<a name="l00556"></a>00556 <span class="keyword">protected</span>:
<a name="l00557"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#259e7ee82fbf67240f0b058ce4293d2e">00557</a>     std::vector&lt;OBAngle&gt; _angles;
<a name="l00558"></a>00558 
<a name="l00559"></a>00559     OBAngleData();
<a name="l00560"></a>00560     OBAngleData(<span class="keyword">const</span> OBAngleData &amp;);
<a name="l00561"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#dece7e26d746de090b7d906e236367d5">00561</a>     std::vector&lt;OBAngle&gt; GetData()<span class="keyword"> const</span>
<a name="l00562"></a>00562 <span class="keyword">    </span>{
<a name="l00563"></a>00563         <span class="keywordflow">return</span>(_angles);
<a name="l00564"></a>00564     }
<a name="l00565"></a>00565 
<a name="l00566"></a>00566 <span class="keyword">public</span>:
<a name="l00567"></a>00567     OBAngleData &amp;operator =(<span class="keyword">const</span> OBAngleData &amp;);
<a name="l00568"></a>00568 
<a name="l00569"></a>00569     <span class="keywordtype">void</span> Clear();
<a name="l00570"></a>00570     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> FillAngleArray(<span class="keywordtype">int</span> **angles, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;size);
<a name="l00571"></a>00571     <span class="keywordtype">void</span>         SetData(OBAngle &amp;);
<a name="l00572"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#97f2ad13e5504229db00fcbab852bdd2">00572</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize()<span class="keyword"> const</span>
<a name="l00573"></a>00573 <span class="keyword">    </span>{
<a name="l00574"></a>00574         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_angles.size();
<a name="l00575"></a>00575     }
<a name="l00576"></a>00576 };
<a name="l00577"></a>00577 
<a name="l00578"></a><a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">00578</a> <span class="keyword">enum</span> <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a>{<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8e6eb596f7e638118128651043ff38545">output</a>,<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b837943061a284187ff6e555ac7093f528">input</a>,<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8103458136e7028a1a9b7349e64967810">calcvolume</a>}; <span class="comment">// sets which atom4ref is accessed</span>
<a name="l00579"></a>00579 
<a name="l00581"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml">00581</a> <span class="keyword">class </span>OBAPI OBChiralData : <span class="keyword">public</span> OBGenericData
<a name="l00582"></a>00582 {
<a name="l00583"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#c59e55249c26b7453efa178aab836428">00583</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00584"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#c0625d6c1f6b8002765c09a45d400c4d">00584</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>;
<a name="l00585"></a>00585 
<a name="l00586"></a>00586 <span class="keyword">protected</span>:
<a name="l00587"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#89411064df2cf2407f4a89f75a5ea618">00587</a>     std::vector&lt;unsigned int&gt; _atom4refs;
<a name="l00588"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#22c1e0c27cee34369adf919eed3e3aac">00588</a>     <span class="keywordtype">int</span> parity;
<a name="l00589"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#9886384fc77ff9471fc26cd16f822324">00589</a>     std::vector&lt;unsigned int&gt; _atom4refo;
<a name="l00590"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#9f82047fe27246702be9b5032768ffb5">00590</a>     std::vector&lt;unsigned int&gt; _atom4refc;
<a name="l00591"></a>00591 
<a name="l00592"></a>00592 <span class="keyword">public</span>:
<a name="l00593"></a>00593     std::vector&lt;unsigned int&gt; GetAtom4Refs(<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t) <span class="keyword">const</span>;
<a name="l00594"></a>00594     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetAtomRef(<span class="keywordtype">int</span> a,<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00595"></a>00595 
<a name="l00596"></a>00596     OBChiralData();
<a name="l00597"></a>00597     OBChiralData(<span class="keyword">const</span> OBChiralData &amp;src);
<a name="l00598"></a>00598     OBChiralData &amp;operator =(<span class="keyword">const</span> OBChiralData &amp;);
<a name="l00599"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#bc2d4b013efd6a8788da4a31489d28b9">00599</a>     ~OBChiralData(){}
<a name="l00600"></a>00600 
<a name="l00601"></a>00601     <span class="keywordtype">void</span> Clear();
<a name="l00602"></a>00602     <span class="keywordtype">bool</span> SetAtom4Refs(std::vector&lt;unsigned int&gt; atom4refs, <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00603"></a>00603     <span class="keywordtype">int</span> AddAtomRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomref, <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00604"></a>00604     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize(<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t) <span class="keyword">const</span>;
<a name="l00605"></a>00605 };
<a name="l00606"></a>00606 
<a name="l00608"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml">00608</a> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml">OBSerialNums</a> : <span class="keyword">public</span> OBGenericData
<a name="l00609"></a>00609 {
<a name="l00610"></a>00610 <span class="keyword">protected</span>:
<a name="l00611"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423">00611</a>     std::map&lt;int, OBAtom*&gt; <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423">_serialMap</a>;
<a name="l00612"></a>00612 
<a name="l00613"></a>00613 <span class="keyword">public</span>:
<a name="l00614"></a>00614 
<a name="l00615"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#c133c97c2adaeacc4a476bb27bc24500">00615</a>     <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#c133c97c2adaeacc4a476bb27bc24500">OBSerialNums</a>()
<a name="l00616"></a>00616     {
<a name="l00617"></a>00617         <a class="code" href="classOpenBabel_1_1OBGenericData.shtml#dceb77134f15418a66cf1124dcef1b51">_attr</a> = <span class="stringliteral">"obSerialNums"</span>;
<a name="l00618"></a>00618         <a class="code" href="classOpenBabel_1_1OBGenericData.shtml#31291823d487a4a47f24aae5870505ef">_type</a> = <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#d76c93228f24ae89bbce9650c832c9b1">OBGenericDataType::SerialNums</a>;
<a name="l00619"></a>00619     }
<a name="l00620"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#0b0be14ee04253bb90997df9884a94ca">00620</a>     <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#c133c97c2adaeacc4a476bb27bc24500">OBSerialNums</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml">OBSerialNums</a> &amp;cp) : OBGenericData(cp)
<a name="l00621"></a>00621     {
<a name="l00622"></a>00622         <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423">_serialMap</a> = cp.<a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423">_serialMap</a>;
<a name="l00623"></a>00623     }
<a name="l00624"></a>00624 
<a name="l00625"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#392c3230c9d3cca11b1e4d57bdd2ddfd">00625</a>     std::map&lt;int,OBAtom*&gt; &amp;<a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#392c3230c9d3cca11b1e4d57bdd2ddfd">GetData</a>()    { <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423">_serialMap</a>;    }
<a name="l00626"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#97e7e04349f25820cb9f816f7c6a6cdd">00626</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#97e7e04349f25820cb9f816f7c6a6cdd">SetData</a>(std::map&lt;int,OBAtom*&gt; &amp;sm) { <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423">_serialMap</a> = sm;  }
<a name="l00627"></a>00627 
<a name="l00628"></a>00628 };
<a name="l00629"></a>00629 
<a name="l00630"></a>00630 <span class="comment">//****************doxygen for inline functions***********</span>
<a name="l00685"></a>00685 <span class="comment"></span>} <span class="comment">//end namespace OpenBabel</span>
<a name="l00686"></a>00686 
<a name="l00687"></a>00687 <span class="preprocessor">#endif // OB_GENERIC_H</span>
<a name="l00688"></a>00688 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:01 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
