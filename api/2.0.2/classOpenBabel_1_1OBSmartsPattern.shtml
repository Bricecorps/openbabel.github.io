<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBSmartsPattern Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li id="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a></div>
<h1>OBSmartsPattern Class Reference</h1><!-- doxytag: class="OpenBabel::OBSmartsPattern" -->SMARTS (SMiles ARbitrary Target Specification) substructure searching.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="parsmart_8h-source.shtml">parsmart.h</a>&gt;</code>
<p>
<a href="classOpenBabel_1_1OBSmartsPattern-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a930ba6620356e94683a1d5d4a4a25e3">OBSmartsPattern</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#45c009ff3b4002e84b8f6cc4adbc1a49">~OBSmartsPattern</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#da1c40a99620ab595049ba01934b7ca6">OBSmartsPattern</a> (const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;cp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#644ca84fee80513682392b90a2841ec6">operator=</a> (const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;cp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#4bf864960d56b1aae66780af7512d5f7">NumMatches</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#2f0695eb7d6ff6321032d88655ae8d25">NumAtoms</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#7358c2c15c4c0d88ae2489f586bc8e0b">NumBonds</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#8751275cd32b98ccc4248547e464d6cb">GetAtomicNum</a> (int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#2903a56b0b7f6fa0a617a069738251af">GetBond</a> (int &amp;, int &amp;, int &amp;, int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#46efb8b30f7e664ba32a950cb100f939">GetCharge</a> (int)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const std::string &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a9145386a6abc43611eec23b34702ff2">GetSMARTS</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#1f769a4a64988a131b80fdda554eda1e">GetSMARTS</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#bb64da8f114045c4b41dec13919bed9f">GetVectorBinding</a> (int idx) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#bcfbdba215d3b15fbb4b682969943a6e">Empty</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#c532c4b500b1a85ea22217f2c65a70ed">IsValid</a> () const</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#f85a8298da4d338f99cf35b4aba4f227">Init</a> (const char *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#b0da164271103274db6a85254dad97f9">Init</a> (const std::string &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#6891bcec2059a979cff31cd7970a76a3">WriteMapList</a> (std::ostream &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#dda681cbeb3f22e43d35105ad4608b91">Match</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, bool single=false)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#afeef4d5a61d7d6b3c5b6120267359a0">RestrictedMatch</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;pairs, bool single=false)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#1626ba77086e16c8ddcdee647937d905">RestrictedMatch</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv, bool single=false)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::vector&lt;<br>
 int &gt; &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#5633f1fa229ec0ff8fd3991e09d791c2">GetMapList</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::vector&lt;<br>
 int &gt; &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#de3dbfa0989e51224e19b38932b05c1b">GetUMapList</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::vector&lt;<br>
 int &gt; &gt;::iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#548b220ea8c00d0297e81ebc7b31c6d7">BeginMList</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::vector&lt;<br>
 int &gt; &gt;::iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#7db4777fec63048db41fb890ac0a22ac">EndMList</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; bool &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#9aa91437a607c7d33353f38857add180">_growbond</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::vector&lt;<br>
 int &gt; &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#b4d28e672d513c538ae9ff92e409bece">_mlist</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#d43f81cd2cc637e810b38c7686d9917d">_pat</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#433559ab344e4266e3d109bce29ee417">_str</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
SMARTS (SMiles ARbitrary Target Specification) substructure searching. 
<p>
Substructure search is an incredibly useful tool in the context of a small molecule programming library. Having an efficient substructure search engine reduces the amount of hard code needed for molecule perception, as well as increases the flexibility of certain operations. For instance, atom typing can be easily performed based on hard coded rules of element type and bond orders (or hybridization). Alternatively, atom typing can also be done by matching a set of substructure rules read at run time. In the latter case customization based on application (such as changing the pH) becomes a facile operation. Fortunately for Open Babel and its users, Roger Sayle donated a SMARTS parser which became the basis for SMARTS matching in Open Babel.<p>
The SMARTS matcher, or <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>, is a separate object which can match patterns in the <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> class. The following code demonstrates how to use the <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> class: <div class="fragment"><pre class="fragment">  OBMol mol;
  ...
  <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a930ba6620356e94683a1d5d4a4a25e3">OBSmartsPattern</a> sp;
  sp.Init(<span class="stringliteral">"CC"</span>);
  sp.Match(mol);
  vector&lt;vector&lt;int&gt; &gt; maplist;
  maplist = sp.GetMapList();
  <span class="comment">//or maplist = sp.GetUMapList();</span>
  <span class="comment">//print out the results</span>
  vector&lt;vector&lt;int&gt; &gt;::iterator i;
  vector&lt;int&gt;::iterator j;
  <span class="keywordflow">for</span> (i = maplist.begin();i != maplist.end();i++)
  {
  <span class="keywordflow">for</span> (j = i-&gt;begin();j != i-&gt;end();j++)
  cout &lt;&lt; j &lt;&lt; ' `;
  cout &lt;&lt; endl;
  }
</pre></div> The preceding code reads in a molecule, initializes a smarts pattern of two single-bonded carbons, and locates all instances of the pattern in the molecule. Note that calling the <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#dda681cbeb3f22e43d35105ad4608b91">Match()</a> function does not return the results of the substructure match. The results from a match are stored in the <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>, and a call to <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#5633f1fa229ec0ff8fd3991e09d791c2">GetMapList()</a> or <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#de3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> must be made to extract the results. The function <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#5633f1fa229ec0ff8fd3991e09d791c2">GetMapList()</a> returns all matches of a particular pattern while <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#de3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> returns only the unique matches. For instance, the pattern [OD1]~C~[OD1] describes a carboxylate group. This pattern will match both atom number permutations of the carboxylate, and if <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#5633f1fa229ec0ff8fd3991e09d791c2">GetMapList()</a> is called, both matches will be returned. If <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#de3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> is called only unique matches of the pattern will be returned. A unique match is defined as one which does not cover the identical atoms that a previous match has covered. 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a930ba6620356e94683a1d5d4a4a25e3"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::OBSmartsPattern" ref="a930ba6620356e94683a1d5d4a4a25e3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="45c009ff3b4002e84b8f6cc4adbc1a49"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::~OBSmartsPattern" ref="45c009ff3b4002e84b8f6cc4adbc1a49" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="da1c40a99620ab595049ba01934b7ca6"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::OBSmartsPattern" ref="da1c40a99620ab595049ba01934b7ca6" args="(const OBSmartsPattern &amp;cp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>cp</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="644ca84fee80513682392b90a2841ec6"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::operator=" ref="644ca84fee80513682392b90a2841ec6" args="(const OBSmartsPattern &amp;cp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>&amp; operator=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>cp</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4bf864960d56b1aae66780af7512d5f7"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::NumMatches" ref="4bf864960d56b1aae66780af7512d5f7" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumMatches           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2f0695eb7d6ff6321032d88655ae8d25"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::NumAtoms" ref="2f0695eb7d6ff6321032d88655ae8d25" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumAtoms           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7358c2c15c4c0d88ae2489f586bc8e0b"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::NumBonds" ref="7358c2c15c4c0d88ae2489f586bc8e0b" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumBonds           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8751275cd32b98ccc4248547e464d6cb"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetAtomicNum" ref="8751275cd32b98ccc4248547e464d6cb" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetAtomicNum           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="2903a56b0b7f6fa0a617a069738251af"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetBond" ref="2903a56b0b7f6fa0a617a069738251af" args="(int &amp;, int &amp;, int &amp;, int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetBond           </td>
          <td>(</td>
          <td class="paramtype">int &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="46efb8b30f7e664ba32a950cb100f939"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetCharge" ref="46efb8b30f7e664ba32a950cb100f939" args="(int)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetCharge           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="a9145386a6abc43611eec23b34702ff2"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetSMARTS" ref="a9145386a6abc43611eec23b34702ff2" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; GetSMARTS           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1f769a4a64988a131b80fdda554eda1e"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetSMARTS" ref="1f769a4a64988a131b80fdda554eda1e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string&amp; GetSMARTS           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="bb64da8f114045c4b41dec13919bed9f"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetVectorBinding" ref="bb64da8f114045c4b41dec13919bed9f" args="(int idx) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetVectorBinding           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>idx</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="bcfbdba215d3b15fbb4b682969943a6e"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::Empty" ref="bcfbdba215d3b15fbb4b682969943a6e" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Empty           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c532c4b500b1a85ea22217f2c65a70ed"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::IsValid" ref="c532c4b500b1a85ea22217f2c65a70ed" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsValid           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f85a8298da4d338f99cf35b4aba4f227"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::Init" ref="f85a8298da4d338f99cf35b4aba4f227" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Init           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b0da164271103274db6a85254dad97f9"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::Init" ref="b0da164271103274db6a85254dad97f9" args="(const std::string &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Init           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6891bcec2059a979cff31cd7970a76a3"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::WriteMapList" ref="6891bcec2059a979cff31cd7970a76a3" args="(std::ostream &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WriteMapList           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="dda681cbeb3f22e43d35105ad4608b91"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::Match" ref="dda681cbeb3f22e43d35105ad4608b91" args="(OBMol &amp;mol, bool single=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Match           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>single</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="afeef4d5a61d7d6b3c5b6120267359a0"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::RestrictedMatch" ref="afeef4d5a61d7d6b3c5b6120267359a0" args="(OBMol &amp;mol, std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;pairs, bool single=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool RestrictedMatch           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>pairs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>single</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1626ba77086e16c8ddcdee647937d905"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::RestrictedMatch" ref="1626ba77086e16c8ddcdee647937d905" args="(OBMol &amp;mol, OBBitVec &amp;bv, bool single=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool RestrictedMatch           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>single</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5633f1fa229ec0ff8fd3991e09d791c2"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetMapList" ref="5633f1fa229ec0ff8fd3991e09d791c2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt;&amp; GetMapList           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="de3dbfa0989e51224e19b38932b05c1b"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::GetUMapList" ref="de3dbfa0989e51224e19b38932b05c1b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::vector&lt; int &gt; &gt; &amp; GetUMapList           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="548b220ea8c00d0297e81ebc7b31c6d7"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::BeginMList" ref="548b220ea8c00d0297e81ebc7b31c6d7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt;::iterator BeginMList           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7db4777fec63048db41fb890ac0a22ac"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::EndMList" ref="7db4777fec63048db41fb890ac0a22ac" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt;::iterator EndMList           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="9aa91437a607c7d33353f38857add180"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::_growbond" ref="9aa91437a607c7d33353f38857add180" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;bool&gt; <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#9aa91437a607c7d33353f38857add180">_growbond</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b4d28e672d513c538ae9ff92e409bece"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::_mlist" ref="b4d28e672d513c538ae9ff92e409bece" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt; <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#b4d28e672d513c538ae9ff92e409bece">_mlist</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d43f81cd2cc637e810b38c7686d9917d"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::_pat" ref="d43f81cd2cc637e810b38c7686d9917d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>* <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#d43f81cd2cc637e810b38c7686d9917d">_pat</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="433559ab344e4266e3d109bce29ee417"></a><!-- doxytag: member="OpenBabel::OBSmartsPattern::_str" ref="433559ab344e4266e3d109bce29ee417" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#433559ab344e4266e3d109bce29ee417">_str</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="parsmart_8h-source.shtml">parsmart.h</a><li><a class="el" href="parsmart_8cpp.shtml">parsmart.cpp</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:11 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
