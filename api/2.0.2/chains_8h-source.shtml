<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: chains.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>chains.h</h1><a href="chains_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">chains.h - Parse for macromolecule chains and residues</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_CHAINS_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_CHAINS_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a><a class="code" href="chains_8h.shtml#0a30b6310d4dca99e49673f6e530bdc4">00023</a> <span class="preprocessor">#define MaxMonoAtom 20</span>
<a name="l00024"></a><a class="code" href="chains_8h.shtml#d6c9530ebbe94406872e1a4eb18b3b7c">00024</a> <span class="preprocessor"></span><span class="preprocessor">#define MaxMonoBond 20</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span>
<a name="l00026"></a>00026 <span class="keyword">namespace </span>OpenBabel
<a name="l00027"></a>00027 {
<a name="l00028"></a>00028 
<a name="l00029"></a>00029   <span class="keyword">class </span>OBAtom;
<a name="l00030"></a>00030   <span class="keyword">class </span>OBMol;
<a name="l00031"></a>00031 
<a name="l00034"></a><a class="code" href="namespaceOpenBabel.shtml#e1eceda9d35f6ef989b038cd7d0ac811">00034</a>   <span class="keyword">typedef</span> <span class="keyword">struct </span><a class="code" href="namespaceOpenBabel.shtml#b9f43ad5d3c98972a7c624fc02cc861b">Template</a> Template;
<a name="l00035"></a>00035 
<a name="l00037"></a>00037   <span class="comment">//</span>
<a name="l00042"></a><a class="code" href="classOpenBabel_1_1OBChainsParser.shtml">00042</a> <span class="comment"></span>  <span class="keyword">class </span>OBAPI OBChainsParser
<a name="l00043"></a>00043     {
<a name="l00044"></a>00044     <span class="keyword">public</span>:
<a name="l00045"></a>00045 
<a name="l00046"></a>00046       OBChainsParser(<span class="keywordtype">void</span>);
<a name="l00047"></a>00047       ~OBChainsParser(<span class="keywordtype">void</span>);
<a name="l00048"></a>00048 
<a name="l00053"></a>00053       <span class="keywordtype">bool</span> PerceiveChains(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">bool</span> nukeSingleResidue = <span class="keyword">false</span>);
<a name="l00054"></a>00054 
<a name="l00055"></a>00055     <span class="keyword">private</span>: <span class="comment">// internal methods</span>
<a name="l00056"></a>00056 
<a name="l00057"></a>00057       <span class="keywordtype">bool</span>  DetermineHetAtoms(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00058"></a>00058       <span class="keywordtype">bool</span>  DetermineConnectedChains(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00059"></a>00059       <span class="keywordtype">bool</span>  DeterminePeptideBackbone(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00060"></a>00060       <span class="keywordtype">bool</span>  DeterminePeptideSidechains(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00061"></a>00061       <span class="keywordtype">bool</span>  DetermineNucleicBackbone(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00062"></a>00062       <span class="keywordtype">bool</span>  DetermineNucleicSidechains(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00063"></a>00063       <span class="keywordtype">bool</span>  DetermineHydrogens(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00064"></a>00064 
<a name="l00065"></a>00065       <span class="keywordtype">void</span>  SetupMol(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00066"></a>00066       <span class="keywordtype">void</span>  SetResidueInformation(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, <span class="keywordtype">bool</span> nukeSingleResidue);
<a name="l00067"></a>00067       <span class="keywordtype">void</span>  ClearResidueInformation(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00068"></a>00068       <span class="keywordtype">void</span>  CleanupMol(<span class="keywordtype">void</span>);
<a name="l00069"></a>00069 
<a name="l00070"></a>00070       <span class="keywordtype">void</span>  AssignResidue(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00071"></a>00071       <span class="keywordtype">int</span>   IdentifyResidue(<span class="keywordtype">void</span> *, <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>); <span class="comment">// ByteCode *</span>
<a name="l00072"></a>00072 
<a name="l00073"></a>00073       <span class="keywordtype">void</span>  DefineMonomer(<span class="keywordtype">void</span> **, <span class="keywordtype">int</span>, <span class="keywordtype">char</span> *); <span class="comment">// ByteCode **</span>
<a name="l00074"></a>00074       <span class="keywordtype">int</span>   IdentifyElement(<span class="keywordtype">char</span> *);
<a name="l00075"></a>00075 
<a name="l00076"></a>00076       <span class="keywordtype">bool</span>  MatchConstraint(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <span class="keywordtype">int</span>);
<a name="l00077"></a>00077       <span class="keywordtype">bool</span>  Match2Constraints(Template *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *);
<a name="l00078"></a>00078       <span class="keywordtype">bool</span>  Match3Constraints(Template *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *);
<a name="l00079"></a>00079       <span class="keywordtype">bool</span>  Match4Constraints(Template *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *);
<a name="l00080"></a>00080 
<a name="l00081"></a>00081       <span class="keywordtype">void</span>  ConstrainBackbone(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, Template *, <span class="keywordtype">int</span>);
<a name="l00082"></a>00082 
<a name="l00083"></a>00083       <span class="keywordtype">int</span>   RecurseChain(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00084"></a>00084       <span class="keywordtype">void</span>  TraceNucleicChain(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00085"></a>00085       <span class="keywordtype">void</span>  TracePeptideChain(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00086"></a>00086 
<a name="l00087"></a>00087       <span class="keywordtype">char</span> *ParseSmiles(<span class="keywordtype">char</span> *, <span class="keywordtype">int</span>);
<a name="l00088"></a>00088 
<a name="l00089"></a>00089     <span class="keyword">private</span>: <span class="comment">// members</span>
<a name="l00090"></a>00090 
<a name="l00091"></a>00091       <span class="keywordtype">void</span> *PDecisionTree; <span class="comment">// ByteCode *</span>
<a name="l00092"></a>00092       <span class="keywordtype">void</span> *NDecisionTree; <span class="comment">// ByteCode *</span>
<a name="l00093"></a>00093 
<a name="l00094"></a>00094       <span class="keywordtype">int</span>   ResMonoAtom[<a class="code" href="chains_8h.shtml#0a30b6310d4dca99e49673f6e530bdc4">MaxMonoAtom</a>];
<a name="l00095"></a>00095       <span class="keywordtype">int</span>   ResMonoBond[<a class="code" href="chains_8h.shtml#d6c9530ebbe94406872e1a4eb18b3b7c">MaxMonoBond</a>];
<a name="l00096"></a>00096 
<a name="l00097"></a>00097       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> *bitmasks;
<a name="l00098"></a>00098       <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>  *resids;
<a name="l00099"></a>00099       <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>  *flags;
<a name="l00100"></a>00100       <span class="keywordtype">bool</span>           *hetflags;
<a name="l00101"></a>00101       <span class="keywordtype">short</span>          *atomids;
<a name="l00102"></a>00102       <span class="keywordtype">short</span>          *resnos;
<a name="l00103"></a>00103       <span class="keywordtype">short</span>          *sernos; 
<a name="l00104"></a>00104       <span class="keywordtype">char</span>           *hcounts;
<a name="l00105"></a>00105       <span class="keywordtype">char</span>           *chains;
<a name="l00106"></a>00106     };
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 }
<a name="l00109"></a>00109 <span class="preprocessor">#endif // OB_CHAINS_H</span>
<a name="l00110"></a>00110 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:00 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
