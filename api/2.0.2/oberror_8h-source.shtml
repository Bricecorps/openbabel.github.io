<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: oberror.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>oberror.h</h1><a href="oberror_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">oberror.h - Handle error messages, warnings, notices, etc.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2002 by Stefan Kebekus</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2003-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful, but</span>
<a name="l00015"></a>00015 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00017"></a>00017 <span class="comment">General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_ERROR_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_ERROR_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include "babelconfig.h"</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="preprocessor">#if HAVE_IOSTREAM</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#elif HAVE_IOSTREAM_H</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#endif</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span><span class="preprocessor">#if HAVE_SSTREAM</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">        #include &lt;sstream&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#elif</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span><span class="preprocessor">        #include &lt;sstream.h&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#endif</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;deque&gt;</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="keyword">namespace </span>OpenBabel
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045 
<a name="l00047"></a><a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">00047</a> <span class="keyword">enum</span> <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> {
<a name="l00048"></a>00048    <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fbf66ee4ae8ad04bc5003a16aa9b2b77">obError</a>,     
<a name="l00049"></a>00049    <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9600e966aac7d34fec05f2067eb6b989b">obWarning</a>,   
<a name="l00050"></a>00050    <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d98239e6e8daa5c812be192e6447979814">obInfo</a>,      
<a name="l00051"></a>00051    <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fca370a4ce993c0a266c7d120c3a6310">obAuditMsg</a>,  
<a name="l00052"></a><a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce">00052</a>    <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce">obDebug</a>      
<a name="l00053"></a>00053 };
<a name="l00054"></a>00054 
<a name="l00057"></a><a class="code" href="classOpenBabel_1_1OBError.shtml">00057</a> <span class="keyword">class </span>OBAPI OBError
<a name="l00058"></a>00058 {
<a name="l00059"></a>00059 <span class="keyword">public</span>:
<a name="l00060"></a>00060 
<a name="l00062"></a>00062   OBError( <span class="keyword">const</span> std::string &amp;method = <span class="stringliteral">""</span>,
<a name="l00063"></a>00063            <span class="keyword">const</span> std::string &amp;errorMsg = <span class="stringliteral">""</span>,
<a name="l00064"></a>00064            <span class="keyword">const</span> std::string &amp;explanation = <span class="stringliteral">""</span>,
<a name="l00065"></a>00065            <span class="keyword">const</span> std::string &amp;possibleCause = <span class="stringliteral">""</span>,
<a name="l00066"></a>00066            <span class="keyword">const</span> std::string &amp;suggestedRemedy = <span class="stringliteral">""</span>,
<a name="l00067"></a>00067            <span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> = <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce">obDebug</a> );
<a name="l00068"></a>00068 
<a name="l00070"></a>00070   std::string message(<span class="keywordtype">void</span>) <span class="keyword">const</span>;
<a name="l00071"></a>00071   
<a name="l00073"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#79f2d96335566944848c00c7749286f6">00073</a>   <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#1b1f9788bcd49d24cf27daca2a569210">operator&lt;&lt; </a>( std::ostream &amp;os, <span class="keyword">const</span> OBError &amp;er )
<a name="l00074"></a>00074     { <span class="keywordflow">return</span> os &lt;&lt; er.<a class="code" href="classOpenBabel_1_1OBError.shtml#58895ce0cba9231c40070623841e2cf6">message</a>(); };
<a name="l00075"></a>00075 
<a name="l00076"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#6085d518407579eea6641c87b0900859">00076</a>   std::string    GetMethod()            { <span class="keywordflow">return</span> _method;          }
<a name="l00077"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#719d28a406124c91803d87f2a76c103a">00077</a>   std::string    GetError()             { <span class="keywordflow">return</span> _errorMsg;        }
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#ab978f99214edd5de5fb4aa62570b091">00078</a>   std::string    GetExplanation()       { <span class="keywordflow">return</span> _explanation;     }
<a name="l00079"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#eb5472e04a3f6fc0a25db86f9b02b771">00079</a>   std::string    GetPossibleCause()     { <span class="keywordflow">return</span> _possibleCause;   }
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#b604c6ca5ac69c2f5a9a92a309511b08">00080</a>   std::string    GetSuggestedRemedy()   { <span class="keywordflow">return</span> _suggestedRemedy; }
<a name="l00081"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#b56da33bae8e73b05c21b6fa91a6f465">00081</a>   <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> GetLevel()             { <span class="keywordflow">return</span> _level;           }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083  <span class="keyword">protected</span>:
<a name="l00084"></a>00084 
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#b76b110ce78dbf832f2be94de64d4393">00085</a>     std::string _method;
<a name="l00086"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#e555e3ad2f9ba1a05c02c8e728da3e6f">00086</a>     std::string _errorMsg;
<a name="l00087"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#51f6cb8ac4c800345ad82cf63df0f9cb">00087</a>     std::string _explanation;
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#89443235c00d3d81208c0e339adbf6a7">00088</a>     std::string _possibleCause;
<a name="l00089"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#a04ab009d8cdab368735f2bdf66f8a73">00089</a>     std::string _suggestedRemedy;
<a name="l00090"></a>00090 
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBError.shtml#20898b53aeee396c51fb24d5fad05df0">00091</a>     <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> _level;
<a name="l00092"></a>00092 };
<a name="l00093"></a>00093 
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml">00095</a> <span class="keyword">class </span>OBAPI OBMessageHandler
<a name="l00096"></a>00096   {
<a name="l00097"></a>00097   <span class="keyword">public</span>:
<a name="l00098"></a>00098     OBMessageHandler();
<a name="l00099"></a>00099     ~OBMessageHandler();
<a name="l00100"></a>00100     
<a name="l00102"></a>00102     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError</a>(OBError err);
<a name="l00104"></a>00104     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError</a>(<span class="keyword">const</span> std::string &amp;method, <span class="keyword">const</span> std::string &amp;errorMsg, 
<a name="l00105"></a>00105                     <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> level = <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce">obDebug</a>);
<a name="l00106"></a>00106 
<a name="l00108"></a>00108     std::vector&lt;std::string&gt; GetMessagesOfLevel(<span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a>);
<a name="l00109"></a>00109 
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#2ddeff91a6a4f113be67243d32aae4f0">00111</a>     <span class="keywordtype">void</span> StartLogging() { _logging = <span class="keyword">true</span>; }
<a name="l00113"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#08d309e66bc4091df861de396b6dd4a4">00113</a>     <span class="keywordtype">void</span> StopLogging()  { _logging = <span class="keyword">false</span>; }
<a name="l00114"></a>00114 
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#77f52cdbd233a78a86a17fdbc5b1aeba">00116</a>     <span class="keywordtype">void</span> SetMaxLogEntries(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> max) { _maxEntries = max; }
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#d5cc775d9bcbe374ba8e3a7706441187">00118</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetMaxLogEntries() { <span class="keywordflow">return</span> _maxEntries; }
<a name="l00119"></a>00119 
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#f69ea3bc45568000475c11f584bd6506">00121</a>     <span class="keywordtype">void</span> ClearLog() { _messageList.clear(); }
<a name="l00122"></a>00122 
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#e467fbd6fca625ae5ee0ea066810280f">00125</a>     <span class="keywordtype">void</span> SetOutputLevel(<span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> level) { _outputLevel = level; }
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#3e6a1f72967b7b5e99d6a25cdde2fe34">00127</a>     <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> GetOutputLevel() { <span class="keywordflow">return</span> _outputLevel; }
<a name="l00128"></a>00128 
<a name="l00129"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#8d5a7033d340808ae4eb4602a6f638de">00129</a>     <span class="keywordtype">void</span> SetOutputStream(std::ostream *os) { _outputStream = os; }
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#fa3e05fe5fa00cc48db4a2b5b5f3ba95">00130</a>     std::ostream* GetOutputStream() { <span class="keywordflow">return</span> _outputStream; }
<a name="l00131"></a>00131 
<a name="l00133"></a>00133     <span class="keywordtype">bool</span> StartErrorWrap();
<a name="l00135"></a>00135     <span class="keywordtype">bool</span> StopErrorWrap();
<a name="l00136"></a>00136 
<a name="l00137"></a>00137   <span class="keyword">protected</span>:
<a name="l00139"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#08ea2212aebb85ea22895ec49bd81f85">00139</a>     std::deque&lt;OBError&gt;    _messageList;
<a name="l00140"></a>00140 
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#bddad1d062682a33800f8d048a1e35f6">00142</a>     <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a>         _outputLevel;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="comment">// self-explanatory</span>
<a name="l00145"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#dff5b7b50cde9f6620dc08128df860c4">00145</a>     std::ostream          *_outputStream;
<a name="l00146"></a>00146 
<a name="l00148"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#3c4c6fad78b988cdc4fc9b7ade5e788c">00148</a>     <span class="keywordtype">bool</span>                   _logging;
<a name="l00150"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#7a0d2d55c1de9a5afc3bf71abedfdddd">00150</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>           _maxEntries;
<a name="l00151"></a>00151 
<a name="l00153"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#3e0837dfabcca64b1bdf2392e70b3228">00153</a>     std::streambuf        *_inWrapStreamBuf;
<a name="l00155"></a><a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#9285cdb5ae08c9a33cd6d6998cd69a26">00155</a>     std::streambuf        *_filterStreamBuf;
<a name="l00156"></a>00156   }; 
<a name="l00157"></a>00157 
<a name="l00158"></a><a class="code" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">00158</a> EXTERN OBMessageHandler <a class="code" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">obErrorLog</a>;
<a name="l00159"></a>00159 
<a name="l00161"></a><a class="code" href="classOpenBabel_1_1obLogBuf.shtml">00161</a>  <span class="keyword">class </span>OBAPI obLogBuf : <span class="keyword">public</span> std::stringbuf
<a name="l00162"></a>00162   {
<a name="l00163"></a>00163     <span class="keyword">public</span>:
<a name="l00164"></a><a class="code" href="classOpenBabel_1_1obLogBuf.shtml#d22e8f4b05ebff4d7292436b23c62666">00164</a>       <span class="keyword">virtual</span> ~obLogBuf() { sync(); }
<a name="l00165"></a>00165     
<a name="l00166"></a>00166     <span class="keyword">protected</span>:
<a name="l00168"></a><a class="code" href="classOpenBabel_1_1obLogBuf.shtml#553fc1343cc7a747775864d1d124a5d5">00168</a>     <span class="keywordtype">int</span> sync()
<a name="l00169"></a>00169     {
<a name="l00170"></a>00170       <a class="code" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">obErrorLog</a>.<a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#d49e4137a5874763ccaef154a0cdab30">ThrowError</a>(<span class="stringliteral">""</span>, str(), <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d98239e6e8daa5c812be192e6447979814">obInfo</a>);
<a name="l00171"></a>00171       str(std::string()); <span class="comment">// clear the buffer</span>
<a name="l00172"></a>00172                         <span class="keywordflow">return</span> 0;
<a name="l00173"></a>00173     }
<a name="l00174"></a>00174   };
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 <span class="preprocessor">#endif</span>
<a name="l00179"></a>00179 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:01 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
