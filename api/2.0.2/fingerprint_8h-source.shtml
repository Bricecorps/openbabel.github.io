<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: fingerprint.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>fingerprint.h</h1><a href="fingerprint_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">fingerprint.h - Base class for fingerprints and fast searching </span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2005 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_FINGERPRINT_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_FINGERPRINT_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="keyword">namespace </span>OpenBabel
<a name="l00029"></a>00029 {
<a name="l00030"></a>00030         <span class="keyword">class </span>OBBase; <span class="comment">//Forward declaration; used only as pointer.</span>
<a name="l00031"></a>00031 
<a name="l00033"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml">00033</a> <span class="keyword">class </span>OBAPI OBFingerprint
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035 <span class="comment">//see end of cpp file for detailed documentation</span>
<a name="l00036"></a>00036 <span class="keyword">public</span>:
<a name="l00038"></a>00038         <span class="keywordtype">void</span> SetBit(std::vector&lt;unsigned int&gt;&amp; vec, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n);    
<a name="l00039"></a>00039 
<a name="l00041"></a>00041         <span class="keywordtype">void</span> Fold(std::vector&lt;unsigned int&gt;&amp; vec, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbits); 
<a name="l00042"></a>00042 
<a name="l00044"></a>00044         <span class="keyword">virtual</span> <span class="keywordtype">bool</span> GetFingerprint(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::vector&lt;unsigned int&gt;&amp; fp, <span class="keywordtype">int</span> nbits=0)=0;
<a name="l00045"></a>00045 
<a name="l00047"></a>00047         <span class="keyword">virtual</span> std::string Description()=0;
<a name="l00048"></a>00048 
<a name="l00050"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#48c2b72feb2607662249c83e85ce665b">00050</a>         <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#48c2b72feb2607662249c83e85ce665b">FptFlag</a>{FPT_UNIQUEBITS=1};
<a name="l00051"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#94a94537cc5ba96b1876db1b612b91a3">00051</a>         <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Flags() { <span class="keywordflow">return</span> 0;}; 
<a name="l00052"></a>00052 
<a name="l00054"></a>00054         <span class="keyword">static</span> <span class="keywordtype">bool</span> GetNextFPrt(std::string&amp; <span class="keywordtype">id</span>, OBFingerprint*&amp; pFPrt);
<a name="l00055"></a>00055 
<a name="l00057"></a>00057         <span class="keyword">static</span> OBFingerprint* FindFingerprint(std::string&amp; ID);
<a name="l00058"></a>00058 
<a name="l00060"></a>00060         <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#cb0124a1ab83523d88207f71f037ec59">Tanimoto</a>(<span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec1, <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec2);
<a name="l00061"></a>00061         
<a name="l00063"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#e6df021d906a48593e8f9ed11bd8d128">00063</a>         <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#cb0124a1ab83523d88207f71f037ec59">Tanimoto</a>(<span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec1, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* p2) 
<a name="l00064"></a>00064         {
<a name="l00066"></a>00066                 <span class="keywordtype">int</span> andbits=0, orbits=0;
<a name="l00067"></a>00067                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;
<a name="l00068"></a>00068                 <span class="keywordflow">for</span> (i=0;i&lt;vec1.size();++i)
<a name="l00069"></a>00069                 {
<a name="l00070"></a>00070                         <span class="keywordtype">int</span> andfp = vec1[i] &amp; p2[i];
<a name="l00071"></a>00071                         <span class="keywordtype">int</span> orfp = vec1[i] | p2[i];
<a name="l00072"></a>00072                         <span class="comment">//Count bits</span>
<a name="l00073"></a>00073                         <span class="keywordflow">for</span>(;andfp;andfp=andfp&lt;&lt;1)
<a name="l00074"></a>00074                                 <span class="keywordflow">if</span>(andfp&lt;0) ++andbits;
<a name="l00075"></a>00075                         <span class="keywordflow">for</span>(;orfp;orfp=orfp&lt;&lt;1)
<a name="l00076"></a>00076                                 <span class="keywordflow">if</span>(orfp&lt;0) ++orbits;
<a name="l00077"></a>00077                 }
<a name="l00078"></a>00078                         <span class="keywordflow">return</span>((<span class="keywordtype">double</span>)andbits/(<span class="keywordtype">double</span>)orbits);
<a name="l00079"></a>00079         };
<a name="l00080"></a>00080         
<a name="l00081"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#d9ecfee3be06f4c37ef48506100f6f0c">00081</a>         <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Getbitsperint(){ <span class="keywordflow">return</span> bitsperint; }
<a name="l00082"></a>00082 
<a name="l00083"></a>00083 <span class="keyword">private</span>:
<a name="l00085"></a>00085         <span class="keyword">struct </span>bit_or
<a name="l00086"></a>00086         {
<a name="l00087"></a>00087                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> operator()(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> a, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> b)
<a name="l00088"></a>00088                 {
<a name="l00089"></a>00089                         <span class="keywordflow">return</span> a | b;   
<a name="l00090"></a>00090                 }
<a name="l00091"></a>00091         };
<a name="l00092"></a>00092         
<a name="l00093"></a>00093         <span class="keyword">typedef</span> std::map&lt;std::string, OBFingerprint*&gt; FPMapType;
<a name="l00094"></a>00094         <span class="keyword">typedef</span> FPMapType::iterator Fptpos;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="keyword">protected</span>:
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#f8ab43f3c968540b607128589c1e3864">00101</a>         <span class="keyword">static</span> FPMapType&amp; FPtsMap()
<a name="l00102"></a>00102         {
<a name="l00103"></a>00103                 <span class="keyword">static</span> FPMapType* fptm = NULL;
<a name="l00104"></a>00104                 <span class="keywordflow">if</span> (!fptm)
<a name="l00105"></a>00105                   fptm = <span class="keyword">new</span> FPMapType;
<a name="l00106"></a>00106                 <span class="keywordflow">return</span> *fptm;
<a name="l00107"></a>00107         };
<a name="l00108"></a>00108 
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#d3469bd348159d091fa112ce727cc01c">00109</a>         OBFingerprint(std::string ID, <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>)
<a name="l00110"></a>00110         {
<a name="l00111"></a>00111                 FPtsMap()[ID] = <span class="keyword">this</span>; <span class="comment">//registers the derived fingerprint class</span>
<a name="l00112"></a>00112                 <span class="keywordflow">if</span>(IsDefault || FPtsMap().empty())
<a name="l00113"></a>00113                         _pDefault=<span class="keyword">this</span>;
<a name="l00114"></a>00114         };
<a name="l00115"></a>00115         
<a name="l00116"></a>00116 <span class="keyword">private</span>:
<a name="l00117"></a>00117         <span class="keyword">static</span> OBFingerprint* _pDefault;
<a name="l00118"></a>00118         <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bitsperint;<span class="comment">// = 8 * sizeof(unsigned int);</span>
<a name="l00119"></a>00119         <span class="keyword">static</span> <span class="keywordtype">int</span> rubbish;
<a name="l00120"></a>00120 };
<a name="l00121"></a>00121 
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 <span class="comment">//*************************************************************</span>
<a name="l00126"></a>00126 <span class="comment">//Fast search routines</span>
<a name="l00128"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml">00128</a> <span class="comment"></span><span class="keyword">struct </span>OBAPI FptIndexHeader
<a name="l00129"></a>00129 {
<a name="l00130"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#ce6a28b9a2f58cb13b09af8fb5c739ba">00130</a>         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> headerlength;
<a name="l00131"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#d186ad63c9d2b800747b680984bb37eb">00131</a>         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nEntries;    
<a name="l00132"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#f562bd9c6faf08f0dab334b23d5788ee">00132</a>         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> words;                             
<a name="l00133"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#fa1b09f7991580662a10548fd55700ee">00133</a>         <span class="keywordtype">char</span> fpid[16];            
<a name="l00134"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#5c36621530d43d4607e35153277a1058">00134</a>         <span class="keywordtype">char</span> datafilename[256];   
<a name="l00135"></a>00135 };
<a name="l00137"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml">00137</a> <span class="keyword">struct </span>OBAPI FptIndex
<a name="l00138"></a>00138 {
<a name="l00139"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml#6d5979c64e7513c829f24e421d253ae5">00139</a>         FptIndexHeader header;
<a name="l00140"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml#1d071a268033064b8771f42e57e20a0d">00140</a>         std::vector&lt;unsigned int&gt; fptdata;
<a name="l00141"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml#744eaebf662c3b17f14de1cf9d628278">00141</a>         std::vector&lt;unsigned int&gt; seekdata;
<a name="l00142"></a>00142         <span class="keywordtype">bool</span> Read(std::istream* pIndexstream);
<a name="l00144"></a>00144         OBFingerprint* CheckFP();
<a name="l00145"></a>00145 };
<a name="l00146"></a>00146 
<a name="l00148"></a><a class="code" href="classOpenBabel_1_1FastSearch.shtml">00148</a> <span class="keyword">class </span>OBAPI FastSearch
<a name="l00149"></a>00149 {
<a name="l00150"></a>00150 <span class="comment">//see end of cpp file for detailed documentation</span>
<a name="l00151"></a>00151 <span class="keyword">public</span>:
<a name="l00152"></a>00152   std::string ReadIndex(std::istream* pIndexstream);
<a name="l00153"></a><a class="code" href="classOpenBabel_1_1FastSearch.shtml#2d2d75247574ce3d0f7bbc0d4283b3c2">00153</a>         <span class="keyword">virtual</span> ~FastSearch(){};
<a name="l00154"></a>00154 
<a name="l00156"></a>00156         <span class="keywordtype">bool</span>    Find(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::vector&lt;unsigned int&gt;&amp; SeekPositions, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> MaxCandidates);
<a name="l00157"></a>00157 
<a name="l00160"></a>00160         <span class="keywordtype">bool</span>    FindSimilar(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::multimap&lt;double, unsigned int&gt;&amp; SeekposMap,
<a name="l00161"></a>00161                 <span class="keywordtype">double</span> MinTani);
<a name="l00162"></a>00162 
<a name="l00165"></a>00165         <span class="keywordtype">bool</span>    FindSimilar(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::multimap&lt;double, unsigned int&gt;&amp; SeekposMap,
<a name="l00166"></a>00166                 <span class="keywordtype">int</span> nCandidates=0);
<a name="l00167"></a>00167 
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1FastSearch.shtml#d587e1f6c70197b13b1a79444811864d">00169</a>         OBFingerprint* GetFingerprint()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _pFP;};
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 <span class="keyword">private</span>:
<a name="l00172"></a>00172         FptIndex   _index;
<a name="l00173"></a>00173         OBFingerprint* _pFP;
<a name="l00174"></a>00174 };
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 <span class="comment">//**********************************************</span>
<a name="l00178"></a><a class="code" href="classOpenBabel_1_1FastSearchIndexer.shtml">00178</a> <span class="comment"></span><span class="keyword">class </span>OBAPI FastSearchIndexer
<a name="l00179"></a>00179 {
<a name="l00180"></a>00180 <span class="comment">//see end of cpp file for detailed documentation</span>
<a name="l00181"></a>00181 <span class="keyword">public</span>:
<a name="l00183"></a>00183         FastSearchIndexer(std::string&amp; datafilename, std::ostream* os, std::string&amp; fpid,
<a name="l00184"></a>00184                         <span class="keywordtype">int</span> FptBits=0);
<a name="l00185"></a>00185 
<a name="l00187"></a>00187         FastSearchIndexer(FptIndex* pindex, std::ostream* os);
<a name="l00188"></a>00188         
<a name="l00189"></a>00189         ~FastSearchIndexer();
<a name="l00190"></a>00190 
<a name="l00192"></a>00192         <span class="keywordtype">bool</span> Add(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::streampos seekpos);
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 <span class="keyword">private</span>:
<a name="l00195"></a>00195         std::ostream* _indexstream;
<a name="l00196"></a>00196         FptIndex*               _pindex;
<a name="l00197"></a>00197         OBFingerprint* _pFP;
<a name="l00198"></a>00198         <span class="keywordtype">int</span> _nbits;
<a name="l00199"></a>00199 };
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 } <span class="comment">//namespace OpenBabel</span>
<a name="l00202"></a>00202 <span class="preprocessor">#endif</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:00 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
