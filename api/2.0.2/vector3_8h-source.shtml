<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: vector3.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a>&nbsp;&raquo&nbsp;<a class="el" href="dir_71c44deb550e7bea7fba24c524d3d62f.shtml">math</a></div>
<h1>vector3.h</h1><a href="vector3_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">vector3.h - Handle 3D coordinates.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_VECTOR_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_VECTOR_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#if HAVE_IOSTREAM</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#elif HAVE_IOSTREAM_H</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#endif</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="preprocessor">#if HAVE_FSTREAM</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span><span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#elif HAVE_FSTREAM_H</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#include &lt;fstream.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#endif</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include "<a class="code" href="obutil_8h.shtml">obutil.h</a>"</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#ifndef PI</span>
<a name="l00039"></a><a class="code" href="vector3_8h.shtml#598a3330b3c21701223ee0ca14316eca">00039</a> <span class="preprocessor"></span><span class="preprocessor">#define PI 3.1415926535897932384626433</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span>
<a name="l00042"></a>00042 <span class="preprocessor">#ifndef RAD_TO_DEG</span>
<a name="l00043"></a><a class="code" href="vector3_8h.shtml#89e47af0449640d4f15191aba5ca24c6">00043</a> <span class="preprocessor"></span><span class="preprocessor">#define RAD_TO_DEG 180.0/PI</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a>00046 <span class="preprocessor">#ifndef DEG_TO_RAD</span>
<a name="l00047"></a><a class="code" href="vector3_8h.shtml#212460e743fecb084d717bb2180c5a56">00047</a> <span class="preprocessor"></span><span class="preprocessor">#define DEG_TO_RAD PI/180.0</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span>
<a name="l00050"></a>00050 <span class="keyword">namespace </span>OpenBabel
<a name="l00051"></a>00051 {
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="keyword">class </span>matrix3x3;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="comment">// class introduction in vector3.cpp</span>
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1vector3.shtml">00056</a> <span class="keyword">class   </span>OBAPI vector3
<a name="l00057"></a>00057 {
<a name="l00058"></a>00058 <span class="keyword">private</span> :
<a name="l00059"></a>00059     <span class="keywordtype">double</span>              _vx, _vy, _vz ;
<a name="l00060"></a>00060 
<a name="l00061"></a>00061 <span class="keyword">public</span> :
<a name="l00063"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#6e19b23b3b8240595d9fe6e09417e41c">00063</a>     vector3 (<span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#6c4b361d72eb3767ba424ac9a6ecf52b">x</a>=0.0, <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#0ed6a908288e0cd87f79c1b5ab56d07c">y</a>=0.0, <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#fb573e69f3b198fe9ca91079c4a402a9">z</a>=0.0)
<a name="l00064"></a>00064     {
<a name="l00065"></a>00065         _vx = <a class="code" href="matrix3x3_8cpp.shtml#6c4b361d72eb3767ba424ac9a6ecf52b">x</a>;
<a name="l00066"></a>00066         _vy = <a class="code" href="matrix3x3_8cpp.shtml#0ed6a908288e0cd87f79c1b5ab56d07c">y</a>;
<a name="l00067"></a>00067         _vz = <a class="code" href="matrix3x3_8cpp.shtml#fb573e69f3b198fe9ca91079c4a402a9">z</a>;
<a name="l00068"></a>00068     };
<a name="l00070"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#be84fe9749e73b1027baddb505fa189a">00070</a>     vector3 (<span class="keyword">const</span> vector3&amp; v)
<a name="l00071"></a>00071     {
<a name="l00072"></a>00072         _vx = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>;
<a name="l00073"></a>00073         _vy = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>;
<a name="l00074"></a>00074         _vz = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>;
<a name="l00075"></a>00075     };
<a name="l00076"></a>00076 
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#ccd2f2de5a517db0f7d79fc1c144ffcf">00078</a>     <span class="keywordtype">void</span> Set(<span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#6c4b361d72eb3767ba424ac9a6ecf52b">x</a>, <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#0ed6a908288e0cd87f79c1b5ab56d07c">y</a>, <span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#fb573e69f3b198fe9ca91079c4a402a9">z</a>)
<a name="l00079"></a>00079     {
<a name="l00080"></a>00080         _vx = x ;
<a name="l00081"></a>00081         _vy = y ;
<a name="l00082"></a>00082         _vz = z ;
<a name="l00083"></a>00083     };
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#bfcb3c965a12bd0385f1fe1db3f7d3ac">00085</a>     <span class="keywordtype">void</span> Set(<span class="keyword">const</span> <span class="keywordtype">double</span> *c)
<a name="l00086"></a>00086     {
<a name="l00087"></a>00087         _vx = c[0];
<a name="l00088"></a>00088         _vy = c[1];
<a name="l00089"></a>00089         _vz = c[2];
<a name="l00090"></a>00090     }
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#57c5b62039552791d5118cc6584f3420">00092</a>     <span class="keywordtype">void</span> SetX(<span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#6c4b361d72eb3767ba424ac9a6ecf52b">x</a>)
<a name="l00093"></a>00093     {
<a name="l00094"></a>00094         _vx = x;
<a name="l00095"></a>00095     };
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#58c383ea7ada0f8728aea3d2bdabb482">00097</a>     <span class="keywordtype">void</span> SetY(<span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#0ed6a908288e0cd87f79c1b5ab56d07c">y</a>)
<a name="l00098"></a>00098     {
<a name="l00099"></a>00099         _vy = y;
<a name="l00100"></a>00100     };
<a name="l00102"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#a14ff17b43720fe0d79d95cc5b9fd04d">00102</a>     <span class="keywordtype">void</span> SetZ(<span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#fb573e69f3b198fe9ca91079c4a402a9">z</a>)
<a name="l00103"></a>00103     {
<a name="l00104"></a>00104         _vz = z;
<a name="l00105"></a>00105     };
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#9345053a16ce83e130dc098fddf9af7a">00107</a>     <span class="keywordtype">void</span> Get(<span class="keywordtype">double</span> *c)
<a name="l00108"></a>00108     {
<a name="l00109"></a>00109         c[0]=_vx;
<a name="l00110"></a>00110         c[1]=_vy;
<a name="l00111"></a>00111         c[2]=_vz;
<a name="l00112"></a>00112     };
<a name="l00114"></a>00114     <span class="keywordtype">double</span>&amp; operator[] ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i);
<a name="l00115"></a>00115 
<a name="l00117"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#d2eee719d3706b71968f894c1179f4bb">00117</a>     vector3&amp; operator= ( <span class="keyword">const</span> vector3&amp; v)
<a name="l00118"></a>00118     {
<a name="l00119"></a>00119         _vx = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>;
<a name="l00120"></a>00120         _vy = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>;
<a name="l00121"></a>00121         _vz = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>;
<a name="l00122"></a>00122         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00123"></a>00123     };
<a name="l00124"></a>00124 
<a name="l00126"></a>00126     <span class="keyword">friend</span> OBAPI std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#1b1f9788bcd49d24cf27daca2a569210">operator&lt;&lt; </a>( std::ostream&amp;, <span class="keyword">const</span> vector3&amp; ) ;
<a name="l00127"></a>00127 
<a name="l00128"></a>00128     <span class="comment">//  Comparison</span>
<a name="l00129"></a>00129     <span class="keyword">friend</span> OBAPI <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#c001b331f648fbbd8590576f59d4d2ab">operator== </a>( <span class="keyword">const</span> vector3&amp;, <span class="keyword">const</span> vector3&amp; ) ;
<a name="l00130"></a>00130     <span class="keyword">friend</span> OBAPI <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#ae234beb565bd1a8c1217bef05fe9a3c">operator!= </a>( <span class="keyword">const</span> vector3&amp;, <span class="keyword">const</span> vector3&amp; ) ;
<a name="l00131"></a>00131 
<a name="l00132"></a>00132     <span class="comment">//  Sum, Difference, Scalar Product</span>
<a name="l00134"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#15302e51ba109c9ddf4ab986ecc4282c">00134</a> <span class="comment"></span>    <span class="keyword">friend</span> OBAPI vector3 operator+ ( <span class="keyword">const</span> vector3&amp; v1, <span class="keyword">const</span> vector3&amp; v2)
<a name="l00135"></a>00135     {
<a name="l00136"></a>00136         <span class="keywordflow">return</span> vector3(v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>, v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>, v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>);
<a name="l00137"></a>00137     };
<a name="l00139"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#0d72ccfb9c9bdb73d27b936a3ec6c63c">00139</a>     <span class="keyword">friend</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#14a5c6428fbea264e97b9e3958d168bc">operator- </a>( <span class="keyword">const</span> vector3&amp; v1, <span class="keyword">const</span> vector3&amp; v2)
<a name="l00140"></a>00140     {
<a name="l00141"></a>00141         <span class="keywordflow">return</span> vector3(v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>, v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>, v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>);
<a name="l00142"></a>00142     };
<a name="l00144"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#b678b997bba1423f61d419fb87656375">00144</a>     <span class="keyword">friend</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#14a5c6428fbea264e97b9e3958d168bc">operator- </a>( <span class="keyword">const</span> vector3&amp; v)
<a name="l00145"></a>00145     {
<a name="l00146"></a>00146         <span class="keywordflow">return</span> vector3(-v.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>, -v.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>, -v.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>);
<a name="l00147"></a>00147     };
<a name="l00149"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#441910ead31c9d8eb317998383617030">00149</a>     <span class="keyword">friend</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#88f82b7288a2db09434d0a0aee1583d3">operator* </a>( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c, <span class="keyword">const</span> vector3&amp; v)
<a name="l00150"></a>00150     {
<a name="l00151"></a>00151         <span class="keywordflow">return</span> vector3( c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>, c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>, c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>);
<a name="l00152"></a>00152     };
<a name="l00154"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#7ba7efe83a25e501b6f72607aa634120">00154</a>     <span class="keyword">friend</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#88f82b7288a2db09434d0a0aee1583d3">operator* </a>( <span class="keyword">const</span> vector3&amp; v, <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00155"></a>00155     {
<a name="l00156"></a>00156         <span class="keywordflow">return</span> vector3( c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>, c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>, c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>);
<a name="l00157"></a>00157     };
<a name="l00159"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#0895f00aadb5c5a1fd0a89363e6f8b04">00159</a>     <span class="keyword">friend</span> OBAPI vector3 operator/ ( <span class="keyword">const</span> vector3&amp; v, <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00160"></a>00160     {
<a name="l00161"></a>00161         <span class="keywordflow">return</span> vector3( v.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>/c, v.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>/c, v.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>/c);
<a name="l00162"></a>00162     };
<a name="l00163"></a>00163     <span class="comment">// @removed@ misleading operation</span>
<a name="l00164"></a>00164     <span class="comment">// friend vector3 operator* ( const vector3 &amp;,const vector3 &amp;);</span>
<a name="l00165"></a>00165 
<a name="l00166"></a>00166     <span class="comment">//vector and matrix ops</span>
<a name="l00167"></a>00167     <span class="comment">// @removed@ misleading operation; matrix multiplication is not commutitative</span>
<a name="l00168"></a>00168     <span class="comment">//     friend vector3 operator *(const vector3 &amp;v,const matrix3x3 &amp;m);</span>
<a name="l00169"></a>00169 
<a name="l00171"></a>00171     <span class="keyword">friend</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#88f82b7288a2db09434d0a0aee1583d3">operator *</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m,<span class="keyword">const</span> vector3 &amp;v);
<a name="l00172"></a>00172 
<a name="l00173"></a>00173     <span class="comment">//  Immediate Sum, Difference, Scalar Product</span>
<a name="l00174"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#e0541be714a6305dd3295655eea746d9">00174</a>     vector3&amp; operator+= ( <span class="keyword">const</span> vector3&amp; v)
<a name="l00175"></a>00175     {
<a name="l00176"></a>00176         _vx += v.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>;
<a name="l00177"></a>00177         _vy += v.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>;
<a name="l00178"></a>00178         _vz += v.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>;
<a name="l00179"></a>00179         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00180"></a>00180     };
<a name="l00181"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#c4b4980ccea5aa5184928ce40cf1acee">00181</a>     vector3&amp; operator-= ( <span class="keyword">const</span> vector3&amp; v)
<a name="l00182"></a>00182     {
<a name="l00183"></a>00183         _vx -= v.<a class="code" href="classOpenBabel_1_1vector3.shtml#4041438901e8e304ee02a1204fc702be">_vx</a>;
<a name="l00184"></a>00184         _vy -= v.<a class="code" href="classOpenBabel_1_1vector3.shtml#81d6ceb0f315f3ad8b16a34553227692">_vy</a>;
<a name="l00185"></a>00185         _vz -= v.<a class="code" href="classOpenBabel_1_1vector3.shtml#64559a0f07f4e35f9245fa7bd08d25ce">_vz</a>;
<a name="l00186"></a>00186         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00187"></a>00187     };
<a name="l00188"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#506884b50b92a33e92029b43f9b75bc9">00188</a>     vector3&amp; operator+= ( <span class="keyword">const</span> <span class="keywordtype">double</span>* f)
<a name="l00189"></a>00189     {
<a name="l00190"></a>00190         _vx += f[0];
<a name="l00191"></a>00191         _vy += f[1];
<a name="l00192"></a>00192         _vz += f[2];
<a name="l00193"></a>00193         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00194"></a>00194     };
<a name="l00195"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#322635480250ba0c08aa47a125eda3dd">00195</a>     vector3&amp; operator-= ( <span class="keyword">const</span> <span class="keywordtype">double</span>* f)
<a name="l00196"></a>00196     {
<a name="l00197"></a>00197         _vx -= f[0];
<a name="l00198"></a>00198         _vy -= f[1];
<a name="l00199"></a>00199         _vz -= f[2];
<a name="l00200"></a>00200         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00201"></a>00201     };
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#80e5f1c9af1aa63dfa46b7559bae27bc">00202</a>     vector3&amp; operator*= ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00203"></a>00203     {
<a name="l00204"></a>00204         _vx *= c;
<a name="l00205"></a>00205         _vy *= c;
<a name="l00206"></a>00206         _vz *= c;
<a name="l00207"></a>00207         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00208"></a>00208     };
<a name="l00209"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#b5a7b18eeff279e5d850a9075d09f8a5">00209</a>     vector3&amp; operator/= ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00210"></a>00210     {
<a name="l00211"></a>00211         _vx /= c;
<a name="l00212"></a>00212         _vy /= c;
<a name="l00213"></a>00213         _vz /= c;
<a name="l00214"></a>00214         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00215"></a>00215     };
<a name="l00217"></a>00217     vector3&amp; operator*= ( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;);
<a name="l00218"></a>00218 
<a name="l00220"></a>00220     <span class="keywordtype">void</span> randomUnitVector(<a class="code" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> *oeRand= 0L);
<a name="l00221"></a>00221 
<a name="l00222"></a>00222     <span class="comment">//  Member Functions</span>
<a name="l00223"></a>00223 
<a name="l00225"></a>00225     <span class="keyword">friend</span> OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#32a70eb5e04f4e10a386089723f05b2a">dot</a> ( <span class="keyword">const</span> vector3&amp;, <span class="keyword">const</span> vector3&amp; ) ;
<a name="l00226"></a>00226 
<a name="l00228"></a>00228     <span class="keyword">friend</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#62600a5c541628173aa762c5997a9b2e">cross</a> ( <span class="keyword">const</span> vector3&amp;, <span class="keyword">const</span> vector3&amp; ) ;
<a name="l00229"></a>00229 
<a name="l00231"></a>00231     <span class="keyword">friend</span> OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#fdb63edd6d5f38c9cc7b20008002281a">vectorAngle</a> ( <span class="keyword">const</span> vector3&amp; v1, <span class="keyword">const</span> vector3&amp; v2 );
<a name="l00232"></a>00232 
<a name="l00234"></a>00234     <span class="keyword">friend</span> OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#129200e1128cbbbf7fdb7ff980334ec2">CalcTorsionAngle</a>(<span class="keyword">const</span> vector3 &amp;a, <span class="keyword">const</span> vector3 &amp;b,
<a name="l00235"></a>00235                                    <span class="keyword">const</span> vector3 &amp;c, <span class="keyword">const</span> vector3 &amp;d);
<a name="l00236"></a>00236 
<a name="l00238"></a>00238     vector3&amp; normalize () ;
<a name="l00239"></a>00239 
<a name="l00241"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#80401d480f15e1418a3274a2b2b51649">00241</a>     <span class="keywordtype">double</span> length ()<span class="keyword"> const</span>
<a name="l00242"></a>00242 <span class="keyword">    </span>{
<a name="l00243"></a>00243         <span class="keywordflow">return</span> sqrt(_vx*_vx + _vy*_vy + _vz*_vz);
<a name="l00244"></a>00244     };
<a name="l00246"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#47f7e7ecf0a38bc7ef50f21d90ba349b">00246</a>     <span class="keywordtype">double</span> length_2 ()<span class="keyword"> const</span>
<a name="l00247"></a>00247 <span class="keyword">    </span>{
<a name="l00248"></a>00248         <span class="keywordflow">return</span> _vx*_vx + _vy*_vy + _vz*_vz;
<a name="l00249"></a>00249     };
<a name="l00251"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#833e1cf314b7b7a5537b2b6a56fee6a5">00251</a>     <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#6c4b361d72eb3767ba424ac9a6ecf52b">x</a> ()<span class="keyword"> const</span>
<a name="l00252"></a>00252 <span class="keyword">    </span>{
<a name="l00253"></a>00253         <span class="keywordflow">return</span> _vx ;
<a name="l00254"></a>00254     } ;
<a name="l00256"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#ca424ddaf2902c1cde483f37813d4278">00256</a>     <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#0ed6a908288e0cd87f79c1b5ab56d07c">y</a> ()<span class="keyword"> const</span>
<a name="l00257"></a>00257 <span class="keyword">    </span>{
<a name="l00258"></a>00258         <span class="keywordflow">return</span> _vy ;
<a name="l00259"></a>00259     } ;
<a name="l00261"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#e7bc7213001e326be4d4eb2d8a035c34">00261</a>     <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#fb573e69f3b198fe9ca91079c4a402a9">z</a> ()<span class="keyword"> const</span>
<a name="l00262"></a>00262 <span class="keyword">    </span>{
<a name="l00263"></a>00263         <span class="keywordflow">return</span> _vz ;
<a name="l00264"></a>00264     } ;
<a name="l00265"></a>00265 
<a name="l00267"></a>00267 
<a name="l00269"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#f0bb15d3c00f3ab71314513fa41fa548">00269</a>     <span class="keyword">inline</span> <span class="keywordtype">double</span> distSq(<span class="keyword">const</span> vector3 &amp;vv)<span class="keyword"> const</span>
<a name="l00270"></a>00270 <span class="keyword">    </span>{
<a name="l00271"></a>00271         <span class="keywordflow">return</span>( (_vx - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#833e1cf314b7b7a5537b2b6a56fee6a5">x</a>() )*(_vx - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#833e1cf314b7b7a5537b2b6a56fee6a5">x</a>() ) +
<a name="l00272"></a>00272                 (_vy - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#ca424ddaf2902c1cde483f37813d4278">y</a>() )*(_vy - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#ca424ddaf2902c1cde483f37813d4278">y</a>() ) +
<a name="l00273"></a>00273                 (_vz - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#e7bc7213001e326be4d4eb2d8a035c34">z</a>() )*(_vz - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#e7bc7213001e326be4d4eb2d8a035c34">z</a>() ) );
<a name="l00274"></a>00274     }
<a name="l00275"></a>00275 
<a name="l00277"></a>00277     <span class="keywordtype">void</span> createOrthoVector(vector3 &amp;v) <span class="keyword">const</span>;
<a name="l00278"></a>00278 
<a name="l00279"></a>00279 } ;
<a name="l00280"></a>00280 
<a name="l00282"></a>00282 OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#d0e0c09ef7c92973447c46d3ad3f3f8d">Point2Plane</a>(vector3 a, vector3 b, vector3 c, vector3 d);
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 <span class="comment">//  The global constant vector3s</span>
<a name="l00285"></a>00285 <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#7126b9414c30e5eaea055745183b0dcc">VZero</a>;
<a name="l00286"></a>00286 <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#a107deadee657e5c8402f1215dc6f647">VX</a>;
<a name="l00287"></a>00287 <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#4387b07aaaffe697c871025a292787e3">VY</a>;
<a name="l00288"></a>00288 <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#bbc57f9cd53a327cdbca503f0c3bb51c">VZ</a>;
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00291"></a>00291 <span class="preprocessor"></span>OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#e266dae0cf878cc7847440967f2ffd82">center_coords</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00292"></a>00292 <span class="preprocessor">#endif</span>
<a name="l00293"></a>00293 <span class="preprocessor"></span>}
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 <span class="preprocessor">#endif // OB_VECTOR_H</span>
<a name="l00296"></a>00296 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:01 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
