<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: obiter.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>obiter.h</h1><a href="obiter_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obiter.h - STL-style iterators for Open Babel.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_OBITER_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_OBITER_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="keyword">namespace </span>OpenBabel
<a name="l00026"></a>00026 {
<a name="l00027"></a>00027 
<a name="l00028"></a>00028   <span class="keyword">class </span>OBMol;
<a name="l00029"></a>00029   <span class="keyword">class </span>OBAtom;
<a name="l00030"></a>00030   <span class="keyword">class </span>OBBond;
<a name="l00031"></a>00031   <span class="keyword">class </span>OBResidue;
<a name="l00032"></a>00032 
<a name="l00034"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">00034</a> <span class="keyword">class </span>OBAPI OBMolAtomIter {
<a name="l00035"></a>00035     std::vector&lt;OBNodeBase*&gt;::iterator _i;
<a name="l00036"></a>00036     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;
<a name="l00037"></a>00037     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_ptr;
<a name="l00038"></a>00038 <span class="keyword">public</span>:
<a name="l00039"></a>00039 
<a name="l00040"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#0e0a0033461ca2e8bd7d3553613acb68">00040</a>     OBMolAtomIter()              { _parent = NULL; _ptr = NULL; }
<a name="l00041"></a>00041     OBMolAtomIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00042"></a>00042     OBMolAtomIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00043"></a>00043     OBMolAtomIter(<span class="keyword">const</span> OBMolAtomIter &amp;ai);
<a name="l00044"></a>00044 
<a name="l00045"></a>00045     OBMolAtomIter&amp; operator=(<span class="keyword">const</span> OBMolAtomIter &amp;ai);
<a name="l00046"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#67b76affb3b5d35fa419ac234144038b">00046</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00047"></a>00047     OBMolAtomIter operator++(<span class="keywordtype">int</span>);
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#227568f5015b62dce6f62b9eca4c90bb">00048</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00049"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#8e0b41342bcfcc7f327acc7a5ddd8438">00049</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#88f82b7288a2db09434d0a0aee1583d3">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00050"></a>00050 };
<a name="l00051"></a>00051 
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">00053</a> <span class="keyword">class </span>OBAPI OBMolBondIter {
<a name="l00054"></a>00054     std::vector&lt;OBEdgeBase*&gt;::iterator _i;
<a name="l00055"></a>00055     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;
<a name="l00056"></a>00056     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *_ptr;
<a name="l00057"></a>00057 <span class="keyword">public</span>:
<a name="l00058"></a>00058 
<a name="l00059"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#455059ecfe54c9a0c32e8456aa848569">00059</a>     OBMolBondIter()              { _parent = NULL; _ptr = NULL; }
<a name="l00060"></a>00060     OBMolBondIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00061"></a>00061     OBMolBondIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00062"></a>00062     OBMolBondIter(<span class="keyword">const</span> OBMolBondIter &amp;bi);
<a name="l00063"></a>00063 
<a name="l00064"></a>00064     OBMolBondIter&amp; operator=(<span class="keyword">const</span> OBMolBondIter &amp;bi);
<a name="l00065"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#67b76affb3b5d35fa419ac234144038b">00065</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00066"></a>00066     OBMolBondIter operator++(<span class="keywordtype">int</span>);
<a name="l00067"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#8c23da904e7b838d0482d3fce70e55b8">00067</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#46d44d5951cc8d2c6a76a65c8a00b494">00068</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#88f82b7288a2db09434d0a0aee1583d3">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00069"></a>00069 };
<a name="l00070"></a>00070 
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">00072</a> <span class="keyword">class </span>OBAPI OBAtomAtomIter {
<a name="l00073"></a>00073     std::vector&lt;OBEdgeBase*&gt;::iterator _i;
<a name="l00074"></a>00074     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_parent;
<a name="l00075"></a>00075     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_ptr;
<a name="l00076"></a>00076 <span class="keyword">public</span>:
<a name="l00077"></a>00077 
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#f8a4eb72f4e027a2f7d2649b01b847f1">00078</a>     OBAtomAtomIter()             { _parent = NULL; _ptr = NULL; }
<a name="l00079"></a>00079     OBAtomAtomIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atm);
<a name="l00080"></a>00080     OBAtomAtomIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;atm);
<a name="l00081"></a>00081     OBAtomAtomIter(<span class="keyword">const</span> OBAtomAtomIter &amp;ai);
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     OBAtomAtomIter&amp; operator=(<span class="keyword">const</span> OBAtomAtomIter &amp;ai);
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#67b76affb3b5d35fa419ac234144038b">00084</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00085"></a>00085     OBAtomAtomIter operator++(<span class="keywordtype">int</span>);
<a name="l00086"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#227568f5015b62dce6f62b9eca4c90bb">00086</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00087"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#8e0b41342bcfcc7f327acc7a5ddd8438">00087</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#88f82b7288a2db09434d0a0aee1583d3">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00088"></a>00088 };
<a name="l00089"></a>00089 
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">00091</a> <span class="keyword">class </span>OBAPI OBAtomBondIter {
<a name="l00092"></a>00092     std::vector&lt;OBEdgeBase*&gt;::iterator _i;
<a name="l00093"></a>00093     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_parent;
<a name="l00094"></a>00094     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *_ptr;
<a name="l00095"></a>00095 <span class="keyword">public</span>:
<a name="l00096"></a>00096 
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#f28bfccc1ea71cb3c90d4131fd0ffaac">00097</a>     OBAtomBondIter()             { _parent = NULL; _ptr = NULL; }
<a name="l00098"></a>00098     OBAtomBondIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atm);
<a name="l00099"></a>00099     OBAtomBondIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;atm);
<a name="l00100"></a>00100     OBAtomBondIter(<span class="keyword">const</span> OBAtomBondIter &amp;bi);
<a name="l00101"></a>00101 
<a name="l00102"></a>00102     OBAtomBondIter&amp; operator=(<span class="keyword">const</span> OBAtomBondIter &amp;bi);
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#67b76affb3b5d35fa419ac234144038b">00103</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00104"></a>00104     OBAtomBondIter operator++(<span class="keywordtype">int</span>);
<a name="l00105"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#8c23da904e7b838d0482d3fce70e55b8">00105</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00106"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#46d44d5951cc8d2c6a76a65c8a00b494">00106</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#88f82b7288a2db09434d0a0aee1583d3">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00107"></a>00107 };
<a name="l00108"></a>00108 
<a name="l00110"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">00110</a> <span class="keyword">class </span>OBAPI OBResidueIter {
<a name="l00111"></a>00111     std::vector&lt;OBResidue*&gt;::iterator _i;
<a name="l00112"></a>00112     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *_ptr;
<a name="l00113"></a>00113     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;
<a name="l00114"></a>00114 <span class="keyword">public</span>:
<a name="l00115"></a>00115 
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#222f27c41a5414c4fb612d260c21a5fc">00116</a>     OBResidueIter()              { _parent = NULL; _ptr = NULL; }
<a name="l00117"></a>00117     OBResidueIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00118"></a>00118     OBResidueIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00119"></a>00119     OBResidueIter(<span class="keyword">const</span> OBResidueIter &amp;ri);
<a name="l00120"></a>00120 
<a name="l00121"></a>00121     OBResidueIter&amp; operator=(<span class="keyword">const</span> OBResidueIter &amp;ri);
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#67b76affb3b5d35fa419ac234144038b">00122</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00123"></a>00123     OBResidueIter operator++(<span class="keywordtype">int</span>);
<a name="l00124"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#7e04dfb68e7cea085c06bc0dc993dacb">00124</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>* operator-&gt;()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#b95d7e81ca1ae249b476c1bfee809ab9">00125</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#88f82b7288a2db09434d0a0aee1583d3">operator*</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00126"></a>00126 };
<a name="l00127"></a>00127 
<a name="l00129"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">00129</a> <span class="keyword">class </span>OBAPI OBResidueAtomIter {
<a name="l00130"></a>00130     std::vector&lt;OBAtom*&gt;::iterator _i;
<a name="l00131"></a>00131     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *_parent;
<a name="l00132"></a>00132     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>    *_ptr;
<a name="l00133"></a>00133 <span class="keyword">public</span>:
<a name="l00134"></a>00134 
<a name="l00135"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#248fb7bc3b3279d171bfa2d1bf9eeb41">00135</a>     OBResidueAtomIter()          { _parent = NULL; _ptr = NULL; }
<a name="l00136"></a>00136     OBResidueAtomIter(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *res);
<a name="l00137"></a>00137     OBResidueAtomIter(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> &amp;res);
<a name="l00138"></a>00138     OBResidueAtomIter(<span class="keyword">const</span> OBResidueAtomIter &amp;ri);
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     OBResidueAtomIter &amp;operator = (<span class="keyword">const</span> OBResidueAtomIter &amp;ri);
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#67b76affb3b5d35fa419ac234144038b">00141</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00142"></a>00142     OBResidueAtomIter operator++ (<span class="keywordtype">int</span>);
<a name="l00143"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#227568f5015b62dce6f62b9eca4c90bb">00143</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00144"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#8e0b41342bcfcc7f327acc7a5ddd8438">00144</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;<a class="code" href="namespaceOpenBabel.shtml#88f82b7288a2db09434d0a0aee1583d3">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00145"></a>00145 };
<a name="l00146"></a>00146 
<a name="l00147"></a><a class="code" href="obiter_8h.shtml#fb051cb17b46d381998c24fc41db2a79">00147</a> <span class="preprocessor">#define FOR_ATOMS_OF_MOL(a,m)     for( OBMolAtomIter     a(m); a; a++ )</span>
<a name="l00148"></a><a class="code" href="obiter_8h.shtml#16c0f68c4f2d476fae98338b31e77e46">00148</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BONDS_OF_MOL(b,m)     for( OBMolBondIter     b(m); b; b++ )</span>
<a name="l00149"></a><a class="code" href="obiter_8h.shtml#18326b3c74bff171f5807ce9725e0c47">00149</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_NBORS_OF_ATOM(a,p)    for( OBAtomAtomIter    a(p); a; a++ )</span>
<a name="l00150"></a><a class="code" href="obiter_8h.shtml#a102b7f8200028ba654f022dc63fdf35">00150</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BONDS_OF_ATOM(b,p)    for( OBAtomBondIter    b(p); b; b++ )</span>
<a name="l00151"></a><a class="code" href="obiter_8h.shtml#483bbcfb9673a775c47ab6adf8e53451">00151</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_RESIDUES_OF_MOL(r,m)  for( OBResidueIter     r(m); r; r++ )</span>
<a name="l00152"></a><a class="code" href="obiter_8h.shtml#a4f83897733e3f3a1fb1ff9a1a85db1f">00152</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_ATOMS_OF_RESIDUE(a,r) for( OBResidueAtomIter a(r); a; a++ )</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>
<a name="l00154"></a>00154 } <span class="comment">// namespace OpenBabel</span>
<a name="l00155"></a>00155 <span class="preprocessor">#endif // OB_OBITER_H</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:01 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
