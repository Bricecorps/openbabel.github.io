<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: mol.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>mol.h</h1><a href="mol_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">mol.h - Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue.</span>
<a name="l00003"></a>00003 <span class="comment">        (the main header for Open Babel)</span>
<a name="l00004"></a>00004 <span class="comment"> </span>
<a name="l00005"></a>00005 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00007"></a>00007 <span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00010"></a>00010 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00011"></a>00011 <span class="comment"> </span>
<a name="l00012"></a>00012 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00013"></a>00013 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00014"></a>00014 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00015"></a>00015 <span class="comment"> </span>
<a name="l00016"></a>00016 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00017"></a>00017 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00018"></a>00018 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00019"></a>00019 <span class="comment">GNU General Public License for more details.</span>
<a name="l00020"></a>00020 <span class="comment">***********************************************************************/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef OB_MOL_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define OB_MOL_H</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include "babelconfig.h"</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#if HAVE_IOSTREAM</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#elif HAVE_IOSTREAM_H</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">#include &lt;iostream.h&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#endif</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span>
<a name="l00044"></a>00044 <span class="preprocessor">#if HAVE_FSTREAM</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#elif HAVE_FSTREAM_H</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#include &lt;fstream.h&gt;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#endif</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span>
<a name="l00050"></a>00050 <span class="preprocessor">#include "<a class="code" href="base_8h.shtml">base.h</a>"</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include "<a class="code" href="data_8h.shtml">data.h</a>"</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include "<a class="code" href="chains_8h.shtml">chains.h</a>"</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include "<a class="code" href="vector3_8h.shtml">math/vector3.h</a>"</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include "<a class="code" href="bitvec_8h.shtml">bitvec.h</a>"</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include "<a class="code" href="ring_8h.shtml">ring.h</a>"</span>
<a name="l00056"></a>00056 <span class="preprocessor">#include "<a class="code" href="generic_8h.shtml">generic.h</a>"</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include "<a class="code" href="typer_8h.shtml">typer.h</a>"</span>
<a name="l00058"></a>00058 <span class="preprocessor">#include "<a class="code" href="oberror_8h.shtml">oberror.h</a>"</span>
<a name="l00059"></a>00059 <span class="preprocessor">#include "<a class="code" href="obiter_8h.shtml">obiter.h</a>"</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include "<a class="code" href="reaction_8h.shtml">reaction.h</a>"</span> <span class="comment">//so it gets notices in DLL builds</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="keyword">namespace </span>OpenBabel
<a name="l00063"></a>00063 {
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="keyword">class </span>OBAtom;
<a name="l00066"></a>00066 <span class="keyword">class </span>OBBond;
<a name="l00067"></a>00067 <span class="keyword">class </span>OBMol;
<a name="l00068"></a>00068 <span class="keyword">class </span>OBInternalCoord;
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="comment">// Class OBResidue</span>
<a name="l00071"></a>00071 <span class="comment">// class introduction in residue.cpp</span>
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml">00072</a> <span class="keyword">class </span>OBAPI OBResidue
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074 <span class="keyword">public</span>:
<a name="l00075"></a>00075 
<a name="l00077"></a>00077     OBResidue(<span class="keywordtype">void</span>);
<a name="l00082"></a>00082     OBResidue(<span class="keyword">const</span> OBResidue &amp;);
<a name="l00084"></a>00084     <span class="keyword">virtual</span> ~OBResidue(<span class="keywordtype">void</span>);
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     OBResidue &amp;operator=(<span class="keyword">const</span> OBResidue &amp;);
<a name="l00087"></a>00087 
<a name="l00088"></a>00088     <span class="keywordtype">void</span>    AddAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom);
<a name="l00089"></a>00089     <span class="keywordtype">void</span>    InsertAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom);
<a name="l00090"></a>00090     <span class="keywordtype">void</span>    RemoveAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom);
<a name="l00091"></a>00091     <span class="keywordtype">void</span>    Clear(<span class="keywordtype">void</span>);
<a name="l00092"></a>00092 
<a name="l00093"></a>00093     <span class="keywordtype">void</span>    SetName(<span class="keyword">const</span> std::string &amp;resname);
<a name="l00094"></a>00094     <span class="keywordtype">void</span>    SetNum(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> resnum);
<a name="l00095"></a>00095     <span class="keywordtype">void</span>    SetChain(<span class="keywordtype">char</span> chain);
<a name="l00096"></a>00096     <span class="keywordtype">void</span>    SetChainNum(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> chainnum);
<a name="l00097"></a>00097     <span class="keywordtype">void</span>    SetIdx(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> idx);
<a name="l00098"></a>00098 
<a name="l00099"></a>00099     <span class="keywordtype">void</span>    SetAtomID(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <span class="keyword">const</span> std::string &amp;<span class="keywordtype">id</span>);
<a name="l00100"></a>00100     <span class="keywordtype">void</span>    SetHetAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <span class="keywordtype">bool</span> hetatm);
<a name="l00102"></a>00102     <span class="keywordtype">void</span>    SetSerialNum(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> sernum);
<a name="l00103"></a>00103 
<a name="l00104"></a>00104     std::string    GetName(<span class="keywordtype">void</span>)                <span class="keyword">const</span>;
<a name="l00105"></a>00105     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>   GetNum(<span class="keywordtype">void</span>)                 <span class="keyword">const</span>;
<a name="l00106"></a>00106     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>   GetNumAtoms()                <span class="keyword">const</span>;
<a name="l00107"></a>00107     <span class="keywordtype">char</span>           GetChain(<span class="keywordtype">void</span>)               <span class="keyword">const</span>;
<a name="l00108"></a>00108     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>   GetChainNum(<span class="keywordtype">void</span>)            <span class="keyword">const</span>;
<a name="l00109"></a>00109     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>   GetIdx(<span class="keywordtype">void</span>)                 <span class="keyword">const</span>;
<a name="l00110"></a>00110     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>   GetResKey(<span class="keywordtype">void</span>)              <span class="keyword">const</span>;
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     std::vector&lt;OBAtom*&gt; GetAtoms(<span class="keywordtype">void</span>)         <span class="keyword">const</span>;
<a name="l00113"></a>00113     std::vector&lt;OBBond*&gt; GetBonds(<span class="keywordtype">bool</span> = <span class="keyword">true</span>)  <span class="keyword">const</span>;
<a name="l00114"></a>00114 
<a name="l00115"></a>00115     std::string    GetAtomID(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)      <span class="keyword">const</span>;
<a name="l00117"></a>00117     <span class="keywordtype">unsigned</span>       GetSerialNum(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)   <span class="keyword">const</span>;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119     <span class="keywordtype">bool</span>           GetAminoAcidProperty(<span class="keywordtype">int</span>)      <span class="keyword">const</span>;
<a name="l00120"></a>00120     <span class="keywordtype">bool</span>           GetAtomProperty(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <span class="keywordtype">int</span>) <span class="keyword">const</span>;
<a name="l00121"></a>00121     <span class="keywordtype">bool</span>           GetResidueProperty(<span class="keywordtype">int</span>)        <span class="keyword">const</span>;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123     <span class="keywordtype">bool</span>           IsHetAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)      <span class="keyword">const</span>;
<a name="l00124"></a>00124     <span class="keywordtype">bool</span>           IsResidueType(<span class="keywordtype">int</span>)           <span class="keyword">const</span>;
<a name="l00125"></a>00125 
<a name="l00127"></a>00127     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *BeginAtom(std::vector&lt;OBAtom*&gt;::iterator &amp;i);
<a name="l00129"></a>00129     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *NextAtom(std::vector&lt;OBAtom*&gt;::iterator &amp;i);
<a name="l00130"></a>00130 
<a name="l00132"></a>00132 
<a name="l00133"></a>00133     <span class="keywordtype">bool</span>                              HasData(std::string &amp;);
<a name="l00134"></a>00134     <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00135"></a>00135     <span class="keywordtype">bool</span>                              HasData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00136"></a>00136     <span class="keywordtype">void</span>                              DeleteData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00137"></a>00137     <span class="keywordtype">void</span>                              DeleteData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*);
<a name="l00138"></a>00138     <span class="keywordtype">void</span>                              DeleteData(std::vector&lt;OBGenericData*&gt;&amp;);
<a name="l00139"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#db6b0ec89bfea783825b3b466e4dbc00">00139</a>     <span class="keywordtype">void</span>                              SetData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)
<a name="l00140"></a>00140       { _vdata.push_back(d); }
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#fd4740dfd6a433f49aff61f30a143e2b">00142</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                      DataSize()
<a name="l00143"></a>00143       { <span class="keywordflow">return</span>(_vdata.size()); }
<a name="l00144"></a>00144     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00145"></a>00145     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(std::string&amp;);
<a name="l00146"></a>00146     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00147"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#90a551ff0a0ed3fa58745dff0ecacdaa">00147</a>     std::vector&lt;OBGenericData*&gt;      &amp;GetData()
<a name="l00148"></a>00148       { <span class="keywordflow">return</span>(_vdata); }
<a name="l00149"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#a53a73875031660f8d63e963a248df9f">00149</a>     std::vector&lt;OBGenericData*&gt;::iterator  BeginData()
<a name="l00150"></a>00150       { <span class="keywordflow">return</span>(_vdata.begin()); }
<a name="l00151"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#23b691092f712f20cf57065f54d2357a">00151</a>     std::vector&lt;OBGenericData*&gt;::iterator  EndData()
<a name="l00152"></a>00152       { <span class="keywordflow">return</span>(_vdata.end()); }
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 <span class="keyword">protected</span>: <span class="comment">// members</span>
<a name="l00156"></a>00156 
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#1219a011a5e0ec59c67a5a873d81986c">00157</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                _idx;   
<a name="l00158"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#bdc35302d8b2ddbbd0cb48de079527eb">00158</a>     <span class="keywordtype">char</span>                        _chain; 
<a name="l00159"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#d719c79a18fbf14911233bb6e6119370">00159</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                _aakey; 
<a name="l00160"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#a09358b69ef09f768b7316011e53af22">00160</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                _reskey;
<a name="l00161"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#35ca67994cee9230d191ee90d1068072">00161</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                _resnum;
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#e5b2a83968919b021e1189020fe3492a">00162</a>     std::string                 _resname;
<a name="l00163"></a>00163 
<a name="l00164"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#f48bc2090137ce8be5ab8b86125734b7">00164</a>     std::vector&lt;bool&gt;           _hetatm;
<a name="l00165"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#520b293262a31a65c78c69b6177f871c">00165</a>     std::vector&lt;std::string&gt;    _atomid;
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#bfa0f02c4ad4146e7250fb38a89b9387">00166</a>     std::vector&lt;OBAtom*&gt;        _atoms; 
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#51fea0daea9bfeed01133d1a7376523a">00167</a>     std::vector&lt;unsigned int&gt;   _sernum;
<a name="l00168"></a><a class="code" href="classOpenBabel_1_1OBResidue.shtml#f7811cf8aadbf3b3477c560b0ef2f797">00168</a>     std::vector&lt;OBGenericData*&gt; _vdata; 
<a name="l00169"></a>00169 }; <span class="comment">// OBResidue</span>
<a name="l00170"></a>00170 
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="comment">//ATOM Property Macros (flags)</span>
<a name="l00174"></a><a class="code" href="mol_8h.shtml#7049a943ce03181c7004fe9ecd798f40">00174</a> <span class="comment"></span><span class="preprocessor">#define OB_4RING_ATOM     (1&lt;&lt;1)</span>
<a name="l00176"></a><a class="code" href="mol_8h.shtml#54cf51e4021ce031b9a9bd20e053cead">00176</a> <span class="preprocessor">#define OB_3RING_ATOM     (1&lt;&lt;2)</span>
<a name="l00178"></a><a class="code" href="mol_8h.shtml#c08352e8abee93573a66f692f0827bd3">00178</a> <span class="preprocessor">#define OB_AROMATIC_ATOM  (1&lt;&lt;3)</span>
<a name="l00180"></a><a class="code" href="mol_8h.shtml#5f2ffc18f5cc3589dd1978252169f11e">00180</a> <span class="preprocessor">#define OB_RING_ATOM      (1&lt;&lt;4)</span>
<a name="l00182"></a><a class="code" href="mol_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43">00182</a> <span class="preprocessor">#define OB_CSTEREO_ATOM   (1&lt;&lt;5)</span>
<a name="l00184"></a><a class="code" href="mol_8h.shtml#7a0c4ca8c736e743fda131e25de50a26">00184</a> <span class="preprocessor">#define OB_ACSTEREO_ATOM  (1&lt;&lt;6)</span>
<a name="l00186"></a><a class="code" href="mol_8h.shtml#cb984613554c9199387e3039b6cf4e8c">00186</a> <span class="preprocessor">#define OB_DONOR_ATOM     (1&lt;&lt;7)</span>
<a name="l00188"></a><a class="code" href="mol_8h.shtml#86c329377a02eb7b0d5e015a6d0b1099">00188</a> <span class="preprocessor">#define OB_ACCEPTOR_ATOM  (1&lt;&lt;8)</span>
<a name="l00190"></a><a class="code" href="mol_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d">00190</a> <span class="preprocessor">#define OB_CHIRAL_ATOM    (1&lt;&lt;9)</span>
<a name="l00192"></a><a class="code" href="mol_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5">00192</a> <span class="preprocessor">#define OB_POS_CHIRAL_ATOM (1&lt;&lt;10)</span>
<a name="l00194"></a><a class="code" href="mol_8h.shtml#28504d751913b6affc112690765c1ea6">00194</a> <span class="preprocessor">#define OB_NEG_CHIRAL_ATOM (1&lt;&lt;11)</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span><span class="comment">// 12-16 currently unused</span>
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="comment">// Class OBAtom</span>
<a name="l00198"></a>00198 <span class="comment">// class introduction in atom.cpp</span>
<a name="l00199"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml">00199</a> <span class="keyword">class </span>OBAPI OBAtom : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a>
<a name="l00200"></a>00200 {
<a name="l00201"></a>00201 <span class="keyword">protected</span>:
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#28c35937d84aeb0e06ba2705d6cc65fd">00202</a>     <span class="keywordtype">char</span>                          _ele;         
<a name="l00203"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b3e028e65ae7c0dac55997f2cb7281ce">00203</a>     <span class="keywordtype">char</span>                          _impval;      
<a name="l00204"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e34265581460024d37fb0ff25d97f110">00204</a>     <span class="keywordtype">char</span>                          _type[6];     
<a name="l00205"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6e636025c5db07bf67523b31a55f6327">00205</a>     <span class="keywordtype">short</span>                         _fcharge;     
<a name="l00206"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d60f474b9381f875e4b6e3f5df457c9a">00206</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _isotope;     
<a name="l00207"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ec3b74d938a5e47bc6a6627f64d86e27">00207</a>     <span class="keywordtype">short</span>                           _spinmultiplicity;
<a name="l00208"></a>00208 
<a name="l00209"></a>00209     <span class="comment">//unsigned short int          _idx;         //!&lt; index in parent (inherited)</span>
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#784425337c2c8e7c7116c6b1998162e6">00210</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>            _cidx;            
<a name="l00211"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5d400386667c899017669303bdec09cd">00211</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _hyb;         
<a name="l00212"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5cc9f88f4cc5fda10e7932cd59a87f16">00212</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _flags;       
<a name="l00213"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e4b9cf0b2f94fc6befff220367fccd0a">00213</a>     <span class="keywordtype">double</span>                         _pcharge;    
<a name="l00214"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#91a32f6c060e12e4d188974db5b111d3">00214</a>     <span class="keywordtype">double</span>                       **_c;          
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e8dcade9402fad862f0391488350ea3e">00215</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>                       _v;           
<a name="l00216"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#c26545dc3d68694f0a7b6f4a776f7a17">00216</a>     OBResidue                    *_residue;     
<a name="l00217"></a>00217     <span class="comment">//OBMol                      *_parent;      //!&lt; parent molecule (inherited)</span>
<a name="l00218"></a>00218     <span class="comment">//vector&lt;OBBond*&gt;             _bond;        //!&lt; connections (inherited)</span>
<a name="l00219"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f7811cf8aadbf3b3477c560b0ef2f797">00219</a>     std::vector&lt;OBGenericData*&gt;   _vdata;       
<a name="l00220"></a>00220 
<a name="l00221"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#cc0aec564b42e181709de3699656f5b1">00221</a>     <span class="keywordtype">int</span>  GetFlag()<span class="keyword"> const    </span>{  <span class="keywordflow">return</span>(_flags);  }
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#dcdab8f96dc4fdc2940749e527087245">00222</a>     <span class="keywordtype">void</span> SetFlag(<span class="keywordtype">int</span> flag)  { _flags |= flag;   }
<a name="l00223"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3a1dc0419a66d2e7288214342de43b7a">00223</a>     <span class="keywordtype">bool</span> HasFlag(<span class="keywordtype">int</span> flag)  {  <span class="keywordflow">return</span>((_flags &amp; flag) ? <span class="keyword">true</span> : <span class="keyword">false</span>); }
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 <span class="keyword">public</span>:
<a name="l00226"></a>00226 
<a name="l00228"></a>00228     OBAtom();
<a name="l00230"></a>00230     <span class="keyword">virtual</span> ~OBAtom();
<a name="l00232"></a>00232     OBAtom &amp;operator = (OBAtom &amp;);
<a name="l00234"></a>00234     <span class="keywordtype">void</span> Clear();
<a name="l00235"></a>00235 
<a name="l00237"></a>00237 
<a name="l00238"></a>00238 
<a name="l00239"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b994a975e39f5c62288f4f972b6f90c9">00239</a>     <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)    { _idx = idx; _cidx = (idx-1)*3; }
<a name="l00241"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9ca5228f1b568f7076cd930ad0902a83">00241</a>     <span class="keywordtype">void</span> SetHyb(<span class="keywordtype">int</span> hyb)    { _hyb = hyb; }
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#573a9f96a971854938ab2db5eb4d4851">00243</a>     <span class="keywordtype">void</span> SetAtomicNum(<span class="keywordtype">int</span> atomicnum)    { _ele = (char)atomicnum; }
<a name="l00245"></a>00245     <span class="keywordtype">void</span> SetIsotope(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> iso);
<a name="l00246"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#4ebf98749415a00a56fdbc77f87fdc87">00246</a>     <span class="keywordtype">void</span> SetImplicitValence(<span class="keywordtype">int</span> val)    { _impval = (char)val; }
<a name="l00247"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e048690c14e9258cc653231a56d5dfda">00247</a>     <span class="keywordtype">void</span> IncrementImplicitValence()     { _impval++; }
<a name="l00248"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#7acb91a903a31d698dc25d296b988f7f">00248</a>     <span class="keywordtype">void</span> DecrementImplicitValence()     { _impval--; }
<a name="l00249"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1d084182d025e6fa000b928807d7689">00249</a>     <span class="keywordtype">void</span> SetFormalCharge(<span class="keywordtype">int</span> fcharge)   { _fcharge = fcharge; }
<a name="l00250"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#299285ee1effd21803b3c042a376e149">00250</a>     <span class="keywordtype">void</span> SetSpinMultiplicity(<span class="keywordtype">short</span> spin){ _spinmultiplicity = spin; }
<a name="l00251"></a>00251     <span class="keywordtype">void</span> SetType(<span class="keywordtype">char</span> *type);
<a name="l00252"></a>00252     <span class="keywordtype">void</span> SetType(std::string &amp;type);
<a name="l00253"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#963851351ab3c084233a82d367f15607">00253</a>     <span class="keywordtype">void</span> SetPartialCharge(<span class="keywordtype">double</span> pcharge){ _pcharge = pcharge; }
<a name="l00254"></a>00254     <span class="keywordtype">void</span> SetVector(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v);
<a name="l00255"></a>00255     <span class="keywordtype">void</span> SetVector(<span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#6c4b361d72eb3767ba424ac9a6ecf52b">x</a>,<span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#0ed6a908288e0cd87f79c1b5ab56d07c">y</a>,<span class="keyword">const</span> <span class="keywordtype">double</span> <a class="code" href="matrix3x3_8cpp.shtml#fb573e69f3b198fe9ca91079c4a402a9">z</a>);
<a name="l00257"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#eff361260a8a4e9ea703d5d38f5fc671">00257</a>     <span class="keywordtype">void</span> SetCoordPtr(<span class="keywordtype">double</span> **c)        { _c = c; _cidx = (GetIdx()-1)*3; }
<a name="l00259"></a>00259     <span class="keywordtype">void</span> SetVector();
<a name="l00260"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#de786f15ee67979fbb9c48970b22e184">00260</a>     <span class="keywordtype">void</span> SetResidue(OBResidue *res)     { _residue=res; }
<a name="l00261"></a>00261     <span class="comment">//  void SetParent(OBMol *ptr)      { _parent=ptr; } // inherited</span>
<a name="l00262"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3d29498c15007d9b6729e26784f23a5b">00262</a>     <span class="keywordtype">void</span> SetAromatic()                  { SetFlag(<a class="code" href="mol_8h.shtml#c08352e8abee93573a66f692f0827bd3">OB_AROMATIC_ATOM</a>); }
<a name="l00263"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#2fcf3bf429f36281a43c879e40e75f34">00263</a>     <span class="keywordtype">void</span> UnsetAromatic()                { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#c08352e8abee93573a66f692f0827bd3">OB_AROMATIC_ATOM</a>)); }
<a name="l00265"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#df069c94123595712cb7fa847b87e449">00265</a>     <span class="keywordtype">void</span> SetClockwiseStereo()           { SetFlag(<a class="code" href="mol_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43">OB_CSTEREO_ATOM</a>|<a class="code" href="mol_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d">OB_CHIRAL_ATOM</a>); }
<a name="l00267"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f328f0aa99465103074b1d336c393919">00267</a>     <span class="keywordtype">void</span> SetAntiClockwiseStereo()       { SetFlag(<a class="code" href="mol_8h.shtml#7a0c4ca8c736e743fda131e25de50a26">OB_ACSTEREO_ATOM</a>|<a class="code" href="mol_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d">OB_CHIRAL_ATOM</a>); }
<a name="l00269"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6ddbbbc5f8e185c43e634a0425311275">00269</a>     <span class="keywordtype">void</span> SetPositiveStereo() { SetFlag(<a class="code" href="mol_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5">OB_POS_CHIRAL_ATOM</a>|<a class="code" href="mol_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d">OB_CHIRAL_ATOM</a>); }
<a name="l00271"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ea322d9d450ee48fb2e89a4f7c34deda">00271</a>     <span class="keywordtype">void</span> SetNegativeStereo() { SetFlag(<a class="code" href="mol_8h.shtml#28504d751913b6affc112690765c1ea6">OB_NEG_CHIRAL_ATOM</a>|<a class="code" href="mol_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d">OB_CHIRAL_ATOM</a>); }
<a name="l00273"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#fdf42f73fe8a0cec0db3c3e544830fcc">00273</a>     <span class="keywordtype">void</span> UnsetStereo()
<a name="l00274"></a>00274     {
<a name="l00275"></a>00275         _flags &amp;= ~(<a class="code" href="mol_8h.shtml#7a0c4ca8c736e743fda131e25de50a26">OB_ACSTEREO_ATOM</a>);
<a name="l00276"></a>00276         _flags &amp;= ~(<a class="code" href="mol_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43">OB_CSTEREO_ATOM</a>);
<a name="l00277"></a>00277         _flags &amp;= ~(<a class="code" href="mol_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5">OB_POS_CHIRAL_ATOM</a>);
<a name="l00278"></a>00278         _flags &amp;= ~(<a class="code" href="mol_8h.shtml#28504d751913b6affc112690765c1ea6">OB_NEG_CHIRAL_ATOM</a>);
<a name="l00279"></a>00279         _flags &amp;= ~(<a class="code" href="mol_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d">OB_CHIRAL_ATOM</a>);
<a name="l00280"></a>00280     }
<a name="l00282"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e6a016e7f67cf564e5f80254c425f65c">00282</a>     <span class="keywordtype">void</span> SetInRing()         { SetFlag(<a class="code" href="mol_8h.shtml#5f2ffc18f5cc3589dd1978252169f11e">OB_RING_ATOM</a>); }
<a name="l00284"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d4e5a4c67101743f644b047b632d058b">00284</a>     <span class="keywordtype">void</span> SetChiral()         { SetFlag(<a class="code" href="mol_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d">OB_CHIRAL_ATOM</a>); }
<a name="l00286"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3fa3634d92a924e5af69208768e839a5">00286</a>     <span class="keywordtype">void</span> ClearCoordPtr()     { _c = NULL; _cidx=0; }
<a name="l00288"></a>00288 
<a name="l00290"></a>00290 
<a name="l00291"></a>00291     <span class="comment">//int        GetStereo()        const { return((int)_stereo);}</span>
<a name="l00292"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#34d5bb9535dadccfdaaae8b98dab2078">00292</a>     <span class="keywordtype">int</span>          GetFormalCharge()<span class="keyword">  const </span>{ <span class="keywordflow">return</span>(_fcharge);    }
<a name="l00293"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#90250b249ffa0fcb4daa83bde1ff4614">00293</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetAtomicNum()<span class="keyword">     const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_ele); }
<a name="l00294"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d61d9e7b9ecdf9ac58a7f0a65a50b066">00294</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> GetIsotope()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_isotope);    }
<a name="l00295"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#546f896e98331fe14e5746c53a4a543f">00295</a>     <span class="keywordtype">int</span>          GetSpinMultiplicity()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_spinmultiplicity); }
<a name="l00297"></a>00297     <span class="keywordtype">double</span>       GetAtomicMass()    <span class="keyword">const</span>;
<a name="l00299"></a>00299     <span class="keywordtype">double</span>       GetExactMass()     <span class="keyword">const</span>;
<a name="l00300"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#44b77545e83209582e42f375c8f40474">00300</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetIdx()<span class="keyword">           const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_idx);  }
<a name="l00301"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#534869887e7780bf59a97b9c7e38cac9">00301</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetCoordinateIdx()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_cidx); }
<a name="l00303"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#036023769d4fee171548943838fa0df1">00303</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetCIdx()<span class="keyword">          const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_cidx); }
<a name="l00305"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#7bb9aaaed179e592414edfa0331788f6">00305</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetValence()<span class="keyword">       const</span>
<a name="l00306"></a>00306 <span class="keyword">    </span>{
<a name="l00307"></a>00307         <span class="keywordflow">return</span>((_vbond.empty()) ? 0 : _vbond.size());
<a name="l00308"></a>00308     }
<a name="l00310"></a>00310     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHyb()             <span class="keyword">const</span>;
<a name="l00312"></a>00312     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetImplicitValence() <span class="keyword">const</span>;
<a name="l00314"></a>00314     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHvyValence()      <span class="keyword">const</span>;
<a name="l00316"></a>00316     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHeteroValence()   <span class="keyword">const</span>;
<a name="l00317"></a>00317     <span class="keywordtype">char</span>        *GetType();
<a name="l00318"></a>00318 
<a name="l00320"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9fa6ce00a437dcb7c438cdf669a35fe6">00320</a>     <span class="keywordtype">double</span>      GetX()    {        <span class="keywordflow">return</span>(<a class="code" href="matrix3x3_8cpp.shtml#6c4b361d72eb3767ba424ac9a6ecf52b">x</a>());    }
<a name="l00322"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6f947fc048c388c2ae724147a2e74ea2">00322</a>     <span class="keywordtype">double</span>      GetY()    {        <span class="keywordflow">return</span>(<a class="code" href="matrix3x3_8cpp.shtml#0ed6a908288e0cd87f79c1b5ab56d07c">y</a>());    }
<a name="l00324"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#2917f1fdbf033388ba0f3b37f5a23303">00324</a>     <span class="keywordtype">double</span>      GetZ()    {        <span class="keywordflow">return</span>(<a class="code" href="matrix3x3_8cpp.shtml#fb573e69f3b198fe9ca91079c4a402a9">z</a>());    }
<a name="l00325"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1d181ea8ec179ff8046ef6cf2a8aa232">00325</a>     <span class="keywordtype">double</span>      <a class="code" href="matrix3x3_8cpp.shtml#6c4b361d72eb3767ba424ac9a6ecf52b">x</a>()
<a name="l00326"></a>00326     {
<a name="l00327"></a>00327         <span class="keywordflow">if</span> (_c)
<a name="l00328"></a>00328             <span class="keywordflow">return</span>((*_c)[_cidx]);
<a name="l00329"></a>00329         <span class="keywordflow">else</span>
<a name="l00330"></a>00330             <span class="keywordflow">return</span> _v.x();
<a name="l00331"></a>00331     }
<a name="l00332"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#52c7eae49e9d0d75c6cc38f61ed526f2">00332</a>     <span class="keywordtype">double</span>      <a class="code" href="matrix3x3_8cpp.shtml#0ed6a908288e0cd87f79c1b5ab56d07c">y</a>()
<a name="l00333"></a>00333     {
<a name="l00334"></a>00334         <span class="keywordflow">if</span> (_c)
<a name="l00335"></a>00335             <span class="keywordflow">return</span>((*_c)[_cidx+1]);
<a name="l00336"></a>00336         <span class="keywordflow">else</span>
<a name="l00337"></a>00337             <span class="keywordflow">return</span> _v.y();
<a name="l00338"></a>00338     }
<a name="l00339"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#2d651524c446d89c995be7682931a249">00339</a>     <span class="keywordtype">double</span>      <a class="code" href="matrix3x3_8cpp.shtml#fb573e69f3b198fe9ca91079c4a402a9">z</a>()
<a name="l00340"></a>00340     {
<a name="l00341"></a>00341         <span class="keywordflow">if</span> (_c)
<a name="l00342"></a>00342             <span class="keywordflow">return</span>((*_c)[_cidx+2]);
<a name="l00343"></a>00343         <span class="keywordflow">else</span>
<a name="l00344"></a>00344             <span class="keywordflow">return</span> _v.z();
<a name="l00345"></a>00345     }
<a name="l00347"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f9dd6c6924f23479933e0b8779a4bec2">00347</a>     <span class="keywordtype">double</span>     *GetCoordinate()
<a name="l00348"></a>00348     {
<a name="l00349"></a>00349       <span class="keywordflow">if</span> (_c)
<a name="l00350"></a>00350         <span class="keywordflow">return</span>(&amp;(*_c)[_cidx]);
<a name="l00351"></a>00351       <span class="keywordflow">else</span>
<a name="l00352"></a>00352         <span class="keywordflow">return</span> NULL;
<a name="l00353"></a>00353     }
<a name="l00355"></a>00355     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>   &amp;GetVector();
<a name="l00357"></a>00357     <span class="keywordtype">double</span>     GetPartialCharge();
<a name="l00358"></a>00358     OBResidue *GetResidue();
<a name="l00359"></a>00359     <span class="comment">//OBMol   *GetParent()        {return((OBMol*)_parent);}</span>
<a name="l00361"></a>00361 <span class="comment"></span>    <span class="keywordtype">bool</span>       GetNewBondVector(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v,<span class="keywordtype">double</span> length);
<a name="l00362"></a>00362     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>    *GetBond(OBAtom *);
<a name="l00363"></a>00363     OBAtom    *GetNextAtom();
<a name="l00365"></a>00365 
<a name="l00367"></a>00367 
<a name="l00368"></a>00368 
<a name="l00369"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0013eaafafe9c56f296b5df105c9c5db">00369</a>     std::vector&lt;OBEdgeBase*&gt;::iterator BeginBonds()
<a name="l00370"></a>00370       { <span class="keywordflow">return</span>(_vbond.begin()); }
<a name="l00372"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#edc59d43a9b1456aaf55b8286aff33ef">00372</a>     std::vector&lt;OBEdgeBase*&gt;::iterator EndBonds()
<a name="l00373"></a>00373       { <span class="keywordflow">return</span>(_vbond.end());   }
<a name="l00375"></a>00375     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *BeginBond(std::vector&lt;OBEdgeBase*&gt;::iterator &amp;i);
<a name="l00377"></a>00377     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *NextBond(std::vector&lt;OBEdgeBase*&gt;::iterator &amp;i);
<a name="l00379"></a>00379     OBAtom *BeginNbrAtom(std::vector&lt;OBEdgeBase*&gt;::iterator &amp;);
<a name="l00381"></a>00381     OBAtom *NextNbrAtom(std::vector&lt;OBEdgeBase*&gt;::iterator &amp;);
<a name="l00383"></a>00383 
<a name="l00385"></a>00385     <span class="keywordtype">double</span> GetDistance(<span class="keywordtype">int</span> index);
<a name="l00387"></a>00387     <span class="keywordtype">double</span> GetDistance(OBAtom*);
<a name="l00389"></a>00389     <span class="keywordtype">double</span> GetAngle(<span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c);
<a name="l00391"></a>00391     <span class="keywordtype">double</span> GetAngle(OBAtom *b, OBAtom *c);
<a name="l00392"></a>00392 
<a name="l00394"></a>00394 
<a name="l00395"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#616b5aac27eec22be5be998bc15d6349">00395</a>     <span class="keywordtype">void</span> NewResidue()
<a name="l00396"></a>00396     {
<a name="l00397"></a>00397         <span class="keywordflow">if</span> (!_residue)
<a name="l00398"></a>00398             _residue = <span class="keyword">new</span> OBResidue;
<a name="l00399"></a>00399     }
<a name="l00400"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#85fa173a3c3f488fc691a11eaad81439">00400</a>     <span class="keywordtype">void</span> DeleteResidue()
<a name="l00401"></a>00401     {
<a name="l00402"></a>00402         <span class="keywordflow">if</span> (_residue)
<a name="l00403"></a>00403             <span class="keyword">delete</span> _residue;
<a name="l00404"></a>00404     }
<a name="l00405"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5abeab08afbd305a51b9a9b5bd8fe356">00405</a>     <span class="keywordtype">void</span> AddBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)
<a name="l00406"></a>00406     {
<a name="l00407"></a>00407         _vbond.push_back((<a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a>*)bond);
<a name="l00408"></a>00408     }
<a name="l00409"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#05af92c3b1b8ead965d09ce3eeb766df">00409</a>     <span class="keywordtype">void</span> InsertBond(std::vector&lt;OBEdgeBase*&gt;::iterator &amp;i, <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)
<a name="l00410"></a>00410     {
<a name="l00411"></a>00411         _vbond.insert(i, (<a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a>*)bond);
<a name="l00412"></a>00412     }
<a name="l00413"></a>00413     <span class="keywordtype">bool</span> DeleteBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*);
<a name="l00414"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#03fe71c8266435b7a76682e5c1472894">00414</a>         <span class="keywordtype">void</span> ClearBond() {_vbond.clear();}
<a name="l00416"></a>00416 
<a name="l00418"></a>00418 
<a name="l00419"></a>00419 
<a name="l00420"></a>00420     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  CountFreeOxygens()      <span class="keyword">const</span>;
<a name="l00422"></a>00422     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ImplicitHydrogenCount() <span class="keyword">const</span>;
<a name="l00424"></a>00424     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ExplicitHydrogenCount() <span class="keyword">const</span>;
<a name="l00426"></a>00426     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  MemberOfRingCount()     <span class="keyword">const</span>;
<a name="l00428"></a>00428     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  MemberOfRingSize()      <span class="keyword">const</span>;
<a name="l00430"></a>00430     <span class="keywordtype">double</span>        SmallestBondAngle();
<a name="l00432"></a>00432     <span class="keywordtype">double</span>        AverageBondAngle();
<a name="l00434"></a>00434     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  BOSum()                 <span class="keyword">const</span>;
<a name="l00436"></a>00436     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  KBOSum()                <span class="keyword">const</span>;
<a name="l00438"></a>00438 
<a name="l00440"></a>00440 
<a name="l00441"></a>00441 
<a name="l00442"></a>00442     <span class="keywordtype">bool</span> HtoMethyl();
<a name="l00444"></a>00444     <span class="keywordtype">bool</span> SetHybAndGeom(<span class="keywordtype">int</span>);
<a name="l00446"></a>00446 
<a name="l00448"></a>00448 
<a name="l00449"></a>00449 
<a name="l00450"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e3177d9e8b583d3cda02b90c141894c5">00450</a>     <span class="keywordtype">bool</span> HasResidue()    { <span class="keywordflow">return</span>(_residue != NULL);    }
<a name="l00451"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b633bc0f8f40dfcedf42940ab8a5316c">00451</a>     <span class="keywordtype">bool</span> IsHydrogen()    { <span class="keywordflow">return</span>(GetAtomicNum() == 1); }
<a name="l00452"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1f0a167775136e911cd349cdd8923b24">00452</a>     <span class="keywordtype">bool</span> IsCarbon()      { <span class="keywordflow">return</span>(GetAtomicNum() == 6); }
<a name="l00453"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#acb82bc548922e4f1276a255f212f143">00453</a>     <span class="keywordtype">bool</span> IsNitrogen()    { <span class="keywordflow">return</span>(GetAtomicNum() == 7); }
<a name="l00454"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f7e8030ce19d79c9ad0b3cfbf116dc59">00454</a>     <span class="keywordtype">bool</span> IsOxygen()      { <span class="keywordflow">return</span>(GetAtomicNum() == 8); }
<a name="l00455"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a71152591d5cc51fc2f3701ff7de7dfd">00455</a>     <span class="keywordtype">bool</span> IsSulfur()      { <span class="keywordflow">return</span>(GetAtomicNum() == 16);}
<a name="l00456"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b8c7f052f9380b98eef3b83da640eba3">00456</a>     <span class="keywordtype">bool</span> IsPhosphorus()  { <span class="keywordflow">return</span>(GetAtomicNum() == 15);}
<a name="l00457"></a>00457     <span class="keywordtype">bool</span> IsAromatic()      <span class="keyword">const</span>;
<a name="l00458"></a>00458     <span class="keywordtype">bool</span> IsInRing()        <span class="keyword">const</span>;
<a name="l00459"></a>00459     <span class="keywordtype">bool</span> IsInRingSize(<span class="keywordtype">int</span>) <span class="keyword">const</span>;
<a name="l00461"></a>00461     <span class="keywordtype">bool</span> IsHeteroatom();
<a name="l00463"></a>00463     <span class="keywordtype">bool</span> IsNotCorH();
<a name="l00465"></a>00465     <span class="keywordtype">bool</span> IsConnected(OBAtom*);
<a name="l00467"></a>00467     <span class="keywordtype">bool</span> IsOneThree(OBAtom*);
<a name="l00469"></a>00469     <span class="keywordtype">bool</span> IsOneFour(OBAtom*);
<a name="l00471"></a>00471     <span class="keywordtype">bool</span> IsCarboxylOxygen();
<a name="l00473"></a>00473     <span class="keywordtype">bool</span> IsPhosphateOxygen();
<a name="l00475"></a>00475     <span class="keywordtype">bool</span> IsSulfateOxygen();
<a name="l00477"></a>00477     <span class="keywordtype">bool</span> IsNitroOxygen();
<a name="l00478"></a>00478     <span class="keywordtype">bool</span> IsAmideNitrogen();
<a name="l00479"></a>00479     <span class="keywordtype">bool</span> IsPolarHydrogen();
<a name="l00480"></a>00480     <span class="keywordtype">bool</span> IsNonPolarHydrogen();
<a name="l00481"></a>00481     <span class="keywordtype">bool</span> IsAromaticNOxide();
<a name="l00483"></a>00483     <span class="keywordtype">bool</span> IsChiral();
<a name="l00484"></a>00484     <span class="keywordtype">bool</span> IsAxial();
<a name="l00486"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#4d1f38bbe03483629778078dcc4e75a0">00486</a>     <span class="keywordtype">bool</span> IsClockwise()         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43">OB_CSTEREO_ATOM</a>));  }
<a name="l00488"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f3abb70d4f818b9c3e416928afa2e844">00488</a>     <span class="keywordtype">bool</span> IsAntiClockwise()     { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#7a0c4ca8c736e743fda131e25de50a26">OB_ACSTEREO_ATOM</a>)); }
<a name="l00490"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9880a080dd0bce244291bde514b67d20">00490</a>     <span class="keywordtype">bool</span> IsPositiveStereo() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5">OB_POS_CHIRAL_ATOM</a>)); }
<a name="l00492"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#61e5344c34c172e9b889e59255aff6de">00492</a>     <span class="keywordtype">bool</span> IsNegativeStereo() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#28504d751913b6affc112690765c1ea6">OB_NEG_CHIRAL_ATOM</a>)); }
<a name="l00494"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#8844e382c76003229ee5fdd0341aacee">00494</a>     <span class="keywordtype">bool</span> HasChiralitySpecified()
<a name="l00495"></a>00495       { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43">OB_CSTEREO_ATOM</a>|<a class="code" href="mol_8h.shtml#7a0c4ca8c736e743fda131e25de50a26">OB_ACSTEREO_ATOM</a>)); }
<a name="l00497"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#63911efd550113b275239d322670986d">00497</a>     <span class="keywordtype">bool</span> HasChiralVolume()
<a name="l00498"></a>00498       { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5">OB_POS_CHIRAL_ATOM</a>|<a class="code" href="mol_8h.shtml#28504d751913b6affc112690765c1ea6">OB_NEG_CHIRAL_ATOM</a>)); }
<a name="l00500"></a>00500     <span class="keywordtype">bool</span> IsHbondAcceptor();
<a name="l00502"></a>00502     <span class="keywordtype">bool</span> IsHbondDonor();
<a name="l00504"></a>00504     <span class="keywordtype">bool</span> IsHbondDonorH();
<a name="l00505"></a>00505     <span class="keywordtype">bool</span> HasAlphaBetaUnsat(<span class="keywordtype">bool</span> includePandS=<span class="keyword">true</span>);
<a name="l00506"></a>00506     <span class="keywordtype">bool</span> HasBondOfOrder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
<a name="l00507"></a>00507     <span class="keywordtype">int</span>  CountBondsOfOrder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
<a name="l00508"></a>00508     <span class="keywordtype">bool</span> HasNonSingleBond();
<a name="l00509"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f347b80d156587c2287754345606c78d">00509</a>     <span class="keywordtype">bool</span> HasSingleBond()    {        <span class="keywordflow">return</span>(HasBondOfOrder(1));    }
<a name="l00510"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0cb35a21cc08897bc7f9b01ae4561e50">00510</a>     <span class="keywordtype">bool</span> HasDoubleBond()    {        <span class="keywordflow">return</span>(HasBondOfOrder(2));    }
<a name="l00511"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#11bf8aa7f79e9b9bdef2602808bb794d">00511</a>     <span class="keywordtype">bool</span> HasAromaticBond()  {        <span class="keywordflow">return</span>(HasBondOfOrder(5));    }
<a name="l00513"></a>00513     <span class="keywordtype">bool</span> MatchesSMARTS(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00515"></a>00515 
<a name="l00517"></a>00517 
<a name="l00518"></a>00518     <span class="keywordtype">bool</span>                              HasData(std::string &amp;);
<a name="l00519"></a>00519     <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00520"></a>00520     <span class="keywordtype">bool</span>                              HasData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00521"></a>00521     <span class="keywordtype">void</span>                              DeleteData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00522"></a>00522     <span class="keywordtype">void</span>                              DeleteData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*);
<a name="l00523"></a>00523     <span class="keywordtype">void</span>                              DeleteData(std::vector&lt;OBGenericData*&gt;&amp;);
<a name="l00524"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#db6b0ec89bfea783825b3b466e4dbc00">00524</a>     <span class="keywordtype">void</span>                              SetData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)
<a name="l00525"></a>00525     {        _vdata.push_back(d);    }
<a name="l00527"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#fd4740dfd6a433f49aff61f30a143e2b">00527</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                      DataSize()
<a name="l00528"></a>00528     {        <span class="keywordflow">return</span>(_vdata.size());    }
<a name="l00529"></a>00529     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00530"></a>00530     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(std::string&amp;);
<a name="l00531"></a>00531     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00532"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#90a551ff0a0ed3fa58745dff0ecacdaa">00532</a>     std::vector&lt;OBGenericData*&gt;      &amp;GetData() { <span class="keywordflow">return</span>(_vdata); }
<a name="l00533"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a53a73875031660f8d63e963a248df9f">00533</a>     std::vector&lt;OBGenericData*&gt;::iterator  BeginData()
<a name="l00534"></a>00534     {        <span class="keywordflow">return</span>(_vdata.begin());    }
<a name="l00535"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#23b691092f712f20cf57065f54d2357a">00535</a>     std::vector&lt;OBGenericData*&gt;::iterator  EndData()
<a name="l00536"></a>00536     {        <span class="keywordflow">return</span>(_vdata.end());      }
<a name="l00538"></a>00538 }; <span class="comment">// class OBAtom</span>
<a name="l00539"></a>00539 
<a name="l00540"></a>00540 
<a name="l00541"></a>00541 <span class="comment">// Class OBBond</span>
<a name="l00542"></a>00542 
<a name="l00543"></a>00543 <span class="comment">//BOND Property Macros (flags)</span>
<a name="l00545"></a><a class="code" href="mol_8h.shtml#90183171d38e32f07e97bffb7836f9fd">00545</a> <span class="comment"></span><span class="preprocessor">#define OB_AROMATIC_BOND  (1&lt;&lt;1)</span>
<a name="l00547"></a><a class="code" href="mol_8h.shtml#71faadca5c5e100b081f5a563c22e9ee">00547</a> <span class="preprocessor">#define OB_WEDGE_BOND     (1&lt;&lt;2)</span>
<a name="l00549"></a><a class="code" href="mol_8h.shtml#14b10c08a25058d1d4a98f8573195119">00549</a> <span class="preprocessor">#define OB_HASH_BOND      (1&lt;&lt;3)</span>
<a name="l00551"></a><a class="code" href="mol_8h.shtml#2f74970f7126e2bc1e9a4e1d8ed1af26">00551</a> <span class="preprocessor">#define OB_RING_BOND      (1&lt;&lt;4)</span>
<a name="l00553"></a><a class="code" href="mol_8h.shtml#4acf405087f46d03ebc4581cbce02f3b">00553</a> <span class="preprocessor">#define OB_TORUP_BOND     (1&lt;&lt;5)</span>
<a name="l00555"></a><a class="code" href="mol_8h.shtml#7c5124279ed6a19b93840ab3038ef2c0">00555</a> <span class="preprocessor">#define OB_TORDOWN_BOND   (1&lt;&lt;6)</span>
<a name="l00557"></a><a class="code" href="mol_8h.shtml#2cbf156fa54b94fb630c4915ab06cbb1">00557</a> <span class="preprocessor">#define OB_KSINGLE_BOND   (1&lt;&lt;7)</span>
<a name="l00559"></a><a class="code" href="mol_8h.shtml#f2291cb768c88e059cb8ee24d3f66f64">00559</a> <span class="preprocessor">#define OB_KDOUBLE_BOND   (1&lt;&lt;8)</span>
<a name="l00561"></a><a class="code" href="mol_8h.shtml#e702c1e19159f86ccd298f273ac94cd6">00561</a> <span class="preprocessor">#define OB_KTRIPLE_BOND   (1&lt;&lt;9)</span>
<a name="l00562"></a><a class="code" href="mol_8h.shtml#19b6306ab83f788b1fb60f8816b07e9c">00562</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_CLOSURE_BOND   (1&lt;&lt;10)</span>
<a name="l00563"></a>00563 <span class="preprocessor"></span><span class="comment">// 11-16 currently unused</span>
<a name="l00564"></a>00564 
<a name="l00565"></a>00565 <span class="comment">// class introduction in bond.cpp</span>
<a name="l00566"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml">00566</a> <span class="keyword">class </span>OBAPI OBBond : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a>
<a name="l00567"></a>00567 {
<a name="l00568"></a>00568 <span class="keyword">protected</span>:
<a name="l00569"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#3db9d8d4a032ad98c3cc9139bff39a49">00569</a>     <span class="keywordtype">char</span>                          _order; 
<a name="l00570"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ec57dcfb24a8b5496b6319fa1172fa5e">00570</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            _flags; 
<a name="l00571"></a>00571     <span class="comment">//OBAtom                     *_bgn;   //!&lt; Not needed, inherited from OBEdgeBase</span>
<a name="l00572"></a>00572     <span class="comment">//OBAtom                     *_end;   //!&lt; Not needed, inherited from OBEdgeBase</span>
<a name="l00573"></a>00573     <span class="comment">//OBMol                      *_parent;//!&lt; Not needed, inherited from OBEdgeBase</span>
<a name="l00574"></a>00574     <span class="comment">//unsigned short int          _idx;   //!&lt; Not needed, inherited from OBEdgeBase</span>
<a name="l00575"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#f7811cf8aadbf3b3477c560b0ef2f797">00575</a>     std::vector&lt;OBGenericData*&gt;   _vdata; 
<a name="l00576"></a>00576 
<a name="l00577"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#3a1dc0419a66d2e7288214342de43b7a">00577</a>     <span class="keywordtype">bool</span> HasFlag(<span class="keywordtype">int</span> flag)    { <span class="keywordflow">return</span>((_flags &amp; flag) != 0); }
<a name="l00578"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#dcdab8f96dc4fdc2940749e527087245">00578</a>     <span class="keywordtype">void</span> SetFlag(<span class="keywordtype">int</span> flag)    { _flags |= flag;               }
<a name="l00579"></a>00579 
<a name="l00580"></a>00580 <span class="keyword">public</span>:
<a name="l00582"></a>00582     OBBond();
<a name="l00584"></a>00584     <span class="keyword">virtual</span> ~OBBond();
<a name="l00585"></a>00585 
<a name="l00587"></a>00587 
<a name="l00588"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#b994a975e39f5c62288f4f972b6f90c9">00588</a>     <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)
<a name="l00589"></a>00589     {
<a name="l00590"></a>00590         _idx = idx;
<a name="l00591"></a>00591     }
<a name="l00592"></a>00592     <span class="keywordtype">void</span> SetBO(<span class="keywordtype">int</span> order);
<a name="l00593"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#3c443bcf96eac155aa058b69cc59aa4e">00593</a>     <span class="keywordtype">void</span> SetBegin(OBAtom *begin)
<a name="l00594"></a>00594     {
<a name="l00595"></a>00595         _bgn = begin;
<a name="l00596"></a>00596     }
<a name="l00597"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#9bcf1c90715c368ce2896acae75235c4">00597</a>     <span class="keywordtype">void</span> SetEnd(OBAtom *end)
<a name="l00598"></a>00598     {
<a name="l00599"></a>00599         _end = end;
<a name="l00600"></a>00600     }
<a name="l00601"></a>00601     <span class="comment">// void SetParent(OBMol *ptr)               {_parent=ptr;} // (inherited)</span>
<a name="l00602"></a>00602     <span class="keywordtype">void</span> SetLength(OBAtom*,<span class="keywordtype">double</span>);
<a name="l00603"></a>00603     <span class="keywordtype">void</span> Set(<span class="keywordtype">int</span>,OBAtom*,OBAtom*,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>);
<a name="l00604"></a>00604     <span class="keywordtype">void</span> SetKSingle();
<a name="l00605"></a>00605     <span class="keywordtype">void</span> SetKDouble();
<a name="l00606"></a>00606     <span class="keywordtype">void</span> SetKTriple();
<a name="l00607"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#3d29498c15007d9b6729e26784f23a5b">00607</a>     <span class="keywordtype">void</span> SetAromatic()    { SetFlag(<a class="code" href="mol_8h.shtml#90183171d38e32f07e97bffb7836f9fd">OB_AROMATIC_BOND</a>); }
<a name="l00608"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#25f82438018e969b4feda4a25042c608">00608</a>     <span class="keywordtype">void</span> SetHash()        { SetFlag(<a class="code" href="mol_8h.shtml#14b10c08a25058d1d4a98f8573195119">OB_HASH_BOND</a>);     }
<a name="l00609"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ac63169d5f12da96ad067cc8194c8cdb">00609</a>     <span class="keywordtype">void</span> SetWedge()       { SetFlag(<a class="code" href="mol_8h.shtml#71faadca5c5e100b081f5a563c22e9ee">OB_WEDGE_BOND</a>);    }
<a name="l00610"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#1b06560e0e01a806b92c2386220d0b57">00610</a>     <span class="keywordtype">void</span> SetUp()          { SetFlag(<a class="code" href="mol_8h.shtml#4acf405087f46d03ebc4581cbce02f3b">OB_TORUP_BOND</a>);    }
<a name="l00611"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#7690859a81831984dbc0fa73313d44b3">00611</a>     <span class="keywordtype">void</span> SetDown()        { SetFlag(<a class="code" href="mol_8h.shtml#7c5124279ed6a19b93840ab3038ef2c0">OB_TORDOWN_BOND</a>);  }
<a name="l00612"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#e6a016e7f67cf564e5f80254c425f65c">00612</a>     <span class="keywordtype">void</span> SetInRing()      { SetFlag(<a class="code" href="mol_8h.shtml#2f74970f7126e2bc1e9a4e1d8ed1af26">OB_RING_BOND</a>);     }
<a name="l00613"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#b499793fc98aadbaa192756b8327016d">00613</a>     <span class="keywordtype">void</span> SetClosure()     { SetFlag(<a class="code" href="mol_8h.shtml#19b6306ab83f788b1fb60f8816b07e9c">OB_CLOSURE_BOND</a>);  }
<a name="l00614"></a>00614 
<a name="l00615"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#2fcf3bf429f36281a43c879e40e75f34">00615</a>     <span class="keywordtype">void</span> UnsetAromatic()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#90183171d38e32f07e97bffb7836f9fd">OB_AROMATIC_BOND</a>)); }
<a name="l00616"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#512e7b122631a29f1ef8c679704632cd">00616</a>     <span class="keywordtype">void</span> UnsetKekule()
<a name="l00617"></a>00617     {
<a name="l00618"></a>00618         _flags &amp;= (~(<a class="code" href="mol_8h.shtml#2cbf156fa54b94fb630c4915ab06cbb1">OB_KSINGLE_BOND</a>|<a class="code" href="mol_8h.shtml#f2291cb768c88e059cb8ee24d3f66f64">OB_KDOUBLE_BOND</a>|<a class="code" href="mol_8h.shtml#e702c1e19159f86ccd298f273ac94cd6">OB_KTRIPLE_BOND</a>));
<a name="l00619"></a>00619     }
<a name="l00621"></a>00621 
<a name="l00623"></a>00623 
<a name="l00624"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#7d9f4e277b24001cf1d7d9ef072724e6">00624</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetBO()<span class="keyword">            const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_order); }
<a name="l00625"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#d4ae2f349fa9fe34dea5f5e69378fbf7">00625</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetBondOrder()<span class="keyword">     const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_order); }
<a name="l00626"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#d2ed50e039de387fb517a9f7832de06f">00626</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetFlags()<span class="keyword">         const </span>{ <span class="keywordflow">return</span>(_flags);      }
<a name="l00627"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#e11a8ddd132109c3a14328bb7676d9f7">00627</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetBeginAtomIdx()<span class="keyword">  const </span>{ <span class="keywordflow">return</span>(_bgn-&gt;GetIdx()); }
<a name="l00628"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#38f53ed138507e197a36be75e58a24da">00628</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetEndAtomIdx()<span class="keyword">    const </span>{ <span class="keywordflow">return</span>(_end-&gt;GetIdx()); }
<a name="l00629"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#fdda9b904cabc9ce0335a665988ab143">00629</a>     OBAtom *GetBeginAtom()    { <span class="keywordflow">return</span>((OBAtom*)_bgn);    }
<a name="l00630"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ee593e9cc14031b07e3dc63a003c345f">00630</a>     OBAtom *GetEndAtom()      { <span class="keywordflow">return</span>((OBAtom*)_end);    }
<a name="l00631"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#30735471b108fe43965fd2d0a9fe86a0">00631</a>     OBAtom *GetNbrAtom(OBAtom *ptr)
<a name="l00632"></a>00632     {
<a name="l00633"></a>00633         <span class="keywordflow">return</span>((ptr != _bgn)? (OBAtom*)_bgn : (OBAtom*)_end);
<a name="l00634"></a>00634     }
<a name="l00635"></a>00635     <span class="comment">// OBMol  *GetParent()                 {return(_parent);}  // (inherited)</span>
<a name="l00636"></a>00636     <span class="keywordtype">double</span>   GetEquibLength();
<a name="l00637"></a>00637     <span class="keywordtype">double</span>   GetLength();
<a name="l00638"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#63c9645e049629bac7c445413c60ba82">00638</a>     <span class="keywordtype">int</span>     GetNbrAtomIdx(OBAtom *ptr)
<a name="l00639"></a>00639     {
<a name="l00640"></a>00640         <span class="keywordflow">return</span>((ptr!=_bgn)?_bgn-&gt;GetIdx():_end-&gt;GetIdx());
<a name="l00641"></a>00641     }
<a name="l00643"></a>00643 
<a name="l00645"></a>00645 
<a name="l00646"></a>00646     <span class="keywordtype">bool</span> IsAromatic() <span class="keyword">const</span>;
<a name="l00647"></a>00647     <span class="keywordtype">bool</span> IsInRing() <span class="keyword">const</span>;
<a name="l00652"></a>00652     <span class="keywordtype">bool</span> IsRotor();
<a name="l00653"></a>00653     <span class="keywordtype">bool</span> IsAmide();
<a name="l00654"></a>00654     <span class="keywordtype">bool</span> IsPrimaryAmide();
<a name="l00655"></a>00655     <span class="keywordtype">bool</span> IsSecondaryAmide();
<a name="l00656"></a>00656     <span class="keywordtype">bool</span> IsEster();
<a name="l00657"></a>00657     <span class="keywordtype">bool</span> IsCarbonyl();
<a name="l00658"></a>00658     <span class="keywordtype">bool</span> IsSingle();
<a name="l00659"></a>00659     <span class="keywordtype">bool</span> IsDouble();
<a name="l00660"></a>00660     <span class="keywordtype">bool</span> IsTriple();
<a name="l00661"></a>00661     <span class="keywordtype">bool</span> IsKSingle();
<a name="l00662"></a>00662     <span class="keywordtype">bool</span> IsKDouble();
<a name="l00663"></a>00663     <span class="keywordtype">bool</span> IsKTriple();
<a name="l00664"></a>00664     <span class="keywordtype">bool</span> IsClosure();
<a name="l00667"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#1733c541422f1bec76b19733d5f6f046">00667</a>     <span class="keywordtype">bool</span> IsUp()    {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#4acf405087f46d03ebc4581cbce02f3b">OB_TORUP_BOND</a>));    }
<a name="l00670"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#4ff4d4e51ec0a91f7b8174265de188e7">00670</a>     <span class="keywordtype">bool</span> IsDown()  {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#7c5124279ed6a19b93840ab3038ef2c0">OB_TORDOWN_BOND</a>));  }
<a name="l00671"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#70910881ff95404e96c9b40d33e0db76">00671</a>     <span class="keywordtype">bool</span> IsWedge() {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#71faadca5c5e100b081f5a563c22e9ee">OB_WEDGE_BOND</a>));    }
<a name="l00672"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#b5e8e371f621ba037c843f6da7fe6bdb">00672</a>     <span class="keywordtype">bool</span> IsHash()  {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#14b10c08a25058d1d4a98f8573195119">OB_HASH_BOND</a>));     }
<a name="l00674"></a>00674     <span class="keywordtype">bool</span> IsDoubleBondGeometry();
<a name="l00676"></a>00676 
<a name="l00678"></a>00678 
<a name="l00679"></a>00679     <span class="keywordtype">bool</span>                              HasData(std::string &amp;);
<a name="l00680"></a>00680     <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00681"></a>00681     <span class="keywordtype">bool</span>                              HasData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00682"></a>00682     <span class="keywordtype">void</span>                              DeleteData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00683"></a>00683     <span class="keywordtype">void</span>                              DeleteData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*);
<a name="l00684"></a>00684     <span class="keywordtype">void</span>                              DeleteData(std::vector&lt;OBGenericData*&gt;&amp;);
<a name="l00685"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#db6b0ec89bfea783825b3b466e4dbc00">00685</a>     <span class="keywordtype">void</span>                              SetData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)
<a name="l00686"></a>00686     {
<a name="l00687"></a>00687         _vdata.push_back(d);
<a name="l00688"></a>00688     }
<a name="l00690"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#fd4740dfd6a433f49aff61f30a143e2b">00690</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                      DataSize()
<a name="l00691"></a>00691     {
<a name="l00692"></a>00692         <span class="keywordflow">return</span>(_vdata.size());
<a name="l00693"></a>00693     }
<a name="l00694"></a>00694     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00695"></a>00695     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(std::string&amp;);
<a name="l00696"></a>00696     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00697"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#90a551ff0a0ed3fa58745dff0ecacdaa">00697</a>     std::vector&lt;OBGenericData*&gt;           &amp;GetData()
<a name="l00698"></a>00698     {
<a name="l00699"></a>00699         <span class="keywordflow">return</span>(_vdata);
<a name="l00700"></a>00700     }
<a name="l00701"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a53a73875031660f8d63e963a248df9f">00701</a>     std::vector&lt;OBGenericData*&gt;::iterator  BeginData()
<a name="l00702"></a>00702     {
<a name="l00703"></a>00703         <span class="keywordflow">return</span>(_vdata.begin());
<a name="l00704"></a>00704     }
<a name="l00705"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#23b691092f712f20cf57065f54d2357a">00705</a>     std::vector&lt;OBGenericData*&gt;::iterator  EndData()
<a name="l00706"></a>00706     {
<a name="l00707"></a>00707         <span class="keywordflow">return</span>(_vdata.end());
<a name="l00708"></a>00708     }
<a name="l00710"></a>00710 }
<a name="l00711"></a>00711 ; <span class="comment">// class OBBond</span>
<a name="l00712"></a>00712 
<a name="l00713"></a>00713 
<a name="l00714"></a>00714 <span class="comment">// Class OBMol</span>
<a name="l00715"></a>00715 
<a name="l00716"></a>00716 <span class="comment">//MOL Property Macros (flags) -- 32+ bits</span>
<a name="l00717"></a><a class="code" href="mol_8h.shtml#1ab7f39b595f0f69b77c5907c804afc4">00717</a> <span class="preprocessor">#define OB_SSSR_MOL              (1&lt;&lt;1)</span>
<a name="l00718"></a><a class="code" href="mol_8h.shtml#e9ad3600741ed030f463badacb48cbf9">00718</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_RINGFLAGS_MOL         (1&lt;&lt;2)</span>
<a name="l00719"></a><a class="code" href="mol_8h.shtml#00796165b0d091f4b0987ee2a0ba5609">00719</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_AROMATIC_MOL          (1&lt;&lt;3)</span>
<a name="l00720"></a><a class="code" href="mol_8h.shtml#bf2d91f3d8e6d4db13029a0130a262a5">00720</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_ATOMTYPES_MOL         (1&lt;&lt;4)</span>
<a name="l00721"></a><a class="code" href="mol_8h.shtml#bdf1bef91d791e4ec64071377a06e491">00721</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_CHIRALITY_MOL         (1&lt;&lt;5)</span>
<a name="l00722"></a><a class="code" href="mol_8h.shtml#ade7aaf66074d41ccc89a88fde187ef0">00722</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_PCHARGE_MOL           (1&lt;&lt;6)</span>
<a name="l00723"></a><a class="code" href="mol_8h.shtml#2609984a86f8eaca60bd0995ab1ff082">00723</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_HYBRID_MOL            (1&lt;&lt;8)</span>
<a name="l00724"></a><a class="code" href="mol_8h.shtml#220b0e4aac833823ef37f6d10ac7a254">00724</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_IMPVAL_MOL            (1&lt;&lt;9)</span>
<a name="l00725"></a><a class="code" href="mol_8h.shtml#db1c838e0460bae3347db0d94b4e63c7">00725</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_KEKULE_MOL            (1&lt;&lt;10)</span>
<a name="l00726"></a><a class="code" href="mol_8h.shtml#a9b307d4356f47b80ba6516405bea32e">00726</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_CLOSURE_MOL           (1&lt;&lt;11)</span>
<a name="l00727"></a><a class="code" href="mol_8h.shtml#488eaf115c8c8e3f8ac24384f80f6f88">00727</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_H_ADDED_MOL           (1&lt;&lt;12)</span>
<a name="l00728"></a><a class="code" href="mol_8h.shtml#f3ca96a4c05940f8ed8fdc159b93656a">00728</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_PH_CORRECTED_MOL      (1&lt;&lt;13)</span>
<a name="l00729"></a><a class="code" href="mol_8h.shtml#d34e5e48a2b7f4c149070647189d9d71">00729</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_AROM_CORRECTED_MOL    (1&lt;&lt;14)</span>
<a name="l00730"></a><a class="code" href="mol_8h.shtml#5aaff7bcb11a37508fe32d17ad57dea0">00730</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_CHAINS_MOL            (1&lt;&lt;15)</span>
<a name="l00731"></a><a class="code" href="mol_8h.shtml#3168124e0bc8b31e2d4392f1da02fbd7">00731</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_TCHARGE_MOL           (1&lt;&lt;16)</span>
<a name="l00732"></a><a class="code" href="mol_8h.shtml#8ae8b8d431ee5649e4dad8bbdfd5092d">00732</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_TSPIN_MOL             (1&lt;&lt;17)</span>
<a name="l00733"></a>00733 <span class="preprocessor"></span><span class="comment">// flags 18-32 unspecified</span>
<a name="l00734"></a><a class="code" href="mol_8h.shtml#e7cd3ed4ac08cc188ed556c26ff26abe">00734</a> <span class="preprocessor">#define OB_CURRENT_CONFORMER     -1</span>
<a name="l00735"></a>00735 <span class="preprocessor"></span>
<a name="l00736"></a>00736 <span class="comment">// class introduction in mol.cpp</span>
<a name="l00737"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml">00737</a> <span class="keyword">class </span>OBAPI OBMol : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGraphBase.shtml">OBGraphBase</a>
<a name="l00738"></a>00738 {
<a name="l00739"></a>00739 <span class="keyword">protected</span>:
<a name="l00740"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a4a61b1d913f2bee1e0ed5d9daf26549">00740</a>     <span class="keywordtype">int</span>                           _flags;       
<a name="l00741"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c23878536c8da0ff97c0985627dd5646">00741</a>     <span class="keywordtype">bool</span>                          _autoPartialCharge; 
<a name="l00742"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#e1c74119422bd6a52bb7c384b42dca4c">00742</a>     <span class="keywordtype">bool</span>                          _autoFormalCharge; 
<a name="l00743"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#1dda4ed41c70aef0a361682dd9b2b0f9">00743</a>     std::string                   _title;       
<a name="l00744"></a>00744     <span class="comment">//vector&lt;OBAtom*&gt;             _atom;        //!&lt; not needed (inherited)</span>
<a name="l00745"></a>00745     <span class="comment">//vector&lt;OBBond*&gt;             _bond;        //!&lt; not needed (inherited)</span>
<a name="l00746"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#601fbf5c8e5b7d92281dbe6a124d7f2c">00746</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            _dimension;   
<a name="l00747"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#d93165c379393f8eb17506f1f9820a1a">00747</a>     <span class="keywordtype">double</span>                        _energy;      
<a name="l00748"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#aaeee07c1d80b2638b8b9ace0095c9cd">00748</a>     <span class="keywordtype">int</span>                           _totalCharge; 
<a name="l00749"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7a92cb97f8aa52f145b2e928cf480a07">00749</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _totalSpin;   
<a name="l00750"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#706bc4f751bf06cf864893451a7d21e4">00750</a>     <span class="keywordtype">double</span>                       *_c;           
<a name="l00751"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6fb1d704dcaeb179720ac771745850b1">00751</a>     std::vector&lt;double*&gt;          _vconf;       
<a name="l00752"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#423d6b01bf56b39dda4f7b6b40d238ba">00752</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            _natoms;      
<a name="l00753"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#fdd8d09e3918503bce7f3dabb3b329b7">00753</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            _nbonds;      
<a name="l00754"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#e1c29d0efe6187e8726962008c81e956">00754</a>     std::vector&lt;OBResidue*&gt;       _residue;     
<a name="l00755"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6c2a9726c57abf03a40339776f5d9a0b">00755</a>     std::vector&lt;OBInternalCoord*&gt; _internals;   
<a name="l00756"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f7811cf8aadbf3b3477c560b0ef2f797">00756</a>     std::vector&lt;OBGenericData*&gt;   _vdata;       
<a name="l00757"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#5db8eb0124fad1bf66ddaf930b4840f0">00757</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            _mod;         
<a name="l00758"></a>00758 
<a name="l00759"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#3a1dc0419a66d2e7288214342de43b7a">00759</a>     <span class="keywordtype">bool</span>  HasFlag(<span class="keywordtype">int</span> flag)    { <span class="keywordflow">return</span>((_flags &amp; flag) ? <span class="keyword">true</span> : <span class="keyword">false</span>); }
<a name="l00760"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#dcdab8f96dc4fdc2940749e527087245">00760</a>     <span class="keywordtype">void</span>  SetFlag(<span class="keywordtype">int</span> flag)    { _flags |= flag; }
<a name="l00761"></a>00761 
<a name="l00763"></a>00763 
<a name="l00764"></a>00764     <span class="keywordtype">void</span> start_kekulize(std::vector &lt;OBAtom*&gt; &amp;cycle, std::vector&lt;int&gt; &amp;electron);
<a name="l00765"></a>00765     <span class="keywordtype">int</span> expand_kekulize(OBAtom *atom1, OBAtom *atom2, std::vector&lt;int&gt; &amp;currentState, std::vector&lt;int&gt; &amp;initState, std::vector&lt;int&gt; &amp;bcurrentState, std::vector&lt;int&gt; &amp;binitState, std::vector&lt;bool&gt; &amp;mark);
<a name="l00766"></a>00766     <span class="keywordtype">int</span> getorden(OBAtom *atom);
<a name="l00767"></a>00767     <span class="keywordtype">void</span> expandcycle(OBAtom *atom, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;avisit);
<a name="l00769"></a>00769 
<a name="l00770"></a>00770 <span class="keyword">public</span>:
<a name="l00771"></a>00771 
<a name="l00773"></a>00773 
<a name="l00774"></a>00774 
<a name="l00775"></a>00775     OBMol();
<a name="l00780"></a>00780     OBMol(<span class="keyword">const</span> OBMol &amp;);
<a name="l00782"></a>00782     <span class="keyword">virtual</span> ~OBMol();
<a name="l00784"></a>00784     OBMol &amp;operator=(<span class="keyword">const</span> OBMol &amp;mol);
<a name="l00785"></a>00785     OBMol &amp;operator+=(<span class="keyword">const</span> OBMol &amp;mol);
<a name="l00786"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#723933398f0402a92916d1cfcb8dadd6">00786</a>     <span class="keywordtype">void</span> ReserveAtoms(<span class="keywordtype">int</span> natoms)
<a name="l00787"></a>00787     {
<a name="l00788"></a>00788         <span class="keywordflow">if</span> (natoms &amp;&amp; _mod)
<a name="l00789"></a>00789             _vatom.reserve(natoms);
<a name="l00790"></a>00790     }
<a name="l00791"></a>00791     <span class="keyword">virtual</span> OBAtom *<a class="code" href="namespaceOpenBabel.shtml#5ef07c8230811964a209e423abea11d2">CreateAtom</a>(<span class="keywordtype">void</span>);
<a name="l00792"></a>00792     <span class="keyword">virtual</span> OBBond *<a class="code" href="namespaceOpenBabel.shtml#0dc584d0582e8f76b7c9873dc1ccf569">CreateBond</a>(<span class="keywordtype">void</span>);
<a name="l00793"></a>00793     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyAtom(<a class="code" href="classOpenBabel_1_1OBNodeBase.shtml">OBNodeBase</a>*);
<a name="l00794"></a>00794     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyBond(<a class="code" href="classOpenBabel_1_1OBEdgeBase.shtml">OBEdgeBase</a>*);
<a name="l00795"></a>00795     <span class="keywordtype">bool</span> AddAtom(OBAtom&amp;);
<a name="l00796"></a>00796     <span class="keywordtype">bool</span> AddBond(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span> flags=0,<span class="keywordtype">int</span> insertpos=-1);
<a name="l00797"></a>00797     <span class="keywordtype">bool</span> AddBond(OBBond&amp;);
<a name="l00798"></a>00798     <span class="keywordtype">bool</span> AddResidue(OBResidue&amp;);
<a name="l00799"></a>00799     <span class="keywordtype">bool</span> InsertAtom(OBAtom &amp;);
<a name="l00800"></a>00800     <span class="keywordtype">bool</span> DeleteAtom(OBAtom*);
<a name="l00801"></a>00801     <span class="keywordtype">bool</span> DeleteBond(OBBond*);
<a name="l00802"></a>00802     <span class="keywordtype">bool</span> DeleteResidue(OBResidue*);
<a name="l00803"></a>00803     OBAtom    *NewAtom();
<a name="l00804"></a>00804     OBResidue *NewResidue();
<a name="l00806"></a>00806 
<a name="l00808"></a>00808 
<a name="l00809"></a>00809 
<a name="l00810"></a>00810     <span class="keyword">virtual</span> <span class="keywordtype">void</span> BeginModify(<span class="keywordtype">void</span>);
<a name="l00812"></a>00812     <span class="keyword">virtual</span> <span class="keywordtype">void</span> EndModify(<span class="keywordtype">bool</span> nukePerceivedData=<span class="keyword">true</span>);
<a name="l00813"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c5103c8b3cbe4f961bd353209bf2860e">00813</a>     <span class="keywordtype">int</span> GetMod()
<a name="l00814"></a>00814     {
<a name="l00815"></a>00815         <span class="keywordflow">return</span>(_mod);
<a name="l00816"></a>00816     }
<a name="l00817"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#dc36b31f851665247f3c576cdd7aa0af">00817</a>     <span class="keywordtype">void</span> IncrementMod()
<a name="l00818"></a>00818     {
<a name="l00819"></a>00819         _mod++;
<a name="l00820"></a>00820     }
<a name="l00821"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#8efda275b959c94452e1ded1f568c934">00821</a>     <span class="keywordtype">void</span> DecrementMod()
<a name="l00822"></a>00822     {
<a name="l00823"></a>00823         _mod--;
<a name="l00824"></a>00824     }
<a name="l00826"></a>00826 
<a name="l00828"></a>00828 
<a name="l00829"></a>00829 
<a name="l00830"></a>00830     <span class="keywordtype">bool</span>                              HasData(std::string &amp;);
<a name="l00832"></a>00832     <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00834"></a>00834     <span class="keywordtype">bool</span>                              HasData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00835"></a>00835     <span class="keywordtype">void</span>                              DeleteData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00836"></a>00836     <span class="keywordtype">void</span>                              DeleteData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*);
<a name="l00837"></a>00837     <span class="keywordtype">void</span>                              DeleteData(std::vector&lt;OBGenericData*&gt;&amp;);
<a name="l00838"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#db6b0ec89bfea783825b3b466e4dbc00">00838</a>     <span class="keywordtype">void</span>                              SetData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)
<a name="l00839"></a>00839     {
<a name="l00840"></a>00840         _vdata.push_back(d);
<a name="l00841"></a>00841     }
<a name="l00843"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#fd4740dfd6a433f49aff61f30a143e2b">00843</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                      DataSize(){ <span class="keywordflow">return</span>(_vdata.size()); }
<a name="l00844"></a>00844     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00845"></a>00845     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(std::string&amp;);
<a name="l00846"></a>00846     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>                    *GetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00847"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#90a551ff0a0ed3fa58745dff0ecacdaa">00847</a>     std::vector&lt;OBGenericData*&gt;      &amp;GetData() { <span class="keywordflow">return</span>(_vdata); }
<a name="l00848"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a53a73875031660f8d63e963a248df9f">00848</a>     std::vector&lt;OBGenericData*&gt;::iterator  BeginData()
<a name="l00849"></a>00849     {
<a name="l00850"></a>00850         <span class="keywordflow">return</span>(_vdata.begin());
<a name="l00851"></a>00851     }
<a name="l00852"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#23b691092f712f20cf57065f54d2357a">00852</a>     std::vector&lt;OBGenericData*&gt;::iterator  EndData()
<a name="l00853"></a>00853     {
<a name="l00854"></a>00854         <span class="keywordflow">return</span>(_vdata.end());
<a name="l00855"></a>00855     }
<a name="l00857"></a>00857 
<a name="l00859"></a>00859 
<a name="l00860"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ba761a006b56d62912a91e259ce11bb1">00860</a>     <span class="keywordtype">int</span>          GetFlags()               { <span class="keywordflow">return</span>(_flags); }
<a name="l00862"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#d4281d49a1f2b0228e4fdaff01762375">00862</a>     <span class="keyword">const</span> <span class="keywordtype">char</span>  *GetTitle()<span class="keyword"> const         </span>{ <span class="keywordflow">return</span>(_title.c_str()); }
<a name="l00864"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#2f0695eb7d6ff6321032d88655ae8d25">00864</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumAtoms()<span class="keyword"> const         </span>{  <span class="keywordflow">return</span>(_natoms); }
<a name="l00866"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7358c2c15c4c0d88ae2489f586bc8e0b">00866</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumBonds()<span class="keyword"> const         </span>{  <span class="keywordflow">return</span>(_nbonds); }
<a name="l00868"></a>00868     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumHvyAtoms();
<a name="l00870"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f641753d0dbc017405280791048f0d88">00870</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumResidues()<span class="keyword"> const      </span>{ <span class="keywordflow">return</span>(_residue.size()); }
<a name="l00872"></a>00872     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumRotors();
<a name="l00873"></a>00873     
<a name="l00874"></a>00874     OBAtom      *GetAtom(<span class="keywordtype">int</span>);
<a name="l00875"></a>00875     OBAtom      *GetFirstAtom();
<a name="l00876"></a>00876     OBBond      *GetBond(<span class="keywordtype">int</span>);
<a name="l00877"></a>00877     OBBond      *GetBond(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
<a name="l00878"></a>00878     OBBond      *GetBond(OBAtom*,OBAtom*);
<a name="l00879"></a>00879     OBResidue   *GetResidue(<span class="keywordtype">int</span>);
<a name="l00880"></a>00880     std::vector&lt;OBInternalCoord*&gt; GetInternalCoord();
<a name="l00882"></a>00882     <span class="keywordtype">double</span>       GetTorsion(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>);
<a name="l00884"></a>00884     <span class="keywordtype">double</span>       GetTorsion(OBAtom*,OBAtom*,OBAtom*,OBAtom*);
<a name="l00886"></a>00886     std::string  GetFormula();
<a name="l00888"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#4dcfbb9780f44d5fca2effbc30b17ce0">00888</a>     <span class="keywordtype">double</span>       GetEnergy()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_energy); }
<a name="l00890"></a>00890     <span class="keywordtype">double</span>       GetMolWt();
<a name="l00892"></a>00892     <span class="keywordtype">double</span>       GetExactMass();
<a name="l00894"></a>00894     <span class="keywordtype">int</span>          GetTotalCharge();
<a name="l00896"></a>00896     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetTotalSpinMultiplicity();
<a name="l00898"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#d646045c7f735c9ef05ba9e4bb768b7c">00898</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> GetDimension()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _dimension; }
<a name="l00899"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#d11003513310725bd54265ef5bf004c0">00899</a>     <span class="keywordtype">double</span>      *GetCoordinates() { <span class="keywordflow">return</span>(_c); }
<a name="l00901"></a>00901     std::vector&lt;OBRing*&gt; &amp;GetSSSR();
<a name="l00903"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#9f801729475d1d17415af6376458c81e">00903</a>     <span class="keywordtype">bool</span> AutomaticFormalCharge()   { <span class="keywordflow">return</span>(_autoFormalCharge);  }
<a name="l00905"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f2ee11d3efe6526c2eb352bb67684e6c">00905</a>     <span class="keywordtype">bool</span> AutomaticPartialCharge()  { <span class="keywordflow">return</span>(_autoPartialCharge); }
<a name="l00907"></a>00907 
<a name="l00908"></a>00908 
<a name="l00910"></a>00910 
<a name="l00911"></a>00911     <span class="keywordtype">void</span>   SetTitle(<span class="keyword">const</span> <span class="keywordtype">char</span> *title);
<a name="l00912"></a>00912     <span class="keywordtype">void</span>   SetTitle(std::string &amp;title);
<a name="l00914"></a>00914     <span class="keywordtype">void</span>   SetFormula(std::string molFormula);
<a name="l00916"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#b78fa0a100d47ad2beb88c7cabb80e62">00916</a>     <span class="keywordtype">void</span>   SetEnergy(<span class="keywordtype">double</span> energy) { _energy = energy; }
<a name="l00918"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#dc2702cffcab0a0d6907958e3327284b">00918</a>     <span class="keywordtype">void</span>   SetDimension(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> d) { _dimension = d; }
<a name="l00919"></a>00919     <span class="keywordtype">void</span>   SetTotalCharge(<span class="keywordtype">int</span> charge);
<a name="l00920"></a>00920     <span class="keywordtype">void</span>   SetTotalSpinMultiplicity(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> spin);
<a name="l00921"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#50a6320395d2466d277dc42f872c50f8">00921</a>     <span class="keywordtype">void</span>   SetInternalCoord(std::vector&lt;OBInternalCoord*&gt; int_coord)
<a name="l00922"></a>00922       { _internals = int_coord; }
<a name="l00924"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#31e0990c833c415708b3fc515dbb35d5">00924</a>     <span class="keywordtype">void</span> SetAutomaticFormalCharge(<span class="keywordtype">bool</span> val)
<a name="l00925"></a>00925     { _autoFormalCharge=val;  }
<a name="l00927"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a8df95db3695e5e7ce263c484ce5533d">00927</a>     <span class="keywordtype">void</span> SetAutomaticPartialCharge(<span class="keywordtype">bool</span> val)
<a name="l00928"></a>00928     { _autoPartialCharge=val; }
<a name="l00929"></a>00929 
<a name="l00931"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ecd431b2cfaefa64d54c2dc4088551fb">00931</a>     <span class="keywordtype">void</span>   SetAromaticPerceived()    { SetFlag(<a class="code" href="mol_8h.shtml#00796165b0d091f4b0987ee2a0ba5609">OB_AROMATIC_MOL</a>);    }
<a name="l00933"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ba303a094727738eb901cafbecd7c196">00933</a>     <span class="keywordtype">void</span>   SetSSSRPerceived()        { SetFlag(<a class="code" href="mol_8h.shtml#1ab7f39b595f0f69b77c5907c804afc4">OB_SSSR_MOL</a>);        }
<a name="l00935"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#0656401ba8b19bc9b9f2d3e8e833d3aa">00935</a>     <span class="keywordtype">void</span>   SetRingAtomsAndBondsPerceived(){SetFlag(<a class="code" href="mol_8h.shtml#e9ad3600741ed030f463badacb48cbf9">OB_RINGFLAGS_MOL</a>);}
<a name="l00937"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a809ea95ee07e61c6dc00ae710d8a749">00937</a>     <span class="keywordtype">void</span>   SetAtomTypesPerceived()   { SetFlag(<a class="code" href="mol_8h.shtml#bf2d91f3d8e6d4db13029a0130a262a5">OB_ATOMTYPES_MOL</a>);   }
<a name="l00939"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#537294f8e96a7ec5263a79de7454326e">00939</a>     <span class="keywordtype">void</span>   SetChainsPerceived()      { SetFlag(<a class="code" href="mol_8h.shtml#5aaff7bcb11a37508fe32d17ad57dea0">OB_CHAINS_MOL</a>);      }
<a name="l00941"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#608e6f965afea1f4f64cb0f499a0cb27">00941</a>     <span class="keywordtype">void</span>   SetChiralityPerceived()   { SetFlag(<a class="code" href="mol_8h.shtml#bdf1bef91d791e4ec64071377a06e491">OB_CHIRALITY_MOL</a>);   }
<a name="l00943"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#00fd4c76a7513a9c8087d975f5d8a51b">00943</a>     <span class="keywordtype">void</span>   SetPartialChargesPerceived(){ SetFlag(<a class="code" href="mol_8h.shtml#ade7aaf66074d41ccc89a88fde187ef0">OB_PCHARGE_MOL</a>);   }
<a name="l00944"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#4b93b72694e8a9a970eee7f0b65ecf9a">00944</a>     <span class="keywordtype">void</span>   SetHybridizationPerceived() { SetFlag(<a class="code" href="mol_8h.shtml#2609984a86f8eaca60bd0995ab1ff082">OB_HYBRID_MOL</a>);    }
<a name="l00945"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#9ecfb96410199c294c003f975d870832">00945</a>     <span class="keywordtype">void</span>   SetImplicitValencePerceived(){ SetFlag(<a class="code" href="mol_8h.shtml#220b0e4aac833823ef37f6d10ac7a254">OB_IMPVAL_MOL</a>);   }
<a name="l00946"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#1e298bbe286ab2c5a6f3b086a07b1a2b">00946</a>     <span class="keywordtype">void</span>   SetKekulePerceived()      { SetFlag(<a class="code" href="mol_8h.shtml#db1c838e0460bae3347db0d94b4e63c7">OB_KEKULE_MOL</a>);      }
<a name="l00947"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7900736a9f73a041ab8bade19be84cc9">00947</a>     <span class="keywordtype">void</span>   SetClosureBondsPerceived(){ SetFlag(<a class="code" href="mol_8h.shtml#a9b307d4356f47b80ba6516405bea32e">OB_CLOSURE_MOL</a>);     }
<a name="l00948"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#47b63124c405f9c2ecdb766c6de9c56e">00948</a>     <span class="keywordtype">void</span>   SetHydrogensAdded()       { SetFlag(<a class="code" href="mol_8h.shtml#488eaf115c8c8e3f8ac24384f80f6f88">OB_H_ADDED_MOL</a>);     }
<a name="l00949"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f56db37c6a9f7049ed16469ab0a270c2">00949</a>     <span class="keywordtype">void</span>   SetCorrectedForPH()       { SetFlag(<a class="code" href="mol_8h.shtml#f3ca96a4c05940f8ed8fdc159b93656a">OB_PH_CORRECTED_MOL</a>);}
<a name="l00950"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6438e097839dbc98916fb00a3dc67305">00950</a>     <span class="keywordtype">void</span>   SetAromaticCorrected()    { SetFlag(<a class="code" href="mol_8h.shtml#d34e5e48a2b7f4c149070647189d9d71">OB_AROM_CORRECTED_MOL</a>);}
<a name="l00951"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#2c81eeba803bc59d6c40f97b0e0e17fd">00951</a>     <span class="keywordtype">void</span>   SetSpinMultiplicityAssigned(){ SetFlag(<a class="code" href="mol_8h.shtml#8ae8b8d431ee5649e4dad8bbdfd5092d">OB_TSPIN_MOL</a>);    }
<a name="l00952"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#b0922e1fa0939499c024e1006433adf3">00952</a>     <span class="keywordtype">void</span>   SetFlags(<span class="keywordtype">int</span> flags)       { _flags = flags;              }
<a name="l00953"></a>00953 
<a name="l00954"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#88f39becfe74f62c9d0ffedfb4098b77">00954</a>     <span class="keywordtype">void</span>   UnsetAromaticPerceived()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#00796165b0d091f4b0987ee2a0ba5609">OB_AROMATIC_MOL</a>));   }
<a name="l00955"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#0b8a9f6292b91ec5c4022a487e9d6092">00955</a>     <span class="keywordtype">void</span>   UnsetPartialChargesPerceived(){ _flags &amp;= (~(<a class="code" href="mol_8h.shtml#ade7aaf66074d41ccc89a88fde187ef0">OB_PCHARGE_MOL</a>));}
<a name="l00956"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f673e91c4869ca8c1057f006d4f06dae">00956</a>     <span class="keywordtype">void</span>   UnsetImplicitValencePerceived(){_flags &amp;= (~(<a class="code" href="mol_8h.shtml#220b0e4aac833823ef37f6d10ac7a254">OB_IMPVAL_MOL</a>)); }
<a name="l00957"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#401b99defa8a57195dc40a2604cee115">00957</a>     <span class="keywordtype">void</span>   UnsetFlag(<span class="keywordtype">int</span> flag)       { _flags &amp;= (~(flag));              }
<a name="l00958"></a>00958 
<a name="l00960"></a>00960 
<a name="l00961"></a>00961     <span class="comment">// Description in transform.cpp</span>
<a name="l00962"></a>00962     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*    DoTransformations(<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* pOptions);
<a name="l00963"></a>00963     <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ClassDescription();
<a name="l00965"></a>00965     <span class="keywordtype">bool</span> Clear();
<a name="l00967"></a>00967     <span class="keywordtype">void</span> RenumberAtoms(std::vector&lt;OBNodeBase*&gt;&amp;);
<a name="l00969"></a>00969     <span class="keywordtype">void</span> ToInertialFrame(<span class="keywordtype">int</span> conf, <span class="keywordtype">double</span> *rmat);
<a name="l00971"></a>00971     <span class="keywordtype">void</span> ToInertialFrame();
<a name="l00973"></a>00973     <span class="keywordtype">void</span> Translate(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v);
<a name="l00975"></a>00975     <span class="keywordtype">void</span> Translate(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, <span class="keywordtype">int</span> conf);
<a name="l00976"></a>00976     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> u[3][3]);
<a name="l00977"></a>00977     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> m[9]);
<a name="l00978"></a>00978     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> m[9],<span class="keywordtype">int</span> nconf);
<a name="l00980"></a>00980     <span class="keywordtype">void</span> Center();
<a name="l00982"></a>00982     <span class="keywordtype">bool</span> Kekulize();
<a name="l00983"></a>00983     <span class="keywordtype">bool</span> PerceiveKekuleBonds();
<a name="l00984"></a>00984 
<a name="l00985"></a>00985     <span class="keywordtype">void</span> NewPerceiveKekuleBonds();
<a name="l00986"></a>00986 
<a name="l00987"></a>00987     <span class="keywordtype">bool</span> DeleteHydrogen(OBAtom*);
<a name="l00988"></a>00988     <span class="keywordtype">bool</span> DeleteHydrogens();
<a name="l00989"></a>00989     <span class="keywordtype">bool</span> DeleteHydrogens(OBAtom*);
<a name="l00990"></a>00990     <span class="keywordtype">bool</span> DeleteNonPolarHydrogens();
<a name="l00991"></a>00991     <span class="keywordtype">bool</span> AddHydrogens(<span class="keywordtype">bool</span> polaronly=<span class="keyword">false</span>,<span class="keywordtype">bool</span> correctForPH=<span class="keyword">true</span>);
<a name="l00992"></a>00992     <span class="keywordtype">bool</span> AddHydrogens(OBAtom*);
<a name="l00993"></a>00993     <span class="keywordtype">bool</span> AddPolarHydrogens();
<a name="l00994"></a>00994 
<a name="l00996"></a>00996     <span class="keywordtype">bool</span> StripSalts();
<a name="l00998"></a>00998     <span class="keywordtype">bool</span> ConvertDativeBonds();
<a name="l00999"></a>00999 
<a name="l01000"></a>01000     <span class="keywordtype">bool</span> CorrectForPH();
<a name="l01001"></a>01001     <span class="keywordtype">bool</span> AssignSpinMultiplicity();
<a name="l01002"></a>01002     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> Center(<span class="keywordtype">int</span> nconf);
<a name="l01004"></a>01004     <span class="keywordtype">void</span> SetTorsion(OBAtom*,OBAtom*,OBAtom*,OBAtom*,<span class="keywordtype">double</span>);
<a name="l01006"></a>01006 
<a name="l01008"></a>01008 
<a name="l01009"></a>01009 
<a name="l01010"></a>01010     <span class="keywordtype">void</span> FindSSSR();
<a name="l01011"></a>01011     <span class="keywordtype">void</span> FindRingAtomsAndBonds();
<a name="l01012"></a>01012     <span class="keywordtype">void</span> FindChiralCenters();
<a name="l01013"></a>01013     <span class="keywordtype">void</span> FindChildren(std::vector&lt;int&gt; &amp;,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>);
<a name="l01014"></a>01014     <span class="keywordtype">void</span> FindChildren(std::vector&lt;OBAtom*&gt;&amp;,OBAtom*,OBAtom*);
<a name="l01015"></a>01015     <span class="keywordtype">void</span> FindLargestFragment(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;);
<a name="l01018"></a>01018     <span class="keywordtype">void</span> ContigFragList(std::vector&lt;std::vector&lt;int&gt; &gt;&amp;);
<a name="l01020"></a>01020     <span class="keywordtype">void</span> Align(OBAtom*,OBAtom*,<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp;,<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp;);
<a name="l01022"></a>01022     <span class="keywordtype">void</span> ConnectTheDots();
<a name="l01024"></a>01024     <span class="keywordtype">void</span> PerceiveBondOrders();
<a name="l01025"></a>01025     <span class="keywordtype">void</span> FindTorsions();
<a name="l01026"></a>01026     <span class="comment">// documented in mol.cpp: graph-theoretical distance for each atom</span>
<a name="l01027"></a>01027     <span class="keywordtype">bool</span>         GetGTDVector(std::vector&lt;int&gt; &amp;);
<a name="l01028"></a>01028     <span class="comment">// documented in mol.cpp: graph-invariant index for each atom</span>
<a name="l01029"></a>01029     <span class="keywordtype">void</span>         GetGIVector(std::vector&lt;unsigned int&gt; &amp;);
<a name="l01030"></a>01030     <span class="comment">// documented in mol.cpp: calculate symmetry-unique identifiers</span>
<a name="l01031"></a>01031     <span class="keywordtype">void</span>         GetGIDVector(std::vector&lt;unsigned int&gt; &amp;);
<a name="l01033"></a>01033 
<a name="l01035"></a>01035 
<a name="l01036"></a>01036 
<a name="l01037"></a>01037     <span class="keywordtype">bool</span> Has2D();
<a name="l01039"></a>01039     <span class="keywordtype">bool</span> Has3D();
<a name="l01041"></a>01041     <span class="keywordtype">bool</span> HasNonZeroCoords();
<a name="l01042"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#783c51919c69da3287d51f34b2fa53a0">01042</a>     <span class="keywordtype">bool</span> HasAromaticPerceived()     { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#00796165b0d091f4b0987ee2a0ba5609">OB_AROMATIC_MOL</a>)); }
<a name="l01043"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ac2c45d000ac10ad770ec5e5eff97f30">01043</a>     <span class="keywordtype">bool</span> HasSSSRPerceived()         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#1ab7f39b595f0f69b77c5907c804afc4">OB_SSSR_MOL</a>));     }
<a name="l01044"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#0329d4256b426a4967afa867f415d06b">01044</a>     <span class="keywordtype">bool</span> HasRingAtomsAndBondsPerceived(){<span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#e9ad3600741ed030f463badacb48cbf9">OB_RINGFLAGS_MOL</a>));}
<a name="l01045"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#0ba2ebe76f1b15c48a8f1538efc8f9b4">01045</a>     <span class="keywordtype">bool</span> HasAtomTypesPerceived()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#bf2d91f3d8e6d4db13029a0130a262a5">OB_ATOMTYPES_MOL</a>));}
<a name="l01046"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#39df67d7e225b9dd721b9b8c7df809ce">01046</a>     <span class="keywordtype">bool</span> HasChiralityPerceived()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#bdf1bef91d791e4ec64071377a06e491">OB_CHIRALITY_MOL</a>));}
<a name="l01047"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#87c2cd2043f749d5433a98df4ad8277d">01047</a>     <span class="keywordtype">bool</span> HasPartialChargesPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#ade7aaf66074d41ccc89a88fde187ef0">OB_PCHARGE_MOL</a>));}
<a name="l01048"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#908e2d394d3a47cf821014899344ca37">01048</a>     <span class="keywordtype">bool</span> HasHybridizationPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#2609984a86f8eaca60bd0995ab1ff082">OB_HYBRID_MOL</a>));  }
<a name="l01049"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7fe699ef7fee62ca46743d6aa78bdea5">01049</a>     <span class="keywordtype">bool</span> HasImplicitValencePerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#220b0e4aac833823ef37f6d10ac7a254">OB_IMPVAL_MOL</a>));}
<a name="l01050"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#afddb1ded7f589afbdd56062368602db">01050</a>     <span class="keywordtype">bool</span> HasKekulePerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#db1c838e0460bae3347db0d94b4e63c7">OB_KEKULE_MOL</a>));         }
<a name="l01051"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#fb25b05d950ca109bf9c6333b906a9ee">01051</a>     <span class="keywordtype">bool</span> HasClosureBondsPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a9b307d4356f47b80ba6516405bea32e">OB_CLOSURE_MOL</a>));  }
<a name="l01052"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c31a6af8f2b96fa35170523b6318c459">01052</a>     <span class="keywordtype">bool</span> HasChainsPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#5aaff7bcb11a37508fe32d17ad57dea0">OB_CHAINS_MOL</a>));         }
<a name="l01053"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#efc6e71556f0cd4afdd34e4a99d06025">01053</a>     <span class="keywordtype">bool</span> HasHydrogensAdded() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#488eaf115c8c8e3f8ac24384f80f6f88">OB_H_ADDED_MOL</a>));         }
<a name="l01054"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#b57a4b5dd9752e593e2fdb80f48909d8">01054</a>     <span class="keywordtype">bool</span> HasAromaticCorrected() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#d34e5e48a2b7f4c149070647189d9d71">OB_AROM_CORRECTED_MOL</a>));}
<a name="l01055"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#fc44b8ad27a62b9cfc670d4fd29bb52f">01055</a>     <span class="keywordtype">bool</span> IsCorrectedForPH() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#f3ca96a4c05940f8ed8fdc159b93656a">OB_PH_CORRECTED_MOL</a>));     }
<a name="l01056"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#4a45f2c821b749250e070c3594289103">01056</a>     <span class="keywordtype">bool</span> HasSpinMultiplicityAssigned() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#8ae8b8d431ee5649e4dad8bbdfd5092d">OB_TSPIN_MOL</a>)); }
<a name="l01058"></a>01058     <span class="keywordtype">bool</span> IsChiral();
<a name="l01060"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#31d1053aee208079bcc3c5e1884774df">01060</a>     <span class="keywordtype">bool</span> Empty()                       { <span class="keywordflow">return</span>(_natoms == 0);          }
<a name="l01062"></a>01062 
<a name="l01064"></a>01064 
<a name="l01065"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#37e5c0caf3b51ae81d8d3abc6ffb1a9c">01065</a>     <span class="keywordtype">int</span>     NumConformers()    { <span class="keywordflow">return</span>((_vconf.empty())?0:_vconf.size()); }
<a name="l01066"></a>01066     <span class="keywordtype">void</span>    SetConformers(std::vector&lt;double*&gt; &amp;v);
<a name="l01067"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7b80e7015d000221e0cc92fd3cf6f9e4">01067</a>     <span class="keywordtype">void</span>    AddConformer(<span class="keywordtype">double</span> *f)    {  _vconf.push_back(f);    }
<a name="l01068"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#e4c349e7e3920df72134c0c940318997">01068</a>     <span class="keywordtype">void</span>    SetConformer(<span class="keywordtype">int</span> i)        {  _c = _vconf[i];         }
<a name="l01069"></a>01069     <span class="keywordtype">void</span>    CopyConformer(<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l01070"></a>01070     <span class="keywordtype">void</span>    DeleteConformer(<span class="keywordtype">int</span>);
<a name="l01071"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#eae833c9dcc30e182f18554bd40242d6">01071</a>     <span class="keywordtype">double</span>  *GetConformer(<span class="keywordtype">int</span> i)       {  <span class="keywordflow">return</span>(_vconf[i]);      }
<a name="l01072"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#43bacf0671104e33b04835408b5c3785">01072</a>     <span class="keywordtype">double</span>  *BeginConformer(std::vector&lt;double*&gt;::iterator&amp;i)
<a name="l01073"></a>01073       { i = _vconf.begin();
<a name="l01074"></a>01074         <span class="keywordflow">return</span>((i == _vconf.end()) ? NULL:*i); }
<a name="l01075"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#bd4311945a4de0a47d2f036e9632a4b9">01075</a>     <span class="keywordtype">double</span>  *NextConformer(std::vector&lt;double*&gt;::iterator&amp;i)
<a name="l01076"></a>01076       { i++;
<a name="l01077"></a>01077         <span class="keywordflow">return</span>((i == _vconf.end()) ? NULL:*i); }
<a name="l01078"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#5246a44bf82aa31c2f428665db94bfb8">01078</a>     std::vector&lt;double*&gt; &amp;GetConformers() {   <span class="keywordflow">return</span>(_vconf);     }
<a name="l01080"></a>01080 
<a name="l01082"></a>01082 
<a name="l01083"></a>01083 
<a name="l01084"></a>01084     OBAtom *BeginAtom(std::vector&lt;OBNodeBase*&gt;::iterator &amp;i);
<a name="l01086"></a>01086     OBAtom *NextAtom(std::vector&lt;OBNodeBase*&gt;::iterator &amp;i);
<a name="l01088"></a>01088     OBBond *BeginBond(std::vector&lt;OBEdgeBase*&gt;::iterator &amp;i);
<a name="l01090"></a>01090     OBBond *NextBond(std::vector&lt;OBEdgeBase*&gt;::iterator &amp;i);
<a name="l01092"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ac98c1df75d7d01ae934d1871ec6501b">01092</a>     OBResidue *BeginResidue(std::vector&lt;OBResidue*&gt;::iterator &amp;i)
<a name="l01093"></a>01093     {
<a name="l01094"></a>01094         i = _residue.begin();
<a name="l01095"></a>01095         <span class="keywordflow">return</span>((i == _residue.end()) ? NULL:*i);
<a name="l01096"></a>01096     }
<a name="l01098"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#8b0f9378c39b849144e6ec701677d978">01098</a>     OBResidue *NextResidue(std::vector&lt;OBResidue*&gt;::iterator &amp;i)
<a name="l01099"></a>01099     {
<a name="l01100"></a>01100         i++;
<a name="l01101"></a>01101         <span class="keywordflow">return</span>((i == _residue.end()) ? NULL:*i);
<a name="l01102"></a>01102     }
<a name="l01103"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#67c061a9d850cf30b4bf5ea394760d43">01103</a>     <a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *BeginInternalCoord(std::vector&lt;OBInternalCoord*&gt;::iterator &amp;i)
<a name="l01104"></a>01104     {
<a name="l01105"></a>01105         i = _internals.begin();
<a name="l01106"></a>01106         <span class="keywordflow">return</span>((i == _internals.end()) ? NULL:*i);
<a name="l01107"></a>01107     }
<a name="l01108"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6680c695e3cdceb7e42a554a0ffc8a19">01108</a>     <a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *NextInternalCoord(std::vector&lt;OBInternalCoord*&gt;::iterator &amp;i)
<a name="l01109"></a>01109     {
<a name="l01110"></a>01110         i++;
<a name="l01111"></a>01111         <span class="keywordflow">return</span>((i == _internals.end()) ? NULL:*i);
<a name="l01112"></a>01112     }
<a name="l01114"></a>01114 
<a name="l01115"></a>01115     <span class="comment">//  Removed with OBConversion framework -- see OBConversion class instead</span>
<a name="l01117"></a>01117 <span class="comment"></span>
<a name="l01118"></a>01118     <span class="comment">// friend std::ostream&amp;       operator&lt;&lt; ( std::ostream&amp;, OBMol&amp; ) ;</span>
<a name="l01119"></a>01119     <span class="comment">// friend std::istream&amp;       operator&gt;&gt; ( std::istream&amp;, OBMol&amp; ) ;</span>
<a name="l01121"></a>01121 <span class="comment"></span>};
<a name="l01122"></a>01122 
<a name="l01124"></a><a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml">01124</a> <span class="keyword">class </span>OBAPI OBInternalCoord
<a name="l01125"></a>01125 {
<a name="l01126"></a>01126 <span class="keyword">public</span>:
<a name="l01127"></a>01127     <span class="comment">//class members</span>
<a name="l01128"></a><a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml#ea38bb61e8999a8f55fc563b1198ae40">01128</a>     OBAtom *_a,*_b,*_c;
<a name="l01129"></a><a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml#f7fa3a43c649400301cd1cff25eb1329">01129</a>     <span class="keywordtype">double</span>   _dst,_ang,_tor;
<a name="l01131"></a><a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml#25f174e3342e2dbaae6ddb9bed528617">01131</a>     OBInternalCoord(OBAtom *a=(OBAtom*)NULL,
<a name="l01132"></a>01132                     OBAtom *b=(OBAtom*)NULL,
<a name="l01133"></a>01133                     OBAtom *c=(OBAtom*)NULL)
<a name="l01134"></a>01134     {
<a name="l01135"></a>01135         _a = a;
<a name="l01136"></a>01136         _b = b;
<a name="l01137"></a>01137         _c = c;
<a name="l01138"></a>01138         _dst = _ang = _tor = 0.0;
<a name="l01139"></a>01139     }
<a name="l01140"></a>01140 };
<a name="l01141"></a>01141 
<a name="l01142"></a>01142 <span class="comment">//function prototypes</span>
<a name="l01143"></a>01143 
<a name="l01144"></a>01144 OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#1ad32121c54dc696e80158701faa0ec8">tokenize</a>(std::vector&lt;std::string&gt;&amp;, <span class="keyword">const</span> <span class="keywordtype">char</span> *buf, <span class="keyword">const</span> <span class="keywordtype">char</span> *delimstr=<span class="stringliteral">" \t\n"</span>);
<a name="l01145"></a>01145 OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#1ad32121c54dc696e80158701faa0ec8">tokenize</a>(std::vector&lt;std::string&gt;&amp;, std::string&amp;, <span class="keyword">const</span> <span class="keywordtype">char</span> *delimstr=<span class="stringliteral">" \t\n"</span>, <span class="keywordtype">int</span> limit=-1);
<a name="l01147"></a>01147 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a064ed729569f7924bd33b939245dc4e">Trim</a>(std::string&amp; txt);
<a name="l01149"></a>01149 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError</a>(<span class="keywordtype">char</span> *str);
<a name="l01151"></a>01151 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError</a>(std::string &amp;str);
<a name="l01152"></a>01152 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#7145217d4de73e243d2d3888dac404ba">CartesianToInternal</a>(std::vector&lt;OBInternalCoord*&gt;&amp;,OBMol&amp;);
<a name="l01153"></a>01153 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#e82e7b7b74e5212eada681c15afb77f4">InternalToCartesian</a>(std::vector&lt;OBInternalCoord*&gt;&amp;,OBMol&amp;);
<a name="l01154"></a>01154 OBAPI std::string <a class="code" href="namespaceOpenBabel.shtml#c1c62bdae6cf7a9195c470e7d0e29883">NewExtension</a>(std::string&amp;,<span class="keywordtype">char</span>*);
<a name="l01155"></a>01155 <span class="comment">// Now handled by OBConversion class</span>
<a name="l01156"></a>01156 <span class="comment">// OBAPI bool SetInputType(OBMol&amp;,std::string&amp;);</span>
<a name="l01157"></a>01157 <span class="comment">// OBAPI bool SetOutputType(OBMol&amp;,std::string&amp;);</span>
<a name="l01158"></a>01158 
<a name="l01159"></a>01159 <span class="comment">//global definitions</span>
<a name="l01161"></a><a class="code" href="namespaceOpenBabel.shtml#1e53ca6bf87ac2f6447c9ef2332c9418">01161</a> <span class="comment"></span>EXTERN  <a class="code" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a>   <a class="code" href="namespaceOpenBabel.shtml#1e53ca6bf87ac2f6447c9ef2332c9418">etab</a>;
<a name="l01164"></a><a class="code" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">01164</a> EXTERN  <a class="code" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a>      <a class="code" href="namespaceOpenBabel.shtml#b8d4d5690031703bcccb95ddbe7ebf0a">ttab</a>;
<a name="l01166"></a><a class="code" href="namespaceOpenBabel.shtml#35082995377e56142ee5a9fd351c7a70">01166</a> EXTERN  <a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a>   <a class="code" href="namespaceOpenBabel.shtml#35082995377e56142ee5a9fd351c7a70">isotab</a>;
<a name="l01168"></a><a class="code" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">01168</a> EXTERN  <a class="code" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>  <a class="code" href="namespaceOpenBabel.shtml#36c0ee580e088fa888f7d96c16e969bd">aromtyper</a>;
<a name="l01171"></a><a class="code" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">01171</a> EXTERN  <a class="code" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a>      <a class="code" href="namespaceOpenBabel.shtml#717e026b570e71d0e648d851d34b6482">atomtyper</a>;
<a name="l01173"></a><a class="code" href="namespaceOpenBabel.shtml#b81925dbd111f3bf1733a4cbba547131">01173</a> EXTERN  <a class="code" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a>   <a class="code" href="namespaceOpenBabel.shtml#b81925dbd111f3bf1733a4cbba547131">chainsparser</a>;
<a name="l01175"></a><a class="code" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">01175</a> EXTERN  <a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> <a class="code" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">obErrorLog</a>;
<a name="l01177"></a><a class="code" href="namespaceOpenBabel.shtml#30154f62f3bd1a1b8613a080444e69d7">01177</a> EXTERN  <a class="code" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a>    <a class="code" href="namespaceOpenBabel.shtml#30154f62f3bd1a1b8613a080444e69d7">resdat</a>;
<a name="l01178"></a>01178 
<a name="l01179"></a>01179 <span class="comment">//Utility Macros</span>
<a name="l01180"></a>01180 
<a name="l01181"></a>01181 <span class="preprocessor">#ifndef BUFF_SIZE</span>
<a name="l01182"></a><a class="code" href="mol_8h.shtml#6c7cd32e1bac137f05e4a752b4ad10af">01182</a> <span class="preprocessor"></span><span class="preprocessor">#define BUFF_SIZE 32768</span>
<a name="l01183"></a>01183 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01184"></a>01184 <span class="preprocessor"></span>
<a name="l01185"></a>01185 <span class="preprocessor">#ifndef EQ</span>
<a name="l01186"></a><a class="code" href="mol_8h.shtml#c07acfbb082b04f5bea72998c8976b3c">01186</a> <span class="preprocessor"></span><span class="preprocessor">#define EQ(a,b) (!strcmp((a), (b)))</span>
<a name="l01187"></a>01187 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01188"></a>01188 <span class="preprocessor"></span>
<a name="l01189"></a>01189 <span class="preprocessor">#ifndef EQn</span>
<a name="l01190"></a><a class="code" href="mol_8h.shtml#ff7047a291906910f63dcfc17c88ed12">01190</a> <span class="preprocessor"></span><span class="preprocessor">#define EQn(a,b,n) (!strncmp((a), (b), (n)))</span>
<a name="l01191"></a>01191 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01192"></a>01192 <span class="preprocessor"></span>
<a name="l01193"></a>01193 <span class="preprocessor">#ifndef SQUARE</span>
<a name="l01194"></a><a class="code" href="mol_8h.shtml#a1cf70a99e21bc2032e8867c6cafbb43">01194</a> <span class="preprocessor"></span><span class="preprocessor">#define SQUARE(x) ((x)*(x))</span>
<a name="l01195"></a>01195 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01196"></a>01196 <span class="preprocessor"></span>
<a name="l01197"></a>01197 <span class="preprocessor">#ifndef IsUnsatType</span>
<a name="l01198"></a><a class="code" href="mol_8h.shtml#e7364e14af885f05220a63486ca6d516">01198</a> <span class="preprocessor"></span><span class="preprocessor">#define IsUnsatType(x)  (EQ(x,"Car") || EQ(x,"C2") || EQ(x,"Sox") || EQ(x,"Sac") || EQ(x,"Pac") || EQ(x,"So2"))</span>
<a name="l01199"></a>01199 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l01200"></a>01200 <span class="preprocessor"></span>
<a name="l01201"></a>01201 <span class="preprocessor">#ifndef __KCC</span>
<a name="l01202"></a>01202 <span class="preprocessor"></span><span class="keyword">extern</span> <span class="stringliteral">"C"</span>
<a name="l01203"></a>01203 {
<a name="l01204"></a>01204     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#8aa7959b427e1c630f14732c2ad642c8">get_rmat</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l01205"></a>01205     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#7e02cd2874a2a4826c8587da507f62ef">ob_make_rmat</a>(<span class="keywordtype">double</span> mat[3][3],<span class="keywordtype">double</span> rmat[9]);
<a name="l01206"></a>01206     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#594933a93529376dbae80405cf23afa8">qtrfit</a> (<span class="keywordtype">double</span> *r,<span class="keywordtype">double</span> *f,<span class="keywordtype">int</span> size,<span class="keywordtype">double</span> u[3][3]);
<a name="l01207"></a>01207     OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l01208"></a>01208 }
<a name="l01209"></a>01209 <span class="preprocessor">#else</span>
<a name="l01210"></a>01210 <span class="preprocessor"></span>OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#8aa7959b427e1c630f14732c2ad642c8">get_rmat</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l01211"></a>01211 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#7e02cd2874a2a4826c8587da507f62ef">ob_make_rmat</a>(<span class="keywordtype">double</span> mat[3][3],<span class="keywordtype">double</span> rmat[9]);
<a name="l01212"></a>01212 OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#594933a93529376dbae80405cf23afa8">qtrfit</a> (<span class="keywordtype">double</span> *r,<span class="keywordtype">double</span> *f,<span class="keywordtype">int</span> size,<span class="keywordtype">double</span> u[3][3]);
<a name="l01213"></a>01213 OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l01214"></a>01214 <span class="preprocessor">#endif // __KCC</span>
<a name="l01215"></a>01215 <span class="preprocessor"></span>
<a name="l01216"></a>01216 } <span class="comment">// end namespace OpenBabel</span>
<a name="l01217"></a>01217 
<a name="l01218"></a>01218 <span class="preprocessor">#endif // OB_MOL_H</span>
<a name="l01219"></a>01219 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:01 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
