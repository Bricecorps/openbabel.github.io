<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: rotor.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="dir_c2f68d9a8fd140e5f30854dfa045b294.shtml">src</a></div>
<h1>rotor.h</h1><a href="rotor_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">rotor.h - Rotate torsional according to rotor rules.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2000 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_ROTOR_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_ROTOR_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include "<a class="code" href="parsmart_8h.shtml">parsmart.h</a>"</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include "<a class="code" href="typer_8h.shtml">typer.h</a>"</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="keyword">namespace </span>OpenBabel
<a name="l00027"></a>00027 {
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="keyword">class </span>OBRotor;
<a name="l00030"></a>00030 <span class="keyword">class </span>OBRotorList;
<a name="l00031"></a>00031 <span class="keyword">class </span>OBRotorRule;
<a name="l00032"></a>00032 <span class="keyword">class </span>OBRotorRules;
<a name="l00033"></a>00033 
<a name="l00040"></a><a class="code" href="classOpenBabel_1_1OBRotorRule.shtml">00040</a> <span class="keyword">class </span>OBAPI OBRotorRule
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042     <span class="keywordtype">int</span>              _ref[4];
<a name="l00043"></a>00043     <span class="keywordtype">double</span>            _delta;
<a name="l00044"></a>00044     std::string           _s;
<a name="l00045"></a>00045     <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>* _sp;
<a name="l00046"></a>00046     std::vector&lt;double&gt;    _vals;
<a name="l00047"></a>00047 <span class="keyword">public</span>:
<a name="l00048"></a>00048 
<a name="l00049"></a><a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#c65f277d7001f0b88bfeb47c25490995">00049</a>     OBRotorRule(<span class="keywordtype">char</span> *buffer,<span class="keywordtype">int</span> ref[4],std::vector&lt;double&gt; &amp;vals,<span class="keywordtype">double</span> d):
<a name="l00050"></a>00050        _delta(d), _s(buffer), _vals(vals)
<a name="l00051"></a>00051     {
<a name="l00052"></a>00052         _sp = <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>;
<a name="l00053"></a>00053         _sp-&gt;Init(buffer);
<a name="l00054"></a>00054         memcpy(_ref,ref,<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)*4);
<a name="l00055"></a>00055     }
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#236044823d65dffe4868c831e45a157b">00056</a>     ~OBRotorRule()
<a name="l00057"></a>00057     {
<a name="l00058"></a>00058         <span class="keywordflow">if</span> (_sp)
<a name="l00059"></a>00059         {
<a name="l00060"></a>00060             <span class="keyword">delete</span> _sp;
<a name="l00061"></a>00061             _sp = NULL;
<a name="l00062"></a>00062         }
<a name="l00063"></a>00063     }
<a name="l00064"></a>00064 
<a name="l00065"></a><a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#9dcb9b43a3d0fa9003d4c1c9d921f6b2">00065</a>     <span class="keywordtype">bool</span>    IsValid()    {        <span class="keywordflow">return</span>(_sp-&gt;IsValid());       }
<a name="l00066"></a><a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#6583697916569d12c1a113b4ad4dbcc2">00066</a>     <span class="keywordtype">void</span>    GetReferenceAtoms(<span class="keywordtype">int</span> ref[4]) { memcpy(ref,_ref,<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)*4); }
<a name="l00067"></a><a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#800aee2a9873012ac7e2a1bcedd5c6ba">00067</a>     <span class="keywordtype">void</span>    SetDelta(<span class="keywordtype">double</span> d)    {       _delta = d;           }
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#baa1b786f36fb9bc98b5c46e74425056">00068</a>     <span class="keywordtype">double</span>  GetDelta()            {       <span class="keywordflow">return</span>(_delta);       }
<a name="l00069"></a><a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#84366a387431ba9c8ed2f3813e60badd">00069</a>     std::string  &amp;GetSmartsString(){      <span class="keywordflow">return</span>(_s);           }
<a name="l00070"></a><a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#111e26305dbd8f7c211cc259dff440e7">00070</a>     std::vector&lt;double&gt;   &amp;GetTorsionVals()    { <span class="keywordflow">return</span>(_vals); }
<a name="l00071"></a><a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#1b97208b08b2495efa0a4484b4d61938">00071</a>     <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> *GetSmartsPattern() {  <span class="keywordflow">return</span>(_sp);         }
<a name="l00072"></a>00072 };
<a name="l00073"></a>00073 
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1OBRotorRules.shtml">00075</a> <span class="keyword">class </span>OBAPI OBRotorRules : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml">OBGlobalDataBase</a>
<a name="l00076"></a>00076 {
<a name="l00077"></a>00077     <span class="keywordtype">bool</span>                 _quiet;
<a name="l00078"></a>00078     std::vector&lt;OBRotorRule*&gt; _vr;
<a name="l00079"></a>00079     std::vector&lt;double&gt;        _sp3sp3;
<a name="l00080"></a>00080     std::vector&lt;double&gt;        _sp3sp2;
<a name="l00081"></a>00081     std::vector&lt;double&gt;        _sp2sp2;
<a name="l00082"></a>00082 <span class="keyword">public</span>:
<a name="l00083"></a>00083     OBRotorRules();
<a name="l00084"></a>00084     ~OBRotorRules();
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     <span class="keywordtype">void</span> ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*);
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#93721b9b970ca9a8160f7b831ae7e9d4">00088</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize()                 { <span class="keywordflow">return</span> _vr.size();}
<a name="l00089"></a>00089 
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#deb3abe4bd6c3443362068379a6b665e">00091</a>     <span class="keywordtype">void</span> SetFilename(std::string &amp;s)       { _filename = s;    }
<a name="l00092"></a>00092 
<a name="l00093"></a>00093     <span class="keywordtype">void</span> GetRotorIncrements(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;,<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*,<span class="keywordtype">int</span> [4],std::vector&lt;double&gt;&amp;,<span class="keywordtype">double</span> &amp;delta);
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#3bf46031273468cc23720df1c59d3e85">00094</a>     <span class="keywordtype">void</span> Quiet()                           { _quiet=<span class="keyword">true</span>;      }
<a name="l00095"></a>00095 };
<a name="l00096"></a>00096 
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml">00098</a> <span class="keyword">class </span>OBAPI OBRotor
<a name="l00099"></a>00099 {
<a name="l00100"></a>00100     <span class="keywordtype">int</span> _idx,_ref[4];
<a name="l00101"></a>00101     <span class="keywordtype">int</span> *_rotatoms,_size,_numcoords;
<a name="l00102"></a>00102     <span class="keywordtype">double</span> _delta;
<a name="l00103"></a>00103     <span class="keywordtype">double</span> _imag,_refang;
<a name="l00104"></a>00104     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *_bond;
<a name="l00105"></a>00105     std::vector&lt;int&gt; _torsion;
<a name="l00106"></a>00106     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> _fixedatoms,_evalatoms;
<a name="l00107"></a>00107     std::vector&lt;double&gt; _res;  
<a name="l00108"></a>00108     std::vector&lt;double&gt; _invmag;
<a name="l00109"></a>00109     std::vector&lt;std::vector&lt;double&gt; &gt; _sn,_cs,_t;
<a name="l00110"></a>00110 <span class="keyword">public</span>:
<a name="l00111"></a>00111     OBRotor();
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#6a1a300dca75a2089732a7a66f7e1234">00112</a>     ~OBRotor()
<a name="l00113"></a>00113     {
<a name="l00114"></a>00114         <span class="keywordflow">if</span> (_rotatoms)
<a name="l00115"></a>00115             <span class="keyword">delete</span> [] _rotatoms;
<a name="l00116"></a>00116     }
<a name="l00117"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#f40990b9bd3d70d30e8ce7cdda1ad56f">00117</a>     <span class="keywordtype">int</span>     Size()
<a name="l00118"></a>00118     {
<a name="l00119"></a>00119         <span class="keywordflow">return</span>((_res.empty())?0:_res.size());
<a name="l00120"></a>00120     }
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#141f8abda99de827deec22f935dc9e31">00121</a>     <span class="keywordtype">int</span>     GetIdx()<span class="keyword"> const</span>
<a name="l00122"></a>00122 <span class="keyword">    </span>{
<a name="l00123"></a>00123         <span class="keywordflow">return</span>(_idx);
<a name="l00124"></a>00124     }
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#4e82f80e2cd8faf3bce17c464ab1672c">00125</a>     <span class="keywordtype">void</span>    SetNumCoords(<span class="keywordtype">int</span> nc)
<a name="l00126"></a>00126     {
<a name="l00127"></a>00127         _numcoords = nc;
<a name="l00128"></a>00128     }
<a name="l00129"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#75c73979e73fb44e48424150fa0208c7">00129</a>     <span class="keywordtype">void</span>    SetBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)
<a name="l00130"></a>00130     {
<a name="l00131"></a>00131         _bond = bond;
<a name="l00132"></a>00132     }
<a name="l00133"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#33bdb71641015f05a632ffaf76e7672a">00133</a>     <span class="keywordtype">void</span>    SetEvalAtoms(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)
<a name="l00134"></a>00134     {
<a name="l00135"></a>00135         _evalatoms = bv;
<a name="l00136"></a>00136     }
<a name="l00137"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#005953343bc86b4ef1300fc2fb00303c">00137</a>     <span class="keywordtype">void</span>    SetDihedralAtoms(std::vector&lt;int&gt; &amp;vi)
<a name="l00138"></a>00138     {
<a name="l00139"></a>00139         _torsion = vi;
<a name="l00140"></a>00140     }
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#800aee2a9873012ac7e2a1bcedd5c6ba">00141</a>     <span class="keywordtype">void</span>    SetDelta(<span class="keywordtype">double</span> d)
<a name="l00142"></a>00142     {
<a name="l00143"></a>00143         _delta = d;
<a name="l00144"></a>00144     }
<a name="l00145"></a>00145     <span class="keywordtype">void</span>    SetDihedralAtoms(<span class="keywordtype">int</span> ref[4]);
<a name="l00146"></a>00146     <span class="keywordtype">void</span>    SetRotAtoms(std::vector&lt;int&gt;&amp;);
<a name="l00147"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#bf3ad061350bb625d0343571eaa4d61e">00147</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetToAngle(<span class="keywordtype">double</span> *c,<span class="keywordtype">double</span> setang)
<a name="l00148"></a>00148     {
<a name="l00149"></a>00149         <span class="keywordtype">double</span> dx,dy,dz,sn,cs,t,ang,mag;
<a name="l00150"></a>00150         ang = setang - CalcTorsion(c);
<a name="l00151"></a>00151         <span class="keywordflow">if</span> (fabs(ang) &lt; 1e-5)
<a name="l00152"></a>00152             <span class="keywordflow">return</span>;
<a name="l00153"></a>00153 
<a name="l00154"></a>00154         sn = sin(ang);
<a name="l00155"></a>00155         cs = cos(ang);
<a name="l00156"></a>00156         t = 1 - cs;
<a name="l00157"></a>00157         dx = c[_torsion[1]]   - c[_torsion[2]];
<a name="l00158"></a>00158         dy = c[_torsion[1]+1] - c[_torsion[2]+1];
<a name="l00159"></a>00159         dz = c[_torsion[1]+2] - c[_torsion[2]+2];
<a name="l00160"></a>00160         mag = sqrt(<a class="code" href="matrix3x3_8cpp.shtml#a1cf70a99e21bc2032e8867c6cafbb43">SQUARE</a>(dx) + <a class="code" href="matrix3x3_8cpp.shtml#a1cf70a99e21bc2032e8867c6cafbb43">SQUARE</a>(dy) + <a class="code" href="matrix3x3_8cpp.shtml#a1cf70a99e21bc2032e8867c6cafbb43">SQUARE</a>(dz));
<a name="l00161"></a>00161         Set(c,sn,cs,t,1.0/mag);
<a name="l00162"></a>00162     }
<a name="l00163"></a>00163     <span class="keywordtype">void</span>    SetRotor(<span class="keywordtype">double</span> *,<span class="keywordtype">int</span>,<span class="keywordtype">int</span> prev=-1);
<a name="l00164"></a>00164     <span class="keywordtype">void</span>    Set(<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00165"></a>00165     <span class="keywordtype">void</span>    Precompute(<span class="keywordtype">double</span>*);
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#6ad9188e396017a59a4c29ed1635d66f">00166</a>     <span class="keywordtype">void</span>    Set(<span class="keywordtype">double</span> *c,<span class="keywordtype">int</span> ridx,<span class="keywordtype">int</span> cidx)
<a name="l00167"></a>00167     {
<a name="l00168"></a>00168         Set(c,_sn[cidx][ridx],_cs[cidx][ridx],_t[cidx][ridx],_invmag[cidx]);
<a name="l00169"></a>00169     }
<a name="l00170"></a>00170     <span class="keywordtype">void</span>    Set(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>,<span class="keywordtype">double</span>,<span class="keywordtype">double</span>,<span class="keywordtype">double</span>);
<a name="l00171"></a>00171     <span class="keywordtype">void</span>    Precalc(std::vector&lt;double*&gt;&amp;);
<a name="l00172"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#b994a975e39f5c62288f4f972b6f90c9">00172</a>     <span class="keywordtype">void</span>    SetIdx(<span class="keywordtype">int</span> idx)
<a name="l00173"></a>00173     {
<a name="l00174"></a>00174         _idx = idx;
<a name="l00175"></a>00175     }
<a name="l00176"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#530a0fd1a1e312d489b367ac73e56bb7">00176</a>     <span class="keywordtype">void</span>    SetFixedAtoms(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)
<a name="l00177"></a>00177     {
<a name="l00178"></a>00178         _fixedatoms = bv;
<a name="l00179"></a>00179     }
<a name="l00180"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#3928d417eca1dadd7ca997e9e553d4c5">00180</a>     <span class="keywordtype">void</span>    SetTorsionValues(std::vector&lt;double&gt; &amp;tmp)
<a name="l00181"></a>00181     {
<a name="l00182"></a>00182         _res = tmp;
<a name="l00183"></a>00183     }
<a name="l00184"></a>00184     <span class="keywordtype">void</span>    RemoveSymTorsionValues(<span class="keywordtype">int</span>);
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#44db679688b64e9032ea9bf6def76315">00185</a>     <span class="keywordtype">void</span>    GetDihedralAtoms(<span class="keywordtype">int</span> ref[4])
<a name="l00186"></a>00186     {
<a name="l00187"></a>00187         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i=0;i&lt;4;i++)
<a name="l00188"></a>00188             ref[i]=_ref[i];
<a name="l00189"></a>00189     }
<a name="l00190"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#a68d318d4f18049ca83fbbe8d1c5fa90">00190</a>     <span class="keywordtype">void</span>    *GetRotAtoms()
<a name="l00191"></a>00191     {
<a name="l00192"></a>00192         <span class="keywordflow">return</span>(_rotatoms);
<a name="l00193"></a>00193     }
<a name="l00194"></a>00194     <span class="keywordtype">double</span>   CalcTorsion(<span class="keywordtype">double</span> *);
<a name="l00195"></a>00195     <span class="keywordtype">double</span>   CalcBondLength(<span class="keywordtype">double</span>*);
<a name="l00196"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#baa1b786f36fb9bc98b5c46e74425056">00196</a>     <span class="keywordtype">double</span>   GetDelta()
<a name="l00197"></a>00197     {
<a name="l00198"></a>00198         <span class="keywordflow">return</span>(_delta);
<a name="l00199"></a>00199     }
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#1b723190c734e234d87398f8eb245a8e">00200</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *GetBond()
<a name="l00201"></a>00201     {
<a name="l00202"></a>00202         <span class="keywordflow">return</span>(_bond);
<a name="l00203"></a>00203     }
<a name="l00204"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#75d6cacf7c1783272f74546387716902">00204</a>     std::vector&lt;int&gt; &amp;GetDihedralAtoms()
<a name="l00205"></a>00205     {
<a name="l00206"></a>00206         <span class="keywordflow">return</span>(_torsion);
<a name="l00207"></a>00207     }
<a name="l00208"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#8feebfa38afe9888e7a50e421b8f5243">00208</a>     std::vector&lt;double&gt; &amp;GetResolution()
<a name="l00209"></a>00209     {
<a name="l00210"></a>00210         <span class="keywordflow">return</span>(_res);
<a name="l00211"></a>00211     }
<a name="l00212"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#06d5fdac08688bdff198a92c78bdeb69">00212</a>     std::vector&lt;double&gt;::iterator BeginTorIncrement()
<a name="l00213"></a>00213     {
<a name="l00214"></a>00214         <span class="keywordflow">return</span>(_res.begin());
<a name="l00215"></a>00215     }
<a name="l00216"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#c5857c1e09978240624038b2c6352dcc">00216</a>     std::vector&lt;double&gt;::iterator EndTorIncrement()
<a name="l00217"></a>00217     {
<a name="l00218"></a>00218         <span class="keywordflow">return</span>(_res.end());
<a name="l00219"></a>00219     }
<a name="l00220"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#b690ce98b2f06352f9079eeae94da3c4">00220</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;GetEvalAtoms()
<a name="l00221"></a>00221     {
<a name="l00222"></a>00222         <span class="keywordflow">return</span>(_evalatoms);
<a name="l00223"></a>00223     }
<a name="l00224"></a><a class="code" href="classOpenBabel_1_1OBRotor.shtml#937745b1178a21d8b223992d16d7d50a">00224</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;GetFixedAtoms()
<a name="l00225"></a>00225     {
<a name="l00226"></a>00226         <span class="keywordflow">return</span>(_fixedatoms);
<a name="l00227"></a>00227     }
<a name="l00228"></a>00228 };
<a name="l00229"></a>00229 
<a name="l00231"></a><a class="code" href="classOpenBabel_1_1OBRotorList.shtml">00231</a> <span class="keyword">class </span>OBAPI OBRotorList
<a name="l00232"></a>00232 {
<a name="l00233"></a>00233     <span class="keywordtype">bool</span> _quiet,_removesym;
<a name="l00234"></a>00234     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> _fix;
<a name="l00235"></a>00235     OBRotorRules _rr;
<a name="l00236"></a>00236     std::vector&lt;int&gt; _dffv;         
<a name="l00237"></a>00237     std::vector&lt;OBRotor*&gt; _rotor;
<a name="l00238"></a>00238     std::vector&lt;std::pair&lt;OBSmartsPattern*,std::pair&lt;int,int&gt; &gt; &gt; _vsym2;
<a name="l00239"></a>00239     std::vector&lt;std::pair&lt;OBSmartsPattern*,std::pair&lt;int,int&gt; &gt; &gt; _vsym3;
<a name="l00240"></a>00240 <span class="keyword">public</span>:
<a name="l00241"></a>00241     OBRotorList();
<a name="l00242"></a>00242     ~OBRotorList();
<a name="l00243"></a>00243 
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBRotorList.shtml#f40990b9bd3d70d30e8ce7cdda1ad56f">00244</a>     <span class="keywordtype">int</span>    Size()
<a name="l00245"></a>00245     {
<a name="l00246"></a>00246         <span class="keywordflow">return</span>((_rotor.empty()) ? 0: _rotor.size());
<a name="l00247"></a>00247     }
<a name="l00248"></a><a class="code" href="classOpenBabel_1_1OBRotorList.shtml#ddb143a5ae2f64420fa692a14489288b">00248</a>     <span class="keywordtype">void</span>   Init(std::string &amp;fname)
<a name="l00249"></a>00249     {
<a name="l00250"></a>00250         _rr.SetFilename(fname);
<a name="l00251"></a>00251         _rr.Init();
<a name="l00252"></a>00252     }
<a name="l00253"></a><a class="code" href="classOpenBabel_1_1OBRotorList.shtml#aabb93aa1f24c335405418bfa3ead95b">00253</a>     <span class="keywordtype">void</span>   SetFixAtoms(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;fix)
<a name="l00254"></a>00254     {
<a name="l00255"></a>00255         _fix = fix;
<a name="l00256"></a>00256     }
<a name="l00257"></a><a class="code" href="classOpenBabel_1_1OBRotorList.shtml#15266fb4e5ef334d0de47b203d420f22">00257</a>     <span class="keywordtype">void</span>   SetQuiet()
<a name="l00258"></a>00258     {
<a name="l00259"></a>00259         _quiet=<span class="keyword">true</span>;
<a name="l00260"></a>00260         _rr.Quiet();
<a name="l00261"></a>00261     }
<a name="l00262"></a><a class="code" href="classOpenBabel_1_1OBRotorList.shtml#dbf9e2936af60825abb7f7812ba8fae8">00262</a>     <span class="keywordtype">void</span>   IgnoreSymmetryRemoval()
<a name="l00263"></a>00263     {
<a name="l00264"></a>00264         _removesym=<span class="keyword">false</span>;
<a name="l00265"></a>00265     }
<a name="l00266"></a>00266     <span class="keywordtype">void</span>   Clear();
<a name="l00267"></a>00267     <span class="keywordtype">void</span>   RemoveSymVals(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);
<a name="l00268"></a>00268     <span class="keywordtype">void</span>   SetRotAtomsByFix(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);
<a name="l00269"></a>00269     <span class="keywordtype">bool</span>   SetRotAtoms(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);
<a name="l00270"></a>00270     <span class="keywordtype">bool</span>   Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00271"></a>00271     <span class="keywordtype">bool</span>   FindRotors(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00272"></a>00272     <span class="keywordtype">bool</span>   IdentifyEvalAtoms(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00273"></a>00273     <span class="keywordtype">bool</span>   SetEvalAtoms(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);
<a name="l00274"></a>00274     <span class="keywordtype">bool</span>   AssignTorVals(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);
<a name="l00275"></a>00275     <span class="keywordtype">bool</span>   IsFixedBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*);
<a name="l00276"></a><a class="code" href="classOpenBabel_1_1OBRotorList.shtml#cb5c0375aa5f28091792762a5f66f23e">00276</a>     <span class="keywordtype">bool</span>   HasFixedAtoms()
<a name="l00277"></a>00277     {
<a name="l00278"></a>00278         <span class="keywordflow">return</span>(!_fix.Empty());
<a name="l00279"></a>00279     }
<a name="l00280"></a><a class="code" href="classOpenBabel_1_1OBRotorList.shtml#1e6f5fcea52519aa64bf03169af95f2c">00280</a>     OBRotor *BeginRotor(std::vector&lt;OBRotor*&gt;::iterator &amp;i)
<a name="l00281"></a>00281     {
<a name="l00282"></a>00282         i = _rotor.begin();
<a name="l00283"></a>00283         <span class="keywordflow">return</span>((i ==_rotor.end()) ? NULL:*i);
<a name="l00284"></a>00284     }
<a name="l00285"></a><a class="code" href="classOpenBabel_1_1OBRotorList.shtml#eaf2f811addcad0ca4daacf77cebbdd3">00285</a>     OBRotor *NextRotor(std::vector&lt;OBRotor*&gt;::iterator &amp;i)
<a name="l00286"></a>00286     {
<a name="l00287"></a>00287         i++;
<a name="l00288"></a>00288         <span class="keywordflow">return</span>((i ==_rotor.end()) ? NULL:*i);
<a name="l00289"></a>00289     }
<a name="l00290"></a><a class="code" href="classOpenBabel_1_1OBRotorList.shtml#f26bff8bc933f7519134cdbf32c6f38b">00290</a>     std::vector&lt;OBRotor*&gt;::iterator BeginRotors()
<a name="l00291"></a>00291     {
<a name="l00292"></a>00292         <span class="keywordflow">return</span>(_rotor.begin());
<a name="l00293"></a>00293     }
<a name="l00294"></a><a class="code" href="classOpenBabel_1_1OBRotorList.shtml#ea0621e9bc39f2d7560cbd3fb89b4151">00294</a>     std::vector&lt;OBRotor*&gt;::iterator EndRotors()
<a name="l00295"></a>00295     {
<a name="l00296"></a>00296         <span class="keywordflow">return</span>(_rotor.end());
<a name="l00297"></a>00297     }
<a name="l00298"></a>00298 };
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00301"></a>00301 
<a name="l00302"></a>00302 <span class="preprocessor">#ifndef SQUARE</span>
<a name="l00303"></a>00303 <span class="preprocessor"></span><span class="preprocessor">#define SQUARE(x) ((x)*(x))</span>
<a name="l00304"></a>00304 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00305"></a>00305 <span class="preprocessor"></span>
<a name="l00306"></a>00306 <span class="preprocessor">#endif // OB_ROTOR_H</span>
<a name="l00307"></a>00307 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:01 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
