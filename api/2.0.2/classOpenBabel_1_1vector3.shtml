<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: vector3 Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li id="current"><a href="classes.shtml"><span>Classes</span></a></li>
    <li><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="dirs.shtml"><span>Directories</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
    <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
    <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
    <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
  </ul></div>
<div class="nav">
<a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a></div>
<h1>vector3 Class Reference</h1><!-- doxytag: class="OpenBabel::vector3" -->Represents a vector in the 3-dimensional real space.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="vector3_8h-source.shtml">vector3.h</a>&gt;</code>
<p>
<a href="classOpenBabel_1_1vector3-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#6e19b23b3b8240595d9fe6e09417e41c">vector3</a> (const double x=0.0, const double y=0.0, const double z=0.0)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Constructor.  <a href="#6e19b23b3b8240595d9fe6e09417e41c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#be84fe9749e73b1027baddb505fa189a">vector3</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy Constructor.  <a href="#be84fe9749e73b1027baddb505fa189a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ccd2f2de5a517db0f7d79fc1c144ffcf">Set</a> (const double x, const double y, const double z)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">set x,y and z-component of a vector  <a href="#ccd2f2de5a517db0f7d79fc1c144ffcf"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#bfcb3c965a12bd0385f1fe1db3f7d3ac">Set</a> (const double *c)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">set x,y and z-component of a vector from c[0]..c[2]  <a href="#bfcb3c965a12bd0385f1fe1db3f7d3ac"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#57c5b62039552791d5118cc6584f3420">SetX</a> (const double x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">access function to get the x-coordinate of the vector  <a href="#57c5b62039552791d5118cc6584f3420"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#58c383ea7ada0f8728aea3d2bdabb482">SetY</a> (const double y)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">access function to get the y-coordinate of the vector  <a href="#58c383ea7ada0f8728aea3d2bdabb482"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a14ff17b43720fe0d79d95cc5b9fd04d">SetZ</a> (const double z)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">access function to get the z-coordinate of the vector  <a href="#a14ff17b43720fe0d79d95cc5b9fd04d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#9345053a16ce83e130dc098fddf9af7a">Get</a> (double *c)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">set c[0]..c[2] to the components of the vector  <a href="#9345053a16ce83e130dc098fddf9af7a"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#999170ff336c4ab51d18bc9b41bc5ffa">operator[]</a> (unsigned int i)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">access function  <a href="#999170ff336c4ab51d18bc9b41bc5ffa"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#d2eee719d3706b71968f894c1179f4bb">operator=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">assignment  <a href="#d2eee719d3706b71968f894c1179f4bb"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#e0541be714a6305dd3295655eea746d9">operator+=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#c4b4980ccea5aa5184928ce40cf1acee">operator-=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#506884b50b92a33e92029b43f9b75bc9">operator+=</a> (const double *f)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#322635480250ba0c08aa47a125eda3dd">operator-=</a> (const double *f)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#80e5f1c9af1aa63dfa46b7559bae27bc">operator *=</a> (const double &amp;c)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#b5a7b18eeff279e5d850a9075d09f8a5">operator/=</a> (const double &amp;c)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#98ac93c148a83575867a62d9acc909d9">operator *=</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">multiplication of matrix and vector  <a href="#98ac93c148a83575867a62d9acc909d9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#2bc2c0a418a09746f3cd93ae5a729233">randomUnitVector</a> (<a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> *oeRand=0L)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">create a random unit vector  <a href="#2bc2c0a418a09746f3cd93ae5a729233"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#8d0a82a515f8373ee3f174a22f775397">normalize</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">scales a vector to give it length one.  <a href="#8d0a82a515f8373ee3f174a22f775397"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#80401d480f15e1418a3274a2b2b51649">length</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">vector length  <a href="#80401d480f15e1418a3274a2b2b51649"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#47f7e7ecf0a38bc7ef50f21d90ba349b">length_2</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">vector length squared  <a href="#47f7e7ecf0a38bc7ef50f21d90ba349b"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#833e1cf314b7b7a5537b2b6a56fee6a5">x</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">access function to get the x-coordinate of the vector  <a href="#833e1cf314b7b7a5537b2b6a56fee6a5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ca424ddaf2902c1cde483f37813d4278">y</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">access function to get the y-coordinate of the vector  <a href="#ca424ddaf2902c1cde483f37813d4278"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#e7bc7213001e326be4d4eb2d8a035c34">z</a> () const</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">access function to get the z-coordinate of the vector  <a href="#e7bc7213001e326be4d4eb2d8a035c34"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#f0bb15d3c00f3ab71314513fa41fa548">distSq</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;vv) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">square to the distance between *this and vv  <a href="#f0bb15d3c00f3ab71314513fa41fa548"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#6ac2f8155b9bf80994ed344a68a07d42">createOrthoVector</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">creates a vector of length one, orthogonal to *this.  <a href="#6ac2f8155b9bf80994ed344a68a07d42"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Friends</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#2d6c5509e389b60a0dfefeb7c19a6bbe">operator&lt;&lt;</a> (std::ostream &amp;, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">prints a representation of the vector as a row vector of the form "&lt;0.1,1,2&gt;"  <a href="#2d6c5509e389b60a0dfefeb7c19a6bbe"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#fd611316e96a61cf3d827a55c58190c8">operator==</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#3d303bec5210d2e1c02065a1804238bb">operator!=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#15302e51ba109c9ddf4ab986ecc4282c">operator+</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">vector addition  <a href="#15302e51ba109c9ddf4ab986ecc4282c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#0d72ccfb9c9bdb73d27b936a3ec6c63c">operator-</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">vector subtraction  <a href="#0d72ccfb9c9bdb73d27b936a3ec6c63c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#b678b997bba1423f61d419fb87656375">operator-</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">unary minus  <a href="#b678b997bba1423f61d419fb87656375"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#441910ead31c9d8eb317998383617030">operator *</a> (const double &amp;c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">multiplication with a scalar  <a href="#441910ead31c9d8eb317998383617030"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#7ba7efe83a25e501b6f72607aa634120">operator *</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, const double &amp;c)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">multiplication with a scalar  <a href="#7ba7efe83a25e501b6f72607aa634120"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#0895f00aadb5c5a1fd0a89363e6f8b04">operator/</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, const double &amp;c)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">division by a scalar  <a href="#0895f00aadb5c5a1fd0a89363e6f8b04"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#8c74fe00127e56db56149be006fdbe0e">operator *</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">multiplication of matrix and vector  <a href="#8c74fe00127e56db56149be006fdbe0e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#720e641ab71492eeca5e1e8bfb0fe720">dot</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">dot product of two vectors  <a href="#720e641ab71492eeca5e1e8bfb0fe720"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#68dc2c35a1e58febaa9e13cd82e3a50f">cross</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">cross product of two vectors  <a href="#68dc2c35a1e58febaa9e13cd82e3a50f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#00e2879019f2fb0fc689a7e5cb5d2008">vectorAngle</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">calculate angle between vectors  <a href="#00e2879019f2fb0fc689a7e5cb5d2008"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#62d62b3487ca8969bdfbd7c434da564e">CalcTorsionAngle</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">calculate the torsion angle between vectors  <a href="#62d62b3487ca8969bdfbd7c434da564e"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Represents a vector in the 3-dimensional real space. 
<p>
The <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> class was designed to simplify operations with floating point coordinates. To this end many of the common operations have been overloaded for simplicity. Vector addition, subtraction, scalar multiplication, dot product, cross product, magnitude and a number of other utility functions are built in to the vector class. For a full description of the class member functions please consult the header file <a class="el" href="vector3_8h.shtml">vector3.h</a>. The following code demonstrates several of the functions of the vector class: <div class="fragment"><pre class="fragment"><a class="code" href="classOpenBabel_1_1vector3.shtml#6e19b23b3b8240595d9fe6e09417e41c">vector3</a> v1,v2,v3;
v1 = <a class="code" href="namespaceOpenBabel.shtml#a107deadee657e5c8402f1215dc6f647">VX</a>;
v2 = <a class="code" href="namespaceOpenBabel.shtml#4387b07aaaffe697c871025a292787e3">VY</a>;
v3 = <a class="code" href="classOpenBabel_1_1vector3.shtml#68dc2c35a1e58febaa9e13cd82e3a50f">cross</a>(v1,v2);
v3 *= 2.5;
v3.normalize();
</pre></div> 
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="6e19b23b3b8240595d9fe6e09417e41c"></a><!-- doxytag: member="OpenBabel::vector3::vector3" ref="6e19b23b3b8240595d9fe6e09417e41c" args="(const double x=0.0, const double y=0.0, const double z=0.0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>           </td>
          <td>(</td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>x</em> = <code>0.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>y</em> = <code>0.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>z</em> = <code>0.0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor. 
<p>

</div>
</div><p>
<a class="anchor" name="be84fe9749e73b1027baddb505fa189a"></a><!-- doxytag: member="OpenBabel::vector3::vector3" ref="be84fe9749e73b1027baddb505fa189a" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copy Constructor. 
<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="ccd2f2de5a517db0f7d79fc1c144ffcf"></a><!-- doxytag: member="OpenBabel::vector3::Set" ref="ccd2f2de5a517db0f7d79fc1c144ffcf" args="(const double x, const double y, const double z)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Set           </td>
          <td>(</td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>z</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
set x,y and z-component of a vector 
<p>

</div>
</div><p>
<a class="anchor" name="bfcb3c965a12bd0385f1fe1db3f7d3ac"></a><!-- doxytag: member="OpenBabel::vector3::Set" ref="bfcb3c965a12bd0385f1fe1db3f7d3ac" args="(const double *c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Set           </td>
          <td>(</td>
          <td class="paramtype">const double *&nbsp;</td>
          <td class="paramname"> <em>c</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
set x,y and z-component of a vector from c[0]..c[2] 
<p>

</div>
</div><p>
<a class="anchor" name="57c5b62039552791d5118cc6584f3420"></a><!-- doxytag: member="OpenBabel::vector3::SetX" ref="57c5b62039552791d5118cc6584f3420" args="(const double x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetX           </td>
          <td>(</td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>x</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
access function to get the x-coordinate of the vector 
<p>

</div>
</div><p>
<a class="anchor" name="58c383ea7ada0f8728aea3d2bdabb482"></a><!-- doxytag: member="OpenBabel::vector3::SetY" ref="58c383ea7ada0f8728aea3d2bdabb482" args="(const double y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetY           </td>
          <td>(</td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>y</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
access function to get the y-coordinate of the vector 
<p>

</div>
</div><p>
<a class="anchor" name="a14ff17b43720fe0d79d95cc5b9fd04d"></a><!-- doxytag: member="OpenBabel::vector3::SetZ" ref="a14ff17b43720fe0d79d95cc5b9fd04d" args="(const double z)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetZ           </td>
          <td>(</td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>z</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
access function to get the z-coordinate of the vector 
<p>

</div>
</div><p>
<a class="anchor" name="9345053a16ce83e130dc098fddf9af7a"></a><!-- doxytag: member="OpenBabel::vector3::Get" ref="9345053a16ce83e130dc098fddf9af7a" args="(double *c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Get           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>c</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
set c[0]..c[2] to the components of the vector 
<p>

</div>
</div><p>
<a class="anchor" name="999170ff336c4ab51d18bc9b41bc5ffa"></a><!-- doxytag: member="OpenBabel::vector3::operator[]" ref="999170ff336c4ab51d18bc9b41bc5ffa" args="(unsigned int i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double &amp; operator[]           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
access function 
<p>
This (slow) method allows to access the elements of the vector as if it were an array of doubles. If the index is &gt; 2, then a warning is printed, and the program is terminated via exit(-1). Otherwise, if i is 0, 1 or 2, then a reference to x, y or z is returned, respectively.<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>This method is primarily designed to facilitate the integration ('Open Babelization') of code that uses arrays of doubles rather than the vector class. Due to the error checks the method is of course very slow and should therefore be avoided in production code. </dd></dl>

</div>
</div><p>
<a class="anchor" name="d2eee719d3706b71968f894c1179f4bb"></a><!-- doxytag: member="OpenBabel::vector3::operator=" ref="d2eee719d3706b71968f894c1179f4bb" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
assignment 
<p>

</div>
</div><p>
<a class="anchor" name="e0541be714a6305dd3295655eea746d9"></a><!-- doxytag: member="OpenBabel::vector3::operator+=" ref="e0541be714a6305dd3295655eea746d9" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator+=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c4b4980ccea5aa5184928ce40cf1acee"></a><!-- doxytag: member="OpenBabel::vector3::operator-=" ref="c4b4980ccea5aa5184928ce40cf1acee" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator-=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="506884b50b92a33e92029b43f9b75bc9"></a><!-- doxytag: member="OpenBabel::vector3::operator+=" ref="506884b50b92a33e92029b43f9b75bc9" args="(const double *f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator+=           </td>
          <td>(</td>
          <td class="paramtype">const double *&nbsp;</td>
          <td class="paramname"> <em>f</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="322635480250ba0c08aa47a125eda3dd"></a><!-- doxytag: member="OpenBabel::vector3::operator-=" ref="322635480250ba0c08aa47a125eda3dd" args="(const double *f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator-=           </td>
          <td>(</td>
          <td class="paramtype">const double *&nbsp;</td>
          <td class="paramname"> <em>f</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="80e5f1c9af1aa63dfa46b7559bae27bc"></a><!-- doxytag: member="OpenBabel::vector3::operator *=" ref="80e5f1c9af1aa63dfa46b7559bae27bc" args="(const double &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator *=           </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b5a7b18eeff279e5d850a9075d09f8a5"></a><!-- doxytag: member="OpenBabel::vector3::operator/=" ref="b5a7b18eeff279e5d850a9075d09f8a5" args="(const double &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator/=           </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="98ac93c148a83575867a62d9acc909d9"></a><!-- doxytag: member="OpenBabel::vector3::operator *=" ref="98ac93c148a83575867a62d9acc909d9" args="(const matrix3x3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp; operator *=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>m</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
multiplication of matrix and vector 
<p>
calculates the product m*(*this) of the matrix m and the column vector represented by *this 
</div>
</div><p>
<a class="anchor" name="2bc2c0a418a09746f3cd93ae5a729233"></a><!-- doxytag: member="OpenBabel::vector3::randomUnitVector" ref="2bc2c0a418a09746f3cd93ae5a729233" args="(OBRandom *oeRand=0L)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void randomUnitVector           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> *&nbsp;</td>
          <td class="paramname"> <em>obRandP</em> = <code>0L</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
create a random unit vector 
<p>
replaces *this with a random unit vector, which is (supposed to be) uniformly distributed over the unit sphere. Uses the random number generator obRand, or uses the system number generator with a time seed if obRand == NULL.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obRandP</em>&nbsp;</td><td>random number generator to use, or 0L, if the system random number generator (with time seed) should be used </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="8d0a82a515f8373ee3f174a22f775397"></a><!-- doxytag: member="OpenBabel::vector3::normalize" ref="8d0a82a515f8373ee3f174a22f775397" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp; normalize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
scales a vector to give it length one. 
<p>
This method checks if the current vector has <a class="el" href="classOpenBabel_1_1vector3.shtml#80401d480f15e1418a3274a2b2b51649">length()</a> == 0.0. If so, *this remains unchanged. Otherwise, *this is scaled by 1.0/length().<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>If <a class="el" href="classOpenBabel_1_1vector3.shtml#80401d480f15e1418a3274a2b2b51649">length()</a> is very close to zero, but not == 0.0, this method may behave in unexpected ways and return almost random results; details may depend on your particular floating point implementation. The use of this method is therefore highly discouraged, unless you are certain that <a class="el" href="classOpenBabel_1_1vector3.shtml#80401d480f15e1418a3274a2b2b51649">length()</a> is in a reasonable range, away from 0.0 (Stefan Kebekus)</dd></dl>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000008">Deprecated:</a></b></dt><dd>This method will probably replaced by a safer algorithm in the future.</dd></dl>
<dl compact><dt><b><a class="el" href="todo.shtml#_todo000008">Todo:</a></b></dt><dd>Replace this method with a more fool-proof version.</dd></dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>a reference to *this </dd></dl>

</div>
</div><p>
<a class="anchor" name="80401d480f15e1418a3274a2b2b51649"></a><!-- doxytag: member="OpenBabel::vector3::length" ref="80401d480f15e1418a3274a2b2b51649" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double length           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
vector length 
<p>

</div>
</div><p>
<a class="anchor" name="47f7e7ecf0a38bc7ef50f21d90ba349b"></a><!-- doxytag: member="OpenBabel::vector3::length_2" ref="47f7e7ecf0a38bc7ef50f21d90ba349b" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double length_2           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
vector length squared 
<p>

</div>
</div><p>
<a class="anchor" name="833e1cf314b7b7a5537b2b6a56fee6a5"></a><!-- doxytag: member="OpenBabel::vector3::x" ref="833e1cf314b7b7a5537b2b6a56fee6a5" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double x           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
access function to get the x-coordinate of the vector 
<p>

</div>
</div><p>
<a class="anchor" name="ca424ddaf2902c1cde483f37813d4278"></a><!-- doxytag: member="OpenBabel::vector3::y" ref="ca424ddaf2902c1cde483f37813d4278" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double y           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
access function to get the y-coordinate of the vector 
<p>

</div>
</div><p>
<a class="anchor" name="e7bc7213001e326be4d4eb2d8a035c34"></a><!-- doxytag: member="OpenBabel::vector3::z" ref="e7bc7213001e326be4d4eb2d8a035c34" args="() const" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double z           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
access function to get the z-coordinate of the vector 
<p>

</div>
</div><p>
<a class="anchor" name="f0bb15d3c00f3ab71314513fa41fa548"></a><!-- doxytag: member="OpenBabel::vector3::distSq" ref="f0bb15d3c00f3ab71314513fa41fa548" args="(const vector3 &amp;vv) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double distSq           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>vv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
square to the distance between *this and vv 
<p>
equivalent to length_2(*this-vv) 
</div>
</div><p>
<a class="anchor" name="6ac2f8155b9bf80994ed344a68a07d42"></a><!-- doxytag: member="OpenBabel::vector3::createOrthoVector" ref="6ac2f8155b9bf80994ed344a68a07d42" args="(vector3 &amp;v) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void createOrthoVector           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>res</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
creates a vector of length one, orthogonal to *this. 
<p>
This method checks if the current vector *this is zero (i.e. if all entries == 0.0). If so, a warning message is printed, and the whole program is aborted with exit(0). Otherwise, a vector of length one is generated, which is orthogonal to *this, and stored in v. The resulting vector is not random.<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>If the entries of the *this (in particular the z-component) are very close to zero, but not == 0.0, this method may behave in unexpected ways and return almost random results; details may depend on your particular floating point implementation. The use of this method is therefore highly discouraged, unless you are certain that all components of this are in a reasonable range, away from 0.0 (Stefan Kebekus)</dd></dl>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000010">Deprecated:</a></b></dt><dd>This method will probably replaced by a safer algorithm in the future.</dd></dl>
<dl compact><dt><b><a class="el" href="todo.shtml#_todo000010">Todo:</a></b></dt><dd>Replace this method with a more fool-proof version that does not call exit()</dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>res</em>&nbsp;</td><td>a reference to a vector where the result will be stored </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr><h2>Friends And Related Function Documentation</h2>
<a class="anchor" name="2d6c5509e389b60a0dfefeb7c19a6bbe"></a><!-- doxytag: member="OpenBabel::vector3::operator&lt;&lt;" ref="2d6c5509e389b60a0dfefeb7c19a6bbe" args="(std::ostream &amp;, const vector3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt;           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>co</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
prints a representation of the vector as a row vector of the form "&lt;0.1,1,2&gt;" 
<p>

</div>
</div><p>
<a class="anchor" name="fd611316e96a61cf3d827a55c58190c8"></a><!-- doxytag: member="OpenBabel::vector3::operator==" ref="fd611316e96a61cf3d827a55c58190c8" args="(const vector3 &amp;, const vector3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int operator==           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="3d303bec5210d2e1c02065a1804238bb"></a><!-- doxytag: member="OpenBabel::vector3::operator!=" ref="3d303bec5210d2e1c02065a1804238bb" args="(const vector3 &amp;, const vector3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int operator!=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="15302e51ba109c9ddf4ab986ecc4282c"></a><!-- doxytag: member="OpenBabel::vector3::operator+" ref="15302e51ba109c9ddf4ab986ecc4282c" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> operator+           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
vector addition 
<p>

</div>
</div><p>
<a class="anchor" name="0d72ccfb9c9bdb73d27b936a3ec6c63c"></a><!-- doxytag: member="OpenBabel::vector3::operator-" ref="0d72ccfb9c9bdb73d27b936a3ec6c63c" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> operator-           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
vector subtraction 
<p>

</div>
</div><p>
<a class="anchor" name="b678b997bba1423f61d419fb87656375"></a><!-- doxytag: member="OpenBabel::vector3::operator-" ref="b678b997bba1423f61d419fb87656375" args="(const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> operator-           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
unary minus 
<p>

</div>
</div><p>
<a class="anchor" name="441910ead31c9d8eb317998383617030"></a><!-- doxytag: member="OpenBabel::vector3::operator *" ref="441910ead31c9d8eb317998383617030" args="(const double &amp;c, const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> operator *           </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
multiplication with a scalar 
<p>

</div>
</div><p>
<a class="anchor" name="7ba7efe83a25e501b6f72607aa634120"></a><!-- doxytag: member="OpenBabel::vector3::operator *" ref="7ba7efe83a25e501b6f72607aa634120" args="(const vector3 &amp;v, const double &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> operator *           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
multiplication with a scalar 
<p>

</div>
</div><p>
<a class="anchor" name="0895f00aadb5c5a1fd0a89363e6f8b04"></a><!-- doxytag: member="OpenBabel::vector3::operator/" ref="0895f00aadb5c5a1fd0a89363e6f8b04" args="(const vector3 &amp;v, const double &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> operator/           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
division by a scalar 
<p>

</div>
</div><p>
<a class="anchor" name="8c74fe00127e56db56149be006fdbe0e"></a><!-- doxytag: member="OpenBabel::vector3::operator *" ref="8c74fe00127e56db56149be006fdbe0e" args="(const matrix3x3 &amp;m, const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> operator *           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
multiplication of matrix and vector 
<p>
calculates the product m*v of the matrix m and the column vector represented by v 
</div>
</div><p>
<a class="anchor" name="720e641ab71492eeca5e1e8bfb0fe720"></a><!-- doxytag: member="OpenBabel::vector3::dot" ref="720e641ab71492eeca5e1e8bfb0fe720" args="(const vector3 &amp;, const vector3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double dot           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
dot product of two vectors 
<p>

</div>
</div><p>
<a class="anchor" name="68dc2c35a1e58febaa9e13cd82e3a50f"></a><!-- doxytag: member="OpenBabel::vector3::cross" ref="68dc2c35a1e58febaa9e13cd82e3a50f" args="(const vector3 &amp;, const vector3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> cross           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
cross product of two vectors 
<p>

</div>
</div><p>
<a class="anchor" name="00e2879019f2fb0fc689a7e5cb5d2008"></a><!-- doxytag: member="OpenBabel::vector3::vectorAngle" ref="00e2879019f2fb0fc689a7e5cb5d2008" args="(const vector3 &amp;v1, const vector3 &amp;v2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double vectorAngle           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
calculate angle between vectors 
<p>
This method calculates the angle between two vectors<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>If <a class="el" href="classOpenBabel_1_1vector3.shtml#80401d480f15e1418a3274a2b2b51649">length()</a> of any of the two vectors is == 0.0, this method will divide by zero. If the product of the <a class="el" href="classOpenBabel_1_1vector3.shtml#80401d480f15e1418a3274a2b2b51649">length()</a> of the two vectors is very close to 0.0, but not == 0.0, this method may behave in unexpected ways and return almost random results; details may depend on your particular floating point implementation. The use of this method is therefore highly discouraged, unless you are certain that the <a class="el" href="classOpenBabel_1_1vector3.shtml#80401d480f15e1418a3274a2b2b51649">length()</a>es are in a reasonable range, away from 0.0 (Stefan Kebekus)</dd></dl>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000009">Deprecated:</a></b></dt><dd>This method will probably replaced by a safer algorithm in the future.</dd></dl>
<dl compact><dt><b><a class="el" href="todo.shtml#_todo000009">Todo:</a></b></dt><dd>Replace this method with a more fool-proof version.</dd></dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the angle in degrees (0-360) </dd></dl>

</div>
</div><p>
<a class="anchor" name="62d62b3487ca8969bdfbd7c434da564e"></a><!-- doxytag: member="OpenBabel::vector3::CalcTorsionAngle" ref="62d62b3487ca8969bdfbd7c434da564e" args="(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double CalcTorsionAngle           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>d</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td width="100%"><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
calculate the torsion angle between vectors 
<p>
This function calculates the torsion angle of three vectors, represented by four points A--B--C--D, i.e. B and C are vertexes, but none of A--B, B--C, and C--D are colinear. A "torsion angle" is the amount of "twist" or torsion needed around the B--C axis to bring A--B into the same plane as B--C--D. The torsion is measured by "looking down" the vector B--C so that B is superimposed on C, then noting how far you'd have to rotate A--B to superimpose A over D. Angles are + in the anticlockwise direction. The operation is symmetrical in that if you reverse the image (look from C to B and rotate D over A), you get the same answer. 
</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="vector3_8h-source.shtml">vector3.h</a><li><a class="el" href="matrix3x3_8cpp.shtml">matrix3x3.cpp</a><li><a class="el" href="vector3_8cpp.shtml">vector3.cpp</a></ul>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/">Open Babel</a>, version 2.0.2.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2005, the <a href="http://openbabel.sourceforge.net/THANKS.shtml">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Nov 30 20:18:09 2006 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1.
</div>

</body>
</html>
