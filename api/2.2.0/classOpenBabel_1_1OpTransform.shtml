<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OpTransform Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OpTransform.shtml">OpTransform</a>
  </div>
</div>
<div class="contents">
<h1>OpTransform Class Reference</h1><!-- doxytag: class="OpenBabel::OpTransform" --><!-- doxytag: inherits="OpenBabel::OBOp" -->Applies molecular transforms (<a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml" title="SMARTS based structural modification (chemical transformation).">OBChemTsfm</a> class) read from a datafile.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="optransform_8h-source.shtml">openbabel/optransform.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for OpTransform:</div>
<div class="dynsection">
<p><center><img src="classOpenBabel_1_1OpTransform__inherit__graph.png" border="0" usemap="#OpTransform__inherit__map" alt="Inheritance graph"></center>
<map name="OpTransform__inherit__map">
<area shape="rect" href="classOpenBabel_1_1OBOp.shtml" title="Operations to modify molecules before output." alt="" coords="27,80,85,107"><area shape="rect" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime." alt="" coords="16,6,96,32"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center></div>

<p>
<a href="classOpenBabel_1_1OpTransform-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef const std::map<br>
&lt; std::string, std::string &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBOp.shtml#4e98002937e35472f2b829eaf98913d3">OpMap</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef std::map&lt; const char <br>
*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef <br>
PluginMapType::const_iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OpTransform.shtml#89c92f4e29130fbff3f9385dc4166368">OpTransform</a> (const char *ID, const char *filename, const char *descr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OpTransform.shtml#9d38cff6f979c8de63755d5171047f6a">~OpTransform</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OpTransform.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OpTransform.shtml#1ca500aeb02418c2928d551c55d4efc1">WorksWith</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OpTransform.shtml#a466b4efeae4553cce5a50eff4fb78e2">Do</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, <a class="el" href="classOpenBabel_1_1OBOp.shtml#4e98002937e35472f2b829eaf98913d3">OpMap</a> *pOptions=NULL, const char *OptionText=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OpTransform.shtml">OpTransform</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OpTransform.shtml#ed21db4d9fb23cb30d0440e844a69f57">MakeInstance</a> (const std::vector&lt; std::string &gt; &amp;textlines)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBOp.shtml#45dfda1fb13d3c26ab7f8f7631e3351c">TypeID</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#e0859fdbf134af95a8231eb32c73b7db">Display</a> (std::string &amp;txt, const char *param, const char *ID=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#753a34173c6750388d33e5294556790f">GetID</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#abc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBOp.shtml#64e598f68f30107a74319b9fc6d26cd0">OpOptions</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBOp.shtml#6db16d52fb8a8bc3129944ae45097523">DoOps</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, <a class="el" href="classOpenBabel_1_1OBOp.shtml#4e98002937e35472f2b829eaf98913d3">OpMap</a> *pOptions)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#c8ba4fe4a0634561ddd4667c8ef28ae1">GetPlugin</a> (const char *Type, const char *ID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#f95953a5793333ba51e978c4a0a00103">ListAsVector</a> (const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9fabfd2513038ae6ac475ac0ff2c73cd">List</a> (const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#ba22c5352d36c7f058299af7ddffb03e">ListAsString</a> (const char *PluginID, const char *param=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#84fc973fdf4bba5a6b0e2d402077991c">FirstLine</a> (const char *txt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1d4d73999ab0518ee471c635bd0a7e87">Begin</a> (const char *PluginID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9a330280c1cd2e7119dac87a6fd0b762">End</a> (const char *PluginID)</td></tr>

<tr><td colspan="2"><br><h2>Static Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#c40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#dfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#706e628de74c41f357e6fe9de774111c">BaseFindType</a> (<a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1f8d25dafb0bc13814ca451035f67955">_id</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Applies molecular transforms (<a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml" title="SMARTS based structural modification (chemical transformation).">OBChemTsfm</a> class) read from a datafile. 
<p>
<dl class="since" compact><dt><b>Since:</b></dt><dd>version 2.2 </dd></dl>
<hr><h2>Member Typedef Documentation</h2>
<a class="anchor" name="4e98002937e35472f2b829eaf98913d3"></a><!-- doxytag: member="OpenBabel::OpTransform::OpMap" ref="4e98002937e35472f2b829eaf98913d3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef const std::map&lt;std::string, std::string&gt; <a class="el" href="classOpenBabel_1_1OBOp.shtml#4e98002937e35472f2b829eaf98913d3">OpMap</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="0fd3c807ed3341c33070c93b14739bc8"></a><!-- doxytag: member="OpenBabel::OpTransform::PluginMapType" ref="0fd3c807ed3341c33070c93b14739bc8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;const char*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>*, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a>&gt; <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8fac85f5497f873a2dd8734b47f0bdc0"></a><!-- doxytag: member="OpenBabel::OpTransform::PluginIterator" ref="8fac85f5497f873a2dd8734b47f0bdc0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef PluginMapType::const_iterator <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="89c92f4e29130fbff3f9385dc4166368"></a><!-- doxytag: member="OpenBabel::OpTransform::OpTransform" ref="89c92f4e29130fbff3f9385dc4166368" args="(const char *ID, const char *filename, const char *descr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OpTransform.shtml">OpTransform</a>           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>descr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
constructor. Each instance provides an ID, a datafile and a description. 
<p>

<p>Referenced by <a class="el" href="optransform_8h-source.shtml#l00048">OpTransform::MakeInstance()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9d38cff6f979c8de63755d5171047f6a"></a><!-- doxytag: member="OpenBabel::OpTransform::~OpTransform" ref="9d38cff6f979c8de63755d5171047f6a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OpTransform.shtml">OpTransform</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="4a6b8d1611d5d963fc29982cc1ebcbf7"></a><!-- doxytag: member="OpenBabel::OpTransform::Description" ref="4a6b8d1611d5d963fc29982cc1ebcbf7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* Description           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Required description of a sub-type. 
<p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7">OBPlugin</a>.</p>

</div>
</div><p>
<a class="anchor" name="1ca500aeb02418c2928d551c55d4efc1"></a><!-- doxytag: member="OpenBabel::OpTransform::WorksWith" ref="1ca500aeb02418c2928d551c55d4efc1" args="(OBBase *pOb) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WorksWith           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks that this op is being applied to the right kind of object(OBMol). 
<p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBOp.shtml#841238ff5ff03c1c9341dea0105469c6">OBOp</a>.</p>

</div>
</div><p>
<a class="anchor" name="a466b4efeae4553cce5a50eff4fb78e2"></a><!-- doxytag: member="OpenBabel::OpTransform::Do" ref="a466b4efeae4553cce5a50eff4fb78e2" args="(OBBase *pOb, OpMap *pOptions=NULL, const char *OptionText=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Do           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBOp.shtml#4e98002937e35472f2b829eaf98913d3">OpMap</a> *&nbsp;</td>
          <td class="paramname"> <em>pOptions</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>OptionText</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Carries out the transform. 
<p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBOp.shtml#f2220de80ec34a4872d0b6c712a41857">OBOp</a>.</p>

</div>
</div><p>
<a class="anchor" name="ed21db4d9fb23cb30d0440e844a69f57"></a><!-- doxytag: member="OpenBabel::OpTransform::MakeInstance" ref="ed21db4d9fb23cb30d0440e844a69f57" args="(const std::vector&lt; std::string &gt; &amp;textlines)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OpTransform.shtml">OpTransform</a>* MakeInstance           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Make a new instance of the class. See <a class="el" href="classOpenBabel_1_1OpTransform.shtml" title="Applies molecular transforms (OBChemTsfm class) read from a datafile.">OpTransform</a>, <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml" title="Handle group contribution algorithms.">OBGroupContrib</a>, SmartsDescriptor classes for derived versions. Usually, the first parameter is the classname, the next three are parameters(ID, filename, description) for a constructor, and the rest data. 
<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9399e9568ab809d714385f1b237a9335">OBPlugin</a>.</p>

</div>
</div><p>
<a class="anchor" name="45dfda1fb13d3c26ab7f8f7631e3351c"></a><!-- doxytag: member="OpenBabel::OpTransform::TypeID" ref="45dfda1fb13d3c26ab7f8f7631e3351c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* TypeID           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Provides the name of this kind of plugin. Use -L "ops" to list from commandline. 
<p>

</div>
</div><p>
<a class="anchor" name="64e598f68f30107a74319b9fc6d26cd0"></a><!-- doxytag: member="OpenBabel::OpTransform::OpOptions" ref="64e598f68f30107a74319b9fc6d26cd0" args="(OBBase *pOb)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static std::string OpOptions           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>string describing options, for display with -H and to make checkboxes in GUI </dd></dl>

<p>Referenced by <a class="el" href="transform_8cpp-source.shtml#l00210">OBMol::ClassDescription()</a>.</p>

</div>
</div><p>
<a class="anchor" name="6db16d52fb8a8bc3129944ae45097523"></a><!-- doxytag: member="OpenBabel::OpTransform::DoOps" ref="6db16d52fb8a8bc3129944ae45097523" args="(OBBase *pOb, OpMap *pOptions)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool DoOps           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBOp.shtml#4e98002937e35472f2b829eaf98913d3">OpMap</a> *&nbsp;</td>
          <td class="paramname"> <em>pOptions</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Call <a class="el" href="classOpenBabel_1_1OBOp.shtml#f2220de80ec34a4872d0b6c712a41857" title="Required function that does the work. Normally return true, unless object is not...">Do()</a> of all the OBOps whose ID is a key in the map. Called from Transform(). The map has general options like -x or --multicharoption The key is the option name and the value, if any, is text which follows the option name. In some cases, there may be several parameters, space separated) <dl class="return" compact><dt><b>Returns:</b></dt><dd>false indicating object should not be output, if any <a class="el" href="classOpenBabel_1_1OBOp.shtml#f2220de80ec34a4872d0b6c712a41857" title="Required function that does the work. Normally return true, unless object is not...">Do()</a> returns false </dd></dl>

<p>Referenced by <a class="el" href="transform_8cpp-source.shtml#l00028">OBMol::DoTransformations()</a>.</p>

</div>
</div><p>
<a class="anchor" name="e0859fdbf134af95a8231eb32c73b7db"></a><!-- doxytag: member="OpenBabel::OpTransform::Display" ref="e0859fdbf134af95a8231eb32c73b7db" args="(std::string &amp;txt, const char *param, const char *ID=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Display           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Write information on a plugin class to the string txt. Return false if not written. The default implementation outputs: the ID, a tab character, and the first line of the Description. The param string can be used in derived types to provide different outputs. 
<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#e0859fdbf134af95a8231eb32c73b7db">OBDescriptor</a>, and <a class="el" href="classOpenBabel_1_1OBFormat.shtml#e0859fdbf134af95a8231eb32c73b7db">OBFormat</a>.</p>

<p>Referenced by <a class="el" href="descriptor_8cpp-source.shtml#l00477">OBDescriptor::Display()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c8ba4fe4a0634561ddd4667c8ef28ae1"></a><!-- doxytag: member="OpenBabel::OpTransform::GetPlugin" ref="c8ba4fe4a0634561ddd4667c8ef28ae1" args="(const char *Type, const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* GetPlugin           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>Type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get a pointer to a plugin from its type and ID. Return NULL if not found. Not cast to Type*. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00287">OBConversion::LoadFormatFiles()</a>.</p>

</div>
</div><p>
<a class="anchor" name="753a34173c6750388d33e5294556790f"></a><!-- doxytag: member="OpenBabel::OpTransform::GetID" ref="753a34173c6750388d33e5294556790f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* GetID           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the ID of the sub-type instance. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00102">OBPlugin::Display()</a>, <a class="el" href="format_8cpp-source.shtml#l00071">OBFormat::Display()</a>, and <a class="el" href="descriptor_8cpp-source.shtml#l00308">OBDescriptor::PredictAndSave()</a>.</p>

</div>
</div><p>
<a class="anchor" name="f95953a5793333ba51e978c4a0a00103"></a><!-- doxytag: member="OpenBabel::OpTransform::ListAsVector" ref="f95953a5793333ba51e978c4a0a00103" args="(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ListAsVector           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vlist</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Output a list of sub-type classes of the the type PluginID, or, if PluginID is "plugins" or empty, a list of the base types. If PluginID is not recognized or is NULL, the base types are output and the return is false. 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01448">OBConversion::GetSupportedInputFormat()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01457">OBConversion::GetSupportedOutputFormat()</a>, and <a class="el" href="plugin_8cpp-source.shtml#l00076">OBPlugin::List()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9fabfd2513038ae6ac475ac0ff2c73cd"></a><!-- doxytag: member="OpenBabel::OpTransform::List" ref="9fabfd2513038ae6ac475ac0ff2c73cd" args="(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void List           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream *&nbsp;</td>
          <td class="paramname"> <em>os</em> = <code>&amp;std::cout</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
As ListAsVector but sent to an ostream with a default of cout if not specified. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00084">OBPlugin::ListAsString()</a>.</p>

</div>
</div><p>
<a class="anchor" name="ba22c5352d36c7f058299af7ddffb03e"></a><!-- doxytag: member="OpenBabel::OpTransform::ListAsString" ref="ba22c5352d36c7f058299af7ddffb03e" args="(const char *PluginID, const char *param=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string ListAsString           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
As ListAsVector but returns a string containing the list. 
<p>

</div>
</div><p>
<a class="anchor" name="84fc973fdf4bba5a6b0e2d402077991c"></a><!-- doxytag: member="OpenBabel::OpTransform::FirstLine" ref="84fc973fdf4bba5a6b0e2d402077991c" args="(const char *txt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string FirstLine           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>txt</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Utility function to return only the first line of a string. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00102">OBPlugin::Display()</a>, <a class="el" href="format_8cpp-source.shtml#l00071">OBFormat::Display()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1d4d73999ab0518ee471c635bd0a7e87"></a><!-- doxytag: member="OpenBabel::OpTransform::Begin" ref="1d4d73999ab0518ee471c635bd0a7e87" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> Begin           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return an iterator at the start of the map of the plugin types PluginID or, if there is no such map, the end of the top level plugin map. 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01501">OBConversion::GetNextFormat()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9a330280c1cd2e7119dac87a6fd0b762"></a><!-- doxytag: member="OpenBabel::OpTransform::End" ref="9a330280c1cd2e7119dac87a6fd0b762" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> End           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01501">OBConversion::GetNextFormat()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="abc1385cbe63145ffec6edf1f2c3be98"></a><!-- doxytag: member="OpenBabel::OpTransform::GetMap" ref="abc1385cbe63145ffec6edf1f2c3be98" args="() const =0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; GetMap           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [pure virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the map of the subtypes. 
<p>

<p>Referenced by <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c40457336d7b12bb632b4ac4e8955a3a"></a><!-- doxytag: member="OpenBabel::OpTransform::PluginMap" ref="c40457336d7b12bb632b4ac4e8955a3a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; PluginMap           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns a reference to the map of the plugin types. Is a function rather than a static member variable to avoid initialization problems. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00028">OBPlugin::GetTypeMap()</a>, <a class="el" href="plugin_8cpp-source.shtml#l00037">OBPlugin::ListAsVector()</a>, and <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="dfcf9fda27cfbc4301fc94517a4250ef"></a><!-- doxytag: member="OpenBabel::OpTransform::GetTypeMap" ref="dfcf9fda27cfbc4301fc94517a4250ef" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">OBPlugin::PluginMapType</a> &amp; GetTypeMap           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the map of a particular plugin type, e.g. GetMapType("fingerprints"). 
<p>

</div>
</div><p>
<a class="anchor" name="706e628de74c41f357e6fe9de774111c"></a><!-- doxytag: member="OpenBabel::OpTransform::BaseFindType" ref="706e628de74c41f357e6fe9de774111c" args="(PluginMapType &amp;Map, const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* BaseFindType           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the type with the specified ID, or NULL if not found. Will be cast to the appropriate class in the calling routine. 
<p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="1f8d25dafb0bc13814ca451035f67955"></a><!-- doxytag: member="OpenBabel::OpTransform::_id" ref="1f8d25dafb0bc13814ca451035f67955" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1f8d25dafb0bc13814ca451035f67955">_id</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="optransform_8h-source.shtml">optransform.h</a></ul>
</div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:41 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
