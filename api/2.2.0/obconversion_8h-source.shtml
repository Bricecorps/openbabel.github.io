<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: obconversion.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>obconversion.h</h1><a href="obconversion_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obconversion.h - Handle file conversions. Declaration of OBFormat, OBConversion</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2004-2005 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"></span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_CONV_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_CONV_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;<a class="code" href="dlhandler_8h.shtml" title="Dynamic loader for file format modules.">openbabel/dlhandler.h</a>&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="oberror_8h.shtml" title="Handle error messages, warnings, notices, etc.">openbabel/oberror.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="format_8h.shtml" title="Declarations for OBFormat.">openbabel/format.h</a>&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;<a class="code" href="lineend_8h.shtml" title="Translate line endings automatically (UNIX, Classic Mac, DOS).">openbabel/lineend.h</a>&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="comment">// These macros are used in DLL builds. If they have not</span>
<a name="l00038"></a>00038 <span class="comment">// been set in babelconfig.h, define them as nothing.</span>
<a name="l00039"></a>00039 <span class="preprocessor">#ifndef OBCONV</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="preprocessor">        #define OBCONV</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#ifndef OBDLL</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">        #define OBDLL</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a>00046 <span class="comment">//using namespace std;</span>
<a name="l00047"></a>00047 <span class="keyword">namespace </span>OpenBabel {
<a name="l00048"></a>00048 
<a name="l00049"></a>00049   <span class="comment">// Needed to preserve deprecated API</span>
<a name="l00050"></a><a class="code" href="namespaceOpenBabel.shtml#8f32238b69be1e83980d0ff3a90b206f">00050</a>   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">OBPlugin::PluginIterator</a> <a class="code" href="namespaceOpenBabel.shtml#8f32238b69be1e83980d0ff3a90b206f">Formatpos</a>;
<a name="l00051"></a>00051 
<a name="l00052"></a><a class="code" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16">00052</a>   OBERROR <span class="keyword">extern</span>  <a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> <a class="code" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16" title="Global OBMessageHandler error handler.">obErrorLog</a>;
<a name="l00053"></a>00053 
<a name="l00054"></a>00054   <span class="comment">//*************************************************</span>
<a name="l00056"></a>00056 <span class="comment"></span>  <span class="comment">// Class introduction in obconversion.cpp</span>
<a name="l00057"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml">00057</a>   <span class="keyword">class </span>OBCONV <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>
<a name="l00058"></a>00058     {
<a name="l00060"></a>00060     <span class="keyword">public</span>:
<a name="l00062"></a>00062 
<a name="l00063"></a>00063       <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>(std::istream* is=NULL, std::ostream* os=NULL);
<a name="l00065"></a>00065       <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>&amp; o);
<a name="l00066"></a>00066       <span class="keyword">virtual</span>     ~<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>(); 
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 
<a name="l00071"></a>00071       <span class="keyword">static</span> <span class="keywordtype">int</span>                                RegisterFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pFormat, <span class="keyword">const</span> <span class="keywordtype">char</span>* MIME = NULL);
<a name="l00073"></a>00073       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*  FindFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID);
<a name="l00075"></a>00075       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*  FormatFromExt(<span class="keyword">const</span> <span class="keywordtype">char</span>* filename);
<a name="l00077"></a>00077       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*        FormatFromMIME(<span class="keyword">const</span> <span class="keywordtype">char</span>* MIME);
<a name="l00078"></a>00078 
<a name="l00080"></a>00080       <span class="keyword">static</span> <span class="keywordtype">bool</span>               GetNextFormat(<a class="code" href="namespaceOpenBabel.shtml#8f32238b69be1e83980d0ff3a90b206f">Formatpos</a>&amp; itr, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; str,<a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*&amp; pFormat);
<a name="l00082"></a>00082                 
<a name="l00084"></a>00084 
<a name="l00085"></a>00085       <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description(); <span class="comment">//generic conversion options</span>
<a name="l00087"></a>00087 <span class="comment"></span>
<a name="l00089"></a>00089 
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#5905ca0af771ee5a83ebd496f02e8ced">00090</a>       std::istream* GetInStream()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pInStream;};
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#751641ec702413ddf9fb86e24fe6da80">00091</a>       std::ostream* GetOutStream()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pOutStream;};
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#be2cafdff8bf62ae36fbbfca3eb836bf">00092</a>       <span class="keywordtype">void</span>          SetInStream(std::istream* pIn)
<a name="l00093"></a>00093         { 
<a name="l00094"></a>00094           <span class="keywordflow">if</span> (pInStream &amp;&amp; NeedToFreeInStream) {
<a name="l00095"></a>00095             <span class="keyword">delete</span> pInStream; NeedToFreeInStream = <span class="keyword">false</span>;
<a name="l00096"></a>00096           }
<a name="l00097"></a>00097           pInStream=pIn;
<a name="l00098"></a>00098           CheckedForGzip = <span class="keyword">false</span>; <span class="comment">// haven't tried to gzip decode this stream</span>
<a name="l00099"></a>00099         };
<a name="l00100"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7520c6b17b3cf9c506738794baab99b1">00100</a>       <span class="keywordtype">void</span>          SetOutStream(std::ostream* pOut)
<a name="l00101"></a>00101         {
<a name="l00102"></a>00102           <span class="keywordflow">if</span> (pOutStream &amp;&amp; NeedToFreeOutStream) {
<a name="l00103"></a>00103             <span class="keyword">delete</span> pOutStream; NeedToFreeOutStream = <span class="keyword">false</span>;
<a name="l00104"></a>00104           }
<a name="l00105"></a>00105           pOutStream=pOut;
<a name="l00106"></a>00106         };
<a name="l00108"></a>00108       <span class="keywordtype">bool</span>        SetInAndOutFormats(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID, <span class="keyword">const</span> <span class="keywordtype">char</span>* outID);
<a name="l00109"></a>00109       <span class="keywordtype">bool</span>        SetInAndOutFormats(<a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pIn, <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pOut);
<a name="l00111"></a>00111       <span class="keywordtype">bool</span>            SetInFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID);
<a name="l00112"></a>00112       <span class="keywordtype">bool</span>            SetInFormat(<a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pIn);
<a name="l00114"></a>00114       <span class="keywordtype">bool</span>            SetOutFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* outID);
<a name="l00115"></a>00115       <span class="keywordtype">bool</span>            SetOutFormat(<a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pOut);
<a name="l00116"></a>00116 
<a name="l00117"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ed42a5004f6ba5522bb59ce13467a951">00117</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*   GetInFormat()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pInFormat;};
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#fd4dc6481ea2d1d95e2cd04b1643fb8c">00118</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*   GetOutFormat()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pOutFormat;};
<a name="l00119"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7f988979d62a5d63e85a294d826e1c9e">00119</a>       std::string GetInFilename()<span class="keyword"> const</span>{<span class="keywordflow">return</span> InFilename;};
<a name="l00120"></a>00120         
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b54ab5100f5418bc0ba174da74b72d2f">00122</a>       std::streampos GetInPos()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInpos;}; 
<a name="l00123"></a>00123 
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#cc7cbe1da68663d0d507de6da778d3c2">00125</a>       <span class="keywordtype">size_t</span> GetInLen()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInlen;}; 
<a name="l00126"></a>00126 
<a name="l00128"></a>00128       <span class="keyword">const</span> <span class="keywordtype">char</span>* GetTitle() <span class="keyword">const</span>;
<a name="l00129"></a>00129 
<a name="l00131"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#8e3fd39dd67cdd120890d37f0f196bda">00131</a>       <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* GetAuxConv()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pAuxConv;};
<a name="l00132"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#53a1041e7803e63b9bca06ad18bea4fe">00132</a>       <span class="keywordtype">void</span>          SetAuxConv(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv) {pAuxConv=pConv;};
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 
<a name="l00136"></a>00136 
<a name="l00137"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116f37359059c64e43cab248066ca812206">00137</a>       <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116" title="Three types of options set on the the command line by -a? , -x? , or -?">Option_type</a> { INOPTIONS, OUTOPTIONS, GENOPTIONS, ALL };
<a name="l00138"></a>00138 
<a name="l00140"></a>00140       <span class="keyword">const</span> <span class="keywordtype">char</span>* IsOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt,Option_type opttyp=OUTOPTIONS);
<a name="l00141"></a>00141         
<a name="l00143"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7da66ef30fd0af867e9d3bd0df15f4a2">00143</a>       <span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* GetOptions(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116" title="Three types of options set on the the command line by -a? , -x? , or -?">Option_type</a> opttyp)
<a name="l00144"></a>00144         { <span class="keywordflow">return</span> &amp;OptionsArray[opttyp];};
<a name="l00145"></a>00145 
<a name="l00147"></a>00147       <span class="keywordtype">void</span> AddOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, Option_type opttyp=OUTOPTIONS, <span class="keyword">const</span> <span class="keywordtype">char</span>* txt=NULL);
<a name="l00148"></a>00148         
<a name="l00149"></a>00149       <span class="keywordtype">bool</span> RemoveOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, Option_type optype);
<a name="l00150"></a>00150 
<a name="l00152"></a>00152       <span class="keywordtype">void</span> SetOptions(<span class="keyword">const</span> <span class="keywordtype">char</span>* options, Option_type opttyp);
<a name="l00153"></a>00153 
<a name="l00155"></a>00155       <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterOptionParam(std::string name, <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pFormat,
<a name="l00156"></a>00156                                       <span class="keywordtype">int</span> numberParams=0, Option_type typ=OUTOPTIONS);
<a name="l00157"></a>00157 
<a name="l00159"></a>00159       <span class="keyword">static</span> <span class="keywordtype">int</span> GetOptionParams(std::string name, Option_type typ);
<a name="l00161"></a>00161 
<a name="l00163"></a>00163       <span class="keywordtype">void</span> CopyOptions(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pSourceConv, Option_type typ=ALL);
<a name="l00164"></a>00164 
<a name="l00166"></a>00166 
<a name="l00167"></a>00167       <span class="comment">// @brief Set and return the list of supported input format</span>
<a name="l00168"></a>00168       std::vector&lt;std::string&gt; GetSupportedInputFormat();
<a name="l00169"></a>00169       <span class="comment">// @brief Set and return the list of supported output format</span>
<a name="l00170"></a>00170       std::vector&lt;std::string&gt; GetSupportedOutputFormat();
<a name="l00172"></a>00172 
<a name="l00174"></a>00174 
<a name="l00175"></a>00175 
<a name="l00176"></a>00176       <span class="keywordtype">int</span>         Convert(std::istream* is, std::ostream* os);
<a name="l00177"></a>00177 
<a name="l00179"></a>00179       <span class="keywordtype">int</span>         Convert();
<a name="l00180"></a>00180 
<a name="l00183"></a>00183       <span class="keywordtype">int</span>                                       FullConvert(std::vector&lt;std::string&gt;&amp; FileList,
<a name="l00184"></a>00184                               std::string&amp; OutputFileName, std::vector&lt;std::string&gt;&amp; OutputFileList);
<a name="l00186"></a>00186 
<a name="l00188"></a>00188 
<a name="l00189"></a>00189       <span class="keywordtype">int</span>     AddChemObject(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb);
<a name="l00190"></a>00190       <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*  GetChemObject(); 
<a name="l00191"></a>00191       <span class="keywordtype">bool</span>     IsLast();
<a name="l00192"></a>00192       <span class="keywordtype">bool</span>     IsFirstInput();
<a name="l00193"></a>00193       <span class="keywordtype">void</span>     SetFirstInput(<span class="keywordtype">bool</span> b=<span class="keyword">true</span>);
<a name="l00194"></a>00194       <span class="keywordtype">int</span>      GetOutputIndex() <span class="keyword">const</span> ;
<a name="l00195"></a>00195       <span class="keywordtype">void</span>     SetOutputIndex(<span class="keywordtype">int</span> indx);
<a name="l00196"></a>00196       <span class="keywordtype">void</span>     SetMoreFilesToCome();
<a name="l00197"></a>00197       <span class="keywordtype">void</span>     SetOneObjectOnly(<span class="keywordtype">bool</span> b=<span class="keyword">true</span>);
<a name="l00198"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#19dedcd05ee3ab11ed85c29ff1fef810">00198</a>       <span class="keywordtype">void</span>     SetLast(<span class="keywordtype">bool</span> b){SetOneObjectOnly(b);}
<a name="l00199"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#c157f0eb86dba757b3ebae08ffffb8d2">00199</a>       <span class="keywordtype">bool</span>     IsLastFile(){ <span class="keywordflow">return</span> !MoreFilesToCome;}
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 
<a name="l00204"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#442b17995d84d654e33ede11a63d7f80">00204</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* GetDefaultFormat(){<span class="keywordflow">return</span> OBFormat::FindType(NULL);};
<a name="l00205"></a>00205 
<a name="l00207"></a>00207         
<a name="l00210"></a>00210       <span class="keywordtype">bool</span>                              Write(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::ostream* pout=NULL);
<a name="l00211"></a>00211 
<a name="l00213"></a>00213         
<a name="l00219"></a>00219       std::string                     WriteString(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, <span class="keywordtype">bool</span> trimWhitespace = <span class="keyword">false</span>);
<a name="l00220"></a>00220 
<a name="l00222"></a>00222         
<a name="l00227"></a>00227       <span class="keywordtype">bool</span>                            WriteFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::string filePath);
<a name="l00228"></a>00228 
<a name="l00233"></a>00233       <span class="keywordtype">void</span> CloseOutFile();
<a name="l00234"></a>00234 
<a name="l00236"></a>00236         
<a name="l00240"></a>00240       <span class="keywordtype">bool</span>      Read(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::istream* pin=NULL);
<a name="l00241"></a>00241         
<a name="l00245"></a>00245 <span class="comment">//      OBBase* ReadObject(std::istream* pin=NULL);</span>
<a name="l00246"></a>00246 
<a name="l00248"></a>00248         
<a name="l00252"></a>00252       <span class="keywordtype">bool</span>      ReadString(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::string <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b837943061a284187ff6e555ac7093f528">input</a>);
<a name="l00253"></a>00253 
<a name="l00255"></a>00255         
<a name="l00261"></a>00261       <span class="keywordtype">bool</span>      ReadFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::string filePath);
<a name="l00262"></a>00262 
<a name="l00268"></a>00268       <span class="keywordtype">bool</span> OpenInAndOutFiles(std::string infilepath, std::string outfilepath);
<a name="l00269"></a>00269 
<a name="l00274"></a>00274       <span class="keywordtype">void</span> ReportNumberConverted(<span class="keywordtype">int</span> count, <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* pFormat=NULL);
<a name="l00275"></a>00275 
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 <span class="keyword">protected</span>:
<a name="l00279"></a>00279       <span class="keyword">static</span> std::string BatchFileName(std::string&amp; BaseName, std::string&amp; InFile);
<a name="l00281"></a>00281       <span class="keyword">static</span> std::string IncrementedFileName(std::string&amp; BaseName, <span class="keyword">const</span> <span class="keywordtype">int</span> Count);
<a name="l00283"></a>00283       <span class="keyword">static</span> <span class="keywordtype">bool</span> CheckForUnintendedBatch(<span class="keyword">const</span> std::string&amp; infile, <span class="keyword">const</span> std::string&amp; outfile);
<a name="l00285"></a>00285       <span class="keywordtype">void</span> InstallStreamFilter();
<a name="l00286"></a>00286 
<a name="l00288"></a>00288 
<a name="l00289"></a>00289     <span class="keyword">protected</span>:
<a name="l00290"></a>00290       <span class="keywordtype">bool</span>             SetStartAndEnd();
<a name="l00291"></a>00291 <span class="comment">//      static FMapType&amp; FormatsMap();///&lt;contains ID and pointer to all OBFormat classes</span>
<a name="l00292"></a>00292 <span class="comment">//      static FMapType&amp; FormatsMIMEMap();///&lt;contains MIME and pointer to all OBFormat classes</span>
<a name="l00293"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">00293</a>       <span class="keyword">typedef</span> std::map&lt;std::string,int&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">OPAMapType</a>;
<a name="l00294"></a>00294       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">OPAMapType</a>&amp; OptionParamArray(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116" title="Three types of options set on the the command line by -a? , -x? , or -?">Option_type</a> typ);
<a name="l00295"></a>00295       <span class="keyword">static</span> <span class="keywordtype">int</span>       LoadFormatFiles();
<a name="l00296"></a>00296       <span class="keywordtype">bool</span>             OpenAndSetFormat(<span class="keywordtype">bool</span> SetFormat, std::ifstream* is);
<a name="l00297"></a>00297 
<a name="l00298"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#20354c0458b4e08dc62db4a4e8717c61">00298</a>       std::string         InFilename;
<a name="l00299"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b965c6baeb6893dd15a2fefefce795df">00299</a>       std::istream*     pInStream;
<a name="l00300"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#efeab37b3ca85a70cef740bb1636b353">00300</a>       std::ostream*     pOutStream;
<a name="l00301"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#2daf6d1435032c73c65000af61a4a5d4">00301</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*  pDefaultFormat;
<a name="l00302"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#70c004d49155986bcc163bac07df0e4e">00302</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*           pInFormat;
<a name="l00303"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#4d630735f21540de237cdcc32916bffb">00303</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>*   pOutFormat;
<a name="l00304"></a>00304 
<a name="l00305"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3d9e064f9e26ed2e52b140b7cc34a8d6">00305</a>       std::map&lt;std::string,std::string&gt; OptionsArray[3];
<a name="l00306"></a>00306 
<a name="l00307"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#075e1e3c9dd399cef584d7338cc37938">00307</a>       <span class="keywordtype">int</span>                 Index;
<a name="l00308"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#c52d6fdbe254370662cccd43af0248f2">00308</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        StartNumber;
<a name="l00309"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#db31d46cbf6e64e86bae6d24d90c9702">00309</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        EndNumber;
<a name="l00310"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ad462966ed963f892117056de1eba502">00310</a>       <span class="keywordtype">int</span>                 Count;
<a name="l00311"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#e14ad56a72461f3c598cb4dbd151cdc7">00311</a>       <span class="keywordtype">bool</span>                      m_IsFirstInput;
<a name="l00312"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#6025251d18641dab4058222b69d1a98c">00312</a>       <span class="keywordtype">bool</span>                m_IsLast;
<a name="l00313"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b4ec386870233b42d353a4d66d7b0cee">00313</a>       <span class="keywordtype">bool</span>                MoreFilesToCome;
<a name="l00314"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7002deaca76f3fc235c76be1fcc38dfa">00314</a>       <span class="keywordtype">bool</span>                OneObjectOnly;
<a name="l00315"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#9bdd5c815677e240cec9c2e4a71d73f2">00315</a>       <span class="keywordtype">bool</span>                ReadyToInput;
<a name="l00316"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#e0c8e3d58dc0c0d9713ca7a7d27b8c4d">00316</a>       <span class="keywordtype">bool</span>      CheckedForGzip;      
<a name="l00317"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#778a4d8f719010ac4adf6af2363af0a8">00317</a>       <span class="keywordtype">bool</span>      NeedToFreeInStream;
<a name="l00318"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#96fc7fb023ad66073434a206829c23bd">00318</a>       <span class="keywordtype">bool</span>      NeedToFreeOutStream;
<a name="l00319"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#9afd81920e33981863bf186f78a222d3">00319</a>       <span class="keyword">typedef</span>   <a class="code" href="classOpenBabel_1_1FilteringInputStreambuf.shtml" title="Delivers characters from an istream or streambuf from a source while filtering.">FilteringInputStreambuf&lt; LineEndingExtractor &gt;</a> <a class="code" href="classOpenBabel_1_1FilteringInputStreambuf.shtml" title="Delivers characters from an istream or streambuf from a source while filtering.">LErdbuf</a>;
<a name="l00320"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b3b665dec523e9a63f1dc954900211ea">00320</a>       <a class="code" href="classOpenBabel_1_1FilteringInputStreambuf.shtml" title="Delivers characters from an istream or streambuf from a source while filtering.">LErdbuf</a>*  pLineEndBuf;
<a name="l00321"></a>00321 
<a name="l00322"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#501b1ec0c0e4fe9e78398e3837a759ec">00322</a>       <span class="keyword">static</span> <span class="keywordtype">int</span> FormatFilesLoaded;
<a name="l00323"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#20a1d62cb932144d66e52d7c823fb0a1">00323</a>       <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*             pOb1;
<a name="l00324"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b77068f3bb4cb88694a6be653c00f04e">00324</a>       std::streampos wInpos; 
<a name="l00325"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#545a1341008a23c2dd0721c164a9ad89">00325</a>       std::streampos rInpos; 
<a name="l00326"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#fee7e5bffccd262faaff0417e5ae9af3">00326</a>       <span class="keywordtype">size_t</span> wInlen; 
<a name="l00327"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#1a897c3f35235e4ca7da37ca245db065">00327</a>       <span class="keywordtype">size_t</span> rInlen; 
<a name="l00328"></a>00328         
<a name="l00329"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3846aa2ce719d5820b66e302c6aeaa8a">00329</a>       <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pAuxConv;
<a name="l00330"></a>00330 
<a name="l00331"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#2322eb2aa14e8d954573abbda9c50e62">00331</a>       std::vector&lt;std::string&gt; SupportedInputFormat; 
<a name="l00332"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#50233a5c7c63d03056923f13c7acbb1b">00332</a>       std::vector&lt;std::string&gt; SupportedOutputFormat; 
<a name="l00333"></a>00333 
<a name="l00334"></a>00334     };
<a name="l00335"></a>00335 
<a name="l00336"></a>00336 } <span class="comment">//namespace OpenBabel</span>
<a name="l00337"></a>00337 <span class="preprocessor">#endif //OB_CONV_H</span>
<a name="l00338"></a>00338 <span class="preprocessor"></span>
<a name="l00341"></a>00341 
<a name="l00342"></a>00342  
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:34 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
