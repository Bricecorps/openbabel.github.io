<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: parsmart.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>parsmart.h</h1><a href="parsmart_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">parsmart.h - Daylight SMARTS parser.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_PARSMART_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_PARSMART_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">openbabel/mol.h</a>&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="comment">/*==========================*/</span>
<a name="l00029"></a>00029 <span class="comment">/*  SMARTS Data Structures  */</span>
<a name="l00030"></a>00030 <span class="comment">/*==========================*/</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">namespace </span>OpenBabel
<a name="l00033"></a>00033 {
<a name="l00034"></a>00034 
<a name="l00035"></a>00035   <span class="comment">// mark this so that SWIG will not attempt to wrap for scripting languages</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span>
<a name="l00041"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">00041</a>   <span class="keyword">typedef</span> <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml" title="An internal (SMARTS parser) atomic expression.">_AtomExpr</a> {
<a name="l00042"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#c765329451135abec74c45e1897abf26">00042</a>     <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#c765329451135abec74c45e1897abf26">type</a>;
<a name="l00043"></a>00043     <span class="keyword">struct</span>
<a name="l00044"></a>00044     {
<a name="l00045"></a>00045       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#c765329451135abec74c45e1897abf26">type</a>;
<a name="l00046"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#4a8f6c91eefb9c6bf448592aac44153d">00046</a>       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#4a8f6c91eefb9c6bf448592aac44153d">prop</a>;
<a name="l00047"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#c4f474c82e82cbb89ca7c36dd52be0ed">00047</a>       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#c4f474c82e82cbb89ca7c36dd52be0ed">value</a>;
<a name="l00048"></a>00048     }
<a name="l00049"></a>00049       <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#dd9b1387523fd7ca8a99e43de1a6ebd9">leaf</a>;
<a name="l00050"></a>00050     <span class="keyword">struct</span>
<a name="l00051"></a>00051     {
<a name="l00052"></a>00052       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#c765329451135abec74c45e1897abf26">type</a>;
<a name="l00053"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#f94d20e7c35dc6021db672bddc719e59">00053</a>       <span class="keywordtype">void</span> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#f94d20e7c35dc6021db672bddc719e59">recur</a>;
<a name="l00054"></a>00054     }
<a name="l00055"></a>00055       <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#f94d20e7c35dc6021db672bddc719e59">recur</a>;
<a name="l00056"></a>00056     <span class="keyword">struct</span>
<a name="l00057"></a>00057     {
<a name="l00058"></a>00058       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#c765329451135abec74c45e1897abf26">type</a>;
<a name="l00059"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#fbc749edb3aa435b2dfe658c401dd8dd">00059</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml" title="An internal (SMARTS parser) atomic expression.">_AtomExpr</a> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#fbc749edb3aa435b2dfe658c401dd8dd">arg</a>;
<a name="l00060"></a>00060     }
<a name="l00061"></a>00061       <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#59ea3d363e8bd7376d61752e3b8d302d">mon</a>;
<a name="l00062"></a>00062     <span class="keyword">struct</span>
<a name="l00063"></a>00063     {
<a name="l00064"></a>00064       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#c765329451135abec74c45e1897abf26">type</a>;
<a name="l00065"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#e14ee7287ec01247b373819da1466f2e">00065</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml" title="An internal (SMARTS parser) atomic expression.">_AtomExpr</a> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#e14ee7287ec01247b373819da1466f2e">lft</a>;
<a name="l00066"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#3ac29da5e05a062a121b17962c0962a4">00066</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml" title="An internal (SMARTS parser) atomic expression.">_AtomExpr</a> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#3ac29da5e05a062a121b17962c0962a4">rgt</a>;
<a name="l00067"></a>00067     }
<a name="l00068"></a>00068       <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#0265adfe793b0eec6c950ec832fa6a60">bin</a>;
<a name="l00069"></a>00069   } <a class="code" href="namespaceOpenBabel.shtml#8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>;
<a name="l00070"></a>00070 
<a name="l00071"></a><a class="code" href="parsmart_8h.shtml#74d47383c9cfa0ef28949fb1986816a8">00071</a> <span class="preprocessor">#define BE_LEAF      0x01</span>
<a name="l00072"></a><a class="code" href="parsmart_8h.shtml#34c569404f51ae189843754917ff9566">00072</a> <span class="preprocessor"></span><span class="preprocessor">#define BE_ANDHI     0x02</span>
<a name="l00073"></a><a class="code" href="parsmart_8h.shtml#d9cf53fd85f0ff1adbeefa1ebf31e53a">00073</a> <span class="preprocessor"></span><span class="preprocessor">#define BE_ANDLO     0x03</span>
<a name="l00074"></a><a class="code" href="parsmart_8h.shtml#febc5b82d4a4ed2e6f9a34760afd6c81">00074</a> <span class="preprocessor"></span><span class="preprocessor">#define BE_NOT       0x04</span>
<a name="l00075"></a><a class="code" href="parsmart_8h.shtml#23a693dfa98162af1b47b7ec57cb29aa">00075</a> <span class="preprocessor"></span><span class="preprocessor">#define BE_OR        0x05</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span>
<a name="l00077"></a><a class="code" href="parsmart_8h.shtml#924b5d1cddecc6da237d9938b34e4444">00077</a> <span class="preprocessor">#define BL_CONST     0x01</span>
<a name="l00078"></a><a class="code" href="parsmart_8h.shtml#cbec3a551709136d446fc96d3d75c854">00078</a> <span class="preprocessor"></span><span class="preprocessor">#define BL_TYPE      0x02</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span>
<a name="l00080"></a><a class="code" href="parsmart_8h.shtml#16da642308fcb7853a3c54bb15c8a810">00080</a> <span class="preprocessor">#define BT_SINGLE     0x01</span>
<a name="l00081"></a><a class="code" href="parsmart_8h.shtml#e1a8803bbea5087269936304977a3692">00081</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_DOUBLE     0x02</span>
<a name="l00082"></a><a class="code" href="parsmart_8h.shtml#d51b9bc6e1cbf9b1bfa6d31b79ba88eb">00082</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_TRIPLE     0x03</span>
<a name="l00083"></a><a class="code" href="parsmart_8h.shtml#7f375920d8ccfb55e22b1f31215f39f9">00083</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_AROM       0x04</span>
<a name="l00084"></a><a class="code" href="parsmart_8h.shtml#0cbea531ed2900ee3c01d49b98458ff3">00084</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_UP         0x05</span>
<a name="l00085"></a><a class="code" href="parsmart_8h.shtml#8ab1dd7cd9fe847c7d4b99e32eef36ff">00085</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_DOWN       0x06</span>
<a name="l00086"></a><a class="code" href="parsmart_8h.shtml#3b969f6f2c329f48453407609915794e">00086</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_UPUNSPEC   0x07</span>
<a name="l00087"></a><a class="code" href="parsmart_8h.shtml#45cc69db42ded19b63bfa88279e57263">00087</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_DOWNUNSPEC 0x08</span>
<a name="l00088"></a><a class="code" href="parsmart_8h.shtml#da98bf03140e666c10ef0b43ffe16c98">00088</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_RING       0x09</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span>
<a name="l00092"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">00092</a>   <span class="keyword">typedef</span> <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml" title="An internal (SMARTS parser) bond expression.">_BondExpr</a> {
<a name="l00093"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#c765329451135abec74c45e1897abf26">00093</a>     <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#c765329451135abec74c45e1897abf26">type</a>;
<a name="l00094"></a>00094     <span class="keyword">struct</span>
<a name="l00095"></a>00095     {
<a name="l00096"></a>00096       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#c765329451135abec74c45e1897abf26">type</a>;
<a name="l00097"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#4a8f6c91eefb9c6bf448592aac44153d">00097</a>       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#4a8f6c91eefb9c6bf448592aac44153d">prop</a>;
<a name="l00098"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#c4f474c82e82cbb89ca7c36dd52be0ed">00098</a>       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#c4f474c82e82cbb89ca7c36dd52be0ed">value</a>;
<a name="l00099"></a>00099     }
<a name="l00100"></a>00100       <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#4a0d624c9057273e648793dddb94373e">leaf</a>;
<a name="l00101"></a>00101     <span class="keyword">struct</span>
<a name="l00102"></a>00102     {
<a name="l00103"></a>00103       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#c765329451135abec74c45e1897abf26">type</a>;
<a name="l00104"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#e83b8626d4f03cc85eb9cd454d01dfeb">00104</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml" title="An internal (SMARTS parser) bond expression.">_BondExpr</a> *<a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#e83b8626d4f03cc85eb9cd454d01dfeb">arg</a>;
<a name="l00105"></a>00105     }
<a name="l00106"></a>00106       <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#6357983f075e558206585d863e6cc3cf">mon</a>;
<a name="l00107"></a>00107     <span class="keyword">struct</span>
<a name="l00108"></a>00108     {
<a name="l00109"></a>00109       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#c765329451135abec74c45e1897abf26">type</a>;
<a name="l00110"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#cc869ddf951fb816bc6971baf892a666">00110</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml" title="An internal (SMARTS parser) bond expression.">_BondExpr</a> *<a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#cc869ddf951fb816bc6971baf892a666">lft</a>;
<a name="l00111"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#92d143f4a18107be5ba1889660041341">00111</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml" title="An internal (SMARTS parser) bond expression.">_BondExpr</a> *<a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#92d143f4a18107be5ba1889660041341">rgt</a>;
<a name="l00112"></a>00112     }
<a name="l00113"></a>00113       <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#43e8776e29b2251326c76a5f42193eeb">bin</a>;
<a name="l00114"></a>00114   } <a class="code" href="namespaceOpenBabel.shtml#c7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>;
<a name="l00115"></a>00115 
<a name="l00118"></a><a class="code" href="structOpenBabel_1_1BondSpec.shtml">00118</a>   <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00119"></a>00119   {
<a name="l00120"></a><a class="code" href="structOpenBabel_1_1BondSpec.shtml#88bcbd740c73c2bdcce39f48af6405b6">00120</a>     <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml" title="An internal (SMARTS parser) bond expression.">BondExpr</a> *expr;
<a name="l00121"></a><a class="code" href="structOpenBabel_1_1BondSpec.shtml#aa998788ffdfc338ed9bc652ca3d2534">00121</a>     <span class="keywordtype">int</span> src,dst;
<a name="l00122"></a><a class="code" href="structOpenBabel_1_1BondSpec.shtml#8ef53b5e857e12c63baf40bbf78595c5">00122</a>     <span class="keywordtype">int</span> visit;
<a name="l00123"></a><a class="code" href="structOpenBabel_1_1BondSpec.shtml#4406f5d19bad5748e3eb1c5e4a1cddb4">00123</a>     <span class="keywordtype">bool</span> grow;
<a name="l00124"></a>00124   }
<a name="l00125"></a>00125   <a class="code" href="structOpenBabel_1_1BondSpec.shtml" title="An internal (SMARTS parser) bond specification.">BondSpec</a>;
<a name="l00126"></a>00126 
<a name="l00129"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml">00129</a>   <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00130"></a>00130   {
<a name="l00131"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml#1269526f9f29728992306e8e649b3540">00131</a>     <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml" title="An internal (SMARTS parser) atomic expression.">AtomExpr</a> *expr;
<a name="l00132"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml#8ef53b5e857e12c63baf40bbf78595c5">00132</a>     <span class="keywordtype">int</span> visit;
<a name="l00133"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml#54e2f07c0624c79d98700aff96030e81">00133</a>     <span class="keywordtype">int</span> part;
<a name="l00134"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml#c33192e42f79427d5d5dd48f3ae51327">00134</a>     <span class="keywordtype">int</span> chiral_flag;
<a name="l00135"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml#8354c3fd354f51bceee89a4772d3d520">00135</a>     <span class="keywordtype">int</span> vb;
<a name="l00136"></a>00136   }
<a name="l00137"></a>00137   <a class="code" href="structOpenBabel_1_1AtomSpec.shtml" title="An internal (SMARTS parser) atom specification.">AtomSpec</a>;
<a name="l00138"></a>00138 
<a name="l00141"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml">00141</a>   <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00142"></a>00142   {
<a name="l00143"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#960ddd1f182adce68ce96b532be2119e">00143</a>     <span class="keywordtype">int</span> aalloc,acount;
<a name="l00144"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#1279b4e5cdc209e79aeac8393187d8fb">00144</a>     <span class="keywordtype">int</span> balloc,bcount;
<a name="l00145"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#489239383a443901c5ddf88d1965c43f">00145</a>     <span class="keywordtype">bool</span> ischiral;
<a name="l00146"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#cc47701840e9e597e8743f9d2f7f9666">00146</a>     <a class="code" href="structOpenBabel_1_1AtomSpec.shtml" title="An internal (SMARTS parser) atom specification.">AtomSpec</a> *atom;
<a name="l00147"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#180e82138b439cdbc63565ce0c63f0e7">00147</a>     <a class="code" href="structOpenBabel_1_1BondSpec.shtml" title="An internal (SMARTS parser) bond specification.">BondSpec</a> *bond;
<a name="l00148"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#4b389e40c7e1fda0f658c3e5af589a66">00148</a>     <span class="keywordtype">int</span> parts;
<a name="l00149"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#b4578762eca2fb48d53d796b02d30f3b">00149</a>     <span class="keywordtype">bool</span> hasExplicitH;
<a name="l00150"></a>00150   }
<a name="l00151"></a>00151   <a class="code" href="structOpenBabel_1_1Pattern.shtml" title="A SMARTS parser internal pattern.">Pattern</a>;
<a name="l00152"></a>00152 <span class="preprocessor">#else</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>  <span class="comment">// for SWIG, just forward declare that we have some Pattern struct</span>
<a name="l00154"></a>00154   <span class="comment">// (but this is private and not wrapped for scripting languages)</span>
<a name="l00155"></a>00155   <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1Pattern.shtml" title="A SMARTS parser internal pattern.">Pattern</a>;
<a name="l00156"></a>00156 <span class="preprocessor">#endif</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>
<a name="l00158"></a>00158   <span class="comment">// class introduction in parsmart.cpp</span>
<a name="l00160"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">00160</a> <span class="comment"></span>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching.">OBSmartsPattern</a>
<a name="l00161"></a>00161   {
<a name="l00162"></a>00162   <span class="keyword">protected</span>:
<a name="l00163"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#9aa91437a607c7d33353f38857add180">00163</a>     std::vector&lt;bool&gt;                     _growbond; 
<a name="l00164"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#b4d28e672d513c538ae9ff92e409bece">00164</a>     std::vector&lt;std::vector&lt;int&gt; &gt;      _mlist;    
<a name="l00165"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#d43f81cd2cc637e810b38c7686d9917d">00165</a>     <a class="code" href="structOpenBabel_1_1Pattern.shtml" title="A SMARTS parser internal pattern.">Pattern</a>                        *_pat;      
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#433559ab344e4266e3d109bce29ee417">00166</a>     std::string                                       _str;      
<a name="l00167"></a>00167 
<a name="l00168"></a>00168   <span class="keyword">public</span>:
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a930ba6620356e94683a1d5d4a4a25e3">00169</a>     <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching.">OBSmartsPattern</a>() : _pat(NULL) { }
<a name="l00170"></a>00170     <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching.">OBSmartsPattern</a>();
<a name="l00171"></a>00171 
<a name="l00172"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#da1c40a99620ab595049ba01934b7ca6">00172</a>   <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching.">OBSmartsPattern</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching.">OBSmartsPattern</a>&amp; cp): _pat(NULL)
<a name="l00173"></a>00173       {
<a name="l00174"></a>00174         *<span class="keyword">this</span> = cp;
<a name="l00175"></a>00175       }
<a name="l00176"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#644ca84fee80513682392b90a2841ec6">00176</a>     <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching.">OBSmartsPattern</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching.">OBSmartsPattern</a>&amp; cp)
<a name="l00177"></a>00177       {
<a name="l00178"></a>00178         <span class="keywordflow">if</span> (_pat)
<a name="l00179"></a>00179           <span class="keyword">delete</span> [] _pat;
<a name="l00180"></a>00180         _pat = NULL;
<a name="l00181"></a>00181         std::string s = cp.<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#433559ab344e4266e3d109bce29ee417" title="The string of the SMARTS expression.">_str</a>;
<a name="l00182"></a>00182         Init(s);
<a name="l00183"></a>00183         <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00184"></a>00184       }
<a name="l00185"></a>00185     
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 
<a name="l00189"></a>00189 
<a name="l00190"></a>00190     <span class="keywordtype">bool</span>         Init(<span class="keyword">const</span> <span class="keywordtype">char</span>* pattern);
<a name="l00193"></a>00193     <span class="keywordtype">bool</span>         Init(<span class="keyword">const</span> std::string&amp; pattern);
<a name="l00195"></a>00195 
<a name="l00197"></a>00197 
<a name="l00198"></a>00198 
<a name="l00199"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#52d9a732c39944ff60d06aeacb96617c">00199</a>     <span class="keyword">const</span> std::string &amp;GetSMARTS()<span class="keyword"> const    </span>{      <span class="keywordflow">return</span> _str;    }
<a name="l00201"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#1f769a4a64988a131b80fdda554eda1e">00201</a>     std::string  &amp;GetSMARTS()               {      <span class="keywordflow">return</span> _str;    }
<a name="l00202"></a>00202 
<a name="l00204"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#6fcfd4a80bfd7dc324f815cd351bfbdf">00204</a>     <span class="keywordtype">bool</span>         Empty()<span class="keyword"> const     </span>{      <span class="keywordflow">return</span>(_pat == NULL);    }
<a name="l00206"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#fa8720abaf6972d6dac22a8cd1a67225">00206</a>     <span class="keywordtype">bool</span>         IsValid()<span class="keyword"> const   </span>{      <span class="keywordflow">return</span>(_pat != NULL);    }
<a name="l00207"></a>00207 
<a name="l00209"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#0c317a10161689c407f29a6fcacdb852">00209</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumAtoms()<span class="keyword">   const</span>
<a name="l00210"></a>00210 <span class="keyword">    </span>{
<a name="l00211"></a>00211       <span class="keywordflow">return</span> _pat ? _pat-&gt;acount : 0;
<a name="l00212"></a>00212     }
<a name="l00214"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#115132ab8bd21607d00d61bc1ba5cc16">00214</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumBonds()<span class="keyword">   const</span>
<a name="l00215"></a>00215 <span class="keyword">    </span>{
<a name="l00216"></a>00216       <span class="keywordflow">return</span> _pat ? _pat-&gt;bcount : 0;
<a name="l00217"></a>00217     }
<a name="l00218"></a>00218 
<a name="l00224"></a>00224     <span class="keywordtype">void</span>         GetBond(<span class="keywordtype">int</span>&amp; src,<span class="keywordtype">int</span>&amp; dst,<span class="keywordtype">int</span>&amp; ord,<span class="keywordtype">int</span> idx);
<a name="l00226"></a>00226     <span class="keywordtype">int</span>          GetAtomicNum(<span class="keywordtype">int</span> idx);
<a name="l00228"></a>00228     <span class="keywordtype">int</span>          GetCharge(<span class="keywordtype">int</span> idx);
<a name="l00229"></a>00229 
<a name="l00231"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#bb64da8f114045c4b41dec13919bed9f">00231</a>     <span class="keywordtype">int</span>          <a class="code" href="namespaceOpenBabel.shtml#4bc7dc392771810667924051fd54b031">GetVectorBinding</a>(<span class="keywordtype">int</span> idx)<span class="keyword"> const</span>
<a name="l00232"></a>00232 <span class="keyword">    </span>{
<a name="l00233"></a>00233       <span class="keywordflow">return</span>(_pat-&gt;atom[idx].vb);
<a name="l00234"></a>00234     }
<a name="l00236"></a>00236 
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 
<a name="l00243"></a>00243     <span class="keywordtype">bool</span> Match(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol, <span class="keywordtype">bool</span> single=<span class="keyword">false</span>);
<a name="l00244"></a>00244 
<a name="l00245"></a>00245     <span class="keywordtype">bool</span> RestrictedMatch(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol, std::vector&lt;std::pair&lt;int,int&gt; &gt; &amp;pairs, <span class="keywordtype">bool</span> single=<span class="keyword">false</span>);
<a name="l00246"></a>00246 
<a name="l00247"></a>00247     <span class="keywordtype">bool</span> RestrictedMatch(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> &amp;bv, <span class="keywordtype">bool</span> single=<span class="keyword">false</span>);
<a name="l00250"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#299d4f22a95890bf259cb12b4664a0ea">00250</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumMatches()<span class="keyword"> const</span>
<a name="l00251"></a>00251 <span class="keyword">    </span>{
<a name="l00252"></a>00252       <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_mlist.size();
<a name="l00253"></a>00253     }
<a name="l00254"></a>00254 
<a name="l00257"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#5633f1fa229ec0ff8fd3991e09d791c2">00257</a>     std::vector&lt;std::vector&lt;int&gt; &gt; &amp;GetMapList()
<a name="l00258"></a>00258       {
<a name="l00259"></a>00259         <span class="keywordflow">return</span>(_mlist);
<a name="l00260"></a>00260       }
<a name="l00262"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#548b220ea8c00d0297e81ebc7b31c6d7">00262</a>     std::vector&lt;std::vector&lt;int&gt; &gt;::iterator BeginMList()
<a name="l00263"></a>00263       {
<a name="l00264"></a>00264         <span class="keywordflow">return</span>(_mlist.begin());
<a name="l00265"></a>00265       }
<a name="l00267"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#7db4777fec63048db41fb890ac0a22ac">00267</a>     std::vector&lt;std::vector&lt;int&gt; &gt;::iterator EndMList()
<a name="l00268"></a>00268       {
<a name="l00269"></a>00269         <span class="keywordflow">return</span>(_mlist.end());
<a name="l00270"></a>00270       }
<a name="l00271"></a>00271 
<a name="l00273"></a>00273 
<a name="l00283"></a>00283     std::vector&lt;std::vector&lt;int&gt; &gt; &amp;GetUMapList();
<a name="l00285"></a>00285 
<a name="l00287"></a>00287     <span class="keywordtype">void</span>         WriteMapList(std::ostream&amp;);
<a name="l00288"></a>00288   };
<a name="l00289"></a>00289 
<a name="l00293"></a><a class="code" href="classOpenBabel_1_1OBSSMatch.shtml">00293</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBSSMatch.shtml" title="Internal class: performs fast, exhaustive matching used to find just a single match...">OBSSMatch</a>
<a name="l00294"></a>00294   {
<a name="l00295"></a>00295   <span class="keyword">protected</span>:
<a name="l00296"></a><a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#de85500cee2cdd5840c1637f558a8407">00296</a>     <span class="keywordtype">bool</span>        *_uatoms;
<a name="l00297"></a><a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#49fc50c0d3567160b94f7a15aba18da0">00297</a>     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>       *_mol;
<a name="l00298"></a><a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#d43f81cd2cc637e810b38c7686d9917d">00298</a>     <a class="code" href="structOpenBabel_1_1Pattern.shtml" title="A SMARTS parser internal pattern.">Pattern</a>     *_pat;
<a name="l00299"></a><a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#46054c62ce67984c978b60b2b9059593">00299</a>     std::vector&lt;int&gt;  _map;
<a name="l00300"></a>00300 
<a name="l00301"></a>00301   <span class="keyword">public</span>:
<a name="l00302"></a>00302     <a class="code" href="classOpenBabel_1_1OBSSMatch.shtml" title="Internal class: performs fast, exhaustive matching used to find just a single match...">OBSSMatch</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>&amp;,<a class="code" href="structOpenBabel_1_1Pattern.shtml" title="A SMARTS parser internal pattern.">Pattern</a>*);
<a name="l00303"></a>00303     ~<a class="code" href="classOpenBabel_1_1OBSSMatch.shtml" title="Internal class: performs fast, exhaustive matching used to find just a single match...">OBSSMatch</a>();
<a name="l00304"></a>00304     <span class="keywordtype">void</span> Match(std::vector&lt;std::vector&lt;int&gt; &gt; &amp;v, <span class="keywordtype">int</span> bidx=-1);
<a name="l00305"></a>00305   };
<a name="l00306"></a>00306 
<a name="l00307"></a>00307   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#6b397e6876fbb7f13d0e4a3cac7edfdc">SmartsLexReplace</a>(std::string &amp;,
<a name="l00308"></a>00308                               std::vector&lt;std::pair&lt;std::string,std::string&gt; &gt; &amp;);
<a name="l00309"></a>00309 
<a name="l00310"></a>00310 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00311"></a>00311 
<a name="l00312"></a>00312 <span class="preprocessor">#endif // OB_PARSMART_H</span>
<a name="l00313"></a>00313 <span class="preprocessor"></span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:34 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
