<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBFingerprint Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>
  </div>
</div>
<div class="contents">
<h1>OBFingerprint Class Reference</h1><!-- doxytag: class="OpenBabel::OBFingerprint" --><!-- doxytag: inherits="OpenBabel::OBPlugin" -->The base class for fingerprints.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="fingerprint_8h-source.shtml">openbabel/fingerprint.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for OBFingerprint:</div>
<div class="dynsection">
<p><center><img src="classOpenBabel_1_1OBFingerprint__inherit__graph.png" border="0" usemap="#OBFingerprint__inherit__map" alt="Inheritance graph"></center>
<map name="OBFingerprint__inherit__map">
<area shape="rect" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime." alt="" coords="19,5,99,32"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center></div>

<p>
<a href="classOpenBabel_1_1OBFingerprint-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#48c2b72feb2607662249c83e85ce665b">FptFlag</a> { <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#48c2b72feb2607662249c83e85ce665ba6c1016f52874254ed7604c44df21cca">FPT_UNIQUEBITS</a> = 1
 }</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef std::map&lt; const char <br>
*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef <br>
PluginMapType::const_iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#55f9725c7e338f4d4c2d9f7a7c34f0cb">~OBFingerprint</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#70768d339cbfa0146c7f1cd278e05e19">SetBit</a> (std::vector&lt; unsigned int &gt; &amp;vec, const unsigned int n)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#41fefad793d68714c5a0732b000bd1b2">GetBit</a> (const std::vector&lt; unsigned int &gt; &amp;vec, const unsigned int n)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#9bbe06daca0e9e000492cc6a89d7dabd">Fold</a> (std::vector&lt; unsigned int &gt; &amp;vec, unsigned int nbits)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#462db518c432fa8fab958b8dd32d8a05">GetFingerprint</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::vector&lt; unsigned int &gt; &amp;fp, int nbits=0)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#94a94537cc5ba96b1876db1b612b91a3">Flags</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#1a7cbd70f2c24b00f1d0a6dc19e2b519">DescribeBits</a> (const std::vector&lt; unsigned int &gt; fp, bool bSet=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#e0859fdbf134af95a8231eb32c73b7db">Display</a> (std::string &amp;txt, const char *param, const char *ID=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9399e9568ab809d714385f1b237a9335">MakeInstance</a> (const std::vector&lt; std::string &gt; &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#753a34173c6750388d33e5294556790f">GetID</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#abc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#f244b13b4b50bb9343f3026d7372e964">Tanimoto</a> (const std::vector&lt; unsigned int &gt; &amp;vec1, const std::vector&lt; unsigned int &gt; &amp;vec2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#e6df021d906a48593e8f9ed11bd8d128">Tanimoto</a> (const std::vector&lt; unsigned int &gt; &amp;vec1, const unsigned int *p2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#d9ecfee3be06f4c37ef48506100f6f0c">Getbitsperint</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#3f95fb7efe843a55b087edd16fbe4012">FindFingerprint</a> (const char *ID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#c8ba4fe4a0634561ddd4667c8ef28ae1">GetPlugin</a> (const char *Type, const char *ID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#f95953a5793333ba51e978c4a0a00103">ListAsVector</a> (const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9fabfd2513038ae6ac475ac0ff2c73cd">List</a> (const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#ba22c5352d36c7f058299af7ddffb03e">ListAsString</a> (const char *PluginID, const char *param=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#84fc973fdf4bba5a6b0e2d402077991c">FirstLine</a> (const char *txt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1d4d73999ab0518ee471c635bd0a7e87">Begin</a> (const char *PluginID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9a330280c1cd2e7119dac87a6fd0b762">End</a> (const char *PluginID)</td></tr>

<tr><td colspan="2"><br><h2>Static Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#c40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#dfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#706e628de74c41f357e6fe9de774111c">BaseFindType</a> (<a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1f8d25dafb0bc13814ca451035f67955">_id</a></td></tr>

<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>bit_or</b></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Function object to set bits. <br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The base class for fingerprints. 
<p>
These fingerprints are condensed representation of molecules (or other objects) as a list of boolean values (actually bits in a vector&lt;unsigned&gt;) with length of a power of 2. The main motivation is for fast searching of data sources containing large numbers of molecules (up to several million). Open Babel provides some routines which can search text files containing lists of molecules in any format. See the documentation on the class <a class="el" href="classOpenBabel_1_1FastSearch.shtml" title="Class to search fingerprint index files.">FastSearch</a>.<p>
There are descriptions of molecular fingerprints at <br>
 <a href="http://www.daylight.com/dayhtml/doc/theory/theory.finger.html">http://www.daylight.com/dayhtml/doc/theory/theory.finger.html</a>) and <br>
 <a href="http://www.mesaac.com/Fingerprint.htm">http://www.mesaac.com/Fingerprint.htm</a> <br>
 Many methods of preparing fingerprints have been described, but the type supported currently in <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> has each bit representing a substructure (or other molecular property). If a substructure is present in the molecule, then a particular bit is set to 1. But because the hashing method may also map other substructures to the same bit, a match does not guarantee that a particular substructure is present; there may be false positives. However, with proper design, a large fraction of irrelevant molecules in a data set can be eliminated in a fast search with boolean methods on the fingerprints. It then becomes feasible to make a definitive substructure search by conventional methods on this reduced list even if it is slow.<p>
<a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> provides a framework for applying new types of fingerprints without changing any existing code. They are derived from <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a> and the source file is just compiled with the rest of <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a>. Alternatively, they can be separately compiled as a DLL or shared library and discovered when <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> runs.<p>
For more on these specific implementations of fingerprints in Open Babel, please take a look at the developer's wiki: <a href="http://openbabel.org/wiki/Fingerprints">http://openbabel.org/wiki/Fingerprints</a><p>
Fingerprints derived from this abstract base class <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a> can be for any object derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> (not just for <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>). Each derived class provides an ID as a string and <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a> keeps a map of these to provides a pointer to the class when requested in FindFingerprint.<p>
<h4>-- To define a fingerprint type --</h4>
<p>
The classes derived form <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a> are required to provide a <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#462db518c432fa8fab958b8dd32d8a05">GetFingerprint()</a> routine and a <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7" title="Required description of a sub-type.">Description()</a> routine <div class="fragment"><pre class="fragment">    <span class="keyword">class </span>MyFpType : OBFingerprint 
    {
       MyFpType(<span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keywordtype">id</span>) : OBFingerprint(id){};

       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#462db518c432fa8fab958b8dd32d8a05">GetFingerprint</a>(OBBase* pOb, vector&lt;unsigned int&gt;&amp; fp, <span class="keywordtype">int</span> nbits) 
       {
          <span class="comment">//Convert pOb to the required type, usually OBMol</span>
          OBMol* pmol = <span class="keyword">dynamic_cast&lt;</span>OBMol*<span class="keyword">&gt;</span>(pOb);
          fp.resize(required_number_of_words);
          ... 
          use <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#70768d339cbfa0146c7f1cd278e05e19" title="Sets the nth bit.">SetBit</a>(fp,n); to <span class="keyword">set</span> the nth bit

          <span class="keywordflow">if</span>(nbits)
             <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#9bbe06daca0e9e000492cc6a89d7dabd" title="Repeatedly ORs the top half with the bottom half until no smaller than nbits.">Fold</a>(fp, nbits);
       }
       
       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7" title="Required description of a sub-type.">Description</a>(){ <span class="keywordflow">return</span> <span class="stringliteral">"Some descriptive text"</span>;}
       ...
    };
</pre></div><p>
Declare a global instance with the ID you will use in -f options to specify its use. <div class="fragment"><pre class="fragment">    MyFpType theMyFpType(<span class="stringliteral">"myfpID"</span>);
</pre></div><p>
<h4>-- To obtain a fingerprint --</h4>
<p>
<div class="fragment"><pre class="fragment">    OBMol mol;
    ...
    vector&lt;unsigned int&gt; fp;
    OBFingerprint::GetDefault()-&gt;GetFingerprint(&amp;mol, fp); <span class="comment">//gets default size of fingerprint</span>
</pre></div> or <div class="fragment"><pre class="fragment">    vector&lt;unsigned int&gt; fp;
    OBFingerPrint* pFP = <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#3f95fb7efe843a55b087edd16fbe4012" title="For backward compatibility; a synonym of OBFingerprint::FindType.">OBFingerprint::FindFingerprint</a>(<span class="stringliteral">"myfpID"</span>);
    ...and maybe...
    pFP-&gt;GetFingerprint(&amp;mol,fp, 128); <span class="comment">//fold down to 128bits if was originally larger</span>
</pre></div><p>
<h4>-- To print a list of available fingerprint types --</h4>
<p>
<div class="fragment"><pre class="fragment">    std::string id;
    OBFingerPrint* pFPrt=NULL;
    <span class="keywordflow">while</span>(OBFingerprint::GetNextFPrt(<span class="keywordtype">id</span>, pFPrt))
    {
       cout &lt;&lt; <span class="keywordtype">id</span> &lt;&lt; <span class="stringliteral">" -- "</span> &lt;&lt; pFPrt-&gt;Description() &lt;&lt; endl;
    }
</pre></div><p>
Fingerprints are handled as vector&lt;unsigned int&gt; so that the number of bits in this vector and their order will be platform and compiler dependent, because of size of int types and endian differences. Use fingerprints (and fastsearch indexes containing them) only for comparing with other fingerprints prepared on the same machine.<p>
The FingerprintFormat class is an output format which displays fingerprints as hexadecimal. When multiple molecules are supplied it will calculate the Tanimoto coefficient from the first molecule to each of the others. It also shows whether the first molecule is a possible substructure to all the others, i.e. whether all the bits set in the fingerprint for the first molecule are set in the fingerprint of the others. To display hexadecimal information when multiple molecules are provided it is necessay to use the -xh option.<p>
To see a list of available format types, type babel -F on the command line. The -xF option of the FingerprintFormat class also provides this output, but due to a quirk in the way the program works, it is necessary to have a valid input molecule for this option to work. <hr><h2>Member Typedef Documentation</h2>
<a class="anchor" name="0fd3c807ed3341c33070c93b14739bc8"></a><!-- doxytag: member="OpenBabel::OBFingerprint::PluginMapType" ref="0fd3c807ed3341c33070c93b14739bc8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;const char*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>*, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a>&gt; <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8fac85f5497f873a2dd8734b47f0bdc0"></a><!-- doxytag: member="OpenBabel::OBFingerprint::PluginIterator" ref="8fac85f5497f873a2dd8734b47f0bdc0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef PluginMapType::const_iterator <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Enumeration Documentation</h2>
<a class="anchor" name="48c2b72feb2607662249c83e85ce665b"></a><!-- doxytag: member="OpenBabel::OBFingerprint::FptFlag" ref="48c2b72feb2607662249c83e85ce665b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#48c2b72feb2607662249c83e85ce665b">FptFlag</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Optional flags. 
<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="48c2b72feb2607662249c83e85ce665ba6c1016f52874254ed7604c44df21cca"></a><!-- doxytag: member="FPT_UNIQUEBITS" ref="48c2b72feb2607662249c83e85ce665ba6c1016f52874254ed7604c44df21cca" args="" -->FPT_UNIQUEBITS</em>&nbsp;</td><td>
</td></tr>
</table>
</dl>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="55f9725c7e338f4d4c2d9f7a7c34f0cb"></a><!-- doxytag: member="OpenBabel::OBFingerprint::~OBFingerprint" ref="55f9725c7e338f4d4c2d9f7a7c34f0cb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="70768d339cbfa0146c7f1cd278e05e19"></a><!-- doxytag: member="OpenBabel::OBFingerprint::SetBit" ref="70768d339cbfa0146c7f1cd278e05e19" args="(std::vector&lt; unsigned int &gt; &amp;vec, const unsigned int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBit           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the nth bit. 
<p>

</div>
</div><p>
<a class="anchor" name="41fefad793d68714c5a0732b000bd1b2"></a><!-- doxytag: member="OpenBabel::OBFingerprint::GetBit" ref="41fefad793d68714c5a0732b000bd1b2" args="(const std::vector&lt; unsigned int &gt; &amp;vec, const unsigned int n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetBit           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
return true if the nth bit is set; 
<p>

</div>
</div><p>
<a class="anchor" name="9bbe06daca0e9e000492cc6a89d7dabd"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Fold" ref="9bbe06daca0e9e000492cc6a89d7dabd" args="(std::vector&lt; unsigned int &gt; &amp;vec, unsigned int nbits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Fold           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>nbits</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Repeatedly ORs the top half with the bottom half until no smaller than nbits. 
<p>

</div>
</div><p>
<a class="anchor" name="462db518c432fa8fab958b8dd32d8a05"></a><!-- doxytag: member="OpenBabel::OBFingerprint::GetFingerprint" ref="462db518c432fa8fab958b8dd32d8a05" args="(OBBase *pOb, std::vector&lt; unsigned int &gt; &amp;fp, int nbits=0)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool GetFingerprint           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>fp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>nbits</em> = <code>0</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>fingerprint in vector, which may be resized, folded to nbits (if nbits!=0) </dd></dl>

<p>Referenced by <a class="el" href="fingerprint_8cpp-source.shtml#l00391">FastSearchIndexer::Add()</a>, <a class="el" href="fingerprint_8cpp-source.shtml#l00119">FastSearch::Find()</a>, <a class="el" href="fingerprint_8cpp-source.shtml#l00179">FastSearch::FindMatch()</a>, and <a class="el" href="fingerprint_8cpp-source.shtml#l00220">FastSearch::FindSimilar()</a>.</p>

</div>
</div><p>
<a class="anchor" name="94a94537cc5ba96b1876db1b612b91a3"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Flags" ref="94a94537cc5ba96b1876db1b612b91a3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int Flags           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1a7cbd70f2c24b00f1d0a6dc19e2b519"></a><!-- doxytag: member="OpenBabel::OBFingerprint::DescribeBits" ref="1a7cbd70f2c24b00f1d0a6dc19e2b519" args="(const std::vector&lt; unsigned int &gt; fp, bool bSet=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string DescribeBits           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt;&nbsp;</td>
          <td class="paramname"> <em>fp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>bSet</em> = <code>true</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>a description of each bit that is set (or unset, if bSet=false) </dd></dl>
<dl class="since" compact><dt><b>Since:</b></dt><dd>version 2.2 </dd></dl>

</div>
</div><p>
<a class="anchor" name="f244b13b4b50bb9343f3026d7372e964"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Tanimoto" ref="f244b13b4b50bb9343f3026d7372e964" args="(const std::vector&lt; unsigned int &gt; &amp;vec1, const std::vector&lt; unsigned int &gt; &amp;vec2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Tanimoto           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vec1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vec2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the Tanimoto coefficient between two vectors (vector&lt;unsigned int&gt;&amp; SeekPositions) </dd></dl>

</div>
</div><p>
<a class="anchor" name="e6df021d906a48593e8f9ed11bd8d128"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Tanimoto" ref="e6df021d906a48593e8f9ed11bd8d128" args="(const std::vector&lt; unsigned int &gt; &amp;vec1, const unsigned int *p2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static double Tanimoto           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vec1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int *&nbsp;</td>
          <td class="paramname"> <em>p2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Inline version of <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#f244b13b4b50bb9343f3026d7372e964">Tanimoto()</a> taking a pointer for the second vector. 
<p>

<p>
If used for two vectors, vec1 and vec2, call as Tanimoto(vec1, &amp;vec2[0]); 
</div>
</div><p>
<a class="anchor" name="d9ecfee3be06f4c37ef48506100f6f0c"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Getbitsperint" ref="d9ecfee3be06f4c37ef48506100f6f0c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int Getbitsperint           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="fingerprint_8cpp-source.shtml#l00365">FastSearchIndexer::FastSearchIndexer()</a>, <a class="el" href="fingerprint_8cpp-source.shtml#l00119">FastSearch::Find()</a>, <a class="el" href="fingerprint_8cpp-source.shtml#l00179">FastSearch::FindMatch()</a>, <a class="el" href="fingerprint_8cpp-source.shtml#l00220">FastSearch::FindSimilar()</a>, <a class="el" href="fingerprint_8cpp-source.shtml#l00048">OBFingerprint::Fold()</a>, <a class="el" href="fingerprint_8cpp-source.shtml#l00041">OBFingerprint::GetBit()</a>, and <a class="el" href="fingerprint_8cpp-source.shtml#l00036">OBFingerprint::SetBit()</a>.</p>

</div>
</div><p>
<a class="anchor" name="3f95fb7efe843a55b087edd16fbe4012"></a><!-- doxytag: member="OpenBabel::OBFingerprint::FindFingerprint" ref="3f95fb7efe843a55b087edd16fbe4012" args="(const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>* FindFingerprint           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
For backward compatibility; a synonym of OBFingerprint::FindType. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>a pointer to a fingerprint (the default if ID is empty), or NULL if not available </dd></dl>

<p>Referenced by <a class="el" href="fingerprint_8cpp-source.shtml#l00333">FptIndex::CheckFP()</a>.</p>

</div>
</div><p>
<a class="anchor" name="4a6b8d1611d5d963fc29982cc1ebcbf7"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Description" ref="4a6b8d1611d5d963fc29982cc1ebcbf7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* Description           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Required description of a sub-type. 
<p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBFormat.shtml#b87525f269e7819d8462f450d30d56a7">OBFormat</a>, <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7">OBGroupContrib</a>, and <a class="el" href="classOpenBabel_1_1OpTransform.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7">OpTransform</a>.</p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00102">OBPlugin::Display()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="e0859fdbf134af95a8231eb32c73b7db"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Display" ref="e0859fdbf134af95a8231eb32c73b7db" args="(std::string &amp;txt, const char *param, const char *ID=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Display           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Write information on a plugin class to the string txt. Return false if not written. The default implementation outputs: the ID, a tab character, and the first line of the Description. The param string can be used in derived types to provide different outputs. 
<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#e0859fdbf134af95a8231eb32c73b7db">OBDescriptor</a>, and <a class="el" href="classOpenBabel_1_1OBFormat.shtml#e0859fdbf134af95a8231eb32c73b7db">OBFormat</a>.</p>

<p>Referenced by <a class="el" href="descriptor_8cpp-source.shtml#l00477">OBDescriptor::Display()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9399e9568ab809d714385f1b237a9335"></a><!-- doxytag: member="OpenBabel::OBFingerprint::MakeInstance" ref="9399e9568ab809d714385f1b237a9335" args="(const std::vector&lt; std::string &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* MakeInstance           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Make a new instance of the class. See <a class="el" href="classOpenBabel_1_1OpTransform.shtml" title="Applies molecular transforms (OBChemTsfm class) read from a datafile.">OpTransform</a>, <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml" title="Handle group contribution algorithms.">OBGroupContrib</a>, SmartsDescriptor classes for derived versions. Usually, the first parameter is the classname, the next three are parameters(ID, filename, description) for a constructor, and the rest data. 
<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#b91e9dba77605edc84876eac596f2094">OBGroupContrib</a>, and <a class="el" href="classOpenBabel_1_1OpTransform.shtml#ed21db4d9fb23cb30d0440e844a69f57">OpTransform</a>.</p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00287">OBConversion::LoadFormatFiles()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c8ba4fe4a0634561ddd4667c8ef28ae1"></a><!-- doxytag: member="OpenBabel::OBFingerprint::GetPlugin" ref="c8ba4fe4a0634561ddd4667c8ef28ae1" args="(const char *Type, const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* GetPlugin           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>Type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get a pointer to a plugin from its type and ID. Return NULL if not found. Not cast to Type*. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00287">OBConversion::LoadFormatFiles()</a>.</p>

</div>
</div><p>
<a class="anchor" name="753a34173c6750388d33e5294556790f"></a><!-- doxytag: member="OpenBabel::OBFingerprint::GetID" ref="753a34173c6750388d33e5294556790f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* GetID           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the ID of the sub-type instance. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00102">OBPlugin::Display()</a>, <a class="el" href="format_8cpp-source.shtml#l00071">OBFormat::Display()</a>, and <a class="el" href="descriptor_8cpp-source.shtml#l00308">OBDescriptor::PredictAndSave()</a>.</p>

</div>
</div><p>
<a class="anchor" name="f95953a5793333ba51e978c4a0a00103"></a><!-- doxytag: member="OpenBabel::OBFingerprint::ListAsVector" ref="f95953a5793333ba51e978c4a0a00103" args="(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ListAsVector           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vlist</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Output a list of sub-type classes of the the type PluginID, or, if PluginID is "plugins" or empty, a list of the base types. If PluginID is not recognized or is NULL, the base types are output and the return is false. 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01448">OBConversion::GetSupportedInputFormat()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01457">OBConversion::GetSupportedOutputFormat()</a>, and <a class="el" href="plugin_8cpp-source.shtml#l00076">OBPlugin::List()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9fabfd2513038ae6ac475ac0ff2c73cd"></a><!-- doxytag: member="OpenBabel::OBFingerprint::List" ref="9fabfd2513038ae6ac475ac0ff2c73cd" args="(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void List           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream *&nbsp;</td>
          <td class="paramname"> <em>os</em> = <code>&amp;std::cout</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
As ListAsVector but sent to an ostream with a default of cout if not specified. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00084">OBPlugin::ListAsString()</a>.</p>

</div>
</div><p>
<a class="anchor" name="ba22c5352d36c7f058299af7ddffb03e"></a><!-- doxytag: member="OpenBabel::OBFingerprint::ListAsString" ref="ba22c5352d36c7f058299af7ddffb03e" args="(const char *PluginID, const char *param=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string ListAsString           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
As ListAsVector but returns a string containing the list. 
<p>

</div>
</div><p>
<a class="anchor" name="84fc973fdf4bba5a6b0e2d402077991c"></a><!-- doxytag: member="OpenBabel::OBFingerprint::FirstLine" ref="84fc973fdf4bba5a6b0e2d402077991c" args="(const char *txt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string FirstLine           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>txt</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Utility function to return only the first line of a string. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00102">OBPlugin::Display()</a>, <a class="el" href="format_8cpp-source.shtml#l00071">OBFormat::Display()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1d4d73999ab0518ee471c635bd0a7e87"></a><!-- doxytag: member="OpenBabel::OBFingerprint::Begin" ref="1d4d73999ab0518ee471c635bd0a7e87" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> Begin           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return an iterator at the start of the map of the plugin types PluginID or, if there is no such map, the end of the top level plugin map. 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01501">OBConversion::GetNextFormat()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9a330280c1cd2e7119dac87a6fd0b762"></a><!-- doxytag: member="OpenBabel::OBFingerprint::End" ref="9a330280c1cd2e7119dac87a6fd0b762" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> End           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01501">OBConversion::GetNextFormat()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="abc1385cbe63145ffec6edf1f2c3be98"></a><!-- doxytag: member="OpenBabel::OBFingerprint::GetMap" ref="abc1385cbe63145ffec6edf1f2c3be98" args="() const =0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; GetMap           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [pure virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the map of the subtypes. 
<p>

<p>Referenced by <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c40457336d7b12bb632b4ac4e8955a3a"></a><!-- doxytag: member="OpenBabel::OBFingerprint::PluginMap" ref="c40457336d7b12bb632b4ac4e8955a3a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; PluginMap           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns a reference to the map of the plugin types. Is a function rather than a static member variable to avoid initialization problems. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00028">OBPlugin::GetTypeMap()</a>, <a class="el" href="plugin_8cpp-source.shtml#l00037">OBPlugin::ListAsVector()</a>, and <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="dfcf9fda27cfbc4301fc94517a4250ef"></a><!-- doxytag: member="OpenBabel::OBFingerprint::GetTypeMap" ref="dfcf9fda27cfbc4301fc94517a4250ef" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">OBPlugin::PluginMapType</a> &amp; GetTypeMap           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the map of a particular plugin type, e.g. GetMapType("fingerprints"). 
<p>

</div>
</div><p>
<a class="anchor" name="706e628de74c41f357e6fe9de774111c"></a><!-- doxytag: member="OpenBabel::OBFingerprint::BaseFindType" ref="706e628de74c41f357e6fe9de774111c" args="(PluginMapType &amp;Map, const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* BaseFindType           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the type with the specified ID, or NULL if not found. Will be cast to the appropriate class in the calling routine. 
<p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="1f8d25dafb0bc13814ca451035f67955"></a><!-- doxytag: member="OpenBabel::OBFingerprint::_id" ref="1f8d25dafb0bc13814ca451035f67955" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1f8d25dafb0bc13814ca451035f67955">_id</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="fingerprint_8h-source.shtml">fingerprint.h</a><li><a class="el" href="fingerprint_8cpp.shtml">fingerprint.cpp</a></ul>
</div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:39 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
