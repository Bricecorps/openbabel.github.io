<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: Member List</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>OBBitVec Member List</h1>This is the complete list of members for <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>, including all inherited members.<p><table>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#d06f035d55e669326f14cd7c6ff724cc">BitIsOn</a>(int bit_offset) const </td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#9cbd85a20d3c22eed705e4215b5beff7">BitIsSet</a>(unsigned bit_offset) const </td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a71d36872f416feaa853788a7a7a7ef8">Clear</a>()</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#cf47ba30bf82aff0a9f03029917c5849">CountBits</a>() const </td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#6fcfd4a80bfd7dc324f815cd351bfbdf">Empty</a>() const </td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#787ec2b13a14e73a2732a5eb0941c89a">EndBit</a>() const </td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#c00671a01df7cc0b2751cf01576cb48b">FirstBit</a>(unsigned bit_offset=0) const </td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#47b489f96fb83fb92444dc4fc69d052e">Fold</a>(unsigned new_bit_size)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#0e38205f69ea775ac85766e8fa84aa09">FromString</a>(const std::string &amp;line, int bits)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#6919c04c8f2a7a600d926dfb69a2ccff">FromVecInt</a>(const std::vector&lt; int &gt; &amp;bit_offsets)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#5d1e7e6970918644e52e9d09c232ae93">GetSize</a>() const </td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#56df5cb29ee1da7ea5626ab4c0f35882">GetWords</a>(word_vector &amp;vec)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#aef62c8761ddd1b95824fc57b1b277b5">IsEmpty</a>() const </td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#00e05e1bb6f3185b1a40728679be5274">Negate</a>()</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#b8bac9f6bedd4c94792757d965945ac6">NextBit</a>(int last_bit_offset) const </td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#f0100bd07b2642e38b29dc8e74ff765b">OBBitVec</a>()</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#c5a4c3682c88b8d666b5d7d33183fb55">OBBitVec</a>(unsigned size_in_bits)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#1a1bd9c96031c99d3209b04ef50b4d6c">OBBitVec</a>(const OBBitVec &amp;bv)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#657ec1b1c3c3019ea29f60356c18c91a">operator &amp;</a>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#3929c86b35d09fcdcf228d9b5989e0f8">operator &amp;=</a>(const OBBitVec &amp;bv)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a7711d3edd25794568784a430fd7b062">operator+=</a>(const OBBitVec &amp;bv)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#4bd7d9808479c28f2cc88650929df4d9">operator-</a>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#321d8efee0bf7ca07bbffe94bda40b87">operator-=</a>(const OBBitVec &amp;bv)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#0c4f48d70507806331e9c497f0ed8144">operator&lt;</a>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#b6ce85c5fdeb93b0aa917346a9deb313">operator&lt;&lt;</a>(std::ostream &amp;os, const OBBitVec &amp;bv)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#24793888dd45beaff49d652ce07bd823">operator=</a>(const OBBitVec &amp;bv)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#792b966c395440b305366a77fd57651d">operator==</a>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#501d573f3e7e04cf92470fa0c7d23789">operator&gt;&gt;</a>(std::istream &amp;is, OBBitVec &amp;bv)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#1f22ca998400b0babe0bee468189225b">operator[]</a>(int bit_offset) const </td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#b9f45dc2b4c1840d291ea757e431933a">operator^</a>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#fb212210bd7dffef43eaca0db7e3a499">operator^=</a>(const OBBitVec &amp;bv)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a46d68ba4737343303962397391cb7ba">operator|</a>(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [friend]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#d34fbd2840a8afd87d69f4f71174407d">operator|=</a>(const OBBitVec &amp;bv)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#3f7949c8ca082670fa93310be6576854">operator|=</a>(int bit_offset)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#7bc2d3a9e8b18736d47932ba327afd38">Resize</a>(unsigned size_in_bits)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#6b57d4f315f27f863dfaba863f9d6c4c">ResizeWords</a>(unsigned size_in_words)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td><code> [inline]</code></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#5ca76b0cbbf2dd86395b0af704c8cdfb">SetBitOff</a>(unsigned bit_offset)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#0920b57e131b9eab47d6939e890cd521">SetBitOn</a>(unsigned bit_offset)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#f248c931e7d8abdcb0ca18ba0a3e8533">SetRangeOff</a>(unsigned lo_bit_offset, unsigned hi_bit_offset)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#1a5ff904f4dbba5c3d92bb1d98fa23c2">SetRangeOn</a>(unsigned lo_bit_offset, unsigned hi_bit_offset)</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#d336607832d6ef7e48bed9fe103e0fa5">ToVecInt</a>(std::vector&lt; int &gt; &amp;bit_offsets) const </td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
  <tr class="memlist"><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#732c7bffa6fdaeb8996f3a63450f422f">word_vector</a> typedef</td><td><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td><td></td></tr>
</table></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:38 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
