<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBGroupContrib Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml">OBGroupContrib</a>
  </div>
</div>
<div class="contents">
<h1>OBGroupContrib Class Reference</h1><!-- doxytag: class="OpenBabel::OBGroupContrib" --><!-- doxytag: inherits="OpenBabel::OBDescriptor" -->Handle group contribution algorithms.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="groupcontrib_8h-source.shtml">openbabel/groupcontrib.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for OBGroupContrib:</div>
<div class="dynsection">
<p><center><img src="classOpenBabel_1_1OBGroupContrib__inherit__graph.png" border="0" usemap="#OBGroupContrib__inherit__map" alt="Inheritance graph"></center>
<map name="OBGroupContrib__inherit__map">
<area shape="rect" href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features." alt="" coords="15,80,119,107"><area shape="rect" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime." alt="" coords="27,6,107,32"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center></div>

<p>
<a href="classOpenBabel_1_1OBGroupContrib-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef std::map&lt; const char <br>
*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef <br>
PluginMapType::const_iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#b9a6ae6c869cad36dc6628f18b2ce677">OBGroupContrib</a> (const char *ID, const char *filename, const char *descr)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml">OBGroupContrib</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#b91e9dba77605edc84876eac596f2094">MakeInstance</a> (const std::vector&lt; std::string &gt; &amp;textlines)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#1d551ecaee77d4e6b2f63ee6cbca89ab">Predict</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#45db88b29eb37e9dd105bf4032e421d2">TypeID</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#24e481deff989015fb68e20786986ca8">PredictAndSave</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#844b4e87cc56b64b699666f525766b69">GetStringValue</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string &amp;svalue)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#4ab46c2e3a9b0b4715d0e6b7134af539">Compare</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::istream &amp;ss, bool noEval)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#e0859fdbf134af95a8231eb32c73b7db">Display</a> (std::string &amp;txt, const char *param, const char *ID=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#753a34173c6750388d33e5294556790f">GetID</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#abc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#1d0907c6fab9cdb01ce11858eb5f0860">FilterCompare</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::istream &amp;ss, bool noEval)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#2230dfc67c9b617df81f950e382844cc">AddProperties</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, const std::string &amp;DescrList)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#1a089d9c827830b5a9a2e644b267e510">DeleteProperties</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, const std::string &amp;DescrList)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#789fe3d5cae737f1caa28590fe29f460">GetValues</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, const std::string &amp;DescrList)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#c8ba4fe4a0634561ddd4667c8ef28ae1">GetPlugin</a> (const char *Type, const char *ID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#f95953a5793333ba51e978c4a0a00103">ListAsVector</a> (const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9fabfd2513038ae6ac475ac0ff2c73cd">List</a> (const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#ba22c5352d36c7f058299af7ddffb03e">ListAsString</a> (const char *PluginID, const char *param=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#84fc973fdf4bba5a6b0e2d402077991c">FirstLine</a> (const char *txt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1d4d73999ab0518ee471c635bd0a7e87">Begin</a> (const char *PluginID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9a330280c1cd2e7119dac87a6fd0b762">End</a> (const char *PluginID)</td></tr>

<tr><td colspan="2"><br><h2>Static Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#2ad7bcf0156b67088dfe04068df09890">GetIdentifier</a> (std::istream &amp;optionText)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#20b0788ed84f1b69746dfd9ed06be507">ParsePredicate</a> (std::istream &amp;optionText, char &amp;ch1, char &amp;ch2, std::string &amp;svalue)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#c41e9b3233ce576c2e4c5b242767eaec">ReadStringFromFilter</a> (std::istream &amp;ss, std::string &amp;result)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#00c8a88c0a36c9a1167b119214e015e6">CompareStringWithFilter</a> (std::istream &amp;optionText, std::string &amp;s, bool noEval, bool NoCompOK=false)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#865d2be70640a96f185bf78dcaaea8b2">ispunctU</a> (char ch)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#4e794d96851deaad479e17b30928a3cd">MatchPairData</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string &amp;s)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#c40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#dfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#706e628de74c41f357e6fe9de774111c">BaseFindType</a> (<a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1f8d25dafb0bc13814ca451035f67955">_id</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Handle group contribution algorithms. 
<p>
This is the base class for calculations that use the JOELib2 contribution algorithm. <hr><h2>Member Typedef Documentation</h2>
<a class="anchor" name="0fd3c807ed3341c33070c93b14739bc8"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::PluginMapType" ref="0fd3c807ed3341c33070c93b14739bc8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;const char*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>*, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a>&gt; <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8fac85f5497f873a2dd8734b47f0bdc0"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::PluginIterator" ref="8fac85f5497f873a2dd8734b47f0bdc0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef PluginMapType::const_iterator <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="b9a6ae6c869cad36dc6628f18b2ce677"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::OBGroupContrib" ref="b9a6ae6c869cad36dc6628f18b2ce677" args="(const char *ID, const char *filename, const char *descr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml">OBGroupContrib</a>           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>descr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
constructor. Each instance provides an ID and a datafile. 
<p>
Predict the logP, MR, TPSA (each instance of <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml" title="Handle group contribution algorithms.">OBGroupContrib</a> uses different parameters loaded from its own datafile) for molecule mol using the group contributions algorithm from JOELib2. 
</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="4a6b8d1611d5d963fc29982cc1ebcbf7"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::Description" ref="4a6b8d1611d5d963fc29982cc1ebcbf7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* Description           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Required description of a sub-type. 
<p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7">OBPlugin</a>.</p>

</div>
</div><p>
<a class="anchor" name="b91e9dba77605edc84876eac596f2094"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::MakeInstance" ref="b91e9dba77605edc84876eac596f2094" args="(const std::vector&lt; std::string &gt; &amp;textlines)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml">OBGroupContrib</a>* MakeInstance           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Make a new instance of the class. See <a class="el" href="classOpenBabel_1_1OpTransform.shtml" title="Applies molecular transforms (OBChemTsfm class) read from a datafile.">OpTransform</a>, <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml" title="Handle group contribution algorithms.">OBGroupContrib</a>, SmartsDescriptor classes for derived versions. Usually, the first parameter is the classname, the next three are parameters(ID, filename, description) for a constructor, and the rest data. 
<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9399e9568ab809d714385f1b237a9335">OBPlugin</a>.</p>

</div>
</div><p>
<a class="anchor" name="1d551ecaee77d4e6b2f63ee6cbca89ab"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::Predict" ref="1d551ecaee77d4e6b2f63ee6cbca89ab" args="(OBBase *pOb)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual double Predict           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the value of a numeric descriptor </dd></dl>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#1d551ecaee77d4e6b2f63ee6cbca89ab">OBDescriptor</a>.</p>

</div>
</div><p>
<a class="anchor" name="45db88b29eb37e9dd105bf4032e421d2"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::TypeID" ref="45db88b29eb37e9dd105bf4032e421d2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* TypeID           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="24e481deff989015fb68e20786986ca8"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::PredictAndSave" ref="24e481deff989015fb68e20786986ca8" args="(OBBase *pOb)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double PredictAndSave           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the value of the descriptor and adds it to the object's <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a> </dd></dl>

<p>Referenced by <a class="el" href="descriptor_8cpp-source.shtml#l00392">OBDescriptor::AddProperties()</a>.</p>

</div>
</div><p>
<a class="anchor" name="844b4e87cc56b64b699666f525766b69"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::GetStringValue" ref="844b4e87cc56b64b699666f525766b69" args="(OBBase *pOb, std::string &amp;svalue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetStringValue           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>svalue</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Provides a string value for non-numeric descriptors and returns NaN, or a string representation and returns a numeric value. 
<p>
This default version provides a string representation of the numeric value. 
<p>Referenced by <a class="el" href="descriptor_8cpp-source.shtml#l00423">OBDescriptor::GetValues()</a>, and <a class="el" href="descriptor_8cpp-source.shtml#l00308">OBDescriptor::PredictAndSave()</a>.</p>

</div>
</div><p>
<a class="anchor" name="4ab46c2e3a9b0b4715d0e6b7134af539"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::Compare" ref="4ab46c2e3a9b0b4715d0e6b7134af539" args="(OBBase *pOb, std::istream &amp;ss, bool noEval)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Compare           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::istream &amp;&nbsp;</td>
          <td class="paramname"> <em>ss</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>noEval</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Parses the filter stream for a relational expression and returns its result when applied to the chemical object. 
<p>
<a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#4ab46c2e3a9b0b4715d0e6b7134af539" title="Parses the filter stream for a relational expression and returns its result when...">Compare()</a> is a virtual function and can be overridden to allow different comparison behaviour. The default implementation here is suitable for <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features.">OBDescriptor</a> classes which return a double value. The stringstream is parsed to retrieve a comparison operator, one of &gt; &lt; &gt;= &lt;= = == != , and a numerical value. The function compares this the value returned by <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#1d551ecaee77d4e6b2f63ee6cbca89ab">Predict()</a> and returns the result. The stringstream is left after the number, and its state reflects whether any errors have occurred. If noEval is true, the parsing is as normal but Predict is not called and the function returns false. 
<p>Referenced by <a class="el" href="descriptor_8cpp-source.shtml#l00085">OBDescriptor::FilterCompare()</a>.</p>

</div>
</div><p>
<a class="anchor" name="e0859fdbf134af95a8231eb32c73b7db"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::Display" ref="e0859fdbf134af95a8231eb32c73b7db" args="(std::string &amp;txt, const char *param, const char *ID=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Display           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Write information on a plugin class to the string txt. If the parameter is a descriptor ID, displays the verbose description for that descriptor only e.g. babel -L descriptors HBA1 
<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#e0859fdbf134af95a8231eb32c73b7db">OBPlugin</a>.</p>

</div>
</div><p>
<a class="anchor" name="1d0907c6fab9cdb01ce11858eb5f0860"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::FilterCompare" ref="1d0907c6fab9cdb01ce11858eb5f0860" args="(OBBase *pOb, std::istream &amp;ss, bool noEval)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool FilterCompare           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::istream &amp;&nbsp;</td>
          <td class="paramname"> <em>optionText</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>noEval</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Interprets the --filter option string and returns the combined result of all the comparisons it contains. 
<p>
The string has the form: PropertyID1 predicate1 [booleanOp] PropertyID2 predicate2 ... The propertyIDs are the ID of instances of a <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features.">OBDescriptor</a> class or the Attributes of <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a>, and contain only letters, numbers and underscores. The predicates must start with a punctuation character and are interpreted by the Compare function of the <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features.">OBDescriptor</a> class. The default implementation expects a comparison operator and a number, e.g. &gt;=1.3 Whitespace is optional and is ignored. Each predicate and this <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> object (usually <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>) is passed to the Compare function of a <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features.">OBDescriptor</a>. The result of each comparison is combined in a boolean expression (which can include parentheses) in the normal way. The AND operator can be &amp; or &amp;&amp;, the OR operator can be | or ||, and a unitary NOT is ! The expected operator precedence is achieved using recursive calls of the function. If there is no boolean Op, all the tests have to return true for the function to return true, i.e. the default is AND. If the first operand of an AND is 0, or of an OR is 1, the parsing of the second operand continues but no comparisons are done since the result does not matter. 
<p>Referenced by <a class="el" href="transform_8cpp-source.shtml#l00028">OBMol::DoTransformations()</a>.</p>

</div>
</div><p>
<a class="anchor" name="2230dfc67c9b617df81f950e382844cc"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::AddProperties" ref="2230dfc67c9b617df81f950e382844cc" args="(OBBase *pOb, const std::string &amp;DescrList)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddProperties           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>DescrList</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reads list of descriptor IDs and calls <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#24e481deff989015fb68e20786986ca8">PredictAndSave()</a> for each. 
<p>

<p>Referenced by <a class="el" href="transform_8cpp-source.shtml#l00028">OBMol::DoTransformations()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1a089d9c827830b5a9a2e644b267e510"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::DeleteProperties" ref="1a089d9c827830b5a9a2e644b267e510" args="(OBBase *pOb, const std::string &amp;DescrList)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteProperties           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>DescrList</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Deletes all the OBPairDatas whose attribute names are in the list (if they exist). 
<p>

<p>Referenced by <a class="el" href="transform_8cpp-source.shtml#l00028">OBMol::DoTransformations()</a>.</p>

</div>
</div><p>
<a class="anchor" name="789fe3d5cae737f1caa28590fe29f460"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::GetValues" ref="789fe3d5cae737f1caa28590fe29f460" args="(OBBase *pOb, const std::string &amp;DescrList)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string GetValues           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>DescrList</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reads list of descriptor IDs and <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a> names and returns a list of values, each precede by a space or the first character in the list if it is whitespace or punctuation. 
<p>Referenced by <a class="el" href="transform_8cpp-source.shtml#l00028">OBMol::DoTransformations()</a>.</p>

</div>
</div><p>
<a class="anchor" name="2ad7bcf0156b67088dfe04068df09890"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::GetIdentifier" ref="2ad7bcf0156b67088dfe04068df09890" args="(std::istream &amp;optionText)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string GetIdentifier           </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&nbsp;</td>
          <td class="paramname"> <em>optionText</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Read an identifier from the filter string. 
<p>

<p>Referenced by <a class="el" href="descriptor_8cpp-source.shtml#l00085">OBDescriptor::FilterCompare()</a>.</p>

</div>
</div><p>
<a class="anchor" name="20b0788ed84f1b69746dfd9ed06be507"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::ParsePredicate" ref="20b0788ed84f1b69746dfd9ed06be507" args="(std::istream &amp;optionText, char &amp;ch1, char &amp;ch2, std::string &amp;svalue)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double ParsePredicate           </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&nbsp;</td>
          <td class="paramname"> <em>optionText</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char &amp;&nbsp;</td>
          <td class="paramname"> <em>ch1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char &amp;&nbsp;</td>
          <td class="paramname"> <em>ch2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>svalue</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reads comparison operator and the following string. Return its value if possible else NaN. 
<p>

<p>Referenced by <a class="el" href="descriptor_8cpp-source.shtml#l00342">OBDescriptor::CompareStringWithFilter()</a>, and <a class="el" href="descriptor_8cpp-source.shtml#l00085">OBDescriptor::FilterCompare()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c41e9b3233ce576c2e4c5b242767eaec"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::ReadStringFromFilter" ref="c41e9b3233ce576c2e4c5b242767eaec" args="(std::istream &amp;ss, std::string &amp;result)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ReadStringFromFilter           </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&nbsp;</td>
          <td class="paramname"> <em>ss</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>result</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reads a string from the filter string optionally preceded by = or !=. 
<p>
Reads a string from the filter stream, optionally preceded by = or != <dl class="return" compact><dt><b>Returns:</b></dt><dd>false if != operator found, and true otherwise.</dd></dl>
On entry the stringstream position should be just after the ID. On exit it is after the string. If there is an error, the stringstream badbit is set. Returns false if != found, to indicate negation. Can be of any of the following forms: mystring =mystring ==mystring [must be terminated by a space or tab] "mystring" 'mystring' ="mystring" ='mystring' [mystring can contain spaces or tabs] !=mystring !="mystring" [Returns false indicating negate] There can be spaces or tabs after the operator = == != 
<p>Referenced by <a class="el" href="descriptor_8cpp-source.shtml#l00216">OBDescriptor::ParsePredicate()</a>.</p>

</div>
</div><p>
<a class="anchor" name="00c8a88c0a36c9a1167b119214e015e6"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::CompareStringWithFilter" ref="00c8a88c0a36c9a1167b119214e015e6" args="(std::istream &amp;optionText, std::string &amp;s, bool noEval, bool NoCompOK=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CompareStringWithFilter           </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&nbsp;</td>
          <td class="paramname"> <em>optionText</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>noEval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>NoCompOK</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Makes a comparison using the operator and a string read from the filter stream with a provided string. <dl class="return" compact><dt><b>Returns:</b></dt><dd>the result of the comparison and true if NoCompOK==true and there is no comparison operator. </dd></dl>

<p>Referenced by <a class="el" href="descriptor_8cpp-source.shtml#l00085">OBDescriptor::FilterCompare()</a>.</p>

</div>
</div><p>
<a class="anchor" name="865d2be70640a96f185bf78dcaaea8b2"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::ispunctU" ref="865d2be70640a96f185bf78dcaaea8b2" args="(char ch)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool ispunctU           </td>
          <td>(</td>
          <td class="paramtype">char&nbsp;</td>
          <td class="paramname"> <em>ch</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="descriptor_8cpp-source.shtml#l00040">OBDescriptor::Compare()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00085">OBDescriptor::FilterCompare()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00190">OBDescriptor::GetIdentifier()</a>, and <a class="el" href="descriptor_8cpp-source.shtml#l00423">OBDescriptor::GetValues()</a>.</p>

</div>
</div><p>
<a class="anchor" name="4e794d96851deaad479e17b30928a3cd"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::MatchPairData" ref="4e794d96851deaad479e17b30928a3cd" args="(OBBase *pOb, std::string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool MatchPairData           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if s (with or without _ replaced by spaces) is a PairData attribute. On return s is the form which matches. </dd></dl>

<p>Referenced by <a class="el" href="descriptor_8cpp-source.shtml#l00407">OBDescriptor::DeleteProperties()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00085">OBDescriptor::FilterCompare()</a>, and <a class="el" href="descriptor_8cpp-source.shtml#l00423">OBDescriptor::GetValues()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c8ba4fe4a0634561ddd4667c8ef28ae1"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::GetPlugin" ref="c8ba4fe4a0634561ddd4667c8ef28ae1" args="(const char *Type, const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* GetPlugin           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>Type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get a pointer to a plugin from its type and ID. Return NULL if not found. Not cast to Type*. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00287">OBConversion::LoadFormatFiles()</a>.</p>

</div>
</div><p>
<a class="anchor" name="753a34173c6750388d33e5294556790f"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::GetID" ref="753a34173c6750388d33e5294556790f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* GetID           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the ID of the sub-type instance. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00102">OBPlugin::Display()</a>, <a class="el" href="format_8cpp-source.shtml#l00071">OBFormat::Display()</a>, and <a class="el" href="descriptor_8cpp-source.shtml#l00308">OBDescriptor::PredictAndSave()</a>.</p>

</div>
</div><p>
<a class="anchor" name="f95953a5793333ba51e978c4a0a00103"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::ListAsVector" ref="f95953a5793333ba51e978c4a0a00103" args="(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ListAsVector           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vlist</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Output a list of sub-type classes of the the type PluginID, or, if PluginID is "plugins" or empty, a list of the base types. If PluginID is not recognized or is NULL, the base types are output and the return is false. 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01448">OBConversion::GetSupportedInputFormat()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01457">OBConversion::GetSupportedOutputFormat()</a>, and <a class="el" href="plugin_8cpp-source.shtml#l00076">OBPlugin::List()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9fabfd2513038ae6ac475ac0ff2c73cd"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::List" ref="9fabfd2513038ae6ac475ac0ff2c73cd" args="(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void List           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream *&nbsp;</td>
          <td class="paramname"> <em>os</em> = <code>&amp;std::cout</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
As ListAsVector but sent to an ostream with a default of cout if not specified. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00084">OBPlugin::ListAsString()</a>.</p>

</div>
</div><p>
<a class="anchor" name="ba22c5352d36c7f058299af7ddffb03e"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::ListAsString" ref="ba22c5352d36c7f058299af7ddffb03e" args="(const char *PluginID, const char *param=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string ListAsString           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
As ListAsVector but returns a string containing the list. 
<p>

</div>
</div><p>
<a class="anchor" name="84fc973fdf4bba5a6b0e2d402077991c"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::FirstLine" ref="84fc973fdf4bba5a6b0e2d402077991c" args="(const char *txt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string FirstLine           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>txt</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Utility function to return only the first line of a string. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00102">OBPlugin::Display()</a>, <a class="el" href="format_8cpp-source.shtml#l00071">OBFormat::Display()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1d4d73999ab0518ee471c635bd0a7e87"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::Begin" ref="1d4d73999ab0518ee471c635bd0a7e87" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> Begin           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return an iterator at the start of the map of the plugin types PluginID or, if there is no such map, the end of the top level plugin map. 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01501">OBConversion::GetNextFormat()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9a330280c1cd2e7119dac87a6fd0b762"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::End" ref="9a330280c1cd2e7119dac87a6fd0b762" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> End           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01501">OBConversion::GetNextFormat()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="abc1385cbe63145ffec6edf1f2c3be98"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::GetMap" ref="abc1385cbe63145ffec6edf1f2c3be98" args="() const =0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; GetMap           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [pure virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the map of the subtypes. 
<p>

<p>Referenced by <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c40457336d7b12bb632b4ac4e8955a3a"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::PluginMap" ref="c40457336d7b12bb632b4ac4e8955a3a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; PluginMap           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns a reference to the map of the plugin types. Is a function rather than a static member variable to avoid initialization problems. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00028">OBPlugin::GetTypeMap()</a>, <a class="el" href="plugin_8cpp-source.shtml#l00037">OBPlugin::ListAsVector()</a>, and <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="dfcf9fda27cfbc4301fc94517a4250ef"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::GetTypeMap" ref="dfcf9fda27cfbc4301fc94517a4250ef" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">OBPlugin::PluginMapType</a> &amp; GetTypeMap           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the map of a particular plugin type, e.g. GetMapType("fingerprints"). 
<p>

</div>
</div><p>
<a class="anchor" name="706e628de74c41f357e6fe9de774111c"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::BaseFindType" ref="706e628de74c41f357e6fe9de774111c" args="(PluginMapType &amp;Map, const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* BaseFindType           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the type with the specified ID, or NULL if not found. Will be cast to the appropriate class in the calling routine. 
<p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="1f8d25dafb0bc13814ca451035f67955"></a><!-- doxytag: member="OpenBabel::OBGroupContrib::_id" ref="1f8d25dafb0bc13814ca451035f67955" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1f8d25dafb0bc13814ca451035f67955">_id</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="groupcontrib_8h-source.shtml">groupcontrib.h</a></ul>
</div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:40 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
