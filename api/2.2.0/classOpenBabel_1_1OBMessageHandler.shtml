<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBMessageHandler Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a>
  </div>
</div>
<div class="contents">
<h1>OBMessageHandler Class Reference</h1><!-- doxytag: class="OpenBabel::OBMessageHandler" -->Handle error messages, warnings, debugging information and the like.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="oberror_8h-source.shtml">openbabel/oberror.h</a>&gt;</code>
<p>

<p>
<a href="classOpenBabel_1_1OBMessageHandler-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#5cce70bc2fc932b31d3f31bda5900414">OBMessageHandler</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#4cc3bdf8e84224428a5bde1179b8cc60">~OBMessageHandler</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#2482566201934523c4631d85b1214a70">ThrowError</a> (<a class="el" href="classOpenBabel_1_1OBError.shtml">OBError</a> err, <a class="el" href="namespaceOpenBabel.shtml#91e6912277f7537a670952698f7b2d82">errorQualifier</a> qqualifier=always)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#40f9d382b5453a4cbf744c9be7f98ab2">ThrowError</a> (const std::string &amp;method, const std::string &amp;errorMsg, <a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> level=obDebug, <a class="el" href="namespaceOpenBabel.shtml#91e6912277f7537a670952698f7b2d82">errorQualifier</a> qualifier=always)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::string &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#aacf3302e7348bab13284a1336040240">GetMessagesOfLevel</a> (const <a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a>)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#2ddeff91a6a4f113be67243d32aae4f0">StartLogging</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#08d309e66bc4091df861de396b6dd4a4">StopLogging</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#77f52cdbd233a78a86a17fdbc5b1aeba">SetMaxLogEntries</a> (unsigned int max)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#d5cc775d9bcbe374ba8e3a7706441187">GetMaxLogEntries</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#f69ea3bc45568000475c11f584bd6506">ClearLog</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#e467fbd6fca625ae5ee0ea066810280f">SetOutputLevel</a> (const <a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> level)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#3e6a1f72967b7b5e99d6a25cdde2fe34">GetOutputLevel</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#8d5a7033d340808ae4eb4602a6f638de">SetOutputStream</a> (std::ostream *os)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::ostream *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#fa3e05fe5fa00cc48db4a2b5b5f3ba95">GetOutputStream</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#b7822d9b9f26fac754fa79efab0dfcaf">StartErrorWrap</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#c846e5a1ffd589891812b87e129b1a67">StopErrorWrap</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#43dbb5cf7a6a8e51944720b532ebf0a3">GetErrorMessageCount</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#d8c74030fe5436581bebd5c42af17bc5">GetWarningMessageCount</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#00c4e7133ee9e7290c0002445789c1c6">GetInfoMessageCount</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#48866a67a47b80b0d0c6adf5267e72eb">GetAuditMessageCount</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#673ec0e1a1c14ca7117e07a90efcd8ee">GetDebugMessageCount</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#b58fc0b88f40b7dca684dfad13d587b7">GetMessageSummary</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#5812cd4eb01367908022f9ef86e49ec6">_messageCount</a> [5]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::deque&lt; <a class="el" href="classOpenBabel_1_1OBError.shtml">OBError</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#08ea2212aebb85ea22895ec49bd81f85">_messageList</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#bddad1d062682a33800f8d048a1e35f6">_outputLevel</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::ostream *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#dff5b7b50cde9f6620dc08128df860c4">_outputStream</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#3c4c6fad78b988cdc4fc9b7ade5e788c">_logging</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#7a0d2d55c1de9a5afc3bf71abedfdddd">_maxEntries</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::streambuf *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#3e0837dfabcca64b1bdf2392e70b3228">_inWrapStreamBuf</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::streambuf *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#9285cdb5ae08c9a33cd6d6998cd69a26">_filterStreamBuf</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Handle error messages, warnings, debugging information and the like. 
<p>
<a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> represents a configurable error system for Open Babel.<p>
A global error log is defined by the Open Babel library for use of internal code as well as code built on top of Open Babel. This class allows flexible filtering based on urgency (defined by the obMessageLevel type), an "audit log" of molecular changes, including recall using the GetMessagesOfLevel method, etc.<p>
The default is to only log and output errors of priority obMessageLevel::obError or obMessageLevel::obWarning.<p>
Long-running code may wish to set the size of the in-memory error log using the StartLogging / StopLogging methods and SetMaxLogEntries. Otherwise, the error log may easily fill up, requiring large amounts of memory.<p>
If you wish to divert error output to a different std::ostream (i.e., for graphical display, or a file log), use the SetOutputStream method -- the default goes to the std::clog stream. Furthermore, some older code uses std::cerr for direct error output, rather than the <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#2482566201934523c4631d85b1214a70" title="Throw an error with an already-formatted OBError object.">ThrowError()</a> methods in this class. To prevent this, you can turn on "error wrapping" using the StartErrorWrap method -- this behavior is turned off by default.<p>
To make it easy to use the <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like.">OBMessageHandler</a> class and error logging facilities, a global log is defined:<p>
<div class="fragment"><pre class="fragment">  OBERROR <span class="keyword">extern</span> <a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml#5cce70bc2fc932b31d3f31bda5900414">OBMessageHandler</a> <a class="code" href="namespaceOpenBabel.shtml#394eef44b3dd6a9174067715712c2d16" title="Global OBMessageHandler error handler.">obErrorLog</a>;
</pre></div><p>
Therefore, it is very easy to log errors:<p>
<div class="fragment"><pre class="fragment">  <span class="keywordflow">if</span> (atomIndex &lt; 1 || atomIndex &gt; mol.NumAtoms() )
     obErrorLog.ThrowError(__FUNCTION__, <span class="stringliteral">"Requested Atom Out of Range"</span>, <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9fd56eb19b254da4133c9c28f7cccf5ce" title="for messages only useful for debugging purposes">obDebug</a>);
</pre></div><p>
or<p>
<div class="fragment"><pre class="fragment">  stringstream errorMsg;
  errorMsg &lt;&lt; <span class="stringliteral">" Could not parse line in type translation table types.txt -- incorect number of columns"</span>;
  errorMsg &lt;&lt; <span class="stringliteral">" found "</span> &lt;&lt; vc.size() &lt;&lt; <span class="stringliteral">" expected "</span> &lt;&lt; _ncols &lt;&lt; <span class="stringliteral">"."</span>;
  obErrorLog.ThrowError(__FUNCTION__, errorMsg.str(), <a class="code" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d98239e6e8daa5c812be192e6447979814" title="for informative messages (e.g., file is a non-standard format)">obInfo</a>);
</pre></div><p>
The __FUNCTION__ builtin is defined by many compilers (e.g., <a href="http://gcc.gnu.org/">GCC</a>) but can be defined to an empty string on some platforms without this compiler extension.<p>
Output from the error log typically looks like: <div class="fragment"><pre class="fragment">  ==============================
 Open Babel Audit Log  in ReadChemObject
  OpenBabel::Read molecule Protein Data Bank format
  ==============================
 Open Babel Information  in ParseConectRecord
  WARNING: Problems reading a PDB file
  Problems reading a CONECT record.
  According to the PDB specification,
  the record should have 70 columns, but OpenBabel found 61 columns.
</pre></div> <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="5cce70bc2fc932b31d3f31bda5900414"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::OBMessageHandler" ref="5cce70bc2fc932b31d3f31bda5900414" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4cc3bdf8e84224428a5bde1179b8cc60"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::~OBMessageHandler" ref="4cc3bdf8e84224428a5bde1179b8cc60" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="2482566201934523c4631d85b1214a70"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::ThrowError" ref="2482566201934523c4631d85b1214a70" args="(OBError err, errorQualifier qqualifier=always)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ThrowError           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBError.shtml">OBError</a>&nbsp;</td>
          <td class="paramname"> <em>err</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#91e6912277f7537a670952698f7b2d82">errorQualifier</a>&nbsp;</td>
          <td class="paramname"> <em>qqualifier</em> = <code>always</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Throw an error with an already-formatted <a class="el" href="classOpenBabel_1_1OBError.shtml" title="Customizable error handling and logging -- store a message, including the method...">OBError</a> object. 
<p>

<p>Referenced by <a class="el" href="fingerprint_8cpp-source.shtml#l00391">FastSearchIndexer::Add()</a>, <a class="el" href="generic_8cpp-source.shtml#l01262">OBChiralData::AddAtomRef()</a>, <a class="el" href="mol_8cpp-source.shtml#l02671">OBMol::AddBond()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="mol_8cpp-source.shtml#l01837">OBMol::AddHydrogens()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00392">OBDescriptor::AddProperties()</a>, <a class="el" href="mol_8cpp-source.shtml#l02756">OBMol::Align()</a>, <a class="el" href="chains_8cpp-source.shtml#l00406">OpenBabel::AllocateByteCode()</a>, <a class="el" href="phmodel_8cpp-source.shtml#l00297">OBChemTsfm::Apply()</a>, <a class="el" href="patty_8cpp-source.shtml#l00160">patty::assign_types()</a>, <a class="el" href="typer_8cpp-source.shtml#l00467">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="typer_8cpp-source.shtml#l00197">OBAtomTyper::AssignHyb()</a>, <a class="el" href="typer_8cpp-source.shtml#l00225">OBAtomTyper::AssignImplicitValence()</a>, <a class="el" href="molchrg_8cpp-source.shtml#l00058">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="mol_8cpp-source.shtml#l02109">OBMol::AssignSpinMultiplicity()</a>, <a class="el" href="typer_8cpp-source.shtml#l00357">OBRingTyper::AssignTypes()</a>, <a class="el" href="typer_8cpp-source.shtml#l00154">OBAtomTyper::AssignTypes()</a>, <a class="el" href="chiral_8cpp-source.shtml#l00206">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="obutil_8cpp-source.shtml#l00524">OpenBabel::CartesianToInternal()</a>, <a class="el" href="mol_8cpp-source.shtml#l03544">OBMol::Center()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01025">OBConversion::CheckForUnintendedBatch()</a>, <a class="el" href="fingerprint_8cpp-source.shtml#l00333">FptIndex::CheckFP()</a>, <a class="el" href="mol_8cpp-source.shtml#l01303">OBMol::Clear()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00040">OBDescriptor::Compare()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00342">OBDescriptor::CompareStringWithFilter()</a>, <a class="el" href="mol_8cpp-source.shtml#l03106">OBMol::ConnectTheDots()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="mol_8cpp-source.shtml#l03762">OBMol::ConvertDativeBonds()</a>, <a class="el" href="mol_8cpp-source.shtml#l02365">OpenBabel::CorrectBadResonanceForm()</a>, <a class="el" href="phmodel_8cpp-source.shtml#l00140">OBPhModel::CorrectForPH()</a>, <a class="el" href="mol_8cpp-source.shtml#l02079">OBMol::CorrectForPH()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00183">OBMoleculeFormat::DeferMolOutput()</a>, <a class="el" href="mol_8cpp-source.shtml#l01725">OBMol::DeleteHydrogens()</a>, <a class="el" href="mol_8cpp-source.shtml#l01685">OBMol::DeleteNonPolarHydrogens()</a>, <a class="el" href="transform_8cpp-source.shtml#l00028">OBMol::DoTransformations()</a>, <a class="el" href="mol_8cpp-source.shtml#l01376">OBMol::EndModify()</a>, <a class="el" href="kekulize_8cpp-source.shtml#l00370">OBMol::expand_kekulize()</a>, <a class="el" href="parsmart_8cpp-source.shtml#l00188">OpenBabel::FatalAllocationError()</a>, <a class="el" href="chains_8cpp-source.shtml#l00487">OpenBabel::FatalMemoryError()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00085">OBDescriptor::FilterCompare()</a>, <a class="el" href="spacegroup_8cpp-source.shtml#l00403">SpaceGroup::Find()</a>, <a class="el" href="fingerprint_8cpp-source.shtml#l00119">FastSearch::Find()</a>, <a class="el" href="chiral_8cpp-source.shtml#l00032">OBMol::FindChiralCenters()</a>, <a class="el" href="ring_8cpp-source.shtml#l00339">OBMol::FindRingAtomsAndBonds()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00068">OBRotorList::FindRotors()</a>, <a class="el" href="ring_8cpp-source.shtml#l00082">OBMol::FindSSSR()</a>, <a class="el" href="fingerprint_8cpp-source.shtml#l00048">OBFingerprint::Fold()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00323">OBBitVec::FromString()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>, <a class="el" href="chains_8cpp-source.shtml#l00492">OpenBabel::GenerateByteCodes()</a>, <a class="el" href="mol_8cpp-source.shtml#l00826">OBMol::GetAtom()</a>, <a class="el" href="generic_8cpp-source.shtml#l01287">OBChiralData::GetAtom4Refs()</a>, <a class="el" href="residue_8cpp-source.shtml#l00152">OpenBabel::GetAtomIDNumber()</a>, <a class="el" href="generic_8cpp-source.shtml#l01276">OBChiralData::GetAtomRef()</a>, <a class="el" href="mol_8cpp-source.shtml#l00844">OBMol::GetBond()</a>, <a class="el" href="mol_8cpp-source.shtml#l01052">OBMol::GetFormula()</a>, <a class="el" href="mol_8cpp-source.shtml#l00872">OBMol::GetResidue()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00940">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="generic_8cpp-source.shtml#l01305">OBChiralData::GetSize()</a>, <a class="el" href="mol_8cpp-source.shtml#l01103">OBMol::GetTotalCharge()</a>, <a class="el" href="mol_8cpp-source.shtml#l01133">OBMol::GetTotalSpinMultiplicity()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00423">OBDescriptor::GetValues()</a>, <a class="el" href="atom_8cpp-source.shtml#l01265">OBAtom::HtoMethyl()</a>, <a class="el" href="data_8cpp-source.shtml#l00867">OBGlobalDataBase::Init()</a>, <a class="el" href="obutil_8cpp-source.shtml#l00437">OpenBabel::InternalToCartesian()</a>, <a class="el" href="bond_8cpp-source.shtml#l00477">OBBond::IsClosure()</a>, <a class="el" href="mol_8cpp-source.shtml#l02573">OBMol::Kekulize()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00287">OBConversion::LoadFormatFiles()</a>, <a class="el" href="builder_8cpp-source.shtml#l00068">OBBuilder::LoadFragments()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00273">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="kekulize_8cpp-source.shtml#l00046">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01326">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00908">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00590">OpenBabel::operator&gt;&gt;()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00342">OBMoleculeFormat::OutputDeferredMols()</a>, <a class="el" href="typer_8cpp-source.shtml#l00421">OBAromaticTyper::ParseLine()</a>, <a class="el" href="typer_8cpp-source.shtml#l00325">OBRingTyper::ParseLine()</a>, <a class="el" href="typer_8cpp-source.shtml#l00065">OBAtomTyper::ParseLine()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00864">OBRotorRules::ParseLine()</a>, <a class="el" href="phmodel_8cpp-source.shtml#l00061">OBPhModel::ParseLine()</a>, <a class="el" href="data_8cpp-source.shtml#l00463">OBTypeTable::ParseLine()</a>, <a class="el" href="data_8cpp-source.shtml#l00354">OBIsotopeTable::ParseLine()</a>, <a class="el" href="bondtyper_8cpp-source.shtml#l00051">OBBondTyper::ParseLine()</a>, <a class="el" href="mol_8cpp-source.shtml#l03265">OBMol::PerceiveBondOrders()</a>, <a class="el" href="chains_8cpp-source.shtml#l00936">OBChainsParser::PerceiveChains()</a>, <a class="el" href="patty_8cpp-source.shtml#l00071">patty::read_rules()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00031">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00880">OBConversion::ReadFile()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00412">OBMoleculeFormat::ReadNameIndex()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00257">OBDescriptor::ReadStringFromFilter()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01412">OBConversion::RegisterOptionParam()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00196">OBRotorList::RemoveSymVals()</a>, <a class="el" href="mol_8cpp-source.shtml#l03045">OBMol::RenumberAtoms()</a>, <a class="el" href="mol_8cpp-source.shtml#l03664">OBMol::Rotate()</a>, <a class="el" href="obutil_8cpp-source.shtml#l00290">OpenBabel::SafeOpen()</a>, <a class="el" href="generic_8cpp-source.shtml#l01244">OBChiralData::SetAtom4Refs()</a>, <a class="el" href="data_8cpp-source.shtml#l00489">OBTypeTable::SetFromType()</a>, <a class="el" href="atom_8cpp-source.shtml#l01335">OBAtom::SetHybAndGeom()</a>, <a class="el" href="bond_8cpp-source.shtml#l00110">OBBond::SetLength()</a>, <a class="el" href="mol_8cpp-source.shtml#l00212">OBMol::SetTorsion()</a>, <a class="el" href="data_8cpp-source.shtml#l00509">OBTypeTable::SetToType()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00042">OBRotorList::Setup()</a>, <a class="el" href="parsmart_8cpp-source.shtml#l00621">OpenBabel::SMARTSError()</a>, <a class="el" href="kekulize_8cpp-source.shtml#l00248">OBMol::start_kekulize()</a>, <a class="el" href="mol_8cpp-source.shtml#l01640">OBMol::StripSalts()</a>, <a class="el" href="oberror_8h-source.shtml#l00208">obLogBuf::sync()</a>, <a class="el" href="obutil_8cpp-source.shtml#l00050">OpenBabel::ThrowError()</a>, <a class="el" href="oberror_8cpp-source.shtml#l00180">OBMessageHandler::ThrowError()</a>, <a class="el" href="mol_8cpp-source.shtml#l02802">OBMol::ToInertialFrame()</a>, <a class="el" href="mol_8cpp-source.shtml#l03625">OBMol::Translate()</a>, <a class="el" href="data_8cpp-source.shtml#l00548">OBTypeTable::Translate()</a>, <a class="el" href="patty_8cpp-source.shtml#l00231">patty::type_to_int()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00124">OBMoleculeFormat::WriteChemObjectImpl()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00831">OBConversion::WriteFile()</a>, and <a class="el" href="fingerprint_8cpp-source.shtml#l00377">FastSearchIndexer::~FastSearchIndexer()</a>.</p>

</div>
</div><p>
<a class="anchor" name="40f9d382b5453a4cbf744c9be7f98ab2"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::ThrowError" ref="40f9d382b5453a4cbf744c9be7f98ab2" args="(const std::string &amp;method, const std::string &amp;errorMsg, obMessageLevel level=obDebug, errorQualifier qualifier=always)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ThrowError           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>method</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>errorMsg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a>&nbsp;</td>
          <td class="paramname"> <em>level</em> = <code>obDebug</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#91e6912277f7537a670952698f7b2d82">errorQualifier</a>&nbsp;</td>
          <td class="paramname"> <em>qualifier</em> = <code>always</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Throw an error in the specified method with an appropriate level. 
<p>

</div>
</div><p>
<a class="anchor" name="aacf3302e7348bab13284a1336040240"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::GetMessagesOfLevel" ref="aacf3302e7348bab13284a1336040240" args="(const obMessageLevel)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetMessagesOfLevel           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a>&nbsp;</td>
          <td class="paramname"> <em>level</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>all messages matching a specified level </dd></dl>

</div>
</div><p>
<a class="anchor" name="2ddeff91a6a4f113be67243d32aae4f0"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::StartLogging" ref="2ddeff91a6a4f113be67243d32aae4f0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void StartLogging           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Start logging messages (default). 
<p>

</div>
</div><p>
<a class="anchor" name="08d309e66bc4091df861de396b6dd4a4"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::StopLogging" ref="08d309e66bc4091df861de396b6dd4a4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void StopLogging           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Stop logging messages completely. 
<p>

</div>
</div><p>
<a class="anchor" name="77f52cdbd233a78a86a17fdbc5b1aeba"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::SetMaxLogEntries" ref="77f52cdbd233a78a86a17fdbc5b1aeba" args="(unsigned int max)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetMaxLogEntries           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>max</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the maximum number of entries (or 0 for no limit). 
<p>

</div>
</div><p>
<a class="anchor" name="d5cc775d9bcbe374ba8e3a7706441187"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::GetMaxLogEntries" ref="d5cc775d9bcbe374ba8e3a7706441187" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetMaxLogEntries           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the current maximum number of entries (default = 0 for no limit) </dd></dl>

</div>
</div><p>
<a class="anchor" name="f69ea3bc45568000475c11f584bd6506"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::ClearLog" ref="f69ea3bc45568000475c11f584bd6506" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ClearLog           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Clear the current message log entirely. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="e467fbd6fca625ae5ee0ea066810280f"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::SetOutputLevel" ref="e467fbd6fca625ae5ee0ea066810280f" args="(const obMessageLevel level)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetOutputLevel           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a>&nbsp;</td>
          <td class="paramname"> <em>level</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the level of messages to output (i.e., messages with at least this priority will be output). 
<p>

</div>
</div><p>
<a class="anchor" name="3e6a1f72967b7b5e99d6a25cdde2fe34"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::GetOutputLevel" ref="3e6a1f72967b7b5e99d6a25cdde2fe34" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> GetOutputLevel           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the current output level </dd></dl>

</div>
</div><p>
<a class="anchor" name="8d5a7033d340808ae4eb4602a6f638de"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::SetOutputStream" ref="8d5a7033d340808ae4eb4602a6f638de" args="(std::ostream *os)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetOutputStream           </td>
          <td>(</td>
          <td class="paramtype">std::ostream *&nbsp;</td>
          <td class="paramname"> <em>os</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fa3e05fe5fa00cc48db4a2b5b5f3ba95"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::GetOutputStream" ref="fa3e05fe5fa00cc48db4a2b5b5f3ba95" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream* GetOutputStream           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b7822d9b9f26fac754fa79efab0dfcaf"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::StartErrorWrap" ref="b7822d9b9f26fac754fa79efab0dfcaf" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool StartErrorWrap           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Start "wrapping" messages to cerr into ThrowError calls. 
<p>

</div>
</div><p>
<a class="anchor" name="c846e5a1ffd589891812b87e129b1a67"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::StopErrorWrap" ref="c846e5a1ffd589891812b87e129b1a67" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool StopErrorWrap           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Turn off "wrapping" messages, restoring normal cerr use (default). 
<p>

<p>Referenced by <a class="el" href="oberror_8cpp-source.shtml#l00153">OBMessageHandler::~OBMessageHandler()</a>.</p>

</div>
</div><p>
<a class="anchor" name="43dbb5cf7a6a8e51944720b532ebf0a3"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::GetErrorMessageCount" ref="43dbb5cf7a6a8e51944720b532ebf0a3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetErrorMessageCount           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Count of messages received at the obError level </dd></dl>

</div>
</div><p>
<a class="anchor" name="d8c74030fe5436581bebd5c42af17bc5"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::GetWarningMessageCount" ref="d8c74030fe5436581bebd5c42af17bc5" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetWarningMessageCount           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Count of messages received at the obWarning level </dd></dl>

</div>
</div><p>
<a class="anchor" name="00c4e7133ee9e7290c0002445789c1c6"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::GetInfoMessageCount" ref="00c4e7133ee9e7290c0002445789c1c6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetInfoMessageCount           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Count of messages received at the obInfo level </dd></dl>

</div>
</div><p>
<a class="anchor" name="48866a67a47b80b0d0c6adf5267e72eb"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::GetAuditMessageCount" ref="48866a67a47b80b0d0c6adf5267e72eb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetAuditMessageCount           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Count of messages received at the obAuditMsg level </dd></dl>

</div>
</div><p>
<a class="anchor" name="673ec0e1a1c14ca7117e07a90efcd8ee"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::GetDebugMessageCount" ref="673ec0e1a1c14ca7117e07a90efcd8ee" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetDebugMessageCount           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Count of messages received at the obDebug level </dd></dl>

</div>
</div><p>
<a class="anchor" name="b58fc0b88f40b7dca684dfad13d587b7"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::GetMessageSummary" ref="b58fc0b88f40b7dca684dfad13d587b7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string GetMessageSummary           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Summary of messages received at all levels </dd></dl>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="5812cd4eb01367908022f9ef86e49ec6"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::_messageCount" ref="5812cd4eb01367908022f9ef86e49ec6" args="[5]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#5812cd4eb01367908022f9ef86e49ec6">_messageCount</a>[5]<code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Count of messages at each message level. 
<p>

<p>Referenced by <a class="el" href="oberror_8cpp-source.shtml#l00237">OBMessageHandler::GetMessageSummary()</a>, <a class="el" href="oberror_8cpp-source.shtml#l00145">OBMessageHandler::OBMessageHandler()</a>, and <a class="el" href="oberror_8cpp-source.shtml#l00162">OBMessageHandler::ThrowError()</a>.</p>

</div>
</div><p>
<a class="anchor" name="08ea2212aebb85ea22895ec49bd81f85"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::_messageList" ref="08ea2212aebb85ea22895ec49bd81f85" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::deque&lt;<a class="el" href="classOpenBabel_1_1OBError.shtml">OBError</a>&gt; <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#08ea2212aebb85ea22895ec49bd81f85">_messageList</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Log of messages for later retrieval via <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#aacf3302e7348bab13284a1336040240">GetMessagesOfLevel()</a>. 
<p>

<p>Referenced by <a class="el" href="oberror_8cpp-source.shtml#l00191">OBMessageHandler::GetMessagesOfLevel()</a>, and <a class="el" href="oberror_8cpp-source.shtml#l00162">OBMessageHandler::ThrowError()</a>.</p>

</div>
</div><p>
<a class="anchor" name="bddad1d062682a33800f8d048a1e35f6"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::_outputLevel" ref="bddad1d062682a33800f8d048a1e35f6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#cf195409ac7024002db5c178f20862d9">obMessageLevel</a> <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#bddad1d062682a33800f8d048a1e35f6">_outputLevel</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Filtering level for messages and logging (messages of lower priority will be ignored. 
<p>

<p>Referenced by <a class="el" href="oberror_8cpp-source.shtml#l00162">OBMessageHandler::ThrowError()</a>.</p>

</div>
</div><p>
<a class="anchor" name="dff5b7b50cde9f6620dc08128df860c4"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::_outputStream" ref="dff5b7b50cde9f6620dc08128df860c4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream* <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#dff5b7b50cde9f6620dc08128df860c4">_outputStream</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="oberror_8cpp-source.shtml#l00162">OBMessageHandler::ThrowError()</a>.</p>

</div>
</div><p>
<a class="anchor" name="3c4c6fad78b988cdc4fc9b7ade5e788c"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::_logging" ref="3c4c6fad78b988cdc4fc9b7ade5e788c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#3c4c6fad78b988cdc4fc9b7ade5e788c">_logging</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Whether messages will be logged into _messageList. 
<p>

<p>Referenced by <a class="el" href="oberror_8cpp-source.shtml#l00162">OBMessageHandler::ThrowError()</a>.</p>

</div>
</div><p>
<a class="anchor" name="7a0d2d55c1de9a5afc3bf71abedfdddd"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::_maxEntries" ref="7a0d2d55c1de9a5afc3bf71abedfdddd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#7a0d2d55c1de9a5afc3bf71abedfdddd">_maxEntries</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The maximum size of _messageList log. 
<p>

<p>Referenced by <a class="el" href="oberror_8cpp-source.shtml#l00162">OBMessageHandler::ThrowError()</a>.</p>

</div>
</div><p>
<a class="anchor" name="3e0837dfabcca64b1bdf2392e70b3228"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::_inWrapStreamBuf" ref="3e0837dfabcca64b1bdf2392e70b3228" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::streambuf* <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#3e0837dfabcca64b1bdf2392e70b3228">_inWrapStreamBuf</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The default stream buffer for the output stream (saved if wrapping is ued). 
<p>

<p>Referenced by <a class="el" href="oberror_8cpp-source.shtml#l00207">OBMessageHandler::StartErrorWrap()</a>, and <a class="el" href="oberror_8cpp-source.shtml#l00223">OBMessageHandler::StopErrorWrap()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9285cdb5ae08c9a33cd6d6998cd69a26"></a><!-- doxytag: member="OpenBabel::OBMessageHandler::_filterStreamBuf" ref="9285cdb5ae08c9a33cd6d6998cd69a26" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::streambuf* <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml#9285cdb5ae08c9a33cd6d6998cd69a26">_filterStreamBuf</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The filtered <a class="el" href="classOpenBabel_1_1obLogBuf.shtml" title="A minimal streambuf derivative to wrap calls to cerr into calls to OBMessageHandler...">obLogBuf</a> stream buffer to wrap error messages. 
<p>

<p>Referenced by <a class="el" href="oberror_8cpp-source.shtml#l00207">OBMessageHandler::StartErrorWrap()</a>, and <a class="el" href="oberror_8cpp-source.shtml#l00153">OBMessageHandler::~OBMessageHandler()</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="oberror_8h-source.shtml">oberror.h</a><li><a class="el" href="oberror_8cpp.shtml">oberror.cpp</a></ul>
</div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:40 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
