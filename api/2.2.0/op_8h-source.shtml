<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: op.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>op.h</h1><a href="op_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">op.h - plugin options or operations</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2007 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_OP_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_OP_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml" title="Simplify &amp;#39;plugin&amp;#39; classes to be discovered and/or loaded at runtime.">openbabel/plugin.h</a>&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="keyword">namespace </span>OpenBabel
<a name="l00029"></a>00029 {
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="comment">// Class introduction below</span>
<a name="l00032"></a><a class="code" href="classOpenBabel_1_1OBOp.shtml">00032</a> <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBOp.shtml" title="Operations to modify molecules before output.">OBOp</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime.">OBPlugin</a>
<a name="l00033"></a>00033 {
<a name="l00034"></a>00034   <a class="code" href="plugin_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(<a class="code" href="classOpenBabel_1_1OBOp.shtml" title="Operations to modify molecules before output.">OBOp</a>);
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">public</span>:
<a name="l00037"></a><a class="code" href="classOpenBabel_1_1OBOp.shtml#4e98002937e35472f2b829eaf98913d3">00037</a>   <span class="keyword">typedef</span> <span class="keyword">const</span> std::map&lt;std::string, std::string&gt; <a class="code" href="classOpenBabel_1_1OBOp.shtml#4e98002937e35472f2b829eaf98913d3">OpMap</a> ;
<a name="l00038"></a>00038 
<a name="l00040"></a><a class="code" href="classOpenBabel_1_1OBOp.shtml#45dfda1fb13d3c26ab7f8f7631e3351c">00040</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* TypeID(){ <span class="keywordflow">return</span> <span class="stringliteral">"ops"</span>; }
<a name="l00041"></a>00041 
<a name="l00043"></a>00043   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Do(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, OpMap* pOptions=NULL, <span class="keyword">const</span> <span class="keywordtype">char</span>* OptionText=NULL)=0;
<a name="l00044"></a>00044 
<a name="l00046"></a>00046   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WorksWith(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb)<span class="keyword">const</span>=0;
<a name="l00047"></a>00047 
<a name="l00049"></a><a class="code" href="classOpenBabel_1_1OBOp.shtml#64e598f68f30107a74319b9fc6d26cd0">00049</a>   <span class="keyword">static</span> std::string OpOptions(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb)
<a name="l00050"></a>00050   {
<a name="l00051"></a>00051     std::string s;
<a name="l00052"></a>00052     <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">OBPlugin::PluginIterator</a> itr;
<a name="l00053"></a>00053     <span class="keywordflow">for</span>(itr=<a class="code" href="classOpenBabel_1_1OBPlugin.shtml#1d4d73999ab0518ee471c635bd0a7e87">OBPlugin::Begin</a>(<span class="stringliteral">"ops"</span>);itr!=<a class="code" href="classOpenBabel_1_1OBPlugin.shtml#9a330280c1cd2e7119dac87a6fd0b762">OBPlugin::End</a>(<span class="stringliteral">"ops"</span>);++itr)
<a name="l00054"></a>00054     {
<a name="l00055"></a>00055       <span class="keywordflow">if</span>(*(itr-&gt;first)==<span class="charliteral">'_'</span>)<span class="comment">//ignore ops with IDs that begin with '_'</span>
<a name="l00056"></a>00056         <span class="keywordflow">continue</span>;
<a name="l00057"></a>00057       <a class="code" href="classOpenBabel_1_1OBOp.shtml" title="Operations to modify molecules before output.">OBOp</a>* pOp = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classOpenBabel_1_1OBOp.shtml" title="Operations to modify molecules before output.">OBOp</a>*<span class="keyword">&gt;</span>(itr-&gt;second);
<a name="l00058"></a>00058       <span class="keywordflow">if</span>(pOp &amp;&amp; pOp-&gt;<a class="code" href="classOpenBabel_1_1OBOp.shtml#841238ff5ff03c1c9341dea0105469c6">WorksWith</a>(pOb))
<a name="l00059"></a>00059       {
<a name="l00060"></a>00060         s += <span class="stringliteral">"--"</span>;
<a name="l00061"></a>00061         s += itr-&gt;first; <span class="comment">//ID</span>
<a name="l00062"></a>00062         s += <span class="charliteral">' '</span>;
<a name="l00063"></a>00063         s += <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#84fc973fdf4bba5a6b0e2d402077991c" title="Utility function to return only the first line of a string.">OBPlugin::FirstLine</a>(pOp-&gt;<a class="code" href="classOpenBabel_1_1OBPlugin.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7" title="Required description of a sub-type.">Description</a>()) + <span class="charliteral">'\n'</span>;
<a name="l00064"></a>00064       }
<a name="l00065"></a>00065     }
<a name="l00066"></a>00066     s += <span class="charliteral">'\n'</span>;
<a name="l00067"></a>00067     <span class="keywordflow">return</span> s;
<a name="l00068"></a>00068   }
<a name="l00069"></a>00069 
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1OBOp.shtml#6db16d52fb8a8bc3129944ae45097523">00075</a>   <span class="keyword">static</span> <span class="keywordtype">bool</span> DoOps(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, <a class="code" href="classOpenBabel_1_1OBOp.shtml#4e98002937e35472f2b829eaf98913d3">OpMap</a>* pOptions)
<a name="l00076"></a>00076   {
<a name="l00077"></a>00077     OpMap::const_iterator itr;
<a name="l00078"></a>00078     <span class="keywordflow">for</span>(itr=pOptions-&gt;begin();itr!=pOptions-&gt;end();++itr)
<a name="l00079"></a>00079     {
<a name="l00080"></a>00080       <a class="code" href="classOpenBabel_1_1OBOp.shtml" title="Operations to modify molecules before output.">OBOp</a>* pOp = FindType(itr-&gt;first.c_str());
<a name="l00081"></a>00081       <span class="keywordflow">if</span>(pOp)
<a name="l00082"></a>00082         <span class="keywordflow">if</span>(!pOp-&gt;<a class="code" href="classOpenBabel_1_1OBOp.shtml#f2220de80ec34a4872d0b6c712a41857" title="Required function that does the work. Normally return true, unless object is not...">Do</a>(pOb, pOptions, itr-&gt;second.c_str()))
<a name="l00083"></a>00083           <span class="keywordflow">return</span> <span class="keyword">false</span>; <span class="comment">//Op has decided molecule should not be output</span>
<a name="l00084"></a>00084     }
<a name="l00085"></a>00085     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00086"></a>00086   }
<a name="l00087"></a>00087 };
<a name="l00088"></a>00088 
<a name="l00131"></a>00131 }<span class="comment">//namespace</span>
<a name="l00132"></a>00132 
<a name="l00133"></a>00133 <span class="preprocessor">#endif</span>
<a name="l00134"></a>00134 <span class="preprocessor"></span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:34 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
