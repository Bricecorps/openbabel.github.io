<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: atom.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>atom.h</h1><a href="atom_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">atom.h - Handle OBAtom class.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span>
<a name="l00007"></a>00007 <span class="comment"> </span>
<a name="l00008"></a>00008 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00009"></a>00009 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00010"></a>00010 <span class="comment"> </span>
<a name="l00011"></a>00011 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00012"></a>00012 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00013"></a>00013 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00014"></a>00014 <span class="comment"> </span>
<a name="l00015"></a>00015 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00016"></a>00016 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00017"></a>00017 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00018"></a>00018 <span class="comment">GNU General Public License for more details.</span>
<a name="l00019"></a>00019 <span class="comment">***********************************************************************/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef OB_ATOM_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define OB_ATOM_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="residue_8h.shtml" title="Defines for residue properties, names, etc.">openbabel/residue.h</a>&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;<a class="code" href="vector3_8h.shtml" title="Handle 3D coordinates.">openbabel/math/vector3.h</a>&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">namespace </span>OpenBabel
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039 
<a name="l00040"></a>00040   <span class="keyword">class </span>OBBond;
<a name="l00041"></a><a class="code" href="namespaceOpenBabel.shtml#c0863bf2485bd66ba3afa6e50ddc20f6">00041</a>   <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00042"></a>00042 
<a name="l00044"></a>00044   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBNodeBase</a>;
<a name="l00046"></a><a class="code" href="namespaceOpenBabel.shtml#54495d3eb8f9749d0237e6bda59e0abe">00046</a>   <span class="keyword">typedef</span> std::vector&lt;OBBond*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a>;
<a name="l00048"></a><a class="code" href="namespaceOpenBabel.shtml#ed11ccd81d7abaccbdf10486a5ae0402">00048</a>   <span class="keyword">typedef</span> std::vector&lt;OBAtom*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#ed11ccd81d7abaccbdf10486a5ae0402" title="A standard iterator over a vector of atoms.">OBAtomIterator</a>;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050   <span class="comment">//ATOM Property Macros (flags)</span>
<a name="l00052"></a><a class="code" href="atom_8h.shtml#7049a943ce03181c7004fe9ecd798f40">00052</a> <span class="comment"></span><span class="preprocessor">#define OB_4RING_ATOM     (1&lt;&lt;1)</span>
<a name="l00054"></a><a class="code" href="atom_8h.shtml#54cf51e4021ce031b9a9bd20e053cead">00054</a> <span class="preprocessor">#define OB_3RING_ATOM     (1&lt;&lt;2)</span>
<a name="l00056"></a><a class="code" href="atom_8h.shtml#c08352e8abee93573a66f692f0827bd3">00056</a> <span class="preprocessor">#define OB_AROMATIC_ATOM  (1&lt;&lt;3)</span>
<a name="l00058"></a><a class="code" href="atom_8h.shtml#5f2ffc18f5cc3589dd1978252169f11e">00058</a> <span class="preprocessor">#define OB_RING_ATOM      (1&lt;&lt;4)</span>
<a name="l00060"></a><a class="code" href="atom_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43">00060</a> <span class="preprocessor">#define OB_CSTEREO_ATOM   (1&lt;&lt;5)</span>
<a name="l00062"></a><a class="code" href="atom_8h.shtml#7a0c4ca8c736e743fda131e25de50a26">00062</a> <span class="preprocessor">#define OB_ACSTEREO_ATOM  (1&lt;&lt;6)</span>
<a name="l00064"></a><a class="code" href="atom_8h.shtml#cb984613554c9199387e3039b6cf4e8c">00064</a> <span class="preprocessor">#define OB_DONOR_ATOM     (1&lt;&lt;7)</span>
<a name="l00066"></a><a class="code" href="atom_8h.shtml#86c329377a02eb7b0d5e015a6d0b1099">00066</a> <span class="preprocessor">#define OB_ACCEPTOR_ATOM  (1&lt;&lt;8)</span>
<a name="l00068"></a><a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d">00068</a> <span class="preprocessor">#define OB_CHIRAL_ATOM    (1&lt;&lt;9)</span>
<a name="l00070"></a><a class="code" href="atom_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5">00070</a> <span class="preprocessor">#define OB_POS_CHIRAL_ATOM (1&lt;&lt;10)</span>
<a name="l00072"></a><a class="code" href="atom_8h.shtml#28504d751913b6affc112690765c1ea6">00072</a> <span class="preprocessor">#define OB_NEG_CHIRAL_ATOM (1&lt;&lt;11)</span>
<a name="l00074"></a><a class="code" href="atom_8h.shtml#ad40730c29a0be944d55f5b3e3f98ac9">00074</a> <span class="preprocessor">#define OB_ATOM_HAS_NO_H   (1&lt;&lt;12)</span>
<a name="l00076"></a><a class="code" href="atom_8h.shtml#c41fb93bbf43756058cf90930dae22f1">00076</a> <span class="preprocessor">#define OB_ATOM_NOT_H_DEFICIENT (1&lt;&lt;13)</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span>
<a name="l00078"></a>00078   <span class="comment">// Class OBAtom</span>
<a name="l00079"></a>00079   <span class="comment">// class introduction in atom.cpp</span>
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml">00080</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>
<a name="l00081"></a>00081     {
<a name="l00082"></a>00082     <span class="keyword">protected</span>:
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#28c35937d84aeb0e06ba2705d6cc65fd">00083</a>       <span class="keywordtype">char</span>                          _ele;       
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b3e028e65ae7c0dac55997f2cb7281ce">00084</a>       <span class="keywordtype">char</span>                          _impval;    
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e34265581460024d37fb0ff25d97f110">00085</a>       <span class="keywordtype">char</span>                          _type[6];   
<a name="l00086"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6e636025c5db07bf67523b31a55f6327">00086</a>       <span class="keywordtype">short</span>                         _fcharge;   
<a name="l00087"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d60f474b9381f875e4b6e3f5df457c9a">00087</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _isotope;   
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ec3b74d938a5e47bc6a6627f64d86e27">00088</a>       <span class="keywordtype">short</span>                         _spinmultiplicity;
<a name="l00089"></a>00089 
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1219a011a5e0ec59c67a5a873d81986c">00090</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _idx;       
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a15238ffbdb1330727678c9d6553d6ba">00091</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>                        *_parent;    
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3c7208419c7703e947e9a1c365838b98">00092</a>       std::vector&lt;OBBond*&gt;          _vbond;     
<a name="l00093"></a>00093 
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ef178db02607fe00f112bd1a7f5f4d2b">00094</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _cidx;      
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5d400386667c899017669303bdec09cd">00095</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _hyb;       
<a name="l00096"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5cc9f88f4cc5fda10e7932cd59a87f16">00096</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _flags;     
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e4b9cf0b2f94fc6befff220367fccd0a">00097</a>       <span class="keywordtype">double</span>                        _pcharge;   
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#91a32f6c060e12e4d188974db5b111d3">00098</a>       <span class="keywordtype">double</span>                      **_c;         
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e8dcade9402fad862f0391488350ea3e">00099</a>       <span class="keyword">mutable</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>               _v;         
<a name="l00100"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#c26545dc3d68694f0a7b6f4a776f7a17">00100</a>       <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>                    *_residue;   
<a name="l00101"></a>00101 
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0adfe60e7fb18cb7ca2fe3ac5bb6737a">00103</a>       <span class="keywordtype">int</span>  GetFlag()<span class="keyword"> const    </span>{  <span class="keywordflow">return</span>(_flags);  }
<a name="l00105"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#dcdab8f96dc4fdc2940749e527087245">00105</a>       <span class="keywordtype">void</span> SetFlag(<span class="keywordtype">int</span> flag)  { _flags |= flag;   }
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3a1dc0419a66d2e7288214342de43b7a">00107</a>       <span class="keywordtype">bool</span> HasFlag(<span class="keywordtype">int</span> flag)  {  <span class="keywordflow">return</span>((_flags &amp; flag) ? <span class="keyword">true</span> : <span class="keyword">false</span>); }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109     <span class="keyword">public</span>:
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6368d7673f23186649b2969ade3661d7">00111</a>       <span class="keywordtype">bool</span> Visit;
<a name="l00112"></a>00112 
<a name="l00114"></a>00114       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>();
<a name="l00116"></a>00116       <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>();
<a name="l00118"></a>00118       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;operator = (<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;);
<a name="l00121"></a>00121       <span class="keywordtype">void</span> Duplicate(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *);
<a name="l00124"></a>00124       <span class="keywordtype">bool</span> Clear();
<a name="l00125"></a>00125 
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 
<a name="l00129"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b994a975e39f5c62288f4f972b6f90c9">00129</a>       <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)    { _idx = idx; _cidx = (idx-1)*3; }
<a name="l00131"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9ca5228f1b568f7076cd930ad0902a83">00131</a>       <span class="keywordtype">void</span> SetHyb(<span class="keywordtype">int</span> hyb)    { _hyb = hyb; }
<a name="l00133"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#573a9f96a971854938ab2db5eb4d4851">00133</a>       <span class="keywordtype">void</span> SetAtomicNum(<span class="keywordtype">int</span> atomicnum)    { _ele = (char)atomicnum; }
<a name="l00135"></a>00135       <span class="keywordtype">void</span> SetIsotope(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> iso);
<a name="l00137"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#4ebf98749415a00a56fdbc77f87fdc87">00137</a>       <span class="keywordtype">void</span> SetImplicitValence(<span class="keywordtype">int</span> val)    { _impval = (char)val; }
<a name="l00139"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e048690c14e9258cc653231a56d5dfda">00139</a>       <span class="keywordtype">void</span> IncrementImplicitValence()     { _impval++; }
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#7acb91a903a31d698dc25d296b988f7f">00141</a>       <span class="keywordtype">void</span> DecrementImplicitValence()     { _impval--; }
<a name="l00143"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a1d084182d025e6fa000b928807d7689">00143</a>       <span class="keywordtype">void</span> SetFormalCharge(<span class="keywordtype">int</span> fcharge)   { _fcharge = fcharge; }
<a name="l00145"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#299285ee1effd21803b3c042a376e149">00145</a>       <span class="keywordtype">void</span> SetSpinMultiplicity(<span class="keywordtype">short</span> spin){ _spinmultiplicity = spin; }
<a name="l00147"></a>00147       <span class="keywordtype">void</span> SetType(<span class="keyword">const</span> <span class="keywordtype">char</span> *type);
<a name="l00149"></a>00149       <span class="keywordtype">void</span> SetType(<span class="keyword">const</span> std::string &amp;type);
<a name="l00151"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#963851351ab3c084233a82d367f15607">00151</a>       <span class="keywordtype">void</span> SetPartialCharge(<span class="keywordtype">double</span> pcharge){ _pcharge = pcharge; }
<a name="l00153"></a>00153       <span class="keywordtype">void</span> SetVector(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v);
<a name="l00155"></a>00155       <span class="keywordtype">void</span> SetVector(<span class="keyword">const</span> <span class="keywordtype">double</span> x,<span class="keyword">const</span> <span class="keywordtype">double</span> y,<span class="keyword">const</span> <span class="keywordtype">double</span> z);
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#eff361260a8a4e9ea703d5d38f5fc671">00157</a>       <span class="keywordtype">void</span> SetCoordPtr(<span class="keywordtype">double</span> **c)        { _c = c; _cidx = (GetIdx()-1)*3; }
<a name="l00159"></a>00159       <span class="keywordtype">void</span> SetVector();
<a name="l00161"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#de786f15ee67979fbb9c48970b22e184">00161</a>       <span class="keywordtype">void</span> SetResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *res)     { _residue=res; }
<a name="l00163"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#962b3010305cfb80ba816a0e54097dee">00163</a>       <span class="keywordtype">void</span> SetParent(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *ptr)          { _parent=ptr; }
<a name="l00165"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3d29498c15007d9b6729e26784f23a5b">00165</a>       <span class="keywordtype">void</span> SetAromatic()                  { SetFlag(<a class="code" href="atom_8h.shtml#c08352e8abee93573a66f692f0827bd3" title="Atom is aromatic.">OB_AROMATIC_ATOM</a>); }
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#2fcf3bf429f36281a43c879e40e75f34">00167</a>       <span class="keywordtype">void</span> UnsetAromatic()                { _flags &amp;= (~(<a class="code" href="atom_8h.shtml#c08352e8abee93573a66f692f0827bd3" title="Atom is aromatic.">OB_AROMATIC_ATOM</a>)); }
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#df069c94123595712cb7fa847b87e449">00169</a>       <span class="keywordtype">void</span> SetClockwiseStereo()           { SetFlag(<a class="code" href="atom_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., &amp;quot;@@&amp;quot;).">OB_CSTEREO_ATOM</a>|<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00171"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f328f0aa99465103074b1d336c393919">00171</a>       <span class="keywordtype">void</span> SetAntiClockwiseStereo()       { SetFlag(<a class="code" href="atom_8h.shtml#7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., &amp;quot;@&amp;quot;).">OB_ACSTEREO_ATOM</a>|<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00173"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6ddbbbc5f8e185c43e634a0425311275">00173</a>       <span class="keywordtype">void</span> SetPositiveStereo() { SetFlag(<a class="code" href="atom_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>|<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ea322d9d450ee48fb2e89a4f7c34deda">00175</a>       <span class="keywordtype">void</span> SetNegativeStereo() { SetFlag(<a class="code" href="atom_8h.shtml#28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>|<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00177"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#fdf42f73fe8a0cec0db3c3e544830fcc">00177</a>       <span class="keywordtype">void</span> UnsetStereo()
<a name="l00178"></a>00178         {
<a name="l00179"></a>00179           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., &amp;quot;@&amp;quot;).">OB_ACSTEREO_ATOM</a>);
<a name="l00180"></a>00180           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., &amp;quot;@@&amp;quot;).">OB_CSTEREO_ATOM</a>);
<a name="l00181"></a>00181           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>);
<a name="l00182"></a>00182           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>);
<a name="l00183"></a>00183           _flags &amp;= ~(<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>);
<a name="l00184"></a>00184         }
<a name="l00186"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e6a016e7f67cf564e5f80254c425f65c">00186</a>       <span class="keywordtype">void</span> SetInRing()         { SetFlag(<a class="code" href="atom_8h.shtml#5f2ffc18f5cc3589dd1978252169f11e" title="Atom is in a ring.">OB_RING_ATOM</a>); }
<a name="l00188"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d4e5a4c67101743f644b047b632d058b">00188</a>       <span class="keywordtype">void</span> SetChiral()         { SetFlag(<a class="code" href="atom_8h.shtml#57a10e2d6bfa530e787d7e13cc9da15d" title="Atom is chiral.">OB_CHIRAL_ATOM</a>); }
<a name="l00190"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3fa3634d92a924e5af69208768e839a5">00190</a>       <span class="keywordtype">void</span> ClearCoordPtr()     { _c = NULL; _cidx=0; }
<a name="l00192"></a>00192 
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 
<a name="l00196"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#25098f4715711b9755fa50ca18ac2f99">00196</a>       <span class="keywordtype">int</span>          GetFormalCharge()<span class="keyword">  const </span>{ <span class="keywordflow">return</span>(_fcharge);    }
<a name="l00198"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#de227de93fbe080fc1c2854e530df81a">00198</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetAtomicNum()<span class="keyword">     const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_ele); }
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#dfdbf1a8c9bf80588039b4f08cfc1069">00200</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> GetIsotope()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_isotope);    }
<a name="l00203"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#14ccfaca2264c8f8141f4c0ed7343c25">00203</a>       <span class="keywordtype">int</span>          GetSpinMultiplicity()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_spinmultiplicity); }
<a name="l00206"></a>00206       <span class="keywordtype">double</span>     GetAtomicMass()    <span class="keyword">const</span>;
<a name="l00209"></a>00209       <span class="keywordtype">double</span>     GetExactMass()     <span class="keyword">const</span>;
<a name="l00211"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#80892a7fdfc7180a85160279c1186952">00211</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetIdx()<span class="keyword">           const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_idx);  }
<a name="l00214"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b7c533796dfe7ce75f2a755b668ebd5c">00214</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetCoordinateIdx()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_cidx); }
<a name="l00216"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#042ed0fe3ac49c9505f9f79d07469423">00216</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetCIdx()<span class="keyword">          const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_cidx); }
<a name="l00218"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ebccc307cd3036d7a2ad0c80e90aef22">00218</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#7a78d148bf3ac283b30c720a8b040700">GetValence</a>()<span class="keyword">       const</span>
<a name="l00219"></a>00219 <span class="keyword">        </span>{
<a name="l00220"></a>00220           <span class="keywordflow">return</span>((_vbond.empty()) ? 0 : _vbond.size());
<a name="l00221"></a>00221         }
<a name="l00223"></a>00223       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHyb()             <span class="keyword">const</span>;
<a name="l00225"></a>00225       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetImplicitValence() <span class="keyword">const</span>;
<a name="l00227"></a>00227       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#2d93b4c6ef85b403a7a2376d9b324668">GetHvyValence</a>()      <span class="keyword">const</span>;
<a name="l00229"></a>00229       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHeteroValence()   <span class="keyword">const</span>;
<a name="l00231"></a>00231       <span class="keywordtype">char</span>        *GetType();
<a name="l00232"></a>00232 
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#140fe887c529e7b90eae3de197e8ceb6">00234</a>       <span class="keywordtype">double</span>      GetX()<span class="keyword"> const   </span>{        <span class="keywordflow">return</span>(x());    }
<a name="l00236"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#7e0e3acd8a6e4016522b9cdbc8f5aeb5">00236</a>       <span class="keywordtype">double</span>      GetY()<span class="keyword"> const  </span>{        <span class="keywordflow">return</span>(y());    }
<a name="l00238"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#885f0eb530803b77acf8ac2055c59ee8">00238</a>       <span class="keywordtype">double</span>      GetZ()<span class="keyword"> const  </span>{        <span class="keywordflow">return</span>(z());    }
<a name="l00239"></a>00239 
<a name="l00240"></a>00240       <span class="comment">// These methods check to see if there is a coordinate pointer</span>
<a name="l00241"></a>00241       <span class="comment">// or an internal vector (e.g., SetCoordPtr())</span>
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9ccf82e6805fa3a2f34b977e1db6f4f9">00243</a> <span class="comment"></span>      <span class="keywordtype">double</span>      x()<span class="keyword"> const </span>{
<a name="l00244"></a>00244         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx]);
<a name="l00245"></a>00245         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.x();
<a name="l00246"></a>00246       }
<a name="l00248"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0acce91d627a918ea20832d9b2fb8b93">00248</a>       <span class="keywordtype">double</span>      y()<span class="keyword"> const </span>{
<a name="l00249"></a>00249         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx+1]);
<a name="l00250"></a>00250         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.y();
<a name="l00251"></a>00251       }
<a name="l00253"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#be77460b0bada97d73fc158579294931">00253</a>       <span class="keywordtype">double</span>      z()<span class="keyword"> const </span>{
<a name="l00254"></a>00254         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx+2]);
<a name="l00255"></a>00255         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.z();
<a name="l00256"></a>00256       }
<a name="l00261"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f9dd6c6924f23479933e0b8779a4bec2">00261</a>       <span class="keywordtype">double</span>     *GetCoordinate(){
<a name="l00262"></a>00262         <span class="keywordflow">if</span> (_c)          <span class="keywordflow">return</span>(&amp;(*_c)[_cidx]);
<a name="l00263"></a>00263         <span class="keywordflow">else</span>             <span class="keywordflow">return</span> NULL;
<a name="l00264"></a>00264       }
<a name="l00266"></a>00266       <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>   &amp;GetVector();
<a name="l00268"></a>00268       <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>   &amp;GetVector() <span class="keyword">const</span>;
<a name="l00270"></a>00270       <span class="keywordtype">double</span>     GetPartialCharge();
<a name="l00272"></a>00272       <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *GetResidue();
<a name="l00275"></a>00275       <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *GetResidue(<span class="keywordtype">bool</span> perception);
<a name="l00277"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d8480b61159bc6cb861b17341dc2b29a">00277</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>     *GetParent()        {<span class="keywordflow">return</span>((<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>*)_parent);}
<a name="l00280"></a>00280       <span class="keywordtype">bool</span>       GetNewBondVector(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> &amp;v,<span class="keywordtype">double</span> length);
<a name="l00283"></a>00283       <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>    *GetBond(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *);
<a name="l00288"></a>00288       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>    *GetNextAtom();
<a name="l00290"></a>00290 
<a name="l00292"></a>00292 
<a name="l00293"></a>00293 
<a name="l00294"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#c4ea48df79e239b506d3501dd42adde9">00294</a>       <a class="code" href="namespaceOpenBabel.shtml#54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> BeginBonds()
<a name="l00295"></a>00295         { <span class="keywordflow">return</span>(_vbond.begin()); }
<a name="l00297"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#87859f951e8ea33345b76d93014486c9">00297</a>       <a class="code" href="namespaceOpenBabel.shtml#54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> EndBonds()
<a name="l00298"></a>00298         { <span class="keywordflow">return</span>(_vbond.end());   }
<a name="l00301"></a>00301       <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *BeginBond(<a class="code" href="namespaceOpenBabel.shtml#54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00304"></a>00304       <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *NextBond(<a class="code" href="namespaceOpenBabel.shtml#54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00307"></a>00307       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *BeginNbrAtom(<a class="code" href="namespaceOpenBabel.shtml#54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00310"></a>00310       <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *NextNbrAtom(<a class="code" href="namespaceOpenBabel.shtml#54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i);
<a name="l00312"></a>00312 
<a name="l00314"></a>00314       <span class="keywordtype">double</span> GetDistance(<span class="keywordtype">int</span> index);
<a name="l00316"></a>00316       <span class="keywordtype">double</span> GetDistance(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00318"></a>00318       <span class="keywordtype">double</span> GetAngle(<span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c);
<a name="l00320"></a>00320       <span class="keywordtype">double</span> GetAngle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *b, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *c);
<a name="l00321"></a>00321 
<a name="l00323"></a>00323 
<a name="l00324"></a>00324 
<a name="l00326"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#616b5aac27eec22be5be998bc15d6349">00326</a>       <span class="keywordtype">void</span> NewResidue()
<a name="l00327"></a>00327         {
<a name="l00328"></a>00328           <span class="keywordflow">if</span> (!_residue)
<a name="l00329"></a>00329             _residue = <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>;
<a name="l00330"></a>00330         }
<a name="l00332"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3e3b0d3b268e6abe26f87d4c422c31cd">00332</a>       <span class="keywordtype">void</span> AddResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *res) { SetResidue(res); }
<a name="l00334"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#85fa173a3c3f488fc691a11eaad81439">00334</a>       <span class="keywordtype">void</span> DeleteResidue(){
<a name="l00335"></a>00335         <span class="keywordflow">if</span> (_residue) {
<a name="l00336"></a>00336           <span class="keyword">delete</span> _residue;
<a name="l00337"></a>00337           _residue = NULL; <span class="comment">// Make sure to clear that a residue existed</span>
<a name="l00338"></a>00338         }
<a name="l00339"></a>00339       }
<a name="l00341"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5abeab08afbd305a51b9a9b5bd8fe356">00341</a>       <span class="keywordtype">void</span> AddBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *bond) { _vbond.push_back(bond); }
<a name="l00344"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1773630938cf6a028368394b666d06bf">00344</a>       <span class="keywordtype">void</span> InsertBond(<a class="code" href="namespaceOpenBabel.shtml#54495d3eb8f9749d0237e6bda59e0abe" title="A standard iterator over a vector of bonds.">OBBondIterator</a> &amp;i, <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *bond)
<a name="l00345"></a>00345         {
<a name="l00346"></a>00346           _vbond.insert(i, bond);
<a name="l00347"></a>00347         }
<a name="l00349"></a>00349       <span class="keywordtype">bool</span> DeleteBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>* bond);
<a name="l00351"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#03fe71c8266435b7a76682e5c1472894">00351</a>       <span class="keywordtype">void</span> ClearBond() {_vbond.clear();}
<a name="l00353"></a>00353 
<a name="l00355"></a>00355 
<a name="l00356"></a>00356 
<a name="l00359"></a>00359       <span class="keywordtype">bool</span> HtoMethyl();
<a name="l00362"></a>00362       <span class="keywordtype">bool</span> SetHybAndGeom(<span class="keywordtype">int</span>);
<a name="l00364"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1a92c9eb656eb9ef43f03c717a38adc3">00364</a>       <span class="keywordtype">void</span> ForceNoH() {SetFlag(<a class="code" href="atom_8h.shtml#ad40730c29a0be944d55f5b3e3f98ac9" title="Atom has no hydrogen attached. Temporary use only during input of some formats.">OB_ATOM_HAS_NO_H</a>);}
<a name="l00366"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#55e8f858833eee0408aee7b0f1b9c22c">00366</a>       <span class="keywordtype">bool</span> HasNoHForced() {<span class="keywordflow">return</span> HasFlag(<a class="code" href="atom_8h.shtml#ad40730c29a0be944d55f5b3e3f98ac9" title="Atom has no hydrogen attached. Temporary use only during input of some formats.">OB_ATOM_HAS_NO_H</a>);}
<a name="l00367"></a>00367 
<a name="l00370"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#03e54abd32434bd610bfd4430d91b7b9">00370</a>       <span class="keywordtype">void</span> ForceImplH() {SetFlag(<a class="code" href="atom_8h.shtml#c41fb93bbf43756058cf90930dae22f1" title="Atom is not hydrogen deficient. (for SMILES input).">OB_ATOM_NOT_H_DEFICIENT</a>);}
<a name="l00373"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#8920c0ef5c32f64887d09c3b2da857d5">00373</a>       <span class="keywordtype">bool</span> HasImplHForced() {<span class="keywordflow">return</span> HasFlag(<a class="code" href="atom_8h.shtml#c41fb93bbf43756058cf90930dae22f1" title="Atom is not hydrogen deficient. (for SMILES input).">OB_ATOM_NOT_H_DEFICIENT</a>);}
<a name="l00375"></a>00375 
<a name="l00377"></a>00377 
<a name="l00378"></a>00378 
<a name="l00379"></a>00379       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  CountFreeOxygens()      <span class="keyword">const</span>;
<a name="l00381"></a>00381       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ImplicitHydrogenCount() <span class="keyword">const</span>;
<a name="l00383"></a>00383       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ExplicitHydrogenCount(<span class="keywordtype">bool</span> ExcludeIsotopes=<span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l00385"></a>00385       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  MemberOfRingCount()     <span class="keyword">const</span>;
<a name="l00387"></a>00387       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  MemberOfRingSize()    <span class="keyword">const</span>;
<a name="l00389"></a>00389       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  CountRingBonds() <span class="keyword">const</span>;
<a name="l00391"></a>00391       <span class="keywordtype">double</span>      SmallestBondAngle();
<a name="l00393"></a>00393       <span class="keywordtype">double</span>      AverageBondAngle();
<a name="l00395"></a>00395       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  BOSum()                 <span class="keyword">const</span>;
<a name="l00398"></a>00398       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  KBOSum()                <span class="keyword">const</span>;
<a name="l00400"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e3177d9e8b583d3cda02b90c141894c5">00400</a>       <span class="keywordtype">bool</span> HasResidue()    { <span class="keywordflow">return</span>(_residue != NULL);    }
<a name="l00402"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b633bc0f8f40dfcedf42940ab8a5316c">00402</a>       <span class="keywordtype">bool</span> IsHydrogen()    { <span class="keywordflow">return</span>(GetAtomicNum() == 1); }
<a name="l00404"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1f0a167775136e911cd349cdd8923b24">00404</a>       <span class="keywordtype">bool</span> IsCarbon()      { <span class="keywordflow">return</span>(GetAtomicNum() == 6); }
<a name="l00406"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#acb82bc548922e4f1276a255f212f143">00406</a>       <span class="keywordtype">bool</span> IsNitrogen()    { <span class="keywordflow">return</span>(GetAtomicNum() == 7); }
<a name="l00408"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f7e8030ce19d79c9ad0b3cfbf116dc59">00408</a>       <span class="keywordtype">bool</span> IsOxygen()      { <span class="keywordflow">return</span>(GetAtomicNum() == 8); }
<a name="l00410"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a71152591d5cc51fc2f3701ff7de7dfd">00410</a>       <span class="keywordtype">bool</span> IsSulfur()      { <span class="keywordflow">return</span>(GetAtomicNum() == 16);}
<a name="l00412"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b8c7f052f9380b98eef3b83da640eba3">00412</a>       <span class="keywordtype">bool</span> IsPhosphorus()  { <span class="keywordflow">return</span>(GetAtomicNum() == 15);}
<a name="l00414"></a>00414       <span class="keywordtype">bool</span> IsAromatic()      <span class="keyword">const</span>;
<a name="l00416"></a>00416       <span class="keywordtype">bool</span> IsInRing()        <span class="keyword">const</span>;
<a name="l00418"></a>00418       <span class="keywordtype">bool</span> IsInRingSize(<span class="keywordtype">int</span>) <span class="keyword">const</span>;
<a name="l00421"></a>00421       <span class="keywordtype">bool</span> IsHeteroatom();
<a name="l00423"></a>00423       <span class="keywordtype">bool</span> IsNotCorH();
<a name="l00425"></a>00425       <span class="keywordtype">bool</span> IsConnected(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00428"></a>00428       <span class="keywordtype">bool</span> IsOneThree(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00431"></a>00431       <span class="keywordtype">bool</span> IsOneFour(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*);
<a name="l00433"></a>00433       <span class="keywordtype">bool</span> IsCarboxylOxygen();
<a name="l00435"></a>00435       <span class="keywordtype">bool</span> IsPhosphateOxygen();
<a name="l00437"></a>00437       <span class="keywordtype">bool</span> IsSulfateOxygen();
<a name="l00439"></a>00439       <span class="keywordtype">bool</span> IsNitroOxygen();
<a name="l00441"></a>00441       <span class="keywordtype">bool</span> IsAmideNitrogen();
<a name="l00444"></a>00444       <span class="keywordtype">bool</span> IsPolarHydrogen();
<a name="l00447"></a>00447       <span class="keywordtype">bool</span> IsNonPolarHydrogen();
<a name="l00450"></a>00450       <span class="keywordtype">bool</span> IsAromaticNOxide();
<a name="l00452"></a>00452       <span class="keywordtype">bool</span> IsChiral();
<a name="l00454"></a>00454       <span class="keywordtype">bool</span> IsAxial();
<a name="l00456"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#4d1f38bbe03483629778078dcc4e75a0">00456</a>       <span class="keywordtype">bool</span> IsClockwise()         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., &amp;quot;@@&amp;quot;).">OB_CSTEREO_ATOM</a>));  }
<a name="l00458"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f3abb70d4f818b9c3e416928afa2e844">00458</a>       <span class="keywordtype">bool</span> IsAntiClockwise()     { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., &amp;quot;@&amp;quot;).">OB_ACSTEREO_ATOM</a>)); }
<a name="l00460"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9880a080dd0bce244291bde514b67d20">00460</a>       <span class="keywordtype">bool</span> IsPositiveStereo() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>)); }
<a name="l00462"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#61e5344c34c172e9b889e59255aff6de">00462</a>       <span class="keywordtype">bool</span> IsNegativeStereo() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>)); }
<a name="l00464"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#8844e382c76003229ee5fdd0341aacee">00464</a>       <span class="keywordtype">bool</span> HasChiralitySpecified()
<a name="l00465"></a>00465         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#4cfdf58a49dd4ebfab6d8dada02fef43" title="Atom has clockwise SMILES chiral stereochemistry (i.e., &amp;quot;@@&amp;quot;).">OB_CSTEREO_ATOM</a>|<a class="code" href="atom_8h.shtml#7a0c4ca8c736e743fda131e25de50a26" title="Atom has anticlockwise SMILES chiral stereochemistry (i.e., &amp;quot;@&amp;quot;).">OB_ACSTEREO_ATOM</a>)); }
<a name="l00467"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#63911efd550113b275239d322670986d">00467</a>       <span class="keywordtype">bool</span> HasChiralVolume()
<a name="l00468"></a>00468         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="atom_8h.shtml#2cac237d3ceb0758f76448ba35cf4fa5" title="Atom has + chiral volume.">OB_POS_CHIRAL_ATOM</a>|<a class="code" href="atom_8h.shtml#28504d751913b6affc112690765c1ea6" title="Atom has - chiral volume.">OB_NEG_CHIRAL_ATOM</a>)); }
<a name="l00470"></a>00470       <span class="keywordtype">bool</span> IsHbondAcceptor();
<a name="l00472"></a>00472       <span class="keywordtype">bool</span> IsHbondDonor();
<a name="l00474"></a>00474       <span class="keywordtype">bool</span> IsHbondDonorH();
<a name="l00479"></a>00479       <span class="keywordtype">bool</span> HasAlphaBetaUnsat(<span class="keywordtype">bool</span> includePandS=<span class="keyword">true</span>);
<a name="l00481"></a>00481       <span class="keywordtype">bool</span> HasBondOfOrder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bo);
<a name="l00483"></a>00483       <span class="keywordtype">int</span>  CountBondsOfOrder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bo);
<a name="l00485"></a>00485       <span class="keywordtype">bool</span> HasNonSingleBond();
<a name="l00487"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f347b80d156587c2287754345606c78d">00487</a>       <span class="keywordtype">bool</span> HasSingleBond()    {        <span class="keywordflow">return</span>(HasBondOfOrder(1));    }
<a name="l00489"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0cb35a21cc08897bc7f9b01ae4561e50">00489</a>       <span class="keywordtype">bool</span> HasDoubleBond()    {        <span class="keywordflow">return</span>(HasBondOfOrder(2));    }
<a name="l00491"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#11bf8aa7f79e9b9bdef2602808bb794d">00491</a>       <span class="keywordtype">bool</span> HasAromaticBond()  {        <span class="keywordflow">return</span>(HasBondOfOrder(5));    }
<a name="l00493"></a>00493       <span class="keywordtype">bool</span> MatchesSMARTS(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00495"></a>00495 
<a name="l00496"></a>00496     }; <span class="comment">// class OBAtom</span>
<a name="l00497"></a>00497 
<a name="l00498"></a>00498 }<span class="comment">// namespace OpenBabel</span>
<a name="l00499"></a>00499 
<a name="l00500"></a>00500 <span class="preprocessor">#endif   // OB_ATOM_H</span>
<a name="l00501"></a>00501 <span class="preprocessor"></span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:33 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
