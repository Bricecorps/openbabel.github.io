<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: generic.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>generic.h</h1><a href="generic_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">generic.h - Handle generic data classes. Custom data for atoms, bonds, etc.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_GENERIC_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_GENERIC_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="spacegroup_8h.shtml" title="Handle Crystallographic Space Groups.">openbabel/math/spacegroup.h</a>&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;<a class="code" href="obutil_8h.shtml" title="Various utility methods.">openbabel/obutil.h</a>&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">namespace </span>OpenBabel
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035 
<a name="l00036"></a>00036   <span class="comment">// Forward declarations</span>
<a name="l00037"></a>00037   <span class="keyword">class </span>OBBase;
<a name="l00038"></a>00038   <span class="keyword">class </span>OBAtom;
<a name="l00039"></a>00039   <span class="keyword">class </span>OBBond;
<a name="l00040"></a>00040   <span class="keyword">class </span>OBMol;
<a name="l00041"></a>00041   <span class="keyword">class </span>OBRing;
<a name="l00042"></a>00042 
<a name="l00045"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml">00045</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long).">OBCommentData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00046"></a>00046   {
<a name="l00047"></a>00047   <span class="keyword">protected</span>:
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#bfcfad17c10b3bb5b39412d927518e43">00048</a>     std::string _data;
<a name="l00049"></a>00049   <span class="keyword">public</span>:
<a name="l00050"></a>00050     <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long).">OBCommentData</a>();
<a name="l00051"></a>00051     <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long).">OBCommentData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long).">OBCommentData</a>&amp;);
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#67bda850335747e7ac5d66629bda0a67">00052</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long).">OBCommentData</a>(*<span class="keyword">this</span>);}
<a name="l00053"></a>00053                 
<a name="l00054"></a>00054     <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long).">OBCommentData</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBCommentData.shtml" title="Used to store a comment string (can be multiple lines long).">OBCommentData</a> &amp;src);
<a name="l00055"></a>00055 
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#71ec30c014852fe90aed06daa76e378b">00056</a>     <span class="keywordtype">void</span>          <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<span class="keyword">const</span> std::string &amp;data)
<a name="l00057"></a>00057     { _data = data; <a class="code" href="namespaceOpenBabel.shtml#e8d9d7dd615b5fa7b533c075fe744d8f" title="Removes white space from front and back of string.">Trim</a>(_data); }
<a name="l00058"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#0f90c3ff45f5d9a13c71f46dba0770e5">00058</a>     <span class="keywordtype">void</span>          <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *d)
<a name="l00059"></a>00059     {_data = d; <a class="code" href="namespaceOpenBabel.shtml#e8d9d7dd615b5fa7b533c075fe744d8f" title="Removes white space from front and back of string.">Trim</a>(_data);     }
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#fb46b1b77157b78eba83c094204f96b2">00060</a>     <span class="keyword">const</span> std::string &amp;GetData()<span class="keyword">              const</span>
<a name="l00061"></a>00061 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_data);      }
<a name="l00062"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#c9527475c246fadbbab63a35376fd5fe">00062</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetValue()<span class="keyword">              const  </span>
<a name="l00063"></a>00063 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_data);      }
<a name="l00064"></a>00064   };
<a name="l00065"></a>00065 
<a name="l00069"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml">00069</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml" title="Used to store information on an external bond (e.g., SMILES fragments).">OBExternalBond</a>
<a name="l00070"></a>00070   {
<a name="l00071"></a>00071     <span class="keywordtype">int</span>     _idx;
<a name="l00072"></a>00072     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *_atom;
<a name="l00073"></a>00073     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *_bond;
<a name="l00074"></a>00074   <span class="keyword">public</span>:
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#a3e2d107afd3e69aee9bf52b47d1444c">00075</a>   <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml" title="Used to store information on an external bond (e.g., SMILES fragments).">OBExternalBond</a>(): _idx(0), _atom(NULL), _bond(NULL) {}
<a name="l00076"></a>00076     <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml" title="Used to store information on an external bond (e.g., SMILES fragments).">OBExternalBond</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *,<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *,<span class="keywordtype">int</span>);
<a name="l00077"></a>00077     <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml" title="Used to store information on an external bond (e.g., SMILES fragments).">OBExternalBond</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBExternalBond.shtml" title="Used to store information on an external bond (e.g., SMILES fragments).">OBExternalBond</a> &amp;);
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#359543c25a72cf7a9ab33ab75b9b5f1e">00078</a>     ~<a class="code" href="classOpenBabel_1_1OBExternalBond.shtml" title="Used to store information on an external bond (e.g., SMILES fragments).">OBExternalBond</a>()   {}
<a name="l00079"></a>00079 
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#c8451eabbc164153f5030ae9723cf48b">00080</a>     <span class="keywordtype">int</span>     GetIdx()<span class="keyword">  const    </span>{        <span class="keywordflow">return</span>(_idx);    }
<a name="l00081"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#6bbee7efbeae405ba88ccb87b2f4c792">00081</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *GetAtom()<span class="keyword"> const    </span>{        <span class="keywordflow">return</span>(_atom);   }
<a name="l00082"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#074123f2f8a5e90b5ce359af557e1805">00082</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *GetBond()<span class="keyword"> const    </span>{        <span class="keywordflow">return</span>(_bond);   }
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#b994a975e39f5c62288f4f972b6f90c9">00083</a>     <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)       {        _idx = idx;      }
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#84cdb57aaf88aa0a94f4f4a1dd0f0252">00084</a>     <span class="keywordtype">void</span> SetAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atom) {        _atom = atom;    }
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#75c73979e73fb44e48424150fa0208c7">00085</a>     <span class="keywordtype">void</span> SetBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *bond) {        _bond = bond;    }
<a name="l00086"></a>00086   };
<a name="l00087"></a>00087 
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml">00090</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml" title="Used to store information on external bonds (e.g., in SMILES fragments).">OBExternalBondData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00091"></a>00091   {
<a name="l00092"></a>00092   <span class="keyword">protected</span>:
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#8b0c5550b7332d65d1c285004891cff2">00093</a>     std::vector&lt;OBExternalBond&gt; _vexbnd;
<a name="l00094"></a>00094   <span class="keyword">public</span>:
<a name="l00095"></a>00095     <a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml" title="Used to store information on external bonds (e.g., in SMILES fragments).">OBExternalBondData</a>();
<a name="l00096"></a>00096                 
<a name="l00097"></a>00097     <span class="comment">//Copying is not used and too much work to set up</span>
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#67bda850335747e7ac5d66629bda0a67">00098</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> NULL;}
<a name="l00099"></a>00099     
<a name="l00100"></a>00100     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>*,<span class="keywordtype">int</span>);
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#11f9065de21b2a826607337504954584">00101</a>     std::vector&lt;OBExternalBond&gt; *GetData()
<a name="l00102"></a>00102       {
<a name="l00103"></a>00103         <span class="keywordflow">return</span>(&amp;_vexbnd);
<a name="l00104"></a>00104       }
<a name="l00105"></a>00105   };
<a name="l00106"></a>00106 
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml">00112</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00113"></a>00113   {
<a name="l00114"></a>00114   <span class="keyword">protected</span>:
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#366a2531a9485fdfb2f6abbe528d99e1">00115</a>     std::string _value; 
<a name="l00116"></a>00116   <span class="keyword">public</span>:
<a name="l00117"></a>00117     <a class="code" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a>();
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#67bda850335747e7ac5d66629bda0a67">00118</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00119"></a>00119 <span class="keyword">      </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a>(*<span class="keyword">this</span>);}
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#ef706f61b8b25bb7de414f46bbe317b3">00120</a>     <span class="keywordtype">void</span>    SetValue(<span class="keyword">const</span> <span class="keywordtype">char</span> *v)        {      _value = v;    }
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#36b6ff14e0bae8e56e4637ab727fc8cb">00121</a>     <span class="keywordtype">void</span>    SetValue(<span class="keyword">const</span> std::string &amp;v) {      _value = v;    }
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#c9527475c246fadbbab63a35376fd5fe">00122</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetValue()<span class="keyword"> const</span>
<a name="l00123"></a>00123 <span class="keyword">    </span>{      <span class="keywordflow">return</span>(_value);    }
<a name="l00124"></a>00124   };
<a name="l00125"></a>00125 
<a name="l00128"></a>00128   <span class="comment">// More detailed description in generic.cpp</span>
<a name="l00129"></a>00129   <span class="keyword">template</span> &lt;<span class="keyword">class</span> ValueT&gt;
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml">00130</a>     <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00131"></a>00131   {
<a name="l00132"></a>00132   <span class="keyword">protected</span>:
<a name="l00133"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#8e244c63178d867c1294ea6011dc73ff">00133</a>     ValueT _value; 
<a name="l00134"></a>00134   <span class="keyword">public</span>:
<a name="l00135"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#bbe664b8fa3b004481772438aa0c1e8c">00135</a>   <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate</a>():
<a name="l00136"></a>00136     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">"PairData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bf37b8c94a903cbf5fc45475c815c541a" title="Arbitrary key/value data, i.e., OBPairData.">PairData</a>) {};
<a name="l00137"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#8525d460be3e43a8e605d854a2c9e246">00137</a>     <span class="keywordtype">void</span> SetValue(<span class="keyword">const</span> ValueT t)             { _value = t;     }
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#b23bca6040f6b5ef2e331a5210678c9f">00138</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> ValueT &amp;GetGenericValue()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_value); }
<a name="l00139"></a>00139   };
<a name="l00140"></a>00140 
<a name="l00142"></a><a class="code" href="namespaceOpenBabel.shtml#0bdf8334aad62a6bb7ad50f58060c9b6">00142</a>   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate&lt;int&gt;</a>     <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairInteger</a>;
<a name="l00144"></a><a class="code" href="namespaceOpenBabel.shtml#5ba6d4475315df1100427dc98074c087">00144</a>   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate&lt;double&gt;</a>  <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairFloatingPoint</a>;
<a name="l00145"></a>00145 
<a name="l00149"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml">00149</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBSetData.shtml" title="Used to store arbitrary attribute/set relationships. Should be used to store a set...">OBSetData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00150"></a>00150   {
<a name="l00151"></a>00151   <span class="keyword">protected</span>:
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#e4896f79700c8d654fc8f7dcef4eb30a">00152</a>     std::vector&lt;OBGenericData *&gt; _vdata;
<a name="l00153"></a>00153   <span class="keyword">public</span>:
<a name="l00154"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#1998d348b757cd3146c83750f00d8c8a">00154</a>   <a class="code" href="classOpenBabel_1_1OBSetData.shtml" title="Used to store arbitrary attribute/set relationships. Should be used to store a set...">OBSetData</a>() : <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">"SetData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>) {}
<a name="l00155"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#67bda850335747e7ac5d66629bda0a67">00155</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBSetData.shtml" title="Used to store arbitrary attribute/set relationships. Should be used to store a set...">OBSetData</a>(*<span class="keyword">this</span>);}
<a name="l00156"></a>00156 
<a name="l00158"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#3e36d0e80af7574cee4f2240b8f372dd">00158</a>     <span class="keywordtype">void</span> AddData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> *d)
<a name="l00159"></a>00159     {
<a name="l00160"></a>00160       <span class="keywordflow">if</span>(d)
<a name="l00161"></a>00161         {
<a name="l00162"></a>00162           _vdata.push_back(d);
<a name="l00163"></a>00163         }
<a name="l00164"></a>00164     }
<a name="l00165"></a>00165 
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#8ad9af74c60e6f57716910542f616ae5">00167</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(std::vector&lt;OBGenericData *&gt; &amp;vdata)
<a name="l00168"></a>00168     {
<a name="l00169"></a>00169       _vdata = vdata;
<a name="l00170"></a>00170     }
<a name="l00171"></a>00171 
<a name="l00173"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#74418cc8cd2b2a72f8e1778b0cd58a48">00173</a>     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> *GetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *s)
<a name="l00174"></a>00174     {
<a name="l00175"></a>00175       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00178"></a>00178         <span class="keywordflow">if</span> ((*i)-&gt;GetAttribute() == s)
<a name="l00179"></a>00179           <span class="keywordflow">return</span>(*i);
<a name="l00180"></a>00180 
<a name="l00181"></a>00181       <span class="keywordflow">return</span>(NULL);
<a name="l00182"></a>00182     }
<a name="l00183"></a>00183 
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#c1fc78db5080260be71f604ee5bbfcd2">00185</a>     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> *GetData(<span class="keyword">const</span> std::string &amp;s)
<a name="l00186"></a>00186     {
<a name="l00187"></a>00187       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00188"></a>00188 
<a name="l00189"></a>00189       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00190"></a>00190         <span class="keywordflow">if</span> ((*i)-&gt;GetAttribute() == s)
<a name="l00191"></a>00191           <span class="keywordflow">return</span>(*i);
<a name="l00192"></a>00192 
<a name="l00193"></a>00193       <span class="keywordflow">return</span>(NULL);
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195 
<a name="l00197"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#e61a4b8009b2982994c629b61fbb4e23">00197</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::vector&lt;OBGenericData *&gt; &amp;GetData() const <span class="comment">//now virtual and const</span>
<a name="l00198"></a>00198     {
<a name="l00199"></a>00199       <span class="keywordflow">return</span>(_vdata);
<a name="l00200"></a>00200     }
<a name="l00201"></a>00201 
<a name="l00203"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#2dd0afcc5538601c2a39a3b7871faff2">00203</a>     std::vector&lt;OBGenericData*&gt;::iterator GetBegin()
<a name="l00204"></a>00204       {
<a name="l00205"></a>00205         <span class="keywordflow">return</span> _vdata.begin();
<a name="l00206"></a>00206       }
<a name="l00207"></a>00207 
<a name="l00209"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#e26106f464c8cb2959a7705a606f7da0">00209</a>     std::vector&lt;OBGenericData*&gt;::iterator GetEnd()
<a name="l00210"></a>00210       {
<a name="l00211"></a>00211         <span class="keywordflow">return</span> _vdata.end();
<a name="l00212"></a>00212       }
<a name="l00213"></a>00213 
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#ce768b2c55b1d16a47b8fdcda84515ea">00215</a>     <span class="keywordtype">void</span> DeleteData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> *gd)
<a name="l00216"></a>00216     {
<a name="l00217"></a>00217       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00218"></a>00218       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00219"></a>00219         <span class="keywordflow">if</span> (*i == gd)
<a name="l00220"></a>00220           {
<a name="l00221"></a>00221             <span class="keyword">delete</span> *i;
<a name="l00222"></a>00222             _vdata.erase(i);
<a name="l00223"></a>00223           }
<a name="l00224"></a>00224     }
<a name="l00225"></a>00225 
<a name="l00226"></a>00226   }; <span class="comment">// OBSetData</span>
<a name="l00227"></a>00227 
<a name="l00231"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml">00231</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml" title="Used to temporarily store bonds that reference an atom that has not yet been added...">OBVirtualBond</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00232"></a>00232   {
<a name="l00233"></a>00233   <span class="keyword">protected</span>:
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#eb2c09a43f4c8b6256dbed5faf85d768">00234</a>     <span class="keywordtype">int</span> _bgn;
<a name="l00235"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#bb406f6b7d63af84fda76dbcdbac66c5">00235</a>     <span class="keywordtype">int</span> _end;
<a name="l00236"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#f7c67fda80d169e7af68407f88740499">00236</a>     <span class="keywordtype">int</span> _ord;
<a name="l00237"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#a753c6ca5d794e055f8b4b590c6ba538">00237</a>     <span class="keywordtype">int</span> _stereo;
<a name="l00238"></a>00238   <span class="keyword">public</span>:
<a name="l00239"></a>00239     <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml" title="Used to temporarily store bonds that reference an atom that has not yet been added...">OBVirtualBond</a>();
<a name="l00240"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#67bda850335747e7ac5d66629bda0a67">00240</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml" title="Used to temporarily store bonds that reference an atom that has not yet been added...">OBVirtualBond</a>(*<span class="keyword">this</span>);}
<a name="l00241"></a>00241     <a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml" title="Used to temporarily store bonds that reference an atom that has not yet been added...">OBVirtualBond</a>(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span> stereo=0);
<a name="l00242"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#064aa6b502655795918788af438b0208">00242</a>     <span class="keywordtype">int</span> GetBgn()    {      <span class="keywordflow">return</span>(_bgn);    }
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#fc186d85b94bae6548e433324215fff6">00243</a>     <span class="keywordtype">int</span> GetEnd()    {      <span class="keywordflow">return</span>(_end);    }
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#eaca5975b0354f81d10792199fee7d4d">00244</a>     <span class="keywordtype">int</span> GetOrder()  {      <span class="keywordflow">return</span>(_ord);    }
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#9695376d762d4fd2b12da6f51a99fb92">00245</a>     <span class="keywordtype">int</span> GetStereo() {      <span class="keywordflow">return</span>(_stereo); }
<a name="l00246"></a>00246   };
<a name="l00247"></a>00247 
<a name="l00250"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml">00250</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR()).">OBRingData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00251"></a>00251   {
<a name="l00252"></a>00252   <span class="keyword">protected</span>:
<a name="l00253"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#2da396a9610e4fd1218b885407375568">00253</a>     std::vector&lt;OBRing*&gt; _vr;
<a name="l00254"></a>00254   <span class="keyword">public</span>:
<a name="l00255"></a>00255     <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR()).">OBRingData</a>();
<a name="l00256"></a>00256     <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR()).">OBRingData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR()).">OBRingData</a> &amp;);
<a name="l00257"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#67bda850335747e7ac5d66629bda0a67">00257</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR()).">OBRingData</a>(*<span class="keyword">this</span>);}
<a name="l00258"></a>00258     ~<a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR()).">OBRingData</a>();
<a name="l00259"></a>00259 
<a name="l00260"></a>00260     <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR()).">OBRingData</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR()).">OBRingData</a> &amp;);
<a name="l00261"></a>00261 
<a name="l00262"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#45f2a0418d86a4d7f2e94f1c54e504ce">00262</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(std::vector&lt;OBRing*&gt; &amp;vr)
<a name="l00263"></a>00263     {
<a name="l00264"></a>00264       _vr = vr;
<a name="l00265"></a>00265     }
<a name="l00266"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#120222dc719c5f6a711770dce699535b">00266</a>     <span class="keywordtype">void</span> PushBack(<a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> *r)
<a name="l00267"></a>00267     {
<a name="l00268"></a>00268       _vr.push_back(r);
<a name="l00269"></a>00269     }
<a name="l00270"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#45043bd4256fcf9d62e0cb45e024c466">00270</a>     std::vector&lt;OBRing*&gt; &amp;GetData()
<a name="l00271"></a>00271       {
<a name="l00272"></a>00272         <span class="keywordflow">return</span>(_vr);
<a name="l00273"></a>00273       }
<a name="l00274"></a>00274 
<a name="l00275"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#a1a05257821a8156625beabb7dd58e0b">00275</a>     std::vector&lt;OBRing*&gt;::iterator BeginRings()
<a name="l00276"></a>00276       { <span class="keywordflow">return</span>(_vr.begin()); }
<a name="l00277"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#07ad405727c652a6a280d821b9d1ac47">00277</a>     std::vector&lt;OBRing*&gt;::iterator EndRings()
<a name="l00278"></a>00278       { <span class="keywordflow">return</span>(_vr.end()); }
<a name="l00279"></a>00279     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> *BeginRing(std::vector&lt;OBRing*&gt;::iterator &amp;i);
<a name="l00280"></a>00280     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> *NextRing(std::vector&lt;OBRing*&gt;::iterator &amp;i);
<a name="l00281"></a>00281   };
<a name="l00282"></a>00282 
<a name="l00287"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml">00287</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from...">OBUnitCell</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00288"></a>00288   {
<a name="l00289"></a>00289   <span class="keyword">public</span>:
<a name="l00290"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c7818f893264a00711081b62de694f99db4">00290</a>     <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c78">LatticeType</a> { <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f18f893264a00711081b62de694f99db4">Undefined</a>, 
<a name="l00291"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c780c393259f8f62caf4a7d210327e9ecb7">00291</a>                        Triclinic, 
<a name="l00292"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c788dcb30922b1f64f0d749914bf32442ff">00292</a>                        Monoclinic, 
<a name="l00293"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c78d6c2a31a4f6d88429ee1146228b5bbd8">00293</a>                        Orthorhombic, 
<a name="l00294"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c783d2110f7a11f77ed4f87cbc954aeec21">00294</a>                        Tetragonal, 
<a name="l00295"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c7867f25c654b88f3bdcb76dd7a853f1296">00295</a>                        Rhombohedral , 
<a name="l00296"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c78f6a3ca263243147ee2b534d1c757544b">00296</a>                        Hexagonal, 
<a name="l00297"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c787105ea83819b1af6af85747e20b462b4">00297</a>                        Cubic};
<a name="l00298"></a>00298 
<a name="l00299"></a>00299 
<a name="l00300"></a>00300   <span class="keyword">protected</span>:
<a name="l00301"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#09c94aa5a87671fca3499dcf7b41d84a">00301</a>     <span class="keywordtype">double</span> _a, _b, _c, _alpha, _beta, _gamma;
<a name="l00302"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#4e04f720581a30502f781e620fb56af6">00302</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> _offset; 
<a name="l00303"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#477aabff6d508d2afbc81da2c82f7405">00303</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> _v1, _v2, _v3; 
<a name="l00304"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#2f7186c492d40a6b69092700ff8aee83">00304</a>     std::string _spaceGroupName;
<a name="l00305"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#9c98685360a568cd4473b1931e2765d8">00305</a>     <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a>* _spaceGroup;
<a name="l00306"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#474459fcdeb63c82700a345e59330645">00306</a>     <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c78">LatticeType</a> _lattice;
<a name="l00307"></a>00307   <span class="keyword">public</span>:
<a name="l00309"></a>00309     <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from...">OBUnitCell</a>();
<a name="l00310"></a>00310     <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from...">OBUnitCell</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from...">OBUnitCell</a> &amp;);
<a name="l00311"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#67bda850335747e7ac5d66629bda0a67">00311</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00312"></a>00312 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from...">OBUnitCell</a>(*<span class="keyword">this</span>);}
<a name="l00313"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#29eaffe421897707aa12103bec99d3c9">00313</a>     ~<a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from...">OBUnitCell</a>()    {}
<a name="l00314"></a>00314 
<a name="l00315"></a>00315     <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from...">OBUnitCell</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from...">OBUnitCell</a> &amp;);
<a name="l00316"></a>00316 
<a name="l00326"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#cca66a4b8a38d190c178b6ed85f9b8ed">00326</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> a, <span class="keyword">const</span> <span class="keywordtype">double</span> b, <span class="keyword">const</span> <span class="keywordtype">double</span> c,
<a name="l00327"></a>00327                  <span class="keyword">const</span> <span class="keywordtype">double</span> alpha, <span class="keyword">const</span> <span class="keywordtype">double</span> beta, <span class="keyword">const</span> <span class="keywordtype">double</span> gamma)
<a name="l00328"></a>00328     {   _a = a; _b = b; _c = c;
<a name="l00329"></a>00329       _alpha = alpha; _beta = beta; _gamma = gamma; }
<a name="l00330"></a>00330     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v2, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v3);
<a name="l00331"></a>00331 
<a name="l00333"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#4c53fadff602620ff82a9a0c3ceda85a">00333</a>     <span class="keywordtype">void</span> SetOffset(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v1) { _offset = v1; }
<a name="l00334"></a>00334 
<a name="l00337"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#c6f21a0fb4b93bb99f210559a1a6d7d7">00337</a>     <span class="keywordtype">void</span> SetSpaceGroup(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a>* sg) { _spaceGroup = sg; }
<a name="l00338"></a>00338 
<a name="l00342"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#76ccdf2ccfbefae104ff52932dcf11c1">00342</a>     <span class="keywordtype">void</span> SetSpaceGroup(<span class="keyword">const</span> std::string sg) { _spaceGroup = <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#2787ce8a302b665bc4f059670f2e68ca">SpaceGroup::GetSpaceGroup</a> (sg); 
<a name="l00343"></a>00343                                                _spaceGroupName = sg; }
<a name="l00344"></a>00344     
<a name="l00350"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e0d7e7ddcd3c5e3c48c6b24908d8404f">00350</a>     <span class="keywordtype">void</span> SetSpaceGroup(<span class="keyword">const</span> <span class="keywordtype">int</span> sg) { _spaceGroup = <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#2787ce8a302b665bc4f059670f2e68ca">SpaceGroup::GetSpaceGroup</a> (sg); }
<a name="l00351"></a>00351     
<a name="l00353"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#6516b3a121b34a94e19201da06104afa">00353</a>     <span class="keywordtype">void</span> SetLatticeType(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2ee58ec34164a3ea47d51ab6ffc5c78">LatticeType</a> lt) { _lattice = lt; }
<a name="l00354"></a>00354 
<a name="l00357"></a>00357     <span class="keywordtype">void</span> FillUnitCell(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *);
<a name="l00358"></a>00358 
<a name="l00360"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#3bacc0010fd34814039b26758da67dae">00360</a>     <span class="keywordtype">double</span> GetA()    { <span class="keywordflow">return</span>(_a);    }
<a name="l00362"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#c0f9682b3743c4ec91dd9fd16bb5bd82">00362</a>     <span class="keywordtype">double</span> GetB()    { <span class="keywordflow">return</span>(_b);    }
<a name="l00364"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#229a18fdc499aafe149c55011f9fb2fb">00364</a>     <span class="keywordtype">double</span> GetC()    { <span class="keywordflow">return</span>(_c);    }
<a name="l00366"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#6897ba879a5e0f5ac4ac5aefeb94601d">00366</a>     <span class="keywordtype">double</span> GetAlpha(){ <span class="keywordflow">return</span>(_alpha);}
<a name="l00368"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#8b788f95c3fa1f2cc9aedaa1b92b78a1">00368</a>     <span class="keywordtype">double</span> GetBeta() { <span class="keywordflow">return</span>(_beta); }
<a name="l00370"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#53b3c98860a330a6b95074945fc2895f">00370</a>     <span class="keywordtype">double</span> GetGamma(){ <span class="keywordflow">return</span>(_gamma);}
<a name="l00372"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#545d26772ece9dda5ed6bd4a6f71f45b">00372</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetOffset() { <span class="keywordflow">return</span>(_offset); }
<a name="l00373"></a>00373 
<a name="l00375"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#81676bc2dbd807644f7d5acd1b1a2dc9">00375</a>     <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml" title="Handle crystallographic space group symmetry.">SpaceGroup</a>* GetSpaceGroup() { <span class="keywordflow">return</span>(_spaceGroup); }
<a name="l00376"></a>00376                 
<a name="l00378"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#22dbea225bd03af66ef0db074cff402e">00378</a>     <span class="keyword">const</span> std::string GetSpaceGroupName() { <span class="keywordflow">return</span>(_spaceGroupName); }
<a name="l00379"></a>00379 
<a name="l00381"></a>00381     LatticeType GetLatticeType( <span class="keywordtype">int</span> spacegroup );
<a name="l00382"></a>00382     
<a name="l00384"></a>00384     LatticeType GetLatticeType();
<a name="l00385"></a>00385 
<a name="l00387"></a>00387     std::vector&lt;vector3&gt; GetCellVectors();
<a name="l00389"></a>00389     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a>   GetCellMatrix();
<a name="l00391"></a>00391     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> GetOrthoMatrix();
<a name="l00393"></a>00393     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> GetFractionalMatrix();
<a name="l00394"></a>00394 
<a name="l00396"></a>00396     <span class="keywordtype">int</span> GetSpaceGroupNumber( std::string name = <span class="stringliteral">""</span> );
<a name="l00398"></a>00398     <span class="keywordtype">double</span> GetCellVolume();
<a name="l00399"></a>00399   };
<a name="l00400"></a>00400 
<a name="l00406"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml">00406</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00407"></a>00407   {
<a name="l00408"></a>00408   <span class="keyword">protected</span>:
<a name="l00410"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#6c0b393e8fabed75f977c2ef2e9776b4">00410</a>     std::vector&lt;unsigned short&gt;              _vDimension;
<a name="l00412"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#d069a68962fcc260bd3d4a1f4fc37fcb">00412</a>     std::vector&lt;double&gt;                      _vEnergies;
<a name="l00414"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#89ef302474a75b75e95f99892462da96">00414</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vForces;
<a name="l00416"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#c6c0bfd74d984fed427c1ced49acef5a">00416</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vVelocity;
<a name="l00418"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#aea44fb2ea8511661a37ff43c6df9149">00418</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vDisplace;
<a name="l00420"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ff183e0156f477b106269c9524d8b4dd">00420</a>     std::vector&lt;std::string&gt;                 _vData;
<a name="l00421"></a>00421     
<a name="l00422"></a>00422   <span class="keyword">public</span>:
<a name="l00423"></a>00423     <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a>();
<a name="l00424"></a>00424     <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a> &amp;);
<a name="l00425"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#67bda850335747e7ac5d66629bda0a67">00425</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a>(*<span class="keyword">this</span>);}
<a name="l00426"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#1e909f0c20e17b79ecc51ae05b57f78f">00426</a>     ~<a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a>()    {}
<a name="l00427"></a>00427 
<a name="l00428"></a>00428     <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBConformerData.shtml" title="Used to hold data on conformers or geometry optimization steps.">OBConformerData</a> &amp;);
<a name="l00429"></a>00429 
<a name="l00430"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#98270b6a5c308d32731da6e0347604f8">00430</a>     <span class="keywordtype">void</span> SetDimension(std::vector&lt;unsigned short&gt; vd) { _vDimension = vd; }
<a name="l00431"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#83d2707a7d694d2dcbca91b52e537953">00431</a>     <span class="keywordtype">void</span> SetEnergies(std::vector&lt;double&gt; ve) { _vEnergies = ve; }
<a name="l00432"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#e5e8b9cfa509d47b804cd62dabec4384">00432</a>     <span class="keywordtype">void</span> SetForces(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vf) {_vForces = vf;}
<a name="l00433"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#10e686c1334aab2838abd83f0e43c15d">00433</a>     <span class="keywordtype">void</span> SetVelocities(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vv)
<a name="l00434"></a>00434     { _vVelocity = vv; }
<a name="l00435"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#97fd4b5e51251d3647a1d8744f5fc178">00435</a>     <span class="keywordtype">void</span> SetDisplacements(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vd)
<a name="l00436"></a>00436     { _vDisplace = vd; }
<a name="l00437"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#6a42c8d13245d5d0c11476c56e6a6e33">00437</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(std::vector&lt;std::string&gt; vdat) { _vData = vdat; }
<a name="l00438"></a>00438 
<a name="l00439"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#11ede097c372a7bca3ac9bbc8325aade">00439</a>     std::vector&lt;unsigned short&gt; GetDimension() { <span class="keywordflow">return</span> _vDimension; }
<a name="l00440"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#3d8b242eebd5ab58552d535f86bd1609">00440</a>     std::vector&lt;double&gt;         GetEnergies()  { <span class="keywordflow">return</span> _vEnergies; }
<a name="l00441"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#b47a820667f55e0899534778c414c21d">00441</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetForces() {<span class="keywordflow">return</span> _vForces; }
<a name="l00442"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#045c32551393c9123ffcaaf64b68f8df">00442</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetVelocities()
<a name="l00443"></a>00443       {<span class="keywordflow">return</span> _vVelocity;}
<a name="l00444"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#0f4fc4a438c20ca17dc4164245723b61">00444</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetDisplacements()
<a name="l00445"></a>00445       {<span class="keywordflow">return</span> _vDisplace;}
<a name="l00446"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#10bc2a88336b4e3de55ce7112ad07811">00446</a>     std::vector&lt;std::string&gt;    GetData() { <span class="keywordflow">return</span> _vData; }
<a name="l00447"></a>00447 
<a name="l00448"></a>00448   };
<a name="l00449"></a>00449 
<a name="l00454"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml">00454</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00455"></a>00455   {
<a name="l00456"></a>00456   <span class="keyword">protected</span>:
<a name="l00457"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#472527c3649b76aaaa28597ba3f214dd">00457</a>     std::string _spaceGroup;
<a name="l00458"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#4a2dc3eb5d3a544b8afe7507b7189fe9">00458</a>     std::string _pointGroup;
<a name="l00459"></a>00459   <span class="keyword">public</span>:
<a name="l00460"></a>00460     <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a>();
<a name="l00461"></a>00461     <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a> &amp;);
<a name="l00462"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#67bda850335747e7ac5d66629bda0a67">00462</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a>(*<span class="keyword">this</span>);}
<a name="l00463"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#af4df0ae2afcaf39df55df81e0a18a5a">00463</a>     ~<a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a>()    {}
<a name="l00464"></a>00464 
<a name="l00465"></a>00465     <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml" title="Used to hold the point-group and/or space-group symmetry.">OBSymmetryData</a> &amp;);
<a name="l00466"></a>00466 
<a name="l00467"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#2ceb8f352cca6f223aff43d41f4fb2f1">00467</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(std::string pg, std::string sg = <span class="stringliteral">""</span>)
<a name="l00468"></a>00468     { _pointGroup = pg; _spaceGroup = sg; }
<a name="l00469"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#614446afd9dea92d4da7e8c8095aa107">00469</a>     <span class="keywordtype">void</span> SetPointGroup(std::string pg) { _pointGroup = pg; }
<a name="l00470"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#ef06d0d2bb4513684db4b052f487d45a">00470</a>     <span class="keywordtype">void</span> SetSpaceGroup(std::string sg) { _spaceGroup = sg; }
<a name="l00471"></a>00471 
<a name="l00472"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#ed0b54749bded9681b917dbbe6ce1800">00472</a>     std::string GetPointGroup() { <span class="keywordflow">return</span> _pointGroup; }
<a name="l00473"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#90903c2ee1d02cbf37d5162541691f4f">00473</a>     std::string GetSpaceGroup() { <span class="keywordflow">return</span> _spaceGroup; }
<a name="l00474"></a>00474   };
<a name="l00475"></a>00475 
<a name="l00479"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml">00479</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around...">OBTorsion</a>
<a name="l00480"></a>00480   {
<a name="l00481"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#c59e55249c26b7453efa178aab836428">00481</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00482"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#7633b32d47d66ecdfb4f3db46e7e1422">00482</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a>;
<a name="l00483"></a>00483 
<a name="l00484"></a>00484   <span class="keyword">protected</span>:
<a name="l00485"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a0d884087af9a4eac62349cdd16f0e52">00485</a>     std::pair&lt;OBAtom*,OBAtom*&gt; _bc;
<a name="l00487"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#dae49ee49ed76ec2af6149f2a20f34bf">00487</a>     std::vector&lt;triple&lt;OBAtom*,OBAtom*,double&gt; &gt; _ads;
<a name="l00488"></a>00488 
<a name="l00489"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#b97992a9144899afd3b91c39dcc8e5e4">00489</a>     <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around...">OBTorsion</a>(): _bc(NULL, NULL)      {      }
<a name="l00490"></a>00490     <span class="comment">//protected for use only by friend classes</span>
<a name="l00491"></a>00491     <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around...">OBTorsion</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *);
<a name="l00492"></a>00492 
<a name="l00493"></a>00493     std::vector&lt;quad&lt;OBAtom*,OBAtom*,OBAtom*,OBAtom*&gt; &gt; GetTorsions();
<a name="l00494"></a>00494 
<a name="l00495"></a>00495   <span class="keyword">public</span>:
<a name="l00496"></a>00496     <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around...">OBTorsion</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around...">OBTorsion</a> &amp;);
<a name="l00497"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#42a5dd5b1bb3906af399c66764589c23">00497</a>     ~<a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around...">OBTorsion</a>()      {}
<a name="l00498"></a>00498 
<a name="l00499"></a>00499     <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around...">OBTorsion</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around...">OBTorsion</a> &amp;);
<a name="l00500"></a>00500 
<a name="l00501"></a>00501     <span class="keywordtype">void</span> Clear();
<a name="l00502"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#31d1053aee208079bcc3c5e1884774df">00502</a>     <span class="keywordtype">bool</span> Empty()    {      <span class="keywordflow">return</span>(_bc.first == 0 &amp;&amp; _bc.second == 0);    }
<a name="l00503"></a>00503 
<a name="l00504"></a>00504     <span class="keywordtype">bool</span> AddTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *b, <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *c,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *d);
<a name="l00505"></a>00505     <span class="keywordtype">bool</span> AddTorsion(<a class="code" href="structOpenBabel_1_1quad.shtml" title="A 4-element templated, based on the design of the STL pair&amp;lt;&amp;gt;.">quad&lt;OBAtom*,OBAtom*,OBAtom*,OBAtom*&gt;</a> &amp;atoms);
<a name="l00506"></a>00506 
<a name="l00507"></a>00507     <span class="keywordtype">bool</span> SetAngle(<span class="keywordtype">double</span> radians, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index = 0);
<a name="l00508"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#a2c22321e05df8c58066c30bef2cf927">00508</a>     <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> * <span class="comment">/*bond*/</span>) { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00509"></a>00509 
<a name="l00510"></a>00510     <span class="keywordtype">bool</span> GetAngle(<span class="keywordtype">double</span> &amp;radians, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index =0);
<a name="l00513"></a>00513     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetBondIdx();
<a name="l00514"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#7d1646dc12416daf821f666c233d2be2">00514</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize()<span class="keyword"> const    </span>{      <span class="keywordflow">return</span> _ads.size();    }
<a name="l00515"></a>00515 
<a name="l00518"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#16b7e8677bd43d8292b1f0485e4d1d5e">00518</a>     std::pair&lt;OBAtom*,OBAtom*&gt;                  GetBC()
<a name="l00519"></a>00519       {
<a name="l00520"></a>00520         <span class="keywordflow">return</span>(_bc);
<a name="l00521"></a>00521       }
<a name="l00524"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#223305867f2593a05ebbc37bdc9bb674">00524</a>     std::vector&lt;triple&lt;OBAtom*,OBAtom*,double&gt; &gt; GetADs()
<a name="l00525"></a>00525     {
<a name="l00526"></a>00526       <span class="keywordflow">return</span>(_ads) ;
<a name="l00527"></a>00527     }
<a name="l00528"></a>00528 
<a name="l00529"></a>00529     <span class="keywordtype">bool</span> IsProtonRotor();
<a name="l00530"></a>00530   };
<a name="l00531"></a>00531 
<a name="l00536"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml">00536</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00537"></a>00537   {
<a name="l00538"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#c59e55249c26b7453efa178aab836428">00538</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00539"></a>00539 
<a name="l00540"></a>00540   <span class="keyword">protected</span>:
<a name="l00541"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#8284d9e040299fd3ee667ad31e34a8d3">00541</a>     std::vector&lt;OBTorsion&gt; _torsions;
<a name="l00542"></a>00542 
<a name="l00543"></a>00543     <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a>();
<a name="l00544"></a>00544     <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a> &amp;);
<a name="l00545"></a>00545 
<a name="l00546"></a>00546   <span class="keyword">public</span>:
<a name="l00547"></a>00547     <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a> &amp;);
<a name="l00548"></a>00548 
<a name="l00550"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#67bda850335747e7ac5d66629bda0a67">00550</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00551"></a>00551 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol.">OBTorsionData</a>(*<span class="keyword">this</span>);}
<a name="l00552"></a>00552 
<a name="l00553"></a>00553     <span class="keywordtype">void</span> Clear();
<a name="l00554"></a>00554 
<a name="l00557"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#7549ccb8e6a424fb7e15367125a259c8">00557</a>     std::vector&lt;OBTorsion&gt; GetData()<span class="keyword"> const</span>
<a name="l00558"></a>00558 <span class="keyword">      </span>{
<a name="l00559"></a>00559         <span class="keywordflow">return</span> _torsions;
<a name="l00560"></a>00560       }
<a name="l00561"></a>00561       
<a name="l00564"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#7d1646dc12416daf821f666c233d2be2">00564</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      GetSize()<span class="keyword"> const</span>
<a name="l00565"></a>00565 <span class="keyword">    </span>{
<a name="l00566"></a>00566       <span class="keywordflow">return</span> _torsions.size();
<a name="l00567"></a>00567     }
<a name="l00568"></a>00568 
<a name="l00569"></a>00569     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<a class="code" href="classOpenBabel_1_1OBTorsion.shtml" title="Used to hold the torsion data for a single rotatable bond and all four atoms around...">OBTorsion</a> &amp;torsion);
<a name="l00570"></a>00570 
<a name="l00571"></a>00571     <span class="keywordtype">bool</span> FillTorsionArray(std::vector&lt;std::vector&lt;unsigned int&gt; &gt; &amp;torsions);
<a name="l00572"></a>00572   };
<a name="l00573"></a>00573 
<a name="l00576"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml">00576</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a>
<a name="l00577"></a>00577   {
<a name="l00578"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#c59e55249c26b7453efa178aab836428">00578</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00579"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#c2fadcaf6e1d7246db44fd04d90df423">00579</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a>;
<a name="l00580"></a>00580 
<a name="l00581"></a>00581   <span class="keyword">protected</span>:
<a name="l00582"></a>00582 
<a name="l00583"></a>00583     <span class="comment">//member data</span>
<a name="l00584"></a>00584 
<a name="l00585"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#6d6d58b7c653e7457ce0d0c2a907f9aa">00585</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>                *_vertex;
<a name="l00586"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#ed0a513f416c5140e604577971e1dd5c">00586</a>     std::pair&lt;OBAtom*,OBAtom*&gt;  _termini;
<a name="l00587"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#8ebc49284f65cb6d82c40fba0f9111b4">00587</a>     <span class="keywordtype">double</span>                  _radians;
<a name="l00588"></a>00588 
<a name="l00589"></a>00589     <span class="comment">//protected member functions</span>
<a name="l00590"></a>00590 
<a name="l00591"></a>00591     <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a>();  <span class="comment">//protect constructor for use only by friend classes</span>
<a name="l00592"></a>00592     <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *vertex,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *b);
<a name="l00593"></a>00593 
<a name="l00594"></a>00594     <a class="code" href="structOpenBabel_1_1triple.shtml" title="A 3-element templated, based on the design of the STL pair&amp;lt;&amp;gt;.">triple&lt;OBAtom*,OBAtom*,OBAtom*&gt;</a> GetAtoms();
<a name="l00595"></a>00595     <span class="keywordtype">void</span> SortByIndex();
<a name="l00596"></a>00596 
<a name="l00597"></a>00597   <span class="keyword">public</span>:
<a name="l00598"></a>00598 
<a name="l00599"></a>00599     <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a> &amp;);
<a name="l00600"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#35e160e815b78f064cd07164bf5aebb2">00600</a>     ~<a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a>()
<a name="l00601"></a>00601       {
<a name="l00602"></a>00602         _vertex = NULL;
<a name="l00603"></a>00603       }
<a name="l00604"></a>00604 
<a name="l00605"></a>00605     <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a> &amp;operator = (<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a> &amp;);
<a name="l00606"></a>00606     <span class="keywordtype">bool</span>     <a class="code" href="namespaceOpenBabel.shtml#c001b331f648fbbd8590576f59d4d2ab">operator ==</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a> &amp;);
<a name="l00607"></a>00607 
<a name="l00608"></a>00608     <span class="keywordtype">void</span>  Clear();
<a name="l00609"></a>00609 
<a name="l00612"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#bf68cf13cd458dac5db091a1f0bb7c9a">00612</a>     <span class="keywordtype">double</span> GetAngle()<span class="keyword"> const</span>
<a name="l00613"></a>00613 <span class="keyword">    </span>{
<a name="l00614"></a>00614       <span class="keywordflow">return</span>(_radians);
<a name="l00615"></a>00615     }
<a name="l00618"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#55f96888e82a56edfa241a34f3271ae0">00618</a>     <span class="keywordtype">void</span>  SetAngle(<span class="keywordtype">double</span> angle)
<a name="l00619"></a>00619     {
<a name="l00620"></a>00620       _radians = angle;
<a name="l00621"></a>00621     }
<a name="l00622"></a>00622     <span class="keywordtype">void</span>  SetAtoms(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *vertex,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *b);
<a name="l00623"></a>00623     <span class="keywordtype">void</span>  SetAtoms(<a class="code" href="structOpenBabel_1_1triple.shtml" title="A 3-element templated, based on the design of the STL pair&amp;lt;&amp;gt;.">triple&lt;OBAtom*,OBAtom*,OBAtom*&gt;</a> &amp;atoms);
<a name="l00624"></a>00624 
<a name="l00625"></a>00625   };
<a name="l00626"></a>00626 
<a name="l00629"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml">00629</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00630"></a>00630   {
<a name="l00631"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#c59e55249c26b7453efa178aab836428">00631</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00632"></a>00632 
<a name="l00633"></a>00633   <span class="keyword">protected</span>:
<a name="l00634"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#259e7ee82fbf67240f0b058ce4293d2e">00634</a>     std::vector&lt;OBAngle&gt; _angles;
<a name="l00635"></a>00635 
<a name="l00636"></a>00636     <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a>();
<a name="l00637"></a>00637     <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a> &amp;);
<a name="l00639"></a>00639 
<a name="l00640"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#7bde4d88bd37538955958388da8ef107">00640</a>     std::vector&lt;OBAngle&gt; GetData()<span class="keyword"> const</span>
<a name="l00641"></a>00641 <span class="keyword">      </span>{
<a name="l00642"></a>00642         <span class="keywordflow">return</span>(_angles);
<a name="l00643"></a>00643       }
<a name="l00644"></a>00644 
<a name="l00645"></a>00645   <span class="keyword">public</span>:
<a name="l00646"></a>00646     <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a> &amp;operator =(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a> &amp;);
<a name="l00647"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#67bda850335747e7ac5d66629bda0a67">00647</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00648"></a>00648 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol.">OBAngleData</a>(*<span class="keyword">this</span>);}
<a name="l00649"></a>00649 
<a name="l00650"></a>00650     <span class="keywordtype">void</span> Clear();
<a name="l00651"></a>00651     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> FillAngleArray(<span class="keywordtype">int</span> **angles, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;size);
<a name="l00652"></a>00652     <span class="keywordtype">bool</span> FillAngleArray(std::vector&lt;std::vector&lt;unsigned int&gt; &gt; &amp;angles);
<a name="l00653"></a>00653 
<a name="l00654"></a>00654     <span class="keywordtype">void</span>         <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<a class="code" href="classOpenBabel_1_1OBAngle.shtml" title="Used to hold the 3 atoms in an angle and the angle itself.">OBAngle</a> &amp;);
<a name="l00657"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#7d1646dc12416daf821f666c233d2be2">00657</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize()<span class="keyword"> const</span>
<a name="l00658"></a>00658 <span class="keyword">    </span>{
<a name="l00659"></a>00659       <span class="keywordflow">return</span> _angles.size();
<a name="l00660"></a>00660     }
<a name="l00661"></a>00661   };
<a name="l00662"></a>00662 
<a name="l00663"></a><a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">00663</a>   <span class="keyword">enum</span> <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a>{
<a name="l00664"></a><a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8e6eb596f7e638118128651043ff38545">00664</a>     <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8e6eb596f7e638118128651043ff38545">output</a>,     
<a name="l00665"></a><a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b837943061a284187ff6e555ac7093f528">00665</a>     <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b837943061a284187ff6e555ac7093f528">input</a>,      
<a name="l00666"></a><a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8103458136e7028a1a9b7349e64967810">00666</a>     <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8103458136e7028a1a9b7349e64967810">calcvolume</a>  
<a name="l00667"></a>00667   }; <span class="comment">// sets which atom4ref is accessed by OBChiralData</span>
<a name="l00668"></a>00668 
<a name="l00671"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml">00671</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00672"></a>00672   {
<a name="l00673"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#c59e55249c26b7453efa178aab836428">00673</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00674"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#c0625d6c1f6b8002765c09a45d400c4d">00674</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>;
<a name="l00675"></a>00675 
<a name="l00676"></a>00676   <span class="keyword">protected</span>:
<a name="l00677"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#89411064df2cf2407f4a89f75a5ea618">00677</a>     std::vector&lt;unsigned int&gt; _atom4refs; 
<a name="l00678"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#9886384fc77ff9471fc26cd16f822324">00678</a>     std::vector&lt;unsigned int&gt; _atom4refo; 
<a name="l00679"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#9f82047fe27246702be9b5032768ffb5">00679</a>     std::vector&lt;unsigned int&gt; _atom4refc; 
<a name="l00680"></a>00680 
<a name="l00683"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#22c1e0c27cee34369adf919eed3e3aac">00683</a>     <span class="keywordtype">int</span> parity;
<a name="l00684"></a>00684 
<a name="l00685"></a>00685   <span class="keyword">public</span>:
<a name="l00686"></a>00686 
<a name="l00687"></a>00687     <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a>();
<a name="l00688"></a>00688     <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a> &amp;src);
<a name="l00689"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#67bda850335747e7ac5d66629bda0a67">00689</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00690"></a>00690 <span class="keyword">      </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a>(*<span class="keyword">this</span>); }
<a name="l00691"></a>00691     <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a> &amp;operator =(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a> &amp;);
<a name="l00692"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#bc2d4b013efd6a8788da4a31489d28b9">00692</a>     ~<a class="code" href="classOpenBabel_1_1OBChiralData.shtml" title="Used to hold chiral inforamtion about the atom as OBGenericData.">OBChiralData</a>(){}
<a name="l00693"></a>00693 
<a name="l00694"></a>00694     <span class="keywordtype">void</span> Clear();
<a name="l00695"></a>00695 
<a name="l00697"></a>00697     std::vector&lt;unsigned int&gt; GetAtom4Refs(<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t) <span class="keyword">const</span>;
<a name="l00699"></a>00699     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetAtomRef(<span class="keywordtype">int</span> a,<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00700"></a>00700 
<a name="l00701"></a>00701     <span class="keywordtype">bool</span> SetAtom4Refs(std::vector&lt;unsigned int&gt; atom4refs, <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00702"></a>00702     <span class="keywordtype">int</span> AddAtomRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomref, <a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t);
<a name="l00703"></a>00703 
<a name="l00705"></a>00705     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize(<a class="code" href="namespaceOpenBabel.shtml#a88341c74a59194a8884e929f97b87b8">atomreftype</a> t) <span class="keyword">const</span>;
<a name="l00706"></a>00706   };
<a name="l00707"></a>00707 
<a name="l00710"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml">00710</a>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml" title="Defines a map between serial numbers (e.g., in a PDB file) and OBAtom objects inside...">OBSerialNums</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00711"></a>00711   {
<a name="l00712"></a>00712   <span class="keyword">protected</span>:
<a name="l00713"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423">00713</a>     std::map&lt;int, OBAtom*&gt; <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a>; 
<a name="l00714"></a>00714 
<a name="l00715"></a>00715   <span class="keyword">public</span>:
<a name="l00716"></a>00716 
<a name="l00717"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#c133c97c2adaeacc4a476bb27bc24500">00717</a>   <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#c133c97c2adaeacc4a476bb27bc24500">OBSerialNums</a>() :
<a name="l00718"></a>00718     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">"obSerialNums"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4804a06df36aa971eb112ada03885b00" title="Residue serial numbers.">SerialNums</a>)
<a name="l00719"></a>00719       {}
<a name="l00720"></a>00720 
<a name="l00721"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#0b0be14ee04253bb90997df9884a94ca">00721</a>   <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#c133c97c2adaeacc4a476bb27bc24500">OBSerialNums</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml" title="Defines a map between serial numbers (e.g., in a PDB file) and OBAtom objects inside...">OBSerialNums</a> &amp;cp) : <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(cp)
<a name="l00722"></a>00722     {
<a name="l00723"></a>00723       <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a> = cp.<a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a>;
<a name="l00724"></a>00724     }
<a name="l00727"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#67bda850335747e7ac5d66629bda0a67">00727</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#67bda850335747e7ac5d66629bda0a67">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00728"></a>00728 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#c133c97c2adaeacc4a476bb27bc24500">OBSerialNums</a>(*<span class="keyword">this</span>);}
<a name="l00729"></a>00729       
<a name="l00730"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#392c3230c9d3cca11b1e4d57bdd2ddfd">00730</a>     std::map&lt;int,OBAtom*&gt; &amp;<a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#392c3230c9d3cca11b1e4d57bdd2ddfd">GetData</a>()    { <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a>;    }
<a name="l00731"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#97e7e04349f25820cb9f816f7c6a6cdd">00731</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#97e7e04349f25820cb9f816f7c6a6cdd">SetData</a>(std::map&lt;int,OBAtom*&gt; &amp;sm) { <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9452a3c2c31da208c07429f21506f423" title="map between serial num">_serialMap</a> = sm;  }
<a name="l00732"></a>00732       
<a name="l00733"></a>00733   };
<a name="l00734"></a>00734 
<a name="l00737"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml">00737</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml" title="Used to hold the normal modes of a molecule, etc.">OBVibrationData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00738"></a>00738   {
<a name="l00739"></a>00739   <span class="keyword">protected</span>:
<a name="l00741"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#84619fd6eb56bada6e0c68c54798bde0">00741</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; _vLx;
<a name="l00742"></a>00742     
<a name="l00744"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#443d61f7fd264880b7233b3d727a5828">00744</a>     std::vector&lt;double&gt;  _vFrequencies;
<a name="l00745"></a>00745     
<a name="l00747"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#e7963c2698fd4975c7060b1c5438b272">00747</a>     std::vector&lt;double&gt;  _vIntensities;
<a name="l00748"></a>00748     
<a name="l00749"></a>00749 
<a name="l00750"></a>00750   <span class="keyword">public</span>:
<a name="l00751"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#d6eff9b28ddb91e20a4e4f1648e21f37">00751</a>     <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml" title="Used to hold the normal modes of a molecule, etc.">OBVibrationData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">"VibrationData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb69829f7efb675ca0f6a4d8f245ceaf2" title="Vibrational modes, frequencies, etc.">VibrationData</a>){};
<a name="l00752"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#c935ab00b5625a4def7fbe6333ede664">00752</a>     <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBVibrationData.shtml" title="Used to hold the normal modes of a molecule, etc.">OBVibrationData</a>() {}
<a name="l00753"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#67bda850335747e7ac5d66629bda0a67">00753</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00754"></a>00754 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml" title="Used to hold the normal modes of a molecule, etc.">OBVibrationData</a>(*<span class="keyword">this</span>);}
<a name="l00755"></a>00755     
<a name="l00756"></a>00756     <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml" title="Used to hold the normal modes of a molecule, etc.">OBVibrationData</a> &amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBVibrationData.shtml" title="Used to hold the normal modes of a molecule, etc.">OBVibrationData</a> &amp;);
<a name="l00757"></a>00757     
<a name="l00758"></a>00758     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<span class="keyword">const</span> std::vector&lt; std::vector&lt; vector3 &gt; &gt; &amp;,
<a name="l00759"></a>00759                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;,
<a name="l00760"></a>00760                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00761"></a>00761     
<a name="l00762"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#7d213a6f330db419aab9aa3f5dd62e48">00762</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetLx()<span class="keyword"> const</span>
<a name="l00763"></a>00763 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vLx; }
<a name="l00764"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#829a7ac41b51a00ec9179725aee9e60b">00764</a>     std::vector&lt;double&gt; GetFrequencies()<span class="keyword"> const</span>
<a name="l00765"></a>00765 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vFrequencies; }
<a name="l00766"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#4a87c0646df8384b5ef302f655f3da8d">00766</a>     std::vector&lt;double&gt; GetIntensities()<span class="keyword"> const</span>
<a name="l00767"></a>00767 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vIntensities; }
<a name="l00768"></a>00768 
<a name="l00769"></a>00769     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetNumberOfFrequencies() <span class="keyword">const</span>;
<a name="l00770"></a>00770 };
<a name="l00771"></a>00771 
<a name="l00774"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml">00774</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotationData.shtml" title="Used to hold the rotational constants and symmetry numbers.">OBRotationData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00775"></a>00775  {
<a name="l00776"></a>00776  <span class="keyword">public</span>:
<a name="l00777"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#fda39669e25831ec186e17cb437dba096ce26a62afab55d7606ad4e92428b30c">00777</a>    <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#fda39669e25831ec186e17cb437dba09">RType</a>{UNKNOWN, ASYMMETRIC, SYMMETRIC, LINEAR};
<a name="l00778"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#f55b99b7ce56986ce4421f598bb7b1d7">00778</a>    <a class="code" href="classOpenBabel_1_1OBRotationData.shtml" title="Used to hold the rotational constants and symmetry numbers.">OBRotationData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">"RotationData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb7c011beb81d9ba86035c1c0b7609899" title="Rotational energy information.">RotationData</a>){}
<a name="l00779"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#519e86e5760ce996627dcf4fe5efab66">00779</a>    <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBRotationData.shtml" title="Used to hold the rotational constants and symmetry numbers.">OBRotationData</a>(){};
<a name="l00780"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#67bda850335747e7ac5d66629bda0a67">00780</a>    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00781"></a>00781 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBRotationData.shtml" title="Used to hold the rotational constants and symmetry numbers.">OBRotationData</a>(*<span class="keyword">this</span>);}
<a name="l00782"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#a0e40eaa96ec46f0513b48fce93b7b76">00782</a>    <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<a class="code" href="classOpenBabel_1_1OBRotationData.shtml#fda39669e25831ec186e17cb437dba09">RType</a> RotorType, std::vector&lt;double&gt; RotationalConstants, <span class="keywordtype">int</span> SymmetryNumber)
<a name="l00783"></a>00783    {
<a name="l00784"></a>00784      RotConsts = RotationalConstants;
<a name="l00785"></a>00785      type = RotorType;
<a name="l00786"></a>00786      SymNum = SymmetryNumber;
<a name="l00787"></a>00787    }
<a name="l00788"></a>00788 
<a name="l00790"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#6f70037b26d7b9467c1a58de1c387d94">00790</a>    std::vector&lt;double&gt; GetRotConsts()<span class="keyword">const</span>{ <span class="keywordflow">return</span> RotConsts; }
<a name="l00791"></a>00791 
<a name="l00792"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#9ac59b320ed168e96f32234acd79b42a">00792</a>    <span class="keywordtype">int</span> GetSymmetryNumber()<span class="keyword">const</span>{ <span class="keywordflow">return</span> SymNum; }
<a name="l00793"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#3eb540bec04a80b875079e7d0b982ec9">00793</a>    <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#fda39669e25831ec186e17cb437dba09">RType</a> GetRotorType()<span class="keyword">const   </span>{ <span class="keywordflow">return</span> type; }
<a name="l00794"></a>00794 
<a name="l00795"></a>00795  <span class="keyword">protected</span>:
<a name="l00796"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#158f9d92716703712f00b3b041adc3cc">00796</a>    std::vector&lt;double&gt; RotConsts;
<a name="l00797"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#59b5e4d007a23da401e33d9f5eea2664">00797</a>    <span class="keywordtype">int</span>                 SymNum;   
<a name="l00798"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#90ab08fd1dc96f17cf3562d8afeb60c0">00798</a>    <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#fda39669e25831ec186e17cb437dba09">RType</a>               type;     
<a name="l00799"></a>00799  };
<a name="l00800"></a>00800  
<a name="l00804"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml">00804</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBVectorData.shtml" title="Used to hold a 3D vector item (e.g., a dipole moment).">OBVectorData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00805"></a>00805  {
<a name="l00806"></a>00806  <span class="keyword">public</span>:
<a name="l00807"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#7ebf015db0f2457d856d0eb688769d41">00807</a>    <a class="code" href="classOpenBabel_1_1OBVectorData.shtml" title="Used to hold a 3D vector item (e.g., a dipole moment).">OBVectorData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">"VectorData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b46bb764382af04b5c32d3370e6b677f9" title="Vector Data (i.e., one vector like a dipole moment).">VectorData</a>){}
<a name="l00808"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#9bdbefcdfbd801132866f1e77ba70aae">00808</a>    <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBVectorData.shtml" title="Used to hold a 3D vector item (e.g., a dipole moment).">OBVectorData</a>(){};
<a name="l00809"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#67bda850335747e7ac5d66629bda0a67">00809</a>    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00810"></a>00810 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBVectorData.shtml" title="Used to hold a 3D vector item (e.g., a dipole moment).">OBVectorData</a>(*<span class="keyword">this</span>);}
<a name="l00811"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#7c9f75965bfdc8bd1debc7fba3797a65">00811</a>    <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z)
<a name="l00812"></a>00812      { _vec = <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>(x, y, z); }
<a name="l00813"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#146acce5019a84cc73f48a23e39b8e6e">00813</a>    <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> data)
<a name="l00814"></a>00814      { _vec = data; }
<a name="l00815"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#b34f0d01cda028329486ce4814cdc966">00815</a>    <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetData()<span class="keyword"> const</span>
<a name="l00816"></a>00816 <span class="keyword">     </span>{ <span class="keywordflow">return</span> _vec; }
<a name="l00817"></a>00817    
<a name="l00818"></a>00818  <span class="keyword">protected</span>:
<a name="l00819"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#0acc44e4b0579d4cd684edfc4f5a4007">00819</a>    <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>            _vec; 
<a name="l00820"></a>00820  };
<a name="l00821"></a>00821  
<a name="l00825"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml">00825</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMatrixData.shtml" title="Used to hold a 3x3 matrix item (e.g., a quadrupole moment).">OBMatrixData</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00826"></a>00826   {
<a name="l00827"></a>00827   <span class="keyword">public</span>:
<a name="l00828"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#15f02a1883eb12f6980b542c40f26810">00828</a>     <a class="code" href="classOpenBabel_1_1OBMatrixData.shtml" title="Used to hold a 3x3 matrix item (e.g., a quadrupole moment).">OBMatrixData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">"MatrixData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b8239a3bb53f99dfa7da4734d77733abe" title="Matrix data (i.e., a 3x3 matrix like a rotation or quadrupole moment).">MatrixData</a>){}
<a name="l00829"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#beefc08263da22a794ddf7a594a7e82a">00829</a>     <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBMatrixData.shtml" title="Used to hold a 3x3 matrix item (e.g., a quadrupole moment).">OBMatrixData</a>(){};
<a name="l00830"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#67bda850335747e7ac5d66629bda0a67">00830</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00831"></a>00831 <span class="keyword">          </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBMatrixData.shtml" title="Used to hold a 3x3 matrix item (e.g., a quadrupole moment).">OBMatrixData</a>(*<span class="keyword">this</span>);}
<a name="l00832"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#9d238447321132fcc9109b7a1b39b480">00832</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> data)
<a name="l00833"></a>00833       { _matrix = data; }
<a name="l00834"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#65834d48498fcf653d89ed45680d9917">00834</a>     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> GetData()<span class="keyword"> const</span>
<a name="l00835"></a>00835 <span class="keyword">      </span>{ <span class="keywordflow">return</span> _matrix; }
<a name="l00836"></a>00836 
<a name="l00837"></a>00837   <span class="keyword">protected</span>:
<a name="l00838"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#e664fb7cf64216e4b362cd4e48b018f5">00838</a>     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a>            _matrix; 
<a name="l00839"></a>00839   };
<a name="l00840"></a>00840 
<a name="l00842"></a>00842   <span class="keyword">typedef</span> std::vector&lt;OBGenericData*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#d5ca88aa35c43da1b791c7703ec8978d" title="A standard iterator over vectors of OBGenericData (e.g., inherited from OBBase).">OBDataIterator</a>;
<a name="l00843"></a>00843 
<a name="l00844"></a>00844 } <span class="comment">//end namespace OpenBabel</span>
<a name="l00845"></a>00845 
<a name="l00846"></a>00846 <span class="preprocessor">#endif // OB_GENERIC_H</span>
<a name="l00847"></a>00847 <span class="preprocessor"></span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:33 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
