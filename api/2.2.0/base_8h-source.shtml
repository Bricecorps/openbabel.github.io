<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: base.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>base.h</h1><a href="base_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">base.h - Base class for OpenBabel objects</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_BASE_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_BASE_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="tokenst_8h.shtml" title="Tokenize strings, open data files.">openbabel/tokenst.h</a>&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">namespace </span>OpenBabel
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033 
<a name="l00034"></a>00034   <span class="comment">//Forward declaration of the base class for OBMol OBReaction, OBAtom, etc.</span>
<a name="l00035"></a>00035   <span class="comment">//Declaration later in this file.</span>
<a name="l00036"></a>00036 <span class="keyword">class </span>OBBase;
<a name="l00037"></a>00037 
<a name="l00049"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml">00049</a>   <span class="keyword">namespace </span>OBGenericDataType
<a name="l00050"></a>00050   {
<a name="l00051"></a>00051     <span class="keyword">enum</span>
<a name="l00052"></a>00052     {
<a name="l00054"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55baed11c625f3ba337a0468e31990a832e">00054</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55baed11c625f3ba337a0468e31990a832e" title="Unknown data type (default).">UndefinedData</a> =      0,
<a name="l00055"></a>00055 
<a name="l00057"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bf37b8c94a903cbf5fc45475c815c541a">00057</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bf37b8c94a903cbf5fc45475c815c541a" title="Arbitrary key/value data, i.e., OBPairData.">PairData</a>      =      1,
<a name="l00058"></a>00058 
<a name="l00060"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bed27589416d0d35119923437b476c33c">00060</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bed27589416d0d35119923437b476c33c" title="Energetics data (e.g., total energy, heat of formation, etc.).">EnergyData</a>    =      2,
<a name="l00061"></a>00061 
<a name="l00063"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bd015d8b14f8fa9e2c8107ec0b6d637a2">00063</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bd015d8b14f8fa9e2c8107ec0b6d637a2" title="Storing text comments (one per molecule, atom, bond, etc.) (for other data, e.g....">CommentData</a>   =      3,
<a name="l00064"></a>00064 
<a name="l00066"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55ba8504383b864769bce6f9962ff55711c">00066</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55ba8504383b864769bce6f9962ff55711c" title="Arbitrary information about conformers, i.e., OBConformerData.">ConformerData</a> =      4,
<a name="l00067"></a>00067 
<a name="l00069"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bbbdeac68debaebaea148a0f2271c8128">00069</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bbbdeac68debaebaea148a0f2271c8128" title="Bond data external to OpenBabel, i.e., OBExternalBond, OBExternalBondData.">ExternalBondData</a> =   5,
<a name="l00070"></a>00070 
<a name="l00072"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b6792a664f1614a75f33128e139392ef1">00072</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b6792a664f1614a75f33128e139392ef1" title="Information for generating &amp;amp; manipulating rotamers, i.e. OBRotamerList.">RotamerList</a> =        6,
<a name="l00073"></a>00073 
<a name="l00075"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b71d63bc919dfc9800e9e274301882557">00075</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b71d63bc919dfc9800e9e274301882557" title="Info. for storing bonds to atoms yet to be added, i.e. OBVirtualBond.">VirtualBondData</a> =    7,
<a name="l00076"></a>00076 
<a name="l00078"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b614fe63c6aaa519336589c0b3dcbcdb9">00078</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b614fe63c6aaa519336589c0b3dcbcdb9" title="Information on rings in a molecule, i.e., OBRingData.">RingData</a> =           8,
<a name="l00079"></a>00079 
<a name="l00081"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b9cf293f0b1ed83d3b1b804ca947ddcd8">00081</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b9cf293f0b1ed83d3b1b804ca947ddcd8" title="Information about torsion/dihedral angles, i.e., OBTorsionData and OBTorsion.">TorsionData</a> =        9,
<a name="l00082"></a>00082 
<a name="l00084"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b99b8d17f7ee6c09b008ab6bf5b5bf0cc">00084</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b99b8d17f7ee6c09b008ab6bf5b5bf0cc" title="Bond angles in a molecule, i.e., OBAngle, OBAngleData.">AngleData</a> =         10,
<a name="l00085"></a>00085 
<a name="l00087"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4804a06df36aa971eb112ada03885b00">00087</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4804a06df36aa971eb112ada03885b00" title="Residue serial numbers.">SerialNums</a> =        11,
<a name="l00088"></a>00088 
<a name="l00090"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b26d8504c2596c9ef59dab47c01a4dd1b">00090</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b26d8504c2596c9ef59dab47c01a4dd1b" title="Crystallographic unit cell data, i.e., OBUnitCell.">UnitCell</a> =          12,
<a name="l00091"></a>00091 
<a name="l00093"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb44db07941815c91fbc8e01f66252208">00093</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb44db07941815c91fbc8e01f66252208" title="Spin data, including NMR, atomic and molecular spin, etc.">SpinData</a> =          13,
<a name="l00094"></a>00094 
<a name="l00096"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55be1fbcef5ed6d30c670148af84890d0af">00096</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55be1fbcef5ed6d30c670148af84890d0af" title="Arbitrary partial and total charges, dipole moments, etc.">ChargeData</a> =        14,
<a name="l00097"></a>00097 
<a name="l00099"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2ed92f76270c3218036e96ad1044301d">00099</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2ed92f76270c3218036e96ad1044301d" title="Symmetry data -- point and space groups, transforms, etc. i.e., OBSymmetryData.">SymmetryData</a> =      15,
<a name="l00100"></a>00100 
<a name="l00102"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bab3b5ad7023167aa297c4c555c10acdd">00102</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bab3b5ad7023167aa297c4c555c10acdd" title="Arbitrary chiral information (atom, bond, molecule, etc.) i.e., OBChiralData.">ChiralData</a> =        16,
<a name="l00103"></a>00103 
<a name="l00105"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bac4fd2f8c1bedfe2d09c303e9c1b8e0a">00105</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bac4fd2f8c1bedfe2d09c303e9c1b8e0a" title="Atomic and molecular occupation data.">OccupationData</a> =    17,
<a name="l00106"></a>00106 
<a name="l00108"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b5b0d37c5cdfbcc15ee852b769c25d1b7">00108</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b5b0d37c5cdfbcc15ee852b769c25d1b7" title="Density (cube) data and surfaces.">DensityData</a> =       18,
<a name="l00109"></a>00109 
<a name="l00111"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b88ee5a5e80dd4e9523761d17ba9b81f2">00111</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b88ee5a5e80dd4e9523761d17ba9b81f2" title="Electronic levels, redox states, orbitals, etc.">ElectronicData</a> =    19,
<a name="l00112"></a>00112 
<a name="l00114"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb69829f7efb675ca0f6a4d8f245ceaf2">00114</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb69829f7efb675ca0f6a4d8f245ceaf2" title="Vibrational modes, frequencies, etc.">VibrationData</a> =     20,
<a name="l00115"></a>00115 
<a name="l00117"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb7c011beb81d9ba86035c1c0b7609899">00117</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb7c011beb81d9ba86035c1c0b7609899" title="Rotational energy information.">RotationData</a> =      21,
<a name="l00118"></a>00118 
<a name="l00120"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bdd3a99a5a7d554d150d7241368f2ba1d">00120</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bdd3a99a5a7d554d150d7241368f2ba1d" title="Nuclear transitions (e.g., decay, capture, fission, fusion).">NuclearData</a> =       22,
<a name="l00121"></a>00121 
<a name="l00123"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39">00123</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a> =           23,
<a name="l00124"></a>00124 
<a name="l00126"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b851ab4fe739bc6b4cc7b968ab9c4e61d">00126</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b851ab4fe739bc6b4cc7b968ab9c4e61d" title="Grid Data (e.g., 3D grids of data a.k.a. cubes).">GridData</a> =          24,
<a name="l00127"></a>00127 
<a name="l00129"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b46bb764382af04b5c32d3370e6b677f9">00129</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b46bb764382af04b5c32d3370e6b677f9" title="Vector Data (i.e., one vector like a dipole moment).">VectorData</a> =        25,
<a name="l00130"></a>00130       
<a name="l00132"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b8239a3bb53f99dfa7da4734d77733abe">00132</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b8239a3bb53f99dfa7da4734d77733abe" title="Matrix data (i.e., a 3x3 matrix like a rotation or quadrupole moment).">MatrixData</a> =        26,
<a name="l00133"></a>00133 
<a name="l00134"></a>00134       <span class="comment">// space for up to 2^14 more entries...</span>
<a name="l00135"></a>00135 
<a name="l00137"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bd4a188d7201f00f99ec649edead73c1e">00137</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bd4a188d7201f00f99ec649edead73c1e" title="Custom (user-defined data).">CustomData0</a> = 16384,
<a name="l00138"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b7bd8533c833569ccbd4a701378ccffb7">00138</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b7bd8533c833569ccbd4a701378ccffb7">CustomData1</a> = 16385,
<a name="l00139"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b7be53c3112d0111bbbee98cefbac4850">00139</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b7be53c3112d0111bbbee98cefbac4850">CustomData2</a> = 16386,
<a name="l00140"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b012e8681e30646e38989b9a0f6ace98f">00140</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b012e8681e30646e38989b9a0f6ace98f">CustomData3</a> = 16387,
<a name="l00141"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b342cb4110346a130dc73e4e3491533de">00141</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b342cb4110346a130dc73e4e3491533de">CustomData4</a> = 16388,
<a name="l00142"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bf20627567e8d1835670ff531d5cb9d1a">00142</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bf20627567e8d1835670ff531d5cb9d1a">CustomData5</a> = 16389,
<a name="l00143"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4c2040d0daf33eff43588933be9150a7">00143</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4c2040d0daf33eff43588933be9150a7">CustomData6</a> = 16390,
<a name="l00144"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b40d766aa8e0726ef56b99986ec4d275d">00144</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b40d766aa8e0726ef56b99986ec4d275d">CustomData7</a> = 16391,
<a name="l00145"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb32f4336d6de7ee7fdf6557bcd9b01c4">00145</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bb32f4336d6de7ee7fdf6557bcd9b01c4">CustomData8</a> = 16392,
<a name="l00146"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4a0f2b355a4e2d24d617f2824c165a61">00146</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b4a0f2b355a4e2d24d617f2824c165a61">CustomData9</a> = 16393,
<a name="l00147"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b240964387d336b8321d240044762c8e6">00147</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b240964387d336b8321d240044762c8e6">CustomData10</a> = 16394,
<a name="l00148"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b806a44c47ce81d45527562fca2917d0f">00148</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b806a44c47ce81d45527562fca2917d0f">CustomData11</a> = 16395,
<a name="l00149"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b3b6e862da975578f9b8f2a5cef18935c">00149</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b3b6e862da975578f9b8f2a5cef18935c">CustomData12</a> = 16396,
<a name="l00150"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bfe6b84e76821b52a2eb5f3a761dc8c6a">00150</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55bfe6b84e76821b52a2eb5f3a761dc8c6a">CustomData13</a> = 16397,
<a name="l00151"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b3cbbbad42fbfe9766b0892ccc88b47c5">00151</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b3cbbbad42fbfe9766b0892ccc88b47c5">CustomData14</a> = 16398,
<a name="l00152"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b8051d4056f7d8a89233dfa0ebc949bc1">00152</a>       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b8051d4056f7d8a89233dfa0ebc949bc1">CustomData15</a> = 16399
<a name="l00153"></a>00153     };
<a name="l00154"></a>00154   } <span class="comment">// end namespace</span>
<a name="l00155"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">00155</a>   <span class="keyword">enum</span> <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> {
<a name="l00156"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc1408e68258d108979edaae8bed94e25048">00156</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc1408e68258d108979edaae8bed94e25048" title="Undefined or unspecified (default).">any</a>,                 
<a name="l00157"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14887e83e320499ec89236722bbdf56f50">00157</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14887e83e320499ec89236722bbdf56f50" title="Read from an input file.">fileformatInput</a>,     
<a name="l00158"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14928a3db32b4975c3d42d0ca5d8d9f44d">00158</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14928a3db32b4975c3d42d0ca5d8d9f44d" title="Added by the user.">userInput</a>,           
<a name="l00159"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14b1c8706dce6832c9ce173260ba2bf392">00159</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14b1c8706dce6832c9ce173260ba2bf392" title="Perceived by Open Babel library methods.">perceived</a>,           
<a name="l00160"></a><a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc146aef01ed9b1c198e6944f87e370f00b2">00160</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc146aef01ed9b1c198e6944f87e370f00b2" title="Added by an external program.">external</a>             
<a name="l00161"></a>00161   };
<a name="l00162"></a>00162 
<a name="l00164"></a>00164   <span class="comment">// Class introduction in generic.cpp</span>
<a name="l00165"></a>00165   <span class="comment">// This base class declaration  has no dependence on mol.h</span>
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml">00166</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00167"></a>00167   {
<a name="l00168"></a>00168   <span class="keyword">protected</span>:
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#dceb77134f15418a66cf1124dcef1b51">00169</a>     std::string  _attr;  
<a name="l00170"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#31291823d487a4a47f24aae5870505ef">00170</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _type;  
<a name="l00171"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#239606b62a534e4df7626ea0cfdfb856">00171</a>     <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a>   _source;
<a name="l00172"></a>00172   <span class="keyword">public</span>:
<a name="l00173"></a>00173     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="keyword">const</span> std::string attr = <span class="stringliteral">"undefined"</span>,
<a name="l00174"></a>00174                   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type =  <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55baed11c625f3ba337a0468e31990a832e" title="Unknown data type (default).">OBGenericDataType::UndefinedData</a>,
<a name="l00175"></a>00175                   <span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source = <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc1408e68258d108979edaae8bed94e25048" title="Undefined or unspecified (default).">any</a>);
<a name="l00176"></a>00176     <span class="comment">//Use default copy constructor and assignment operators</span>
<a name="l00177"></a>00177     <span class="comment">//OBGenericData(const OBGenericData&amp;);</span>
<a name="l00178"></a>00178                 
<a name="l00179"></a>00179     <span class="comment">/* Virtual constructors added. see </span>
<a name="l00180"></a>00180 <span class="comment">       http://www.parashift.com/c++-faq-lite/abcs.html#faq-22.5</span>
<a name="l00181"></a>00181 <span class="comment">       to allow copying given only a base class OBGenericData pointer.</span>
<a name="l00182"></a>00182 <span class="comment">       It may be necessary to cast the return pointer to the derived class</span>
<a name="l00183"></a>00183 <span class="comment">       type, since we are doing without Covariant Return Types </span>
<a name="l00184"></a>00184 <span class="comment">       http://www.parashift.com/c++-faq-lite/virtual-functions.html#faq-20.8</span>
<a name="l00185"></a>00185 <span class="comment">    </span>
<a name="l00186"></a>00186 <span class="comment">       A derived class may return NULL if copying is inappropriate */</span>
<a name="l00187"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#67bda850335747e7ac5d66629bda0a67">00187</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00188"></a>00188 <span class="keyword">    </span>{ <span class="keywordflow">return</span> NULL; } 
<a name="l00189"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#cb834533508953a264ed93b74fddad8d">00189</a>     <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>()    {}
<a name="l00190"></a>00190     <span class="comment">//Use default copy constructor and assignment operators</span>
<a name="l00191"></a>00191     <span class="comment">//OBGenericData&amp; operator=(const OBGenericData &amp;src);</span>
<a name="l00192"></a>00192 
<a name="l00194"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#ae3d15983201a2a115701b2c538fef77">00194</a>     <span class="keywordtype">void</span>                      SetAttribute(<span class="keyword">const</span> std::string &amp;v)
<a name="l00195"></a>00195     {        _attr = v;        }
<a name="l00197"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#45613e34598a9584fb0120ef3fdab9e0">00197</a>     <span class="keywordtype">void</span> SetOrigin(<span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> s) { _source = s; }
<a name="l00199"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#c72c28db8b5bb8911845ada56220a1e0">00199</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetAttribute()<span class="keyword">  const</span>
<a name="l00200"></a>00200 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_attr);    }
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#c20b99b31895c99422fb1244def6e213">00202</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                GetDataType()<span class="keyword">    const</span>
<a name="l00203"></a>00203 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_type);    }
<a name="l00206"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#c9527475c246fadbbab63a35376fd5fe">00206</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetValue()<span class="keyword">  const</span>
<a name="l00207"></a>00207 <span class="keyword">    </span>{                   <span class="keywordflow">return</span> _attr; }
<a name="l00208"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#d080c58f230c474935ed3e27cb2ba906">00208</a>     <span class="keyword">virtual</span> <a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> GetOrigin()<span class="keyword"> const</span>
<a name="l00209"></a>00209 <span class="keyword">    </span>{     <span class="keywordflow">return</span> _source; }
<a name="l00210"></a>00210   };
<a name="l00211"></a>00211 
<a name="l00213"></a><a class="code" href="namespaceOpenBabel.shtml#d5ca88aa35c43da1b791c7703ec8978d">00213</a>   <span class="keyword">typedef</span> std::vector&lt;OBGenericData*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#d5ca88aa35c43da1b791c7703ec8978d" title="A standard iterator over vectors of OBGenericData (e.g., inherited from OBBase).">OBDataIterator</a>;
<a name="l00214"></a>00214   
<a name="l00216"></a>00216   <span class="comment">// introduction in base.cpp</span>
<a name="l00217"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml">00217</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>
<a name="l00218"></a>00218     {
<a name="l00219"></a>00219     <span class="keyword">public</span>:
<a name="l00220"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#7a58af02c4e2dd0d9b174b3032f1ffa3">00220</a>       <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>()
<a name="l00221"></a>00221         {
<a name="l00222"></a>00222           <span class="keywordflow">if</span> (!_vdata.empty())
<a name="l00223"></a>00223             {
<a name="l00224"></a>00224               std::vector&lt;OBGenericData*&gt;::iterator m;
<a name="l00225"></a>00225               <span class="keywordflow">for</span> (m = _vdata.begin();m != _vdata.end();m++)
<a name="l00226"></a>00226                 <span class="keyword">delete</span> *m;
<a name="l00227"></a>00227               _vdata.clear();
<a name="l00228"></a>00228             }
<a name="l00229"></a>00229         }
<a name="l00230"></a>00230 
<a name="l00232"></a>00232       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Clear();
<a name="l00233"></a>00233 
<a name="l00238"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#c124224e62a72e842a6b61b1e5e3190d">00238</a>       <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* DoTransformations(<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* <span class="comment">/*pOptions*/</span>)
<a name="l00239"></a>00239         {
<a name="l00240"></a>00240           <span class="keywordflow">return</span> <span class="keyword">this</span>;
<a name="l00241"></a>00241         } 
<a name="l00242"></a>00242 
<a name="l00243"></a>00243       <span class="comment">//Base type does nothing</span>
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#6bb6ed5c064e3957d8dd03aba51e61f7">00245</a> <span class="comment"></span>      <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ClassDescription()
<a name="l00246"></a>00246         {
<a name="l00247"></a>00247           <span class="keywordflow">return</span> <span class="stringliteral">""</span>;
<a name="l00248"></a>00248         } 
<a name="l00249"></a>00249 
<a name="l00251"></a>00251       <span class="keyword">template</span>&lt; <span class="keyword">class</span> T &gt;
<a name="l00252"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#305f9b75226a0e4d51c769e3a7dd6f13">00252</a>       <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#bc5c98fcc1211af2b80116dd6e0a035d21f40778b7db9343a6ca75ec2c41ccce">T</a>* CastAndClear(<span class="keywordtype">bool</span> clear=<span class="keyword">true</span>)
<a name="l00253"></a>00253         {
<a name="l00254"></a>00254           <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#bc5c98fcc1211af2b80116dd6e0a035d21f40778b7db9343a6ca75ec2c41ccce">T</a>* pOb = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#bc5c98fcc1211af2b80116dd6e0a035d21f40778b7db9343a6ca75ec2c41ccce">T</a>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);
<a name="l00255"></a>00255           <span class="keywordflow">if</span>(pOb &amp;&amp; clear)<span class="comment">// Clear only if this is of target class</span>
<a name="l00256"></a>00256             Clear();
<a name="l00257"></a>00257           <span class="keywordflow">return</span> pOb;
<a name="l00258"></a>00258         }
<a name="l00259"></a>00259 
<a name="l00260"></a>00260 
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 
<a name="l00264"></a>00264       <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> std::string &amp;);
<a name="l00266"></a>00266       <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00268"></a>00268       <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00270"></a>00270       <span class="keywordtype">void</span>                              DeleteData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00272"></a>00272       <span class="keywordtype">void</span>                              DeleteData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>*);
<a name="l00274"></a>00274       <span class="keywordtype">void</span>                              DeleteData(std::vector&lt;OBGenericData*&gt;&amp;);
<a name="l00276"></a>00276       <span class="keywordtype">bool</span>                              DeleteData(<span class="keyword">const</span> std::string&amp; s);
<a name="l00278"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#db6b0ec89bfea783825b3b466e4dbc00">00278</a>       <span class="keywordtype">void</span>                              <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#06fc87d81c62e9abb8790b6e5713c55b2442f017449974c68f80c0f40c6f1a39" title="Set Data (a set of OBGenericData).">SetData</a>(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> *d)
<a name="l00279"></a>00279         {
<a name="l00280"></a>00280           <span class="keywordflow">if</span>(d) _vdata.push_back(d);
<a name="l00281"></a>00281         }
<a name="l00284"></a>00284       <span class="keywordtype">void</span>                              CloneData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> *d);
<a name="l00286"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#584f49e458c30b6d45a11eeebd8518f9">00286</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                      DataSize()<span class="keyword"> const </span>
<a name="l00287"></a>00287 <span class="keyword">        </span>{ <span class="keywordflow">return</span>(_vdata.size()); }
<a name="l00290"></a>00290       <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>                    *GetData(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00292"></a>00292       <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>                    *GetData(<span class="keyword">const</span> std::string&amp;);
<a name="l00294"></a>00294       <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>                    *GetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00298"></a>00298       std::vector&lt;OBGenericData*&gt;       GetAllData(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00300"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#90a551ff0a0ed3fa58745dff0ecacdaa">00300</a>       std::vector&lt;OBGenericData*&gt;      &amp;GetData() { <span class="keywordflow">return</span>(_vdata); }
<a name="l00302"></a>00302       std::vector&lt;OBGenericData*&gt;      GetData(<a class="code" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source);
<a name="l00304"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#15b47c65393d46fde62d1f0a19bcf9fa">00304</a>       <a class="code" href="namespaceOpenBabel.shtml#d5ca88aa35c43da1b791c7703ec8978d" title="A standard iterator over vectors of OBGenericData (e.g., inherited from OBBase).">OBDataIterator</a>  BeginData()
<a name="l00305"></a>00305         { <span class="keywordflow">return</span>(_vdata.begin());        }
<a name="l00307"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#117c836710dd3aaa8748509262a5c280">00307</a>       <a class="code" href="namespaceOpenBabel.shtml#d5ca88aa35c43da1b791c7703ec8978d" title="A standard iterator over vectors of OBGenericData (e.g., inherited from OBBase).">OBDataIterator</a>  EndData()
<a name="l00308"></a>00308         { <span class="keywordflow">return</span>(_vdata.end());          }
<a name="l00310"></a>00310     <span class="keyword">protected</span>:
<a name="l00311"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#f7811cf8aadbf3b3477c560b0ef2f797">00311</a>       std::vector&lt;OBGenericData*&gt; _vdata; 
<a name="l00312"></a>00312 
<a name="l00313"></a>00313     };
<a name="l00314"></a>00314 
<a name="l00315"></a>00315 } <span class="comment">//namespace OpenBabel</span>
<a name="l00316"></a>00316 
<a name="l00317"></a>00317 <span class="preprocessor">#endif // OB_BASE_H</span>
<a name="l00318"></a>00318 <span class="preprocessor"></span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:33 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
