<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBConversion Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>
  </div>
</div>
<div class="contents">
<h1>OBConversion Class Reference</h1><!-- doxytag: class="OpenBabel::OBConversion" -->Class to convert from one format to another.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="obconversion_8h-source.shtml">openbabel/obconversion.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for OBConversion:</div>
<div class="dynsection">
<p><center><img src="classOpenBabel_1_1OBConversion__inherit__graph.png" border="0" usemap="#OBConversion__inherit__map" alt="Inheritance graph"></center>
<map name="OBConversion__inherit__map">
<area shape="rect" href="classOpenBabel_1_1XMLConversion.shtml" title="A subclass for conversion of XML formats." alt="" coords="6,80,126,107"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center></div>

<p>
<a href="classOpenBabel_1_1OBConversion-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Option handling</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> { <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116291d3d898fa3e1258eef693d56d600d7">INOPTIONS</a>, 
<a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116f37359059c64e43cab248066ca812206">OUTOPTIONS</a>, 
<a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116cfa24b0443c8420ac7fdf5eb009352b6">GENOPTIONS</a>, 
<a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116b1d5eac4b1dca480c8056eaea7663b7a">ALL</a>
 }</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#b3d2674da23d09868ffedf551abbce0c">IsOption</a> (const char *opt, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp=OUTOPTIONS)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const std::map&lt; std::string, <br>
std::string &gt; *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#7da66ef30fd0af867e9d3bd0df15f4a2">GetOptions</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#8ad01448cb4d5237ed5f3d8eeaf39804">AddOption</a> (const char *opt, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp=OUTOPTIONS, const char *txt=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#82f1d6a21880f898673f8a1b45d15eee">RemoveOption</a> (const char *opt, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> optype)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#c07772684eade5d0d11b8979f0772cf5">SetOptions</a> (const char *options, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#6a45eddab233711eb4e432ed5657358f">RegisterOptionParam</a> (std::string name, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pFormat, int numberParams=0, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ=OUTOPTIONS)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#1042e860531f4961b3b0245e9a92f4a7">GetOptionParams</a> (std::string name, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ)</td></tr>

<tr><td colspan="2"><br><h2>Convenience functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#3d46d682999a7772db31a835fa4a8091">Write</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::ostream *pout=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#18ce8681792d689dab8172a511c5a996">WriteString</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, bool trimWhitespace=false)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#d17f0a96643dec6840eda76c07a54698">WriteFile</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string filePath)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#cbe5bd25f0afb1c8cd622e41e61ebc70">CloseOutFile</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#1204f9b613067a04ebfe881a58775918">Read</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::istream *pin=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#93558e9c89cda2e1a4f9fb2cadc5c8d1">ReadString</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string input)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#76d7d1bf8e0c05c19d5b5e991fd0ba2f">ReadFile</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string filePath)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#7424c6fe9292f59087d23e7748ac237e">OpenInAndOutFiles</a> (std::string infilepath, std::string outfilepath)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#1717ba1ed3f8131d7a0f3b0d6031f5af">ReportNumberConverted</a> (int count, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pFormat=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#442b17995d84d654e33ede11a63d7f80">GetDefaultFormat</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#4eb6eac5855fb3289c5a438d4084a052">BatchFileName</a> (std::string &amp;BaseName, std::string &amp;InFile)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#44fbee02afc6de6a9f98bbbb6a2e12bf">IncrementedFileName</a> (std::string &amp;BaseName, const int <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad462966ed963f892117056de1eba502">Count</a>)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#39b6cebdf53672368cfa3edd8bc7740d">CheckForUnintendedBatch</a> (const std::string &amp;infile, const std::string &amp;outfile)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#3222302075fbfcfe842ebd0b984a4406">InstallStreamFilter</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#6af42ed37c470cee546f3aa160a363d4">CopyOptions</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pSourceConv, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ=ALL)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Construction</div></td></tr>
<tr><td colspan="2"><div class="groupText"><br><br></div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#c46f926abe7b8ed87ca8ddc10a52f399">OBConversion</a> (std::istream *is=NULL, std::ostream *os=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ac6d4dac3d091cccc13add23ad9d3b80">OBConversion</a> (const <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> &amp;o)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#53f0f89f5ba43fd528c645fdaad6ac3b">~OBConversion</a> ()</td></tr>

<tr><td colspan="2"><div class="groupHeader">Parameter get and set</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::istream *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#5905ca0af771ee5a83ebd496f02e8ced">GetInStream</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::ostream *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#751641ec702413ddf9fb86e24fe6da80">GetOutStream</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#be2cafdff8bf62ae36fbbfca3eb836bf">SetInStream</a> (std::istream *pIn)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#7520c6b17b3cf9c506738794baab99b1">SetOutStream</a> (std::ostream *pOut)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#4c751472f8bdb864b85cce430d42cc55">SetInAndOutFormats</a> (const char *inID, const char *outID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#cfab2829e6d00f79be0de3124fbbb157">SetInAndOutFormats</a> (<a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pIn, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pOut)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#58e81dd6fcba14828db82a9782e5cff9">SetInFormat</a> (const char *inID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#507df3dbfec4b9201387e70ef71fe8de">SetInFormat</a> (<a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pIn)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#83e966b4442ea826a28b2cd55206e195">SetOutFormat</a> (const char *outID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#e5b218e7427f7806d69356986e296160">SetOutFormat</a> (<a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pOut)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ed42a5004f6ba5522bb59ce13467a951">GetInFormat</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#fd4dc6481ea2d1d95e2cd04b1643fb8c">GetOutFormat</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#7f988979d62a5d63e85a294d826e1c9e">GetInFilename</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::streampos&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#b54ab5100f5418bc0ba174da74b72d2f">GetInPos</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#cc7cbe1da68663d0d507de6da778d3c2">GetInLen</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#6bb30b86d787d86839e457c1ce1f569b">GetTitle</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#8e3fd39dd67cdd120890d37f0f196bda">GetAuxConv</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#53a1041e7803e63b9bca06ad18bea4fe">SetAuxConv</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Supported file format</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::string &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#137c540357b45e73f65e602e1196eed7">GetSupportedInputFormat</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::string &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#353b3a6a53808b22361c9f44713978e8">GetSupportedOutputFormat</a> ()</td></tr>

<tr><td colspan="2"><div class="groupHeader">Conversion</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#cc3cc99e2ff0113c9ca6a64f3de71300">Convert</a> (std::istream *is, std::ostream *os)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#95c512f009bf277d9d6299d9f5d0c13d">Convert</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#9d12b0f7f38951d2d1065fc7ddae4229">FullConvert</a> (std::vector&lt; std::string &gt; &amp;FileList, std::string &amp;OutputFileName, std::vector&lt; std::string &gt; &amp;OutputFileList)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Conversion loop control</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#342df96ba3cd8751e19758939dbef2f5">AddChemObject</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#17bfbe7570517993bcfcb1916bd437d0">GetChemObject</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#0cc38e7988805424c15d68f5444a2a5d">IsLast</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#f5f16d80b577c580920f0c5b8abd5973">IsFirstInput</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#b94b09151245e8c6accfc418a866d329">SetFirstInput</a> (bool b=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#d44eaf0b472408acb158334c8725d339">GetOutputIndex</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#7037cb9de4584f498b0099b7584bdc97">SetOutputIndex</a> (int indx)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#38d59749ba2add8597210717e804e4db">SetMoreFilesToCome</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#4dacf92f4f0cbf7a1f269143659ceb88">SetOneObjectOnly</a> (bool b=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#19dedcd05ee3ab11ed85c29ff1fef810">SetLast</a> (bool b)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#c157f0eb86dba757b3ebae08ffffb8d2">IsLastFile</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Collection of formats</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#20a0d20f46d3b003d99d1f5822c2037d">RegisterFormat</a> (const char *ID, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pFormat, const char *MIME=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#8b0f5849719757fa2e79289e4dc486b5">FindFormat</a> (const char *ID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#3f85a8c30f5c913e08225f85c6bc020b">FormatFromExt</a> (const char *filename)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ca0c09ee719aba9da34cb281aa0db6a5">FormatFromMIME</a> (const char *MIME)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#f0bee894a9ed7ca61637452dc2e264f2">GetNextFormat</a> (<a class="el" href="namespaceOpenBabel.shtml#8f32238b69be1e83980d0ff3a90b206f">Formatpos</a> &amp;itr, const char *&amp;str, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&amp;pFormat)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Information</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#26b5cfc6a9011d19d78dae56d31296eb">Description</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef std::map&lt; std::string, <br>
int &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">OPAMapType</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef <br>
<a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">FilteringInputStreambuf</a><br>
&lt; <a class="el" href="classOpenBabel_1_1LineEndingExtractor.shtml">LineEndingExtractor</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#9afd81920e33981863bf186f78a222d3">LErdbuf</a></td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#631730a938bc2219b90c027932db3443">SetStartAndEnd</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#666f7b27853d391b47bdaa3e4763d216">OpenAndSetFormat</a> (bool SetFormat, std::ifstream *is)</td></tr>

<tr><td colspan="2"><br><h2>Static Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">OPAMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#3b2ad8335b0a9b18bc22bc534b7ffb28">OptionParamArray</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#cb5fa3f38f036bd82ba49a44d6b7a998">LoadFormatFiles</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#20354c0458b4e08dc62db4a4e8717c61">InFilename</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::istream *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#b965c6baeb6893dd15a2fefefce795df">pInStream</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::ostream *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#efeab37b3ca85a70cef740bb1636b353">pOutStream</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#70c004d49155986bcc163bac07df0e4e">pInFormat</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#4d630735f21540de237cdcc32916bffb">pOutFormat</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::map&lt; std::string, <br>
std::string &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#3d9e064f9e26ed2e52b140b7cc34a8d6">OptionsArray</a> [3]</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#075e1e3c9dd399cef584d7338cc37938">Index</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#c52d6fdbe254370662cccd43af0248f2">StartNumber</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#db31d46cbf6e64e86bae6d24d90c9702">EndNumber</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad462966ed963f892117056de1eba502">Count</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#e14ad56a72461f3c598cb4dbd151cdc7">m_IsFirstInput</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#6025251d18641dab4058222b69d1a98c">m_IsLast</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#b4ec386870233b42d353a4d66d7b0cee">MoreFilesToCome</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#7002deaca76f3fc235c76be1fcc38dfa">OneObjectOnly</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#9bdd5c815677e240cec9c2e4a71d73f2">ReadyToInput</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#e0c8e3d58dc0c0d9713ca7a7d27b8c4d">CheckedForGzip</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#778a4d8f719010ac4adf6af2363af0a8">NeedToFreeInStream</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#96fc7fb023ad66073434a206829c23bd">NeedToFreeOutStream</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">LErdbuf</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#b3b665dec523e9a63f1dc954900211ea">pLineEndBuf</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#20a1d62cb932144d66e52d7c823fb0a1">pOb1</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::streampos&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#b77068f3bb4cb88694a6be653c00f04e">wInpos</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::streampos&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#545a1341008a23c2dd0721c164a9ad89">rInpos</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#fee7e5bffccd262faaff0417e5ae9af3">wInlen</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#1a897c3f35235e4ca7da37ca245db065">rInlen</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#3846aa2ce719d5820b66e302c6aeaa8a">pAuxConv</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::string &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#2322eb2aa14e8d954573abbda9c50e62">SupportedInputFormat</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; std::string &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#50233a5c7c63d03056923f13c7acbb1b">SupportedOutputFormat</a></td></tr>

<tr><td colspan="2"><br><h2>Static Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#2daf6d1435032c73c65000af61a4a5d4">pDefaultFormat</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#501b1ec0c0e4fe9e78398e3837a759ec">FormatFilesLoaded</a> = 0</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Class to convert from one format to another. 
<p>
<a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> maintains a list of the available formats, provides information on them, and controls the conversion process.<p>
A conversion is carried out by the calling routine, usually in a user interface or an application program, making an instance of <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>. It is loaded with the in and out formats, any options and (usually) the default streams for input and output. Then either the <a class="el" href="classOpenBabel_1_1OBConversion.shtml#95c512f009bf277d9d6299d9f5d0c13d" title="Conversion with existing streams.">Convert()</a> function is called, which allows a single input file to be converted, or the extended functionality of <a class="el" href="classOpenBabel_1_1OBConversion.shtml#9d12b0f7f38951d2d1065fc7ddae4229" title="Conversion with multiple input/output files: makes input and output streams, and...">FullConvert()</a> is used. This allows multiple input and output files, allowing:<ul>
<li>aggregation - the contents of many input files converted and sent to one output file;</li><li>splitting - the molecules from one input file sent to separate output files;</li><li>batch conversion - each input file converted to an output file.</li></ul>
<p>
These procedures constitute the "Convert" interface. <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> and the user interface or application program do not need to be aware of any other part of <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> - <a class="el" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">mol.h</a> is not #included. This allows any chemical object derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> to be converted; the type of object is decided by the input format class. However,currently, almost all the conversions are for molecules of class <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>. / <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> can also be used with an "API" interface called from programs which manipulate chemical objects. Input/output is done with the <a class="el" href="classOpenBabel_1_1OBConversion.shtml#1204f9b613067a04ebfe881a58775918" title="Reads an object of a class derived from OBBase into pOb.">Read()</a> and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#3d46d682999a7772db31a835fa4a8091" title="Outputs an object of a class derived from OBBase.">Write()</a> functions which work with any chemical object, but need to have its type specified. (The ReadMolecule() and WriteMolecule() functions of the format classes can also be used directly.)<p>
Example code using <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a><p>
<b>To read in a molecule, manipulate it and write it out.</b><p>
Set up an istream and an ostream, to and from files or elsewhere. (cin and cout are used in the example). Specify the file formats.<p>
<div class="fragment"><pre class="fragment">      <a class="code" href="classOpenBabel_1_1OBConversion.shtml#c46f926abe7b8ed87ca8ddc10a52f399">OBConversion</a> conv(&amp;cin,&amp;cout);
      <span class="keywordflow">if</span>(conv.SetInAndOutFormats(<span class="stringliteral">"SMI"</span>,<span class="stringliteral">"MOL"</span>))
      { 
         OBMol mol;
         <span class="keywordflow">if</span>(conv.Read(&amp;mol))
            <span class="comment">// ...manipulate molecule </span>
                
         conv-&gt;Write(&amp;mol);
      }
</pre></div><p>
A two stage construction is used to allow error handling if the format ID is not recognized. This is necessary now that the formats are dynamic and errors are not caught at compile time. <a class="el" href="classOpenBabel_1_1OBConversion.shtml#1204f9b613067a04ebfe881a58775918" title="Reads an object of a class derived from OBBase into pOb.">OBConversion::Read()</a> is a templated function so that objects derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> can also be handled, in addition to <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>, if the format routines are written appropriately.<p>
<b>To make a molecule from a SMILES string.</b> <div class="fragment"><pre class="fragment">      std::string SmilesString;
      OBMol mol;
      stringstream ss(SmilesString)
      <a class="code" href="classOpenBabel_1_1OBConversion.shtml#c46f926abe7b8ed87ca8ddc10a52f399">OBConversion</a> conv(&amp;ss);
      if(conv.<a class="code" href="classOpenBabel_1_1OBConversion.shtml#58e81dd6fcba14828db82a9782e5cff9" title="Sets the input format from an id e.g. CML.">SetInFormat</a>("smi") &amp;&amp; conv.<a class="code" href="classOpenBabel_1_1OBConversion.shtml#1204f9b613067a04ebfe881a58775918" title="Reads an object of a class derived from OBBase into pOb.">Read</a>(&amp;mol))
         <span class="comment">// ...</span>
</pre></div><p>
<b>To do a file conversion without manipulating the molecule.</b><p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">      #include &lt;<a class="code" href="obconversion_8h.shtml" title="Handle file conversions. Declaration of OBFormat, OBConversion.">openbabel/obconversion.h</a>&gt;</span> <span class="comment">//mol.h is not needed</span>
      ...set up an istream is and an ostream os 
      <a class="code" href="classOpenBabel_1_1OBConversion.shtml#c46f926abe7b8ed87ca8ddc10a52f399">OBConversion</a> conv(&amp;is,&amp;os);
      <span class="keywordflow">if</span>(conv.SetInAndOutFormats(<span class="stringliteral">"SMI"</span>,<span class="stringliteral">"MOL"</span>))
      {
         conv.AddOption(<span class="stringliteral">"h"</span>,<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116cfa24b0443c8420ac7fdf5eb009352b6">OBConversion::GENOPTIONS</a>); <span class="comment">//Optional; (h adds expicit hydrogens)</span>
         conv.Convert();
      }
</pre></div><p>
<b>To add automatic format conversion to an existing program.</b><p>
The existing program inputs from the file identified by the const char* filename into the istream is. The file is assumed to have a format ORIG, but other formats, identified by their file extensions, can now be used.<p>
<div class="fragment"><pre class="fragment">      ifstream ifs(filename); <span class="comment">//Original code</span>

      <a class="code" href="classOpenBabel_1_1OBConversion.shtml#c46f926abe7b8ed87ca8ddc10a52f399">OBConversion</a> conv;
      OBFormat* inFormat = conv.FormatFromExt(filename);
      OBFormat* outFormat = conv.GetFormat(<span class="stringliteral">"ORIG"</span>);
      istream* pIn = &amp;ifs; 
      stringstream newstream;
      <span class="keywordflow">if</span>(inFormat &amp;&amp; outFormat)
      {
         conv.SetInAndOutFormats(inFormat,outFormat);
         conv.Convert(pIn,&amp;newstream);
         pIn=&amp;newstream;
      }
      <span class="comment">//else error; new features not available; fallback to original functionality </span>

      ...Carry on with original code <span class="keyword">using</span> pIn
</pre></div><p>
In certain Windows builds, a degree of independence from <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a> can be achieved using DLLs. This code would be linked with obconv.lib. At runtime the following DLLs would be in the executable directory: obconv.dll, obdll.dll, one or more *.obf format files. <hr><h2>Member Typedef Documentation</h2>
<a class="anchor" name="9df37d33062bde3400dd034ee7feaa92"></a><!-- doxytag: member="OpenBabel::OBConversion::OPAMapType" ref="9df37d33062bde3400dd034ee7feaa92" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;std::string,int&gt; <a class="el" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">OPAMapType</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="9afd81920e33981863bf186f78a222d3"></a><!-- doxytag: member="OpenBabel::OBConversion::LErdbuf" ref="9afd81920e33981863bf186f78a222d3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">FilteringInputStreambuf</a>&lt; <a class="el" href="classOpenBabel_1_1LineEndingExtractor.shtml">LineEndingExtractor</a> &gt; <a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">LErdbuf</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Enumeration Documentation</h2>
<a class="anchor" name="a5c5a0aac29d9e705d9b7b7b8aeb8116"></a><!-- doxytag: member="OpenBabel::OBConversion::Option_type" ref="a5c5a0aac29d9e705d9b7b7b8aeb8116" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Three types of options set on the the command line by -a? , -x? , or -? 
<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="a5c5a0aac29d9e705d9b7b7b8aeb8116291d3d898fa3e1258eef693d56d600d7"></a><!-- doxytag: member="INOPTIONS" ref="a5c5a0aac29d9e705d9b7b7b8aeb8116291d3d898fa3e1258eef693d56d600d7" args="" -->INOPTIONS</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" name="a5c5a0aac29d9e705d9b7b7b8aeb8116f37359059c64e43cab248066ca812206"></a><!-- doxytag: member="OUTOPTIONS" ref="a5c5a0aac29d9e705d9b7b7b8aeb8116f37359059c64e43cab248066ca812206" args="" -->OUTOPTIONS</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" name="a5c5a0aac29d9e705d9b7b7b8aeb8116cfa24b0443c8420ac7fdf5eb009352b6"></a><!-- doxytag: member="GENOPTIONS" ref="a5c5a0aac29d9e705d9b7b7b8aeb8116cfa24b0443c8420ac7fdf5eb009352b6" args="" -->GENOPTIONS</em>&nbsp;</td><td>
</td></tr>
<tr><td valign="top"><em><a class="anchor" name="a5c5a0aac29d9e705d9b7b7b8aeb8116b1d5eac4b1dca480c8056eaea7663b7a"></a><!-- doxytag: member="ALL" ref="a5c5a0aac29d9e705d9b7b7b8aeb8116b1d5eac4b1dca480c8056eaea7663b7a" args="" -->ALL</em>&nbsp;</td><td>
</td></tr>
</table>
</dl>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="c46f926abe7b8ed87ca8ddc10a52f399"></a><!-- doxytag: member="OpenBabel::OBConversion::OBConversion" ref="c46f926abe7b8ed87ca8ddc10a52f399" args="(std::istream *is=NULL, std::ostream *os=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>           </td>
          <td>(</td>
          <td class="paramtype">std::istream *&nbsp;</td>
          <td class="paramname"> <em>is</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream *&nbsp;</td>
          <td class="paramname"> <em>os</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ac6d4dac3d091cccc13add23ad9d3b80"></a><!-- doxytag: member="OpenBabel::OBConversion::OBConversion" ref="ac6d4dac3d091cccc13add23ad9d3b80" args="(const OBConversion &amp;o)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>o</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copy constructor. 
<p>

</div>
</div><p>
<a class="anchor" name="53f0f89f5ba43fd528c645fdaad6ac3b"></a><!-- doxytag: member="OpenBabel::OBConversion::~OBConversion" ref="53f0f89f5ba43fd528c645fdaad6ac3b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="20a0d20f46d3b003d99d1f5822c2037d"></a><!-- doxytag: member="OpenBabel::OBConversion::RegisterFormat" ref="20a0d20f46d3b003d99d1f5822c2037d" args="(const char *ID, OBFormat *pFormat, const char *MIME=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int RegisterFormat           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td>
          <td class="paramname"> <em>pFormat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>MIME</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Called once by each format class. 
<p>
Class information on formats is collected by making an instance of the class derived from OBFormat(only one is usually required). <a class="el" href="classOpenBabel_1_1OBConversion.shtml#20a0d20f46d3b003d99d1f5822c2037d" title="Called once by each format class.">RegisterFormat()</a> is called from its constructor.<p>
If the compiled format is stored separately, like in a DLL or shared library, the initialization code makes an instance of the imported <a class="el" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a> class. 
</div>
</div><p>
<a class="anchor" name="8b0f5849719757fa2e79289e4dc486b5"></a><!-- doxytag: member="OpenBabel::OBConversion::FindFormat" ref="8b0f5849719757fa2e79289e4dc486b5" args="(const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FindFormat           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Searches registered formats. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00672">OBConversion::FormatFromExt()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00360">OBConversion::SetInFormat()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00368">OBConversion::SetOutFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="3f85a8c30f5c913e08225f85c6bc020b"></a><!-- doxytag: member="OpenBabel::OBConversion::FormatFromExt" ref="3f85a8c30f5c913e08225f85c6bc020b" args="(const char *filename)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FormatFromExt           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>filename</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Searches registered formats for an ID the same as the file extension. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01326">OBConversion::OpenAndSetFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="ca0c09ee719aba9da34cb281aa0db6a5"></a><!-- doxytag: member="OpenBabel::OBConversion::FormatFromMIME" ref="ca0c09ee719aba9da34cb281aa0db6a5" args="(const char *MIME)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FormatFromMIME           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>MIME</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Searches registered formats for a MIME the same as the chemical MIME type passed. 
<p>

</div>
</div><p>
<a class="anchor" name="f0bee894a9ed7ca61637452dc2e264f2"></a><!-- doxytag: member="OpenBabel::OBConversion::GetNextFormat" ref="f0bee894a9ed7ca61637452dc2e264f2" args="(Formatpos &amp;itr, const char *&amp;str, OBFormat *&amp;pFormat)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetNextFormat           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#8f32238b69be1e83980d0ff3a90b206f">Formatpos</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>itr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&amp;&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&amp;&nbsp;</td>
          <td class="paramname"> <em>pFormat</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Deprecated!.Repeatedly called to recover available Formats. 
<p>

</div>
</div><p>
<a class="anchor" name="26b5cfc6a9011d19d78dae56d31296eb"></a><!-- doxytag: member="OpenBabel::OBConversion::Description" ref="26b5cfc6a9011d19d78dae56d31296eb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * Description           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5905ca0af771ee5a83ebd496f02e8ced"></a><!-- doxytag: member="OpenBabel::OBConversion::GetInStream" ref="5905ca0af771ee5a83ebd496f02e8ced" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::istream* GetInStream           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obmolecformat_8cpp-source.shtml#l00183">OBMoleculeFormat::DeferMolOutput()</a>, and <a class="el" href="obmolecformat_8cpp-source.shtml#l00031">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div><p>
<a class="anchor" name="751641ec702413ddf9fb86e24fe6da80"></a><!-- doxytag: member="OpenBabel::OBConversion::GetOutStream" ref="751641ec702413ddf9fb86e24fe6da80" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream* GetOutStream           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="be2cafdff8bf62ae36fbbfca3eb836bf"></a><!-- doxytag: member="OpenBabel::OBConversion::SetInStream" ref="be2cafdff8bf62ae36fbbfca3eb836bf" args="(std::istream *pIn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetInStream           </td>
          <td>(</td>
          <td class="paramtype">std::istream *&nbsp;</td>
          <td class="paramname"> <em>pIn</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="7520c6b17b3cf9c506738794baab99b1"></a><!-- doxytag: member="OpenBabel::OBConversion::SetOutStream" ref="7520c6b17b3cf9c506738794baab99b1" args="(std::ostream *pOut)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetOutStream           </td>
          <td>(</td>
          <td class="paramtype">std::ostream *&nbsp;</td>
          <td class="paramname"> <em>pOut</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="4c751472f8bdb864b85cce430d42cc55"></a><!-- doxytag: member="OpenBabel::OBConversion::SetInAndOutFormats" ref="4c751472f8bdb864b85cce430d42cc55" args="(const char *inID, const char *outID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetInAndOutFormats           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>inID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>outID</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the formats from their ids, e g CML. 
<p>
Sets the formats from their ids, e g CML. If inID is NULL, the input format is left unchanged. Similarly for outID Returns true if both formats have been successfully set at sometime 
</div>
</div><p>
<a class="anchor" name="cfab2829e6d00f79be0de3124fbbb157"></a><!-- doxytag: member="OpenBabel::OBConversion::SetInAndOutFormats" ref="cfab2829e6d00f79be0de3124fbbb157" args="(OBFormat *pIn, OBFormat *pOut)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetInAndOutFormats           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td>
          <td class="paramname"> <em>pIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td>
          <td class="paramname"> <em>pOut</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="58e81dd6fcba14828db82a9782e5cff9"></a><!-- doxytag: member="OpenBabel::OBConversion::SetInFormat" ref="58e81dd6fcba14828db82a9782e5cff9" args="(const char *inID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetInFormat           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>inID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the input format from an id e.g. CML. 
<p>

<p>Referenced by <a class="el" href="obmolecformat_8cpp-source.shtml#l00412">OBMoleculeFormat::ReadNameIndex()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00335">OBConversion::SetInAndOutFormats()</a>.</p>

</div>
</div><p>
<a class="anchor" name="507df3dbfec4b9201387e70ef71fe8de"></a><!-- doxytag: member="OpenBabel::OBConversion::SetInFormat" ref="507df3dbfec4b9201387e70ef71fe8de" args="(OBFormat *pIn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetInFormat           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td>
          <td class="paramname"> <em>pIn</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="83e966b4442ea826a28b2cd55206e195"></a><!-- doxytag: member="OpenBabel::OBConversion::SetOutFormat" ref="83e966b4442ea826a28b2cd55206e195" args="(const char *outID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetOutFormat           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>outID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the output format from an id e.g. CML. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00335">OBConversion::SetInAndOutFormats()</a>.</p>

</div>
</div><p>
<a class="anchor" name="e5b218e7427f7806d69356986e296160"></a><!-- doxytag: member="OpenBabel::OBConversion::SetOutFormat" ref="e5b218e7427f7806d69356986e296160" args="(OBFormat *pOut)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetOutFormat           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td>
          <td class="paramname"> <em>pOut</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ed42a5004f6ba5522bb59ce13467a951"></a><!-- doxytag: member="OpenBabel::OBConversion::GetInFormat" ref="ed42a5004f6ba5522bb59ce13467a951" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* GetInFormat           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fd4dc6481ea2d1d95e2cd04b1643fb8c"></a><!-- doxytag: member="OpenBabel::OBConversion::GetOutFormat" ref="fd4dc6481ea2d1d95e2cd04b1643fb8c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* GetOutFormat           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obmolecformat_8cpp-source.shtml#l00342">OBMoleculeFormat::OutputDeferredMols()</a>.</p>

</div>
</div><p>
<a class="anchor" name="7f988979d62a5d63e85a294d826e1c9e"></a><!-- doxytag: member="OpenBabel::OBConversion::GetInFilename" ref="7f988979d62a5d63e85a294d826e1c9e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetInFilename           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b54ab5100f5418bc0ba174da74b72d2f"></a><!-- doxytag: member="OpenBabel::OBConversion::GetInPos" ref="b54ab5100f5418bc0ba174da74b72d2f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::streampos GetInPos           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the position in the input stream of the object being read. 
<p>

</div>
</div><p>
<a class="anchor" name="cc7cbe1da68663d0d507de6da778d3c2"></a><!-- doxytag: member="OpenBabel::OBConversion::GetInLen" ref="cc7cbe1da68663d0d507de6da778d3c2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t GetInLen           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the length in the input stream of the object being read. 
<p>

</div>
</div><p>
<a class="anchor" name="6bb30b86d787d86839e457c1ce1f569b"></a><!-- doxytag: member="OpenBabel::OBConversion::GetTitle" ref="6bb30b86d787d86839e457c1ce1f569b" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * GetTitle           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>a default title which is the filename </dd></dl>

</div>
</div><p>
<a class="anchor" name="8e3fd39dd67cdd120890d37f0f196bda"></a><!-- doxytag: member="OpenBabel::OBConversion::GetAuxConv" ref="8e3fd39dd67cdd120890d37f0f196bda" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* GetAuxConv           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Extension method: deleted in <a class="el" href="classOpenBabel_1_1OBConversion.shtml#53f0f89f5ba43fd528c645fdaad6ac3b">~OBConversion()</a>. 
<p>

</div>
</div><p>
<a class="anchor" name="53a1041e7803e63b9bca06ad18bea4fe"></a><!-- doxytag: member="OpenBabel::OBConversion::SetAuxConv" ref="53a1041e7803e63b9bca06ad18bea4fe" args="(OBConversion *pConv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAuxConv           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"> <em>pConv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b3d2674da23d09868ffedf551abbce0c"></a><!-- doxytag: member="OpenBabel::OBConversion::IsOption" ref="b3d2674da23d09868ffedf551abbce0c" args="(const char *opt, Option_type opttyp=OUTOPTIONS)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * IsOption           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&nbsp;</td>
          <td class="paramname"> <em>opttyp</em> = <code>OUTOPTIONS</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Determine whether an option is set. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>NULL if option not and a pointer to the associated text if it is </dd></dl>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00376">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00031">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00521">OBConversion::SetStartAndEnd()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00763">OBConversion::Write()</a>, and <a class="el" href="obmolecformat_8cpp-source.shtml#l00124">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div><p>
<a class="anchor" name="7da66ef30fd0af867e9d3bd0df15f4a2"></a><!-- doxytag: member="OpenBabel::OBConversion::GetOptions" ref="7da66ef30fd0af867e9d3bd0df15f4a2" args="(Option_type opttyp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const std::map&lt;std::string,std::string&gt;* GetOptions           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&nbsp;</td>
          <td class="paramname"> <em>opttyp</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Access the map with option name as key and any associated text as value. 
<p>

<p>Referenced by <a class="el" href="obmolecformat_8cpp-source.shtml#l00342">OBMoleculeFormat::OutputDeferredMols()</a>, and <a class="el" href="obmolecformat_8cpp-source.shtml#l00031">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div><p>
<a class="anchor" name="8ad01448cb4d5237ed5f3d8eeaf39804"></a><!-- doxytag: member="OpenBabel::OBConversion::AddOption" ref="8ad01448cb4d5237ed5f3d8eeaf39804" args="(const char *opt, Option_type opttyp=OUTOPTIONS, const char *txt=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddOption           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&nbsp;</td>
          <td class="paramname"> <em>opttyp</em> = <code>OUTOPTIONS</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>txt</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set an option of specified type, with optional text. 
<p>

</div>
</div><p>
<a class="anchor" name="82f1d6a21880f898673f8a1b45d15eee"></a><!-- doxytag: member="OpenBabel::OBConversion::RemoveOption" ref="82f1d6a21880f898673f8a1b45d15eee" args="(const char *opt, Option_type optype)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool RemoveOption           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&nbsp;</td>
          <td class="paramname"> <em>optype</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c07772684eade5d0d11b8979f0772cf5"></a><!-- doxytag: member="OpenBabel::OBConversion::SetOptions" ref="c07772684eade5d0d11b8979f0772cf5" args="(const char *options, Option_type opttyp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetOptions           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&nbsp;</td>
          <td class="paramname"> <em>opttyp</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set several single character options of specified type from string like ab"btext"c"ctext". 
<p>

</div>
</div><p>
<a class="anchor" name="6a45eddab233711eb4e432ed5657358f"></a><!-- doxytag: member="OpenBabel::OBConversion::RegisterOptionParam" ref="6a45eddab233711eb4e432ed5657358f" args="(std::string name, OBFormat *pFormat, int numberParams=0, Option_type typ=OUTOPTIONS)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RegisterOptionParam           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td>
          <td class="paramname"> <em>pFormat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>numberParams</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&nbsp;</td>
          <td class="paramname"> <em>typ</em> = <code>OUTOPTIONS</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
For example -h takes 0 parameters; -f takes 1. Call in a format constructor. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00201">OBConversion::OBConversion()</a>, and <a class="el" href="obmolecformat_8h-source.shtml#l00063">OBMoleculeFormat::OBMoleculeFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1042e860531f4961b3b0245e9a92f4a7"></a><!-- doxytag: member="OpenBabel::OBConversion::GetOptionParams" ref="1042e860531f4961b3b0245e9a92f4a7" args="(std::string name, Option_type typ)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetOptionParams           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&nbsp;</td>
          <td class="paramname"> <em>typ</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of parameters registered for the option, or 0 if not found </dd></dl>

</div>
</div><p>
<a class="anchor" name="6af42ed37c470cee546f3aa160a363d4"></a><!-- doxytag: member="OpenBabel::OBConversion::CopyOptions" ref="6af42ed37c470cee546f3aa160a363d4" args="(OBConversion *pSourceConv, Option_type typ=ALL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CopyOptions           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"> <em>pSourceConv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&nbsp;</td>
          <td class="paramname"> <em>typ</em> = <code>ALL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copies the options (by default of all types) from one <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> Object to another. 
<p>

</div>
</div><p>
<a class="anchor" name="137c540357b45e73f65e602e1196eed7"></a><!-- doxytag: member="OpenBabel::OBConversion::GetSupportedInputFormat" ref="137c540357b45e73f65e602e1196eed7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSupportedInputFormat           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the list of supported input format 
</div>
</div><p>
<a class="anchor" name="353b3a6a53808b22361c9f44713978e8"></a><!-- doxytag: member="OpenBabel::OBConversion::GetSupportedOutputFormat" ref="353b3a6a53808b22361c9f44713978e8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSupportedOutputFormat           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the list of supported output format 
</div>
</div><p>
<a class="anchor" name="cc3cc99e2ff0113c9ca6a64f3de71300"></a><!-- doxytag: member="OpenBabel::OBConversion::Convert" ref="cc3cc99e2ff0113c9ca6a64f3de71300" args="(std::istream *is, std::ostream *os)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Convert           </td>
          <td>(</td>
          <td class="paramtype">std::istream *&nbsp;</td>
          <td class="paramname"> <em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream *&nbsp;</td>
          <td class="paramname"> <em>os</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Conversion for single input and output stream. 
<p>

</div>
</div><p>
<a class="anchor" name="95c512f009bf277d9d6299d9f5d0c13d"></a><!-- doxytag: member="OpenBabel::OBConversion::Convert" ref="95c512f009bf277d9d6299d9f5d0c13d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Convert           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Conversion with existing streams. 
<p>
Actions the "convert" interface. Calls the <a class="el" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a> class's ReadMolecule() which<ul>
<li>makes a new chemical object of its chosen type (e.g. <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>)</li><li>reads an object from the input file</li><li>subjects the chemical object to 'transformations' as specified by the Options</li><li>calls AddChemObject to add it to a buffer. The previous object is first output via the output Format's WriteMolecule(). During the output process calling IsFirst() and GetIndex() (the number of objects including the current one already output. allows more control, for instance writing &lt;cml&gt; and &lt;/cml&gt; tags for multiple molecule outputs only.</li></ul>
<p>
AddChemObject does not save the object passed to it if it is NULL (as a result of a DoTransformation()) or if the number of the object is outside the range defined by StartNumber and EndNumber.This means the start and end counts apply to all chemical objects found whether or not they are output.<p>
If ReadMolecule returns false the input conversion loop is exited. 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00376">OBConversion::Convert()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9d12b0f7f38951d2d1065fc7ddae4229"></a><!-- doxytag: member="OpenBabel::OBConversion::FullConvert" ref="9d12b0f7f38951d2d1065fc7ddae4229" args="(std::vector&lt; std::string &gt; &amp;FileList, std::string &amp;OutputFileName, std::vector&lt; std::string &gt; &amp;OutputFileList)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int FullConvert           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>FileList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>OutputFileName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>OutputFileList</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Conversion with multiple input/output files: makes input and output streams, and carries out normal, batch, aggregation, and splitting conversion. 
<p>
Makes input and output streams, and carries out normal, batch, aggregation, and splitting conversion.<p>
Normal Done if FileList contains a single file name and OutputFileName does not contain a *.<p>
Aggregation Done if FileList has more than one file name and OutputFileName does not contain * . All the chemical objects are converted and sent to the single output file.<p>
Splitting Done if FileList contains a single file name and OutputFileName contains a * . Each chemical object in the input file is converted and sent to a separate file whose name is OutputFileName with the replaced by 1, 2, 3, etc. OutputFileName must have at least one character other than the * before the extension. For example, if OutputFileName is NEW*.smi then the output files are NEW1.smi, NEW2.smi, etc.<p>
Batch Conversion Done if FileList has more than one file name and contains a * . Each input file is converted to an output file whose name is OutputFileName with the * replaced by the inputfile name without its path and extension. So if the input files were inpath/First.cml, inpath/Second.cml and OutputFileName was NEW*.mol, the output files would be NEWFirst.mol, NEWSecond.mol.<p>
If FileList is empty, the input stream that has already been set (usually in the constructor) is used. If OutputFileName is empty, the output stream already set is used.<p>
On exit, OutputFileList contains the names of the output files.<p>
Returns the number of Chemical objects converted. 
</div>
</div><p>
<a class="anchor" name="342df96ba3cd8751e19758939dbef2f5"></a><!-- doxytag: member="OpenBabel::OBConversion::AddChemObject" ref="342df96ba3cd8751e19758939dbef2f5" args="(OBBase *pOb)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int AddChemObject           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Adds to internal array during input. 
<p>
Called by ReadMolecule() to deliver an object it has read from an input stream. Used in two modes:<ul>
<li>When Count is negative it is left negative and the routine is just a store for an <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> object. The negative value returned tells the calling routine that no more objects are required.</li><li>When count is &gt;=0, probably set by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#95c512f009bf277d9d6299d9f5d0c13d" title="Conversion with existing streams.">Convert()</a>, it acts as a queue of 2: writing the currently stored value before accepting the supplied one. This delay allows output routines to respond differently when the written object is the last. Count is incremented with each call, even if pOb=NULL. Objects are not added to the queue if the count is outside the range StartNumber to EndNumber. There is no upper limit if EndNumber is zero. The return value is Count ((&gt;0) or 0 if WriteChemObject returned false. </li></ul>

<p>Referenced by <a class="el" href="obmolecformat_8cpp-source.shtml#l00031">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div><p>
<a class="anchor" name="17bfbe7570517993bcfcb1916bd437d0"></a><!-- doxytag: member="OpenBabel::OBConversion::GetChemObject" ref="17bfbe7570517993bcfcb1916bd437d0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> * GetChemObject           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Retrieve from internal array during output. 
<p>
Retrieves an object stored by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#342df96ba3cd8751e19758939dbef2f5" title="Adds to internal array during input.">AddChemObject()</a> during output 
<p>Referenced by <a class="el" href="obmolecformat_8cpp-source.shtml#l00124">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div><p>
<a class="anchor" name="0cc38e7988805424c15d68f5444a2a5d"></a><!-- doxytag: member="OpenBabel::OBConversion::IsLast" ref="0cc38e7988805424c15d68f5444a2a5d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLast           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
True if no more objects to be output. 
<p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#0cc38e7988805424c15d68f5444a2a5d">XMLConversion</a>.</p>

<p>Referenced by <a class="el" href="xml_8h-source.shtml#l00087">XMLConversion::IsLast()</a>, and <a class="el" href="obmolecformat_8cpp-source.shtml#l00124">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div><p>
<a class="anchor" name="f5f16d80b577c580920f0c5b8abd5973"></a><!-- doxytag: member="OpenBabel::OBConversion::IsFirstInput" ref="f5f16d80b577c580920f0c5b8abd5973" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFirstInput           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
True if the first input object is being processed. 
<p>

<p>Referenced by <a class="el" href="obmolecformat_8cpp-source.shtml#l00183">OBMoleculeFormat::DeferMolOutput()</a>, and <a class="el" href="obmolecformat_8cpp-source.shtml#l00031">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div><p>
<a class="anchor" name="b94b09151245e8c6accfc418a866d329"></a><!-- doxytag: member="OpenBabel::OBConversion::SetFirstInput" ref="b94b09151245e8c6accfc418a866d329" args="(bool b=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetFirstInput           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>b</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Setwhether or not is the first input. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="d44eaf0b472408acb158334c8725d339"></a><!-- doxytag: member="OpenBabel::OBConversion::GetOutputIndex" ref="d44eaf0b472408acb158334c8725d339" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetOutputIndex           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Retrieves number of ChemObjects that have been actually output. 
<p>
Returns the number of objects which have been output or are currently being output. The outputindex is incremented when an object for output is fetched by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#17bfbe7570517993bcfcb1916bd437d0" title="Retrieve from internal array during output.">GetChemObject()</a>. So the function will return 1 if called from WriteMolecule() during output of the first object. 
<p>Referenced by <a class="el" href="xml_8h-source.shtml#l00089">XMLConversion::GetOutputIndex()</a>.</p>

</div>
</div><p>
<a class="anchor" name="7037cb9de4584f498b0099b7584bdc97"></a><!-- doxytag: member="OpenBabel::OBConversion::SetOutputIndex" ref="7037cb9de4584f498b0099b7584bdc97" args="(int indx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetOutputIndex           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>indx</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets ouput index (maybe to control whether seen as first object). 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00342">OBMoleculeFormat::OutputDeferredMols()</a>, and <a class="el" href="obmolecformat_8cpp-source.shtml#l00124">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div><p>
<a class="anchor" name="38d59749ba2add8597210717e804e4db"></a><!-- doxytag: member="OpenBabel::OBConversion::SetMoreFilesToCome" ref="38d59749ba2add8597210717e804e4db" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetMoreFilesToCome           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Used with multiple input files. Off by default. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="4dacf92f4f0cbf7a1f269143659ceb88"></a><!-- doxytag: member="OpenBabel::OBConversion::SetOneObjectOnly" ref="4dacf92f4f0cbf7a1f269143659ceb88" args="(bool b=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetOneObjectOnly           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>b</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Used with multiple input files. Off by default. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00342">OBMoleculeFormat::OutputDeferredMols()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00763">OBConversion::Write()</a>.</p>

</div>
</div><p>
<a class="anchor" name="19dedcd05ee3ab11ed85c29ff1fef810"></a><!-- doxytag: member="OpenBabel::OBConversion::SetLast" ref="19dedcd05ee3ab11ed85c29ff1fef810" args="(bool b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetLast           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>b</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Synonym for <a class="el" href="classOpenBabel_1_1OBConversion.shtml#4dacf92f4f0cbf7a1f269143659ceb88" title="Used with multiple input files. Off by default.">SetOneObjectOnly()</a>. 
<p>

</div>
</div><p>
<a class="anchor" name="c157f0eb86dba757b3ebae08ffffb8d2"></a><!-- doxytag: member="OpenBabel::OBConversion::IsLastFile" ref="c157f0eb86dba757b3ebae08ffffb8d2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLastFile           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
True if no more files to be read. 
<p>

</div>
</div><p>
<a class="anchor" name="442b17995d84d654e33ede11a63d7f80"></a><!-- doxytag: member="OpenBabel::OBConversion::GetDefaultFormat" ref="442b17995d84d654e33ede11a63d7f80" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* GetDefaultFormat           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The default format is set in a single <a class="el" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a> class (generally it is <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>). 
<p>

</div>
</div><p>
<a class="anchor" name="3d46d682999a7772db31a835fa4a8091"></a><!-- doxytag: member="OpenBabel::OBConversion::Write" ref="3d46d682999a7772db31a835fa4a8091" args="(OBBase *pOb, std::ostream *pout=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Write           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream *&nbsp;</td>
          <td class="paramname"> <em>pout</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Outputs an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>. 
<p>
Part of "API" interface. The output stream can be specified and the change is retained in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> instance<p>
Writes the object pOb but does not delete it afterwards. The output stream is lastingly changed if pos is not NULL Returns true if successful. 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00831">OBConversion::WriteFile()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00806">OBConversion::WriteString()</a>.</p>

</div>
</div><p>
<a class="anchor" name="18ce8681792d689dab8172a511c5a996"></a><!-- doxytag: member="OpenBabel::OBConversion::WriteString" ref="18ce8681792d689dab8172a511c5a996" args="(OBBase *pOb, bool trimWhitespace=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string WriteString           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>trimWhitespace</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Outputs an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> as a string. 
<p>
Part of "API" interface. The output stream is temporarily changed to the string and then restored This method is primarily intended for scripting languages without "stream" classes The optional "trimWhitespace" parameter allows trailing whitespace to be removed (e.g., in a SMILES string or InChI, etc.)<p>
Writes the object pOb but does not delete it afterwards. The output stream not changed (since we cannot write to this string later) Returns true if successful. 
</div>
</div><p>
<a class="anchor" name="d17f0a96643dec6840eda76c07a54698"></a><!-- doxytag: member="OpenBabel::OBConversion::WriteFile" ref="d17f0a96643dec6840eda76c07a54698" args="(OBBase *pOb, std::string filePath)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool WriteFile           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>filePath</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Outputs an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> as a file (with the supplied path). 
<p>
Part of "API" interface. The output stream is changed to the supplied file and the change is retained in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> instance. This method is primarily intended for scripting languages without "stream" classes<p>
Writes the object pOb but does not delete it afterwards. The output stream is lastingly changed to point to the file Returns true if successful. 
</div>
</div><p>
<a class="anchor" name="cbe5bd25f0afb1c8cd622e41e61ebc70"></a><!-- doxytag: member="OpenBabel::OBConversion::CloseOutFile" ref="cbe5bd25f0afb1c8cd622e41e61ebc70" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CloseOutFile           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Manually closes and deletes the output stream The file is closed anyway when in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> destructor or when WriteFile is called again. 
<p>
<dl class="since" compact><dt><b>Since:</b></dt><dd>version 2.1 </dd></dl>

</div>
</div><p>
<a class="anchor" name="1204f9b613067a04ebfe881a58775918"></a><!-- doxytag: member="OpenBabel::OBConversion::Read" ref="1204f9b613067a04ebfe881a58775918" args="(OBBase *pOb, std::istream *pin=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Read           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::istream *&nbsp;</td>
          <td class="paramname"> <em>pin</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reads an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> into pOb. 
<p>
Part of "API" interface. The input stream can be specified and the change is retained in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> instance <dl class="return" compact><dt><b>Returns:</b></dt><dd>false and pOb=NULL on error </dd></dl>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00880">OBConversion::ReadFile()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00412">OBMoleculeFormat::ReadNameIndex()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00866">OBConversion::ReadString()</a>.</p>

</div>
</div><p>
<a class="anchor" name="93558e9c89cda2e1a4f9fb2cadc5c8d1"></a><!-- doxytag: member="OpenBabel::OBConversion::ReadString" ref="93558e9c89cda2e1a4f9fb2cadc5c8d1" args="(OBBase *pOb, std::string input)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ReadString           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>input</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reads an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> into pOb from the supplied string. 
<p>
Part of "API" interface. The input stream can be specified and the change is retained in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> instance <dl class="return" compact><dt><b>Returns:</b></dt><dd>NULL on error Part of "API" interface. <p>
false and pOb=NULL on error This method is primarily intended for scripting languages without "stream" classes </dd></dl>

</div>
</div><p>
<a class="anchor" name="76d7d1bf8e0c05c19d5b5e991fd0ba2f"></a><!-- doxytag: member="OpenBabel::OBConversion::ReadFile" ref="76d7d1bf8e0c05c19d5b5e991fd0ba2f" args="(OBBase *pOb, std::string filePath)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ReadFile           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname"> <em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>filePath</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reads an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> into pOb from the file specified. 
<p>
Part of "API" interface. The output stream is changed to the supplied file and the change is retained in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> instance. <dl class="return" compact><dt><b>Returns:</b></dt><dd>false and pOb=NULL on error This method is primarily intended for scripting languages without "stream" classes </dd></dl>

</div>
</div><p>
<a class="anchor" name="7424c6fe9292f59087d23e7748ac237e"></a><!-- doxytag: member="OpenBabel::OBConversion::OpenInAndOutFiles" ref="7424c6fe9292f59087d23e7748ac237e" args="(std::string infilepath, std::string outfilepath)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenInAndOutFiles           </td>
          <td>(</td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>infilepath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&nbsp;</td>
          <td class="paramname"> <em>outfilepath</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Part of the "Convert" interface Open the files and update the streams in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> object. This method is primarily intended for scripting languages without "stream" classes and will usually followed by a call to <a class="el" href="classOpenBabel_1_1OBConversion.shtml#95c512f009bf277d9d6299d9f5d0c13d" title="Conversion with existing streams.">Convert()</a> <dl class="return" compact><dt><b>Returns:</b></dt><dd>false if unsucessful. </dd></dl>

</div>
</div><p>
<a class="anchor" name="1717ba1ed3f8131d7a0f3b0d6031f5af"></a><!-- doxytag: member="OpenBabel::OBConversion::ReportNumberConverted" ref="1717ba1ed3f8131d7a0f3b0d6031f5af" args="(int count, OBFormat *pFormat=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ReportNumberConverted           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td>
          <td class="paramname"> <em>pFormat</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sends a message like "2 molecules converted" to clog The type of object is taken from the TargetClassDescription of the specified class (or the output format if not specified)and is appropriately singular or plural. 
<p>

</div>
</div><p>
<a class="anchor" name="4eb6eac5855fb3289c5a438d4084a052"></a><!-- doxytag: member="OpenBabel::OBConversion::BatchFileName" ref="4eb6eac5855fb3289c5a438d4084a052" args="(std::string &amp;BaseName, std::string &amp;InFile)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string BatchFileName           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>BaseName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>InFile</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Replaces * in BaseName by InFile without extension and path. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="44fbee02afc6de6a9f98bbbb6a2e12bf"></a><!-- doxytag: member="OpenBabel::OBConversion::IncrementedFileName" ref="44fbee02afc6de6a9f98bbbb6a2e12bf" args="(std::string &amp;BaseName, const int Count)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string IncrementedFileName           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>BaseName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&nbsp;</td>
          <td class="paramname"> <em>Count</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Replaces * in BaseName by Count. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="39b6cebdf53672368cfa3edd8bc7740d"></a><!-- doxytag: member="OpenBabel::OBConversion::CheckForUnintendedBatch" ref="39b6cebdf53672368cfa3edd8bc7740d" args="(const std::string &amp;infile, const std::string &amp;outfile)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CheckForUnintendedBatch           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>infile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>outfile</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks for misunderstandings when using the -m option. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="3222302075fbfcfe842ebd0b984a4406"></a><!-- doxytag: member="OpenBabel::OBConversion::InstallStreamFilter" ref="3222302075fbfcfe842ebd0b984a4406" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void InstallStreamFilter           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Adds a filtering rdbuffer to handle line endings if not already installed and not a binary or xml format. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00376">OBConversion::Convert()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00700">OBConversion::Read()</a>.</p>

</div>
</div><p>
<a class="anchor" name="631730a938bc2219b90c027932db3443"></a><!-- doxytag: member="OpenBabel::OBConversion::SetStartAndEnd" ref="631730a938bc2219b90c027932db3443" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetStartAndEnd           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="3b2ad8335b0a9b18bc22bc534b7ffb28"></a><!-- doxytag: member="OpenBabel::OBConversion::OptionParamArray" ref="3b2ad8335b0a9b18bc22bc534b7ffb28" args="(Option_type typ)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#9df37d33062bde3400dd034ee7feaa92">OBConversion::OPAMapType</a> &amp; OptionParamArray           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&nbsp;</td>
          <td class="paramname"> <em>typ</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01435">OBConversion::GetOptionParams()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l01412">OBConversion::RegisterOptionParam()</a>.</p>

</div>
</div><p>
<a class="anchor" name="cb5fa3f38f036bd82ba49a44d6b7a998"></a><!-- doxytag: member="OpenBabel::OBConversion::LoadFormatFiles" ref="cb5fa3f38f036bd82ba49a44d6b7a998" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int LoadFormatFiles           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static, protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00201">OBConversion::OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="666f7b27853d391b47bdaa3e4763d216"></a><!-- doxytag: member="OpenBabel::OBConversion::OpenAndSetFormat" ref="666f7b27853d391b47bdaa3e4763d216" args="(bool SetFormat, std::ifstream *is)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenAndSetFormat           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>SetFormat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ifstream *&nbsp;</td>
          <td class="paramname"> <em>is</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>.</p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="20354c0458b4e08dc62db4a4e8717c61"></a><!-- doxytag: member="OpenBabel::OBConversion::InFilename" ref="20354c0458b4e08dc62db4a4e8717c61" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBConversion.shtml#20354c0458b4e08dc62db4a4e8717c61">InFilename</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00655">OBConversion::GetTitle()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01326">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00908">OBConversion::OpenInAndOutFiles()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00880">OBConversion::ReadFile()</a>.</p>

</div>
</div><p>
<a class="anchor" name="b965c6baeb6893dd15a2fefefce795df"></a><!-- doxytag: member="OpenBabel::OBConversion::pInStream" ref="b965c6baeb6893dd15a2fefefce795df" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::istream* <a class="el" href="classOpenBabel_1_1OBConversion.shtml#b965c6baeb6893dd15a2fefefce795df">pInStream</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00376">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00744">OBConversion::InstallStreamFilter()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00201">OBConversion::OBConversion()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00908">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00700">OBConversion::Read()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00880">OBConversion::ReadFile()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00866">OBConversion::ReadString()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00251">OBConversion::~OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="efeab37b3ca85a70cef740bb1636b353"></a><!-- doxytag: member="OpenBabel::OBConversion::pOutStream" ref="efeab37b3ca85a70cef740bb1636b353" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream* <a class="el" href="classOpenBabel_1_1OBConversion.shtml#efeab37b3ca85a70cef740bb1636b353">pOutStream</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00855">OBConversion::CloseOutFile()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00376">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00201">OBConversion::OBConversion()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00908">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00763">OBConversion::Write()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00831">OBConversion::WriteFile()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00806">OBConversion::WriteString()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00251">OBConversion::~OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="2daf6d1435032c73c65000af61a4a5d4"></a><!-- doxytag: member="OpenBabel::OBConversion::pDefaultFormat" ref="2daf6d1435032c73c65000af61a4a5d4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* <a class="el" href="classOpenBabel_1_1OBConversion.shtml#2daf6d1435032c73c65000af61a4a5d4">pDefaultFormat</a><code> [static, protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="70c004d49155986bcc163bac07df0e4e"></a><!-- doxytag: member="OpenBabel::OBConversion::pInFormat" ref="70c004d49155986bcc163bac07df0e4e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* <a class="el" href="classOpenBabel_1_1OBConversion.shtml#70c004d49155986bcc163bac07df0e4e">pInFormat</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00744">OBConversion::InstallStreamFilter()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01326">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00700">OBConversion::Read()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00880">OBConversion::ReadFile()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00346">OBConversion::SetInFormat()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00521">OBConversion::SetStartAndEnd()</a>.</p>

</div>
</div><p>
<a class="anchor" name="4d630735f21540de237cdcc32916bffb"></a><!-- doxytag: member="OpenBabel::OBConversion::pOutFormat" ref="4d630735f21540de237cdcc32916bffb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* <a class="el" href="classOpenBabel_1_1OBConversion.shtml#4d630735f21540de237cdcc32916bffb">pOutFormat</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01464">OBConversion::ReportNumberConverted()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00354">OBConversion::SetOutFormat()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00763">OBConversion::Write()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00831">OBConversion::WriteFile()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00806">OBConversion::WriteString()</a>.</p>

</div>
</div><p>
<a class="anchor" name="3d9e064f9e26ed2e52b140b7cc34a8d6"></a><!-- doxytag: member="OpenBabel::OBConversion::OptionsArray" ref="3d9e064f9e26ed2e52b140b7cc34a8d6" args="[3]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::map&lt;std::string,std::string&gt; <a class="el" href="classOpenBabel_1_1OBConversion.shtml#3d9e064f9e26ed2e52b140b7cc34a8d6">OptionsArray</a>[3]<code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01362">OBConversion::AddOption()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01484">OBConversion::CopyOptions()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01371">OBConversion::IsOption()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01381">OBConversion::RemoveOption()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l01386">OBConversion::SetOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="075e1e3c9dd399cef584d7338cc37938"></a><!-- doxytag: member="OpenBabel::OBConversion::Index" ref="075e1e3c9dd399cef584d7338cc37938" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBConversion.shtml#075e1e3c9dd399cef584d7338cc37938">Index</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00556">OBConversion::GetChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00639">OBConversion::GetOutputIndex()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00644">OBConversion::SetOutputIndex()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c52d6fdbe254370662cccd43af0248f2"></a><!-- doxytag: member="OpenBabel::OBConversion::StartNumber" ref="c52d6fdbe254370662cccd43af0248f2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBConversion.shtml#c52d6fdbe254370662cccd43af0248f2">StartNumber</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00521">OBConversion::SetStartAndEnd()</a>.</p>

</div>
</div><p>
<a class="anchor" name="db31d46cbf6e64e86bae6d24d90c9702"></a><!-- doxytag: member="OpenBabel::OBConversion::EndNumber" ref="db31d46cbf6e64e86bae6d24d90c9702" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBConversion.shtml#db31d46cbf6e64e86bae6d24d90c9702">EndNumber</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00521">OBConversion::SetStartAndEnd()</a>.</p>

</div>
</div><p>
<a class="anchor" name="ad462966ed963f892117056de1eba502"></a><!-- doxytag: member="OpenBabel::OBConversion::Count" ref="ad462966ed963f892117056de1eba502" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad462966ed963f892117056de1eba502">Count</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00521">OBConversion::SetStartAndEnd()</a>.</p>

</div>
</div><p>
<a class="anchor" name="e14ad56a72461f3c598cb4dbd151cdc7"></a><!-- doxytag: member="OpenBabel::OBConversion::m_IsFirstInput" ref="e14ad56a72461f3c598cb4dbd151cdc7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBConversion.shtml#e14ad56a72461f3c598cb4dbd151cdc7">m_IsFirstInput</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00965">OBConversion::IsFirstInput()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00969">OBConversion::SetFirstInput()</a>.</p>

</div>
</div><p>
<a class="anchor" name="6025251d18641dab4058222b69d1a98c"></a><!-- doxytag: member="OpenBabel::OBConversion::m_IsLast" ref="6025251d18641dab4058222b69d1a98c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBConversion.shtml#6025251d18641dab4058222b69d1a98c">m_IsLast</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00960">OBConversion::IsLast()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00665">OBConversion::SetOneObjectOnly()</a>.</p>

</div>
</div><p>
<a class="anchor" name="b4ec386870233b42d353a4d66d7b0cee"></a><!-- doxytag: member="OpenBabel::OBConversion::MoreFilesToCome" ref="b4ec386870233b42d353a4d66d7b0cee" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBConversion.shtml#b4ec386870233b42d353a4d66d7b0cee">MoreFilesToCome</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00660">OBConversion::SetMoreFilesToCome()</a>.</p>

</div>
</div><p>
<a class="anchor" name="7002deaca76f3fc235c76be1fcc38dfa"></a><!-- doxytag: member="OpenBabel::OBConversion::OneObjectOnly" ref="7002deaca76f3fc235c76be1fcc38dfa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBConversion.shtml#7002deaca76f3fc235c76be1fcc38dfa">OneObjectOnly</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00665">OBConversion::SetOneObjectOnly()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9bdd5c815677e240cec9c2e4a71d73f2"></a><!-- doxytag: member="OpenBabel::OBConversion::ReadyToInput" ref="9bdd5c815677e240cec9c2e4a71d73f2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBConversion.shtml#9bdd5c815677e240cec9c2e4a71d73f2">ReadyToInput</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="e0c8e3d58dc0c0d9713ca7a7d27b8c4d"></a><!-- doxytag: member="OpenBabel::OBConversion::CheckedForGzip" ref="e0c8e3d58dc0c0d9713ca7a7d27b8c4d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBConversion.shtml#e0c8e3d58dc0c0d9713ca7a7d27b8c4d">CheckedForGzip</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
input stream is gzip-encoded 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00376">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00700">OBConversion::Read()</a>.</p>

</div>
</div><p>
<a class="anchor" name="778a4d8f719010ac4adf6af2363af0a8"></a><!-- doxytag: member="OpenBabel::OBConversion::NeedToFreeInStream" ref="778a4d8f719010ac4adf6af2363af0a8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBConversion.shtml#778a4d8f719010ac4adf6af2363af0a8">NeedToFreeInStream</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00908">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00880">OBConversion::ReadFile()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00866">OBConversion::ReadString()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00251">OBConversion::~OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="96fc7fb023ad66073434a206829c23bd"></a><!-- doxytag: member="OpenBabel::OBConversion::NeedToFreeOutStream" ref="96fc7fb023ad66073434a206829c23bd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classOpenBabel_1_1OBConversion.shtml#96fc7fb023ad66073434a206829c23bd">NeedToFreeOutStream</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00855">OBConversion::CloseOutFile()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00908">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00831">OBConversion::WriteFile()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00251">OBConversion::~OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="b3b665dec523e9a63f1dc954900211ea"></a><!-- doxytag: member="OpenBabel::OBConversion::pLineEndBuf" ref="b3b665dec523e9a63f1dc954900211ea" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">LErdbuf</a>* <a class="el" href="classOpenBabel_1_1OBConversion.shtml#b3b665dec523e9a63f1dc954900211ea">pLineEndBuf</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00744">OBConversion::InstallStreamFilter()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="501b1ec0c0e4fe9e78398e3837a759ec"></a><!-- doxytag: member="OpenBabel::OBConversion::FormatFilesLoaded" ref="501b1ec0c0e4fe9e78398e3837a759ec" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classOpenBabel_1_1OBConversion.shtml#501b1ec0c0e4fe9e78398e3837a759ec">FormatFilesLoaded</a> = 0<code> [static, protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00201">OBConversion::OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="20a1d62cb932144d66e52d7c823fb0a1"></a><!-- doxytag: member="OpenBabel::OBConversion::pOb1" ref="20a1d62cb932144d66e52d7c823fb0a1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <a class="el" href="classOpenBabel_1_1OBConversion.shtml#20a1d62cb932144d66e52d7c823fb0a1">pOb1</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00556">OBConversion::GetChemObject()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="b77068f3bb4cb88694a6be653c00f04e"></a><!-- doxytag: member="OpenBabel::OBConversion::wInpos" ref="b77068f3bb4cb88694a6be653c00f04e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::streampos <a class="el" href="classOpenBabel_1_1OBConversion.shtml#b77068f3bb4cb88694a6be653c00f04e">wInpos</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
position in the input stream of the object being written 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="545a1341008a23c2dd0721c164a9ad89"></a><!-- doxytag: member="OpenBabel::OBConversion::rInpos" ref="545a1341008a23c2dd0721c164a9ad89" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::streampos <a class="el" href="classOpenBabel_1_1OBConversion.shtml#545a1341008a23c2dd0721c164a9ad89">rInpos</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
position in the input stream of the object being read 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="fee7e5bffccd262faaff0417e5ae9af3"></a><!-- doxytag: member="OpenBabel::OBConversion::wInlen" ref="fee7e5bffccd262faaff0417e5ae9af3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classOpenBabel_1_1OBConversion.shtml#fee7e5bffccd262faaff0417e5ae9af3">wInlen</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
length in the input stream of the object being written 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1a897c3f35235e4ca7da37ca245db065"></a><!-- doxytag: member="OpenBabel::OBConversion::rInlen" ref="1a897c3f35235e4ca7da37ca245db065" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classOpenBabel_1_1OBConversion.shtml#1a897c3f35235e4ca7da37ca245db065">rInlen</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
length in the input stream of the object being read 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="3846aa2ce719d5820b66e302c6aeaa8a"></a><!-- doxytag: member="OpenBabel::OBConversion::pAuxConv" ref="3846aa2ce719d5820b66e302c6aeaa8a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <a class="el" href="classOpenBabel_1_1OBConversion.shtml#3846aa2ce719d5820b66e302c6aeaa8a">pAuxConv</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Way to extend <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00219">OBConversion::OBConversion()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00251">OBConversion::~OBConversion()</a>.</p>

</div>
</div><p>
<a class="anchor" name="2322eb2aa14e8d954573abbda9c50e62"></a><!-- doxytag: member="OpenBabel::OBConversion::SupportedInputFormat" ref="2322eb2aa14e8d954573abbda9c50e62" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::string&gt; <a class="el" href="classOpenBabel_1_1OBConversion.shtml#2322eb2aa14e8d954573abbda9c50e62">SupportedInputFormat</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
list of supported input format 
<p>

</div>
</div><p>
<a class="anchor" name="50233a5c7c63d03056923f13c7acbb1b"></a><!-- doxytag: member="OpenBabel::OBConversion::SupportedOutputFormat" ref="50233a5c7c63d03056923f13c7acbb1b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::string&gt; <a class="el" href="classOpenBabel_1_1OBConversion.shtml#50233a5c7c63d03056923f13c7acbb1b">SupportedOutputFormat</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
list of supported output format 
<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="obconversion_8h-source.shtml">obconversion.h</a><li><a class="el" href="obconversion_8cpp.shtml">obconversion.cpp</a></ul>
</div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:40 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
