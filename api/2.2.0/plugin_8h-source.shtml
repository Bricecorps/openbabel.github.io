<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: plugin.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>plugin.h</h1><a href="plugin_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">plugin.h - facilitates construction of plugin classes</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2007 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_PLUGIN_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_PLUGIN_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;cstring&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#ifndef OBERROR</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor"> #define OBERROR</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="keyword">namespace </span>OpenBabel
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036 
<a name="l00038"></a><a class="code" href="structOpenBabel_1_1CharPtrLess.shtml">00038</a> <span class="keyword">struct </span>OBERROR <a class="code" href="structOpenBabel_1_1CharPtrLess.shtml" title="Case insensitive string comparison for PluginMapType key.">CharPtrLess</a> : <span class="keyword">public</span> std::binary_function&lt;const char*,const char*, bool&gt;
<a name="l00039"></a>00039 {
<a name="l00040"></a><a class="code" href="structOpenBabel_1_1CharPtrLess.shtml#c2505b03ab30bfd419b570e0324743ab">00040</a>   <span class="keywordtype">bool</span> operator()(<span class="keyword">const</span> <span class="keywordtype">char</span>* p1,<span class="keyword">const</span> <span class="keywordtype">char</span>* p2)<span class="keyword"> const</span>
<a name="l00041"></a>00041 <span class="keyword">  </span>{ <span class="keywordflow">return</span> strcasecmp(p1,p2)&lt;0; }
<a name="l00042"></a>00042 };
<a name="l00043"></a>00043 
<a name="l00049"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml">00049</a> <span class="keyword">class </span>OBERROR <a class="code" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime.">OBPlugin</a>
<a name="l00050"></a>00050 {
<a name="l00051"></a>00051 <span class="keyword">public</span>:
<a name="l00052"></a>00052 
<a name="l00053"></a>00053   <span class="comment">//Maps of thistype are used to store </span>
<a name="l00054"></a>00054   <span class="comment">// (a)a list of the plugin types in OBPlugin, and</span>
<a name="l00055"></a>00055   <span class="comment">// (b)a list of the sub-types in each type class derived from OBPlugin.</span>
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">00056</a>   <span class="keyword">typedef</span> std::map&lt;const char*, OBPlugin*, CharPtrLess&gt; <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>;
<a name="l00057"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">00057</a>   <span class="keyword">typedef</span> PluginMapType::const_iterator <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>;
<a name="l00058"></a>00058 
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#2f6f0f4ddec879439f78de686c459fb0">00060</a>   <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime.">OBPlugin</a>(){};
<a name="l00061"></a>00061 
<a name="l00063"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7">00063</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description() { <span class="keywordflow">return</span> NULL;} ;
<a name="l00064"></a>00064 
<a name="l00070"></a>00070   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Display(std::string&amp;txt, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID=NULL);
<a name="l00071"></a>00071 
<a name="l00076"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#9399e9568ab809d714385f1b237a9335">00076</a>   <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime.">OBPlugin</a>* MakeInstance(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp;){<span class="keywordflow">return</span> NULL;}
<a name="l00077"></a>00077 
<a name="l00079"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#c8ba4fe4a0634561ddd4667c8ef28ae1">00079</a>   <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime.">OBPlugin</a>* GetPlugin(<span class="keyword">const</span> <span class="keywordtype">char</span>* Type, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID)
<a name="l00080"></a>00080   { <span class="keywordflow">return</span> BaseFindType(GetTypeMap(Type), ID); }
<a name="l00081"></a>00081 
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#753a34173c6750388d33e5294556790f">00083</a>   <span class="keyword">const</span> <span class="keywordtype">char</span>* GetID()<span class="keyword">const</span>{<span class="keywordflow">return</span> _id;};
<a name="l00084"></a>00084 
<a name="l00088"></a>00088   <span class="keyword">static</span> <span class="keywordtype">bool</span> ListAsVector(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, std::vector&lt;std::string&gt;&amp; vlist);
<a name="l00089"></a>00089 
<a name="l00091"></a>00091   <span class="keyword">static</span> <span class="keywordtype">void</span> List(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID, <span class="keyword">const</span> <span class="keywordtype">char</span>* param=NULL, std::ostream* os=&amp;std::cout);
<a name="l00092"></a>00092 
<a name="l00094"></a>00094   <span class="keyword">static</span> std::string ListAsString(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID, <span class="keyword">const</span> <span class="keywordtype">char</span>* param=NULL);
<a name="l00095"></a>00095 
<a name="l00097"></a>00097   <span class="keyword">static</span> std::string FirstLine(<span class="keyword">const</span> <span class="keywordtype">char</span>* txt);
<a name="l00098"></a>00098 
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#1d4d73999ab0518ee471c635bd0a7e87">00101</a>   <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> Begin(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID)
<a name="l00102"></a>00102   {
<a name="l00103"></a>00103     <span class="keywordflow">if</span>( !strcmp(PluginID, <span class="stringliteral">"plugins"</span>) || GetTypeMap(PluginID)!=PluginMap())
<a name="l00104"></a>00104       <span class="keywordflow">return</span> GetTypeMap(PluginID).begin();
<a name="l00105"></a>00105     <span class="keywordflow">else</span>
<a name="l00106"></a>00106       <span class="keywordflow">return</span> PluginMap().end();
<a name="l00107"></a>00107   }
<a name="l00108"></a>00108 
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#9a330280c1cd2e7119dac87a6fd0b762">00109</a>   <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> End(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID)
<a name="l00110"></a>00110   {
<a name="l00111"></a>00111     <span class="keywordflow">return</span> GetTypeMap(PluginID).end();
<a name="l00112"></a>00112   }
<a name="l00113"></a>00113 
<a name="l00115"></a>00115   <span class="keyword">virtual</span> PluginMapType&amp; GetMap() <span class="keyword">const</span> =0;
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 <span class="keyword">protected</span>:
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#c40457336d7b12bb632b4ac4e8955a3a">00120</a>   <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; PluginMap()
<a name="l00121"></a>00121   {
<a name="l00122"></a>00122     <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> m;
<a name="l00123"></a>00123     <span class="keywordflow">return</span> m;
<a name="l00124"></a>00124   }
<a name="l00125"></a>00125 
<a name="l00127"></a>00127   <span class="keyword">static</span> PluginMapType&amp; GetTypeMap(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID);
<a name="l00128"></a>00128 
<a name="l00131"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#706e628de74c41f357e6fe9de774111c">00131</a>   <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime.">OBPlugin</a>* BaseFindType(<a class="code" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; Map, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID)
<a name="l00132"></a>00132   {
<a name="l00133"></a>00133     PluginMapType::iterator itr = Map.find(ID);
<a name="l00134"></a>00134     <span class="keywordflow">if</span>(itr==Map.end())
<a name="l00135"></a>00135       <span class="keywordflow">return</span> NULL;
<a name="l00136"></a>00136     <span class="keywordflow">else</span>
<a name="l00137"></a>00137       <span class="keywordflow">return</span> itr-&gt;second;
<a name="l00138"></a>00138   }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="keyword">protected</span>:
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#1f8d25dafb0bc13814ca451035f67955">00141</a>   <span class="keyword">const</span> <span class="keywordtype">char</span>* _id;
<a name="l00142"></a>00142 };
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="comment">//Macro to be added to definition of the base class</span>
<a name="l00145"></a><a class="code" href="plugin_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">00145</a> <span class="preprocessor">#define MAKE_PLUGIN(BaseClass)\</span>
<a name="l00146"></a>00146 <span class="preprocessor">protected:\</span>
<a name="l00147"></a>00147 <span class="preprocessor">virtual PluginMapType&amp; GetMap()const{return Map();}\</span>
<a name="l00148"></a>00148 <span class="preprocessor">static PluginMapType&amp; Map(){static PluginMapType m;return m;}\</span>
<a name="l00149"></a>00149 <span class="preprocessor">public:\</span>
<a name="l00150"></a>00150 <span class="preprocessor">static BaseClass*&amp; Default(){static BaseClass* d;return d;}\</span>
<a name="l00151"></a>00151 <span class="preprocessor">  BaseClass(const char* ID, bool IsDefault=false)\</span>
<a name="l00152"></a>00152 <span class="preprocessor"> {_id=ID;if(ID&amp;&amp;*ID){if(IsDefault || Map().empty()) Default() = this;\</span>
<a name="l00153"></a>00153 <span class="preprocessor"> Map()[ID]=this;PluginMap()[TypeID()] =this;}}\</span>
<a name="l00154"></a>00154 <span class="preprocessor">static BaseClass* FindType(const char* ID)\</span>
<a name="l00155"></a>00155 <span class="preprocessor"> {if(!ID || *ID==0) return Default();\</span>
<a name="l00156"></a>00156 <span class="preprocessor"> return static_cast&lt;BaseClass*&gt;(BaseFindType(Map(),ID));}</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>
<a name="l00286"></a>00286 
<a name="l00295"></a>00295 } <span class="comment">// end namespce</span>
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <span class="preprocessor">#endif</span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:34 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
