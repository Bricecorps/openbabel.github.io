<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: matrix3x3 Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>
  </div>
</div>
<div class="contents">
<h1>matrix3x3 Class Reference</h1><!-- doxytag: class="OpenBabel::matrix3x3" -->Represents a real 3x3 matrix.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="matrix3x3_8h-source.shtml">openbabel/math/matrix3x3.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for matrix3x3:</div>
<div class="dynsection">
<p><center><img src="classOpenBabel_1_1matrix3x3__inherit__graph.png" border="0" usemap="#matrix3x3__inherit__map" alt="Inheritance graph"></center>
<map name="matrix3x3__inherit__map">
<area shape="rect" href="classOpenBabel_1_1transform3d.shtml" title="Handle 3D transformations, such as space group definitions." alt="" coords="6,80,102,107"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center></div>

<p>
<a href="classOpenBabel_1_1matrix3x3-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#02fbfa24687cc574a29a8d1c0ff0a2db">matrix3x3</a> (void)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#c0461afe3f76b83a10fe99fac330f702">matrix3x3</a> (double s)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#4736c0c51dc08725c39e02a84c2390ec">matrix3x3</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> row1, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> row2, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> row3)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#0a0be9b2cd186a15d56efdaaefa9a994">matrix3x3</a> (double d[3][3])</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#6d3758cd834f7dd0f5c0816231349cb9">~matrix3x3</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#3f648014bbd17f8090159d2d93cbe30c">GetArray</a> (double *m)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const double &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a6e296b71371e9b9b334dca8c7f3314a">operator()</a> (int row, int column) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#59c4092616c1d0ffc2c3e022350ee02d">operator()</a> (int row, int column)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#8ef05a892601489ef84e46c0a00bcc41">inverse</a> (void) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#4c534cebd13efb9ac42d39722d85602c">transpose</a> (void) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ff25b8b63c0aec5f2c83d0cb70ae55cb">randomRotation</a> (<a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> &amp;rnd)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#390024ffecb7973f5de3194dc2f606f5">determinant</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#17ea6953708a00e57d99aaf52495f62a">isSymmetric</a> (void) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#e8249851867ad7b2795614ee2b4f0078">isOrthogonal</a> (void) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#f6fefdc3ee1db949d064e63eabb5fdaa">isDiagonal</a> (void) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a95d7e7bec24e89ad8ff73a47607b1f8">isUnitMatrix</a> (void) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#0aba6c9a55fa03689378594bb58f1ff1">Get</a> (int row, int column) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ae7e56afba0365c34add2d93288995ca">Set</a> (int row, int column, double v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#39efd7a5999c653b840ac4445b9f86c2">SetColumn</a> (int column, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#b20b033e3e502ab19ae92f55a9ef2fe2">SetRow</a> (int row, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#3f43f67cedadf2e178bd338b8ec26231">GetColumn</a> (unsigned int col) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#8e10214c207950dbaec09438c4992a46">GetRow</a> (unsigned int row) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#4623ee2f3c5b2b7cc4c2efb081273f62">operator*=</a> (const double &amp;c)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#56c27ea39208380495f812df6b865289">operator/=</a> (const double &amp;c)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#99b052f9d6eaea593f20a032679bcc55">SetupRotMat</a> (double x, double y, double z)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#031b9641f48f7639949cad29a6a99109">PlaneReflection</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;norm)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#e2b83cb7b73473405cd57594c88f541c">RotAboutAxisByAngle</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;axis, const double angle)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#eae6ec0ae0d036137c03275be0010878">FillOrth</a> (double alpha, double beta, double gamma, double a, double b, double c)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#5f09543ae4cdaf031d0adaa0480f2b8c">findEigenvectorsIfSymmetric</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;eigenvals) const </td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#eb205a916fa467164e6bdebc62d22e7a">jacobi</a> (unsigned int n, double *a, double *d, double *v)</td></tr>

<tr><td colspan="2"><br><h2>Friends</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#fa46ab021c49dc30bac7116157793dff">operator*</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#35fd56b260acc82508c9bf7e9a710125">operator*</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;, const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml#0f3e65b4976b2ac7ce2a02b778e5cc71">operator&lt;&lt;</a> (std::ostream &amp;, const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Represents a real 3x3 matrix. 
<p>
Rotating points in space can be performed by a vector-matrix multiplication. The <a class="el" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> class is designed as a helper to the <a class="el" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> class for rotating points in space. The rotation matrix may be initialised by passing in the array of floating point values, by passing euler angles, or a rotation vector and angle of rotation about that vector. Once set, the <a class="el" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> class can be used to rotate vectors by the overloaded multiplication operator. The following demonstrates the usage of the <a class="el" href="classOpenBabel_1_1matrix3x3.shtml" title="Represents a real 3x3 matrix.">matrix3x3</a> class:<p>
<div class="fragment"><pre class="fragment">      <a class="code" href="classOpenBabel_1_1matrix3x3.shtml#02fbfa24687cc574a29a8d1c0ff0a2db" title="Constructs the zero-matrix.">matrix3x3</a> mat;
      mat.SetupRotMat(0.0,180.0,0.0); <span class="comment">//rotate theta by 180 degrees</span>
      vector3 v = <a class="code" href="namespaceOpenBabel.shtml#6ca3b632d31093a7110635452bccc7bd" title="The x unit vector: &amp;lt;1.0, 0.0, 0.0&amp;gt;.">VX</a>;
      v *= mat; <span class="comment">//apply the rotation</span>
</pre></div> <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="02fbfa24687cc574a29a8d1c0ff0a2db"></a><!-- doxytag: member="OpenBabel::matrix3x3::matrix3x3" ref="02fbfa24687cc574a29a8d1c0ff0a2db" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructs the zero-matrix. 
<p>

</div>
</div><p>
<a class="anchor" name="c0461afe3f76b83a10fe99fac330f702"></a><!-- doxytag: member="OpenBabel::matrix3x3::matrix3x3" ref="c0461afe3f76b83a10fe99fac330f702" args="(double s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructs s times the unit matrix. 
<p>

</div>
</div><p>
<a class="anchor" name="4736c0c51dc08725c39e02a84c2390ec"></a><!-- doxytag: member="OpenBabel::matrix3x3::matrix3x3" ref="4736c0c51dc08725c39e02a84c2390ec" args="(vector3 row1, vector3 row2, vector3 row3)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td>
          <td class="paramname"> <em>row1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td>
          <td class="paramname"> <em>row2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&nbsp;</td>
          <td class="paramname"> <em>row3</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructs a matrix from row vectors. 
<p>

</div>
</div><p>
<a class="anchor" name="0a0be9b2cd186a15d56efdaaefa9a994"></a><!-- doxytag: member="OpenBabel::matrix3x3::matrix3x3" ref="0a0be9b2cd186a15d56efdaaefa9a994" args="(double d[3][3])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>d</em>[3][3]          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructs a matrix from a 3x3-array of doubles. 
<p>
The first index represents the row, the second index the column 
</div>
</div><p>
<a class="anchor" name="6d3758cd834f7dd0f5c0816231349cb9"></a><!-- doxytag: member="OpenBabel::matrix3x3::~matrix3x3" ref="6d3758cd834f7dd0f5c0816231349cb9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="3f648014bbd17f8090159d2d93cbe30c"></a><!-- doxytag: member="OpenBabel::matrix3x3::GetArray" ref="3f648014bbd17f8090159d2d93cbe30c" args="(double *m)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetArray           </td>
          <td>(</td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>m</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Access function. 
<p>
Writes the matrix into the 1-dimensional array m, row by row. The array must be able to hold 9 doubles, otherwise your program will segfault. 
</div>
</div><p>
<a class="anchor" name="a6e296b71371e9b9b334dca8c7f3314a"></a><!-- doxytag: member="OpenBabel::matrix3x3::operator()" ref="a6e296b71371e9b9b334dca8c7f3314a" args="(int row, int column) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double&amp; operator()           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>column</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>a constant reference to an element of the matrix. row and column must be between 0 and 2. No check is done. </dd></dl>

</div>
</div><p>
<a class="anchor" name="59c4092616c1d0ffc2c3e022350ee02d"></a><!-- doxytag: member="OpenBabel::matrix3x3::operator()" ref="59c4092616c1d0ffc2c3e022350ee02d" args="(int row, int column)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double&amp; operator()           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>column</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>a non-constant reference to an element of the matrix. row and column must be between 0 and 2. No check is done. </dd></dl>

</div>
</div><p>
<a class="anchor" name="8ef05a892601489ef84e46c0a00bcc41"></a><!-- doxytag: member="OpenBabel::matrix3x3::inverse" ref="8ef05a892601489ef84e46c0a00bcc41" args="(void) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> inverse           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculates the inverse of a matrix. 
<p>
This method checks if the absolute value of the determinant is smaller than 1e-6. If so, nothing is done and an exception is thrown. Otherwise, the inverse matrix is calculated and returned. *this is not changed.<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>If the determinant is close to zero, but not == 0.0, this method may behave in unexpected ways and return almost random results; details may depend on your particular floating point implementation. The use of this method is therefore highly discouraged, unless you are certain that the determinant is in a reasonable range, away from 0.0 (Stefan Kebekus) </dd></dl>

</div>
</div><p>
<a class="anchor" name="4c534cebd13efb9ac42d39722d85602c"></a><!-- doxytag: member="OpenBabel::matrix3x3::transpose" ref="4c534cebd13efb9ac42d39722d85602c" args="(void) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> transpose           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculates the transpose of a matrix. 
<p>

</div>
</div><p>
<a class="anchor" name="ff25b8b63c0aec5f2c83d0cb70ae55cb"></a><!-- doxytag: member="OpenBabel::matrix3x3::randomRotation" ref="ff25b8b63c0aec5f2c83d0cb70ae55cb" args="(OBRandom &amp;rnd)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void randomRotation           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>rnd</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Generates a matrix for a random rotation. 
<p>
The axis of the rotation will be uniformly distributed on the unit sphere and the angle will be uniformly distributed in the interval 0..360 degrees. 
</div>
</div><p>
<a class="anchor" name="390024ffecb7973f5de3194dc2f606f5"></a><!-- doxytag: member="OpenBabel::matrix3x3::determinant" ref="390024ffecb7973f5de3194dc2f606f5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double determinant           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>The determinant of the matrix </dd></dl>

<p>Referenced by <a class="el" href="chiral_8cpp-source.shtml#l00327">OpenBabel::signed_volume()</a>.</p>

</div>
</div><p>
<a class="anchor" name="17ea6953708a00e57d99aaf52495f62a"></a><!-- doxytag: member="OpenBabel::matrix3x3::isSymmetric" ref="17ea6953708a00e57d99aaf52495f62a" args="(void) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isSymmetric           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks if a matrix is symmetric. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>False if there are indices i,j such that fabs(*this[i][j]-*this[j][i]) &gt; 1e-6. Otherwise, it returns true. </dd></dl>

<p>Referenced by <a class="el" href="matrix3x3_8cpp-source.shtml#l00428">matrix3x3::findEigenvectorsIfSymmetric()</a>.</p>

</div>
</div><p>
<a class="anchor" name="e8249851867ad7b2795614ee2b4f0078"></a><!-- doxytag: member="OpenBabel::matrix3x3::isOrthogonal" ref="e8249851867ad7b2795614ee2b4f0078" args="(void) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isOrthogonal           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks if a matrix is orthogonal. 
<p>
This method checks if a matrix is orthogonal, i.e. if all column vectors are normalized and are mutually orthogonal. A matrix is orthogonal if, and only if the transformation it describes is orthonormal. An orthonormal transformation is a transformation that preserves length and angle.<p>
The check is performed using the method <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a95d7e7bec24e89ad8ff73a47607b1f8">isUnitMatrix()</a> to check if <div class="fragment"><pre class="fragment">        *<span class="keyword">this</span> * <a class="code" href="classOpenBabel_1_1matrix3x3.shtml#4c534cebd13efb9ac42d39722d85602c" title="Calculates the transpose of a matrix.">transpose</a>()
</pre></div> is a unit matrix. The criterion is therefore numerically quite tight. 
</div>
</div><p>
<a class="anchor" name="f6fefdc3ee1db949d064e63eabb5fdaa"></a><!-- doxytag: member="OpenBabel::matrix3x3::isDiagonal" ref="f6fefdc3ee1db949d064e63eabb5fdaa" args="(void) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isDiagonal           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>if a matrix is diagonal</dd></dl>
This method returns true if and only if the matrix is (approximately) a diagonal matrix. The precision used by this function is 1e-6. 
<p>Referenced by <a class="el" href="matrix3x3_8cpp-source.shtml#l00384">matrix3x3::isUnitMatrix()</a>.</p>

</div>
</div><p>
<a class="anchor" name="a95d7e7bec24e89ad8ff73a47607b1f8"></a><!-- doxytag: member="OpenBabel::matrix3x3::isUnitMatrix" ref="a95d7e7bec24e89ad8ff73a47607b1f8" args="(void) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isUnitMatrix           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>if a matrix is the unit matrix</dd></dl>
This method returns true if and only if the matrix is (approximately) equal to the identity matrix. The precision used by this function is 1e-6. 
</div>
</div><p>
<a class="anchor" name="0aba6c9a55fa03689378594bb58f1ff1"></a><!-- doxytag: member="OpenBabel::matrix3x3::Get" ref="0aba6c9a55fa03689378594bb58f1ff1" args="(int row, int column) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Get           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>column</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Access function. 
<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>row or column are not in the range 0..2, zero is returned ! </dd></dl>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000047">Deprecated:</a></b></dt><dd>use the constant operator() instead </dd></dl>

<p>Referenced by <a class="el" href="matrix3x3_8cpp-source.shtml#l00280">vector3::operator*=()</a>.</p>

</div>
</div><p>
<a class="anchor" name="ae7e56afba0365c34add2d93288995ca"></a><!-- doxytag: member="OpenBabel::matrix3x3::Set" ref="ae7e56afba0365c34add2d93288995ca" args="(int row, int column, double v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Set           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>column</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>v</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Access function. 
<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>if row or column are not in the range 0..2, nothing will happen ! </dd></dl>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000048">Deprecated:</a></b></dt><dd>use the non-constant operator() instead </dd></dl>

<p>Referenced by <a class="el" href="generic_8cpp-source.shtml#l00378">OBUnitCell::GetFractionalMatrix()</a>.</p>

</div>
</div><p>
<a class="anchor" name="39efd7a5999c653b840ac4445b9f86c2"></a><!-- doxytag: member="OpenBabel::matrix3x3::SetColumn" ref="39efd7a5999c653b840ac4445b9f86c2" args="(int column, const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetColumn           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>column</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Access function. 
<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>If column is not in the range 0..2, the vector remains unchanged and an exception is thrown. </dd></dl>

<p>Referenced by <a class="el" href="matrix3x3_8cpp-source.shtml#l00109">matrix3x3::PlaneReflection()</a>.</p>

</div>
</div><p>
<a class="anchor" name="b20b033e3e502ab19ae92f55a9ef2fe2"></a><!-- doxytag: member="OpenBabel::matrix3x3::SetRow" ref="b20b033e3e502ab19ae92f55a9ef2fe2" args="(int row, const vector3 &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRow           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>row</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Access function. 
<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>If column is not in the range 0..2, the vector remains unchanged and an exception is thrown. </dd></dl>

</div>
</div><p>
<a class="anchor" name="3f43f67cedadf2e178bd338b8ec26231"></a><!-- doxytag: member="OpenBabel::matrix3x3::GetColumn" ref="3f43f67cedadf2e178bd338b8ec26231" args="(unsigned int col) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> GetColumn           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>col</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Access function. 
<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>If col is not in the range 0..2, an exception is thrown. </dd></dl>

</div>
</div><p>
<a class="anchor" name="8e10214c207950dbaec09438c4992a46"></a><!-- doxytag: member="OpenBabel::matrix3x3::GetRow" ref="8e10214c207950dbaec09438c4992a46" args="(unsigned int row) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> GetRow           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>row</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Access function. 
<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>If row is not in the range 0..2, an exception is thrown. </dd></dl>

</div>
</div><p>
<a class="anchor" name="4623ee2f3c5b2b7cc4c2efb081273f62"></a><!-- doxytag: member="OpenBabel::matrix3x3::operator*=" ref="4623ee2f3c5b2b7cc4c2efb081273f62" args="(const double &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&amp; operator*=           </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Multiplies all entries of the matrix by a scalar c. 
<p>

</div>
</div><p>
<a class="anchor" name="56c27ea39208380495f812df6b865289"></a><!-- doxytag: member="OpenBabel::matrix3x3::operator/=" ref="56c27ea39208380495f812df6b865289" args="(const double &amp;c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&amp; operator/=           </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&nbsp;</td>
          <td class="paramname"> <em>c</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Divides all entries of the matrix by a scalar c. 
<p>

</div>
</div><p>
<a class="anchor" name="99b052f9d6eaea593f20a032679bcc55"></a><!-- doxytag: member="OpenBabel::matrix3x3::SetupRotMat" ref="99b052f9d6eaea593f20a032679bcc55" args="(double x, double y, double z)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetupRotMat           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>z</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate a rotation matrix for rotation about the x, y, and z axes by the angles specified (in degrees). 
<p>

<p>Referenced by <a class="el" href="builder_8cpp-source.shtml#l00271">OBBuilder::Connect()</a>.</p>

</div>
</div><p>
<a class="anchor" name="031b9641f48f7639949cad29a6a99109"></a><!-- doxytag: member="OpenBabel::matrix3x3::PlaneReflection" ref="031b9641f48f7639949cad29a6a99109" args="(const vector3 &amp;norm)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PlaneReflection           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>norm</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculates a matrix that represents reflection on a plane. 
<p>
Replaces *this with a matrix that represents reflection on the plane through 0 which is given by the normal vector norm.<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>If the vector norm has length zero, this method will generate the 0-matrix. If the length of the axis is close to zero, but not == 0.0, this method may behave in unexpected ways and return almost random results; details may depend on your particular floating point implementation. The use of this method is therefore highly discouraged, unless you are certain that the length is in a reasonable range, away from 0.0 (Stefan Kebekus)</dd></dl>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000056">Deprecated:</a></b></dt><dd>This method will probably replaced by a safer algorithm in the future.</dd></dl>
<dl compact><dt><b><a class="el" href="todo.shtml#_todo000008">Todo:</a></b></dt><dd>Replace this method with a more fool-proof version.</dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>norm</em>&nbsp;</td><td>specifies the normal to the plane </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="e2b83cb7b73473405cd57594c88f541c"></a><!-- doxytag: member="OpenBabel::matrix3x3::RotAboutAxisByAngle" ref="e2b83cb7b73473405cd57594c88f541c" args="(const vector3 &amp;axis, const double angle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RotAboutAxisByAngle           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&nbsp;</td>
          <td class="paramname"> <em>angle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculates a rotation matrix, rotating around the specified axis by the specified angle (in degrees). 
<p>
Replaces *this with a matrix that represents rotation about the axis by a an angle.<p>
<dl class="warning" compact><dt><b>Warning:</b></dt><dd>If the vector axis has length zero, this method will generate the 0-matrix. If the length of the axis is close to zero, but not == 0.0, this method may behave in unexpected ways and return almost random results; details may depend on your particular floating point implementation. The use of this method is therefore highly discouraged, unless you are certain that the length is in a reasonable range, away from 0.0 (Stefan Kebekus)</dd></dl>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000057">Deprecated:</a></b></dt><dd>This method will probably replaced by a safer algorithm in the future.</dd></dl>
<dl compact><dt><b><a class="el" href="todo.shtml#_todo000009">Todo:</a></b></dt><dd>Replace this method with a more fool-proof version.</dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>v</em>&nbsp;</td><td>specifies the axis of the rotation </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>angle</em>&nbsp;</td><td>angle in degrees (0..360) </td></tr>
  </table>
</dl>

<p>Referenced by <a class="el" href="mol_8cpp-source.shtml#l02756">OBMol::Align()</a>, <a class="el" href="atom_8cpp-source.shtml#l01113">OBAtom::GetNewBondVector()</a>, <a class="el" href="matrix3x3_8cpp-source.shtml#l00054">matrix3x3::randomRotation()</a>, and <a class="el" href="atom_8cpp-source.shtml#l01335">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div><p>
<a class="anchor" name="eae6ec0ae0d036137c03275be0010878"></a><!-- doxytag: member="OpenBabel::matrix3x3::FillOrth" ref="eae6ec0ae0d036137c03275be0010878" args="(double alpha, double beta, double gamma, double a, double b, double c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FillOrth           </td>
          <td>(</td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>alpha</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>beta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>gamma</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&nbsp;</td>
          <td class="paramname"> <em>c</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Calculate an orthogonalisation matrix for a unit cell specified by the parameters alpha, beta, gamma, a, b, c where alpha, beta, and gamma are the cell angles (in degrees) and a, b, and c are the cell vector lengths Used by <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml" title="Used for storing information about periodic boundary conditions with conversion to/from...">OBUnitCell</a> 
<p>Referenced by <a class="el" href="generic_8cpp-source.shtml#l00365">OBUnitCell::GetOrthoMatrix()</a>.</p>

</div>
</div><p>
<a class="anchor" name="5f09543ae4cdaf031d0adaa0480f2b8c"></a><!-- doxytag: member="OpenBabel::matrix3x3::findEigenvectorsIfSymmetric" ref="5f09543ae4cdaf031d0adaa0480f2b8c" args="(vector3 &amp;eigenvals) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> findEigenvectorsIfSymmetric           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>eigenvals</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Find the eigenvalues and -vectors of a symmetric matrix. 
<p>
This method employs the static method <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#eb205a916fa467164e6bdebc62d22e7a" title="Eigenvalue calculation.">matrix3x3::jacobi</a>(...) to find the eigenvalues and eigenvectors of a symmetric matrix. On entry it is checked if the matrix really is symmetric: if <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#17ea6953708a00e57d99aaf52495f62a" title="Checks if a matrix is symmetric.">isSymmetric()</a> returns 'false', an <a class="el" href="classOpenBabel_1_1OBError.shtml" title="Customizable error handling and logging -- store a message, including the method...">OBError</a> is thrown.<p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>The jacobi algorithm is should work great for all symmetric 3x3 matrices. If you need to find the eigenvectors of a non-symmetric matrix, you might want to resort to the sophisticated routines of LAPACK.</dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>eigenvals</em>&nbsp;</td><td>a reference to a <a class="el" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> where the eigenvalues will be stored. The eigenvalues are ordered so that eigenvals[0] &lt;= eigenvals[1] &lt;= eigenvals[2].</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>an orthogonal matrix whose ith column is an eigenvector for the eigenvalue eigenvals[i]. Here 'orthogonal' means that all eigenvectors have length one and are mutually orthogonal. The ith eigenvector can thus be conveniently accessed by the <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#3f43f67cedadf2e178bd338b8ec26231" title="Access function.">GetColumn()</a> method, as in the following example. <div class="fragment"><pre class="fragment">    <span class="comment">// Calculate eigenvectors and -values</span>
    vector3 eigenvals;
    <a class="code" href="classOpenBabel_1_1matrix3x3.shtml#02fbfa24687cc574a29a8d1c0ff0a2db" title="Constructs the zero-matrix.">matrix3x3</a> eigenmatrix = somematrix.findEigenvectorsIfSymmetric(eigenvals);
  
    <span class="comment">// Print the 2nd eigenvector</span>
    cout &lt;&lt; eigenmatrix.GetColumn(1) &lt;&lt; endl;
</pre></div> With these conventions, a matrix is diagonalized in the following way: <div class="fragment"><pre class="fragment">    <span class="comment">// Diagonalize the matrix</span>
    <a class="code" href="classOpenBabel_1_1matrix3x3.shtml#02fbfa24687cc574a29a8d1c0ff0a2db" title="Constructs the zero-matrix.">matrix3x3</a> diagonalMatrix = eigenmatrix.inverse() * somematrix * eigenmatrix;
</pre></div> </dd></dl>

</div>
</div><p>
<a class="anchor" name="eb205a916fa467164e6bdebc62d22e7a"></a><!-- doxytag: member="OpenBabel::matrix3x3::jacobi" ref="eb205a916fa467164e6bdebc62d22e7a" args="(unsigned int n, double *a, double *d, double *v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void jacobi           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&nbsp;</td>
          <td class="paramname"> <em>v</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Eigenvalue calculation. 
<p>
This static function computes the eigenvalues and eigenvectors of a SYMMETRIC nxn matrix. This method is used internally by <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code.">OpenBabel</a>, but may be useful as a general eigenvalue finder.<p>
The algorithm uses Jacobi transformations. It is described e.g. in Wilkinson, Reinsch "Handbook for automatic computation, Volume II: Linear Algebra", part II, contribution II/1. The implementation is also similar to the implementation in this book. This method is adequate to solve the eigenproblem for small matrices, of size perhaps up to 10x10. For bigger problems, you might want to resort to the sophisticated routines of LAPACK.<p>
<dl class="note" compact><dt><b>Note:</b></dt><dd>If you plan to find the eigenvalues of a symmetric 3x3 matrix, you will probably prefer to use the more convenient method <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#5f09543ae4cdaf031d0adaa0480f2b8c" title="Find the eigenvalues and -vectors of a symmetric matrix.">findEigenvectorsIfSymmetric()</a></dd></dl>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>n</em>&nbsp;</td><td>the size of the matrix that should be diagonalized</td></tr>
    <tr><td valign="top"></td><td valign="top"><em>a</em>&nbsp;</td><td>array of size n^2 which holds the symmetric matrix whose eigenvectors are to be computed. The convention is that the entry in row r and column c is addressed as a[n*r+c] where, of course, 0 &lt;= r &lt; n and 0 &lt;= c &lt; n. There is no check that the matrix is actually symmetric. If it is not, the behaviour of this function is undefined. On return, the matrix is overwritten with junk.</td></tr>
    <tr><td valign="top"></td><td valign="top"><em>d</em>&nbsp;</td><td>pointer to a field of at least n doubles which will be overwritten. On return of this function, the entries d[0]..d[n-1] will contain the eigenvalues of the matrix.</td></tr>
    <tr><td valign="top"></td><td valign="top"><em>v</em>&nbsp;</td><td>an array of size n^2 where the eigenvectors will be stored. On return, the columns of this matrix will contain the eigenvectors. The eigenvectors are normalized and mutually orthogonal. </td></tr>
  </table>
</dl>

<p>Referenced by <a class="el" href="forcefield_8cpp-source.shtml#l01670">OBForceField::DistanceGeometry()</a>, <a class="el" href="matrix3x3_8cpp-source.shtml#l00428">matrix3x3::findEigenvectorsIfSymmetric()</a>, and <a class="el" href="obutil_8cpp-source.shtml#l00661">OpenBabel::qtrfit()</a>.</p>

</div>
</div><p>
<hr><h2>Friends And Related Function Documentation</h2>
<a class="anchor" name="fa46ab021c49dc30bac7116157793dff"></a><!-- doxytag: member="OpenBabel::matrix3x3::operator*" ref="fa46ab021c49dc30bac7116157793dff" args="(const matrix3x3 &amp;, const vector3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> operator*           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>v</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Matrix-vector multiplication. 
<p>
Calculates the product m*v of the matrix m and the column vector represented by v 
</div>
</div><p>
<a class="anchor" name="35fd56b260acc82508c9bf7e9a710125"></a><!-- doxytag: member="OpenBabel::matrix3x3::operator*" ref="35fd56b260acc82508c9bf7e9a710125" args="(const matrix3x3 &amp;, const matrix3x3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> operator*           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>B</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Matrix-matrix multiplication. 
<p>

</div>
</div><p>
<a class="anchor" name="0f3e65b4976b2ac7ce2a02b778e5cc71"></a><!-- doxytag: member="OpenBabel::matrix3x3::operator&lt;&lt;" ref="0f3e65b4976b2ac7ce2a02b778e5cc71" args="(std::ostream &amp;, const matrix3x3 &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; operator&lt;&lt;           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>co</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>m</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Output a text representation of a matrix. 
<p>
Print a text representation of the matrix in the standardized form: [ a, b, c ] <br>
 [ d, e, f ] <br>
 [ g, h, i ] <br>
 where the letters represent the appropriate entries in the matrix. Uses the standard output format for the individual entries, separated by ", " for each column, and [ ] indicating each row. 
</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="matrix3x3_8h-source.shtml">matrix3x3.h</a><li><a class="el" href="matrix3x3_8cpp.shtml">matrix3x3.cpp</a></ul>
</div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:41 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
