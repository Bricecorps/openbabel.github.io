<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: grid.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>grid.h</h1><a href="grid_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">grid.h - Handle grids of values.</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment">Some Portions Copyright (C) 2008 by Marcus D. Hanwell</span>
<a name="l00007"></a>00007 <span class="comment"></span>
<a name="l00008"></a>00008 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00009"></a>00009 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00010"></a>00010 <span class="comment"></span>
<a name="l00011"></a>00011 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00012"></a>00012 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00013"></a>00013 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00014"></a>00014 <span class="comment"></span>
<a name="l00015"></a>00015 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00016"></a>00016 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00017"></a>00017 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00018"></a>00018 <span class="comment">GNU General Public License for more details.</span>
<a name="l00019"></a>00019 <span class="comment">***********************************************************************/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef OB_GRID_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define OB_GRID_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;<a class="code" href="vector3_8h.shtml" title="Handle 3D coordinates.">openbabel/math/vector3.h</a>&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;iosfwd&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="keyword">namespace </span>OpenBabel
<a name="l00033"></a>00033 {
<a name="l00034"></a>00034 
<a name="l00035"></a>00035   <span class="comment">// Forward declaration</span>
<a name="l00036"></a>00036   <span class="keyword">class </span>OBMol;
<a name="l00037"></a>00037 
<a name="l00040"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml">00040</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBGrid.shtml" title="A base grid class.">OBGrid</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>
<a name="l00041"></a>00041   {
<a name="l00042"></a>00042   <span class="keyword">protected</span>:
<a name="l00043"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#d2367ec6a3d166e433fec916c5826aa1">00043</a>     <span class="keywordtype">double</span> _xmin,_xmax,_ymin,_ymax,_zmin,_zmax; 
<a name="l00044"></a>00044 
<a name="l00045"></a>00045   <span class="keyword">public</span>:
<a name="l00046"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#907e18c9891f0d2bf379c3f9be6b6dc2">00046</a>     <a class="code" href="classOpenBabel_1_1OBGrid.shtml" title="A base grid class.">OBGrid</a>() {}
<a name="l00047"></a>00047 
<a name="l00051"></a>00051     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Init(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;box);
<a name="l00052"></a>00052 
<a name="l00054"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#1f6551dd07c7ac678e87490d5670aa7a">00054</a>     <span class="keywordtype">double</span> GetXmin()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_xmin);    }
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#e8fcb907c909f575ef72e132e7b18ef8">00056</a>     <span class="keywordtype">double</span> GetYmin()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_ymin);    }
<a name="l00058"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#5de60e41b3a8ae923af4acf34a5dd8b3">00058</a>     <span class="keywordtype">double</span> GetZmin()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_zmin);    }
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#a3e98e4e3d520f6c796c89976cb48677">00060</a>     <span class="keywordtype">double</span> GetXmax()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_xmax);    }
<a name="l00062"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#df7089774e10eac6341d3662ece9b7ea">00062</a>     <span class="keywordtype">double</span> GetYmax()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_ymax);    }
<a name="l00064"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#e1dab64d37bb4f2fee3dd9dbbb2dd3fd">00064</a>     <span class="keywordtype">double</span> GetZmax()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_zmax);    }
<a name="l00065"></a>00065 
<a name="l00067"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#2a499643ad2be70afaa1607b4affb310">00067</a>     <span class="keywordtype">bool</span> PointIsInBox(<span class="keywordtype">double</span> x,<span class="keywordtype">double</span> y,<span class="keywordtype">double</span> z)
<a name="l00068"></a>00068     {
<a name="l00069"></a>00069       <span class="keywordflow">return</span> (x&gt;=_xmin) &amp;&amp; (x&lt;=_xmax) &amp;&amp;
<a name="l00070"></a>00070         (y&gt;=_ymin) &amp;&amp; (y&lt;=_ymax) &amp;&amp;
<a name="l00071"></a>00071         (z&gt;=_zmin) &amp;&amp; (z&lt;=_zmax);
<a name="l00072"></a>00072     }
<a name="l00074"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#d557d62926d0bc4cea092baba4466906">00074</a>     <span class="keywordtype">bool</span> PointIsInBox(<span class="keywordtype">double</span> *c)
<a name="l00075"></a>00075     {
<a name="l00076"></a>00076       <span class="keywordflow">return</span> (c[0]&gt;=_xmin) &amp;&amp; (c[0]&lt;=_xmax) &amp;&amp;
<a name="l00077"></a>00077         (c[1]&gt;=_ymin) &amp;&amp; (c[1]&lt;=_ymax) &amp;&amp;
<a name="l00078"></a>00078         (c[2]&gt;=_zmin) &amp;&amp; (c[2]&lt;=_zmax);
<a name="l00079"></a>00079     }
<a name="l00080"></a>00080 
<a name="l00082"></a><a class="code" href="classOpenBabel_1_1OBGrid.shtml#4f56880aa1ad845fbc6c0c7a4ce45d3b">00082</a>     <span class="keywordtype">bool</span> PointIsInBox(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v)
<a name="l00083"></a>00083     {
<a name="l00084"></a>00084       <span class="keywordflow">return</span> (v.<a class="code" href="classOpenBabel_1_1vector3.shtml#bef0821fe31ac502f2d11718aef50ae3" title="Access function to get the x-coordinate of the vector.">x</a>() &gt;= _xmin) &amp;&amp; (v.<a class="code" href="classOpenBabel_1_1vector3.shtml#bef0821fe31ac502f2d11718aef50ae3" title="Access function to get the x-coordinate of the vector.">x</a>() &lt;=_xmax) &amp;&amp;
<a name="l00085"></a>00085       (v.<a class="code" href="classOpenBabel_1_1vector3.shtml#60e843e6f8ec7cf8709da2954bd2c202" title="Access function to get the y-coordinate of the vector.">y</a>()&gt;=_ymin) &amp;&amp; (v.<a class="code" href="classOpenBabel_1_1vector3.shtml#60e843e6f8ec7cf8709da2954bd2c202" title="Access function to get the y-coordinate of the vector.">y</a>()&lt;=_ymax) &amp;&amp;
<a name="l00086"></a>00086       (v.<a class="code" href="classOpenBabel_1_1vector3.shtml#c6512d9d5bc60ad02143f34ba62e010a" title="Access function to get the z-coordinate of the vector.">z</a>()&gt;=_zmin) &amp;&amp; (v.<a class="code" href="classOpenBabel_1_1vector3.shtml#c6512d9d5bc60ad02143f34ba62e010a" title="Access function to get the z-coordinate of the vector.">z</a>()&lt;=_zmax);
<a name="l00087"></a>00087     }
<a name="l00088"></a>00088   };
<a name="l00089"></a>00089 
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml">00097</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml" title="Handle double precision floating point 3D grids (e.g., charge density around an OBMol)...">OBFloatGrid</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGrid.shtml" title="A base grid class.">OBGrid</a>
<a name="l00098"></a>00098   {
<a name="l00099"></a>00099   <span class="keyword">protected</span>:
<a name="l00100"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#7d7a76b9f2cf24040d65d2387f01ebd1">00100</a>     std::vector&lt;double&gt; _values;   
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#87d1e1b6b09eecaec2670dd0f8caa6a1">00101</a>     <span class="keywordtype">int</span>   *_ival;             
<a name="l00102"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#63f7b06cde4a057a2c76f8af0ff28e91">00102</a>     <span class="keywordtype">double</span> _midz,_midx,_midy; 
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#a4d2282bc8cc51ffa66eb6c17aae17ee">00103</a>     <span class="keywordtype">int</span> _ydim,_xdim,_zdim;    
<a name="l00104"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#382cc46cd19ec2a1e726d9c8191cedea">00104</a>     <span class="keywordtype">double</span> _spacing,_inv_spa; 
<a name="l00105"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#314a0d1d51e74f040278d0de06f075b5">00105</a>     <span class="keywordtype">double</span> _halfSpace;        
<a name="l00106"></a>00106 
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#0d3a8c489526216952d17734085e7287">00107</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> _xAxis, _yAxis, _zAxis;
<a name="l00108"></a>00108 
<a name="l00109"></a>00109   <span class="keyword">public</span>:
<a name="l00110"></a>00110 
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#7ddbf2110b572079e0dee5def5b97cf9">00111</a>     <a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml" title="Handle double precision floating point 3D grids (e.g., charge density around an OBMol)...">OBFloatGrid</a>() : _ival(NULL), _halfSpace(0.0) {}
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#d84f091329edc731ab0fb4c53640923b">00112</a>     ~<a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml" title="Handle double precision floating point 3D grids (e.g., charge density around an OBMol)...">OBFloatGrid</a>()
<a name="l00113"></a>00113     {
<a name="l00114"></a>00114       <span class="keywordflow">if</span> (_ival) <span class="keyword">delete</span> [] _ival;
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116 
<a name="l00119"></a>00119     <span class="keywordtype">void</span> Init(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;box,<span class="keywordtype">double</span> spacing, <span class="keywordtype">double</span> pad=0.0);
<a name="l00120"></a>00120 
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#8121470b4aa37e344630ffb3c8104cc0">00122</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetMin() { <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>(_xmin, _ymin, _zmin); }
<a name="l00123"></a>00123 
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#b3d065904c33ecf6eaae0199fe6d0592">00127</a>     <span class="keywordtype">void</span> GetMin(<span class="keywordtype">double</span> *a)
<a name="l00128"></a>00128     {
<a name="l00129"></a>00129       a[0]=_xmin;
<a name="l00130"></a>00130       a[1]=_ymin;
<a name="l00131"></a>00131       a[2]=_zmin;
<a name="l00132"></a>00132     }
<a name="l00133"></a>00133 
<a name="l00135"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#dfbe5b67160cd2a39b96b48ef6a5ce20">00135</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetMax() { <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>(_xmax, _ymax, _zmax); }
<a name="l00136"></a>00136 
<a name="l00140"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#1aa43bea8911cf7665f6e2fd151b609c">00140</a>     <span class="keywordtype">void</span> GetMax(<span class="keywordtype">double</span> *a)
<a name="l00141"></a>00141     {
<a name="l00142"></a>00142       a[0]=_xmax;
<a name="l00143"></a>00143       a[1]=_ymax;
<a name="l00144"></a>00144       a[2]=_zmax;
<a name="l00145"></a>00145     }
<a name="l00146"></a>00146 
<a name="l00148"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#12a4638e627471ba4f9d2ec8837dff0d">00148</a>     <span class="keywordtype">double</span> GetSpacing()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_spacing); }
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#78f75c8108f8539c255711029b37cedc">00152</a>     <span class="keywordtype">void</span> GetSpacing(<span class="keywordtype">double</span> &amp;s)
<a name="l00153"></a>00153     {
<a name="l00154"></a>00154       s=_spacing;
<a name="l00155"></a>00155     }
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#815a893513d9333dffce060b37d413cf">00157</a>     <span class="keywordtype">double</span> GetScale()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span>(_inv_spa); }
<a name="l00159"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#59381fddeab9394eb1e6f881bc5bcfde">00159</a>     <span class="keywordtype">double</span> GetHalfSpace()<span class="keyword"> const </span>{<span class="keywordflow">return</span>(_halfSpace);}
<a name="l00161"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#2d1899945af07ee0874f426dfa907301">00161</a>     <span class="keywordtype">int</span> GetXdim()<span class="keyword"> const       </span>{ <span class="keywordflow">return</span>(_xdim);    }
<a name="l00163"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#f06d1abed456dfc5ae6df717bfdfd119">00163</a>     <span class="keywordtype">int</span> GetYdim()<span class="keyword"> const       </span>{ <span class="keywordflow">return</span>(_ydim);    }
<a name="l00165"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#48f46d73fcb9f58a8fe51296a9b223df">00165</a>     <span class="keywordtype">int</span> GetZdim()<span class="keyword"> const       </span>{ <span class="keywordflow">return</span>(_zdim);    }
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#6e6665768ad3b8fc18276c6517c0b03d">00169</a>     <span class="keywordtype">void</span> GetDim(<span class="keywordtype">int</span> *a)
<a name="l00170"></a>00170     {
<a name="l00171"></a>00171       a[0]=_xdim;
<a name="l00172"></a>00172       a[1]=_ydim;
<a name="l00173"></a>00173       a[2]=_zdim;
<a name="l00174"></a>00174     }
<a name="l00175"></a>00175 
<a name="l00177"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#ccffd942b323dd88aebc6fb6c20e1e18">00177</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetMidpointVector()
<a name="l00178"></a>00178     {
<a name="l00179"></a>00179       <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> v;
<a name="l00180"></a>00180       v.<a class="code" href="classOpenBabel_1_1vector3.shtml#685349dbc9e2d99a19616763811cbfba" title="Set x,y and z-component of a vector.">Set</a>(_midx,_midy,_midz);
<a name="l00181"></a>00181       <span class="keywordflow">return</span>(v);
<a name="l00182"></a>00182     }
<a name="l00183"></a>00183 
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#664e46425ebb4de07d1d3d44eced9fd7">00185</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetXAxis()<span class="keyword"> const</span>
<a name="l00186"></a>00186 <span class="keyword">    </span>{
<a name="l00187"></a>00187       <span class="keywordflow">return</span> _xAxis;
<a name="l00188"></a>00188     }
<a name="l00189"></a>00189 
<a name="l00191"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#f7bce82f6dfeb2b4f04f243e23e74dca">00191</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetYAxis()<span class="keyword"> const</span>
<a name="l00192"></a>00192 <span class="keyword">    </span>{
<a name="l00193"></a>00193       <span class="keywordflow">return</span> _yAxis;
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195 
<a name="l00197"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#299ca4b8330c823e4c771888b09ac5ea">00197</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> GetZAxis()<span class="keyword"> const</span>
<a name="l00198"></a>00198 <span class="keyword">    </span>{
<a name="l00199"></a>00199       <span class="keywordflow">return</span> _zAxis;
<a name="l00200"></a>00200     }
<a name="l00201"></a>00201 
<a name="l00203"></a>00203     <span class="keywordtype">void</span> SetNumberOfPoints(<span class="keywordtype">int</span> nx, <span class="keywordtype">int</span> ny, <span class="keywordtype">int</span> nz);
<a name="l00204"></a>00204 
<a name="l00206"></a>00206     <span class="keywordtype">void</span> SetXAxis(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>);
<a name="l00208"></a>00208     <span class="keywordtype">void</span> SetYAxis(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>);
<a name="l00210"></a>00210     <span class="keywordtype">void</span> SetZAxis(<a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>);
<a name="l00211"></a>00211 
<a name="l00216"></a>00216     <span class="keywordtype">void</span> SetLimits(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>&amp; origin, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>&amp; x, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>&amp; y,
<a name="l00217"></a>00217                    <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>&amp; z);
<a name="l00220"></a>00220     <span class="keywordtype">void</span> SetLimits(<span class="keyword">const</span> <span class="keywordtype">double</span> origin[3], <span class="keyword">const</span> <span class="keywordtype">double</span> x[3], <span class="keyword">const</span> <span class="keywordtype">double</span> y[3],
<a name="l00221"></a>00221                    <span class="keyword">const</span> <span class="keywordtype">double</span> z[3]);
<a name="l00222"></a>00222 
<a name="l00224"></a>00224     std::vector&lt;double&gt; GetDataVector();
<a name="l00228"></a>00228     <span class="keywordtype">void</span> SetVals(<span class="keyword">const</span> std::vector&lt;double&gt; &amp; vals);
<a name="l00229"></a>00229 
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#5eb7667a7f7ac9876e632c35231fc44a">00234</a>     <span class="keywordtype">double</span> *GetVals()    {        <span class="keywordflow">return</span>(&amp;_values[0]);    }
<a name="l00235"></a>00235 
<a name="l00237"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#c52efdf630f7f15198bf57bff1520113">00237</a>     <span class="keywordtype">double</span> GetValue(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j, <span class="keywordtype">int</span> k)
<a name="l00238"></a>00238     {
<a name="l00239"></a>00239       <span class="keywordflow">if</span> (i*_ydim*_zdim + j*_zdim + k &gt; _xdim*_ydim*_zdim)
<a name="l00240"></a>00240         <span class="keywordflow">return</span> 0.0;
<a name="l00241"></a>00241       <span class="keywordflow">else</span>
<a name="l00242"></a>00242         <span class="keywordflow">return</span> _values[i*_ydim*_zdim + j*_zdim + k];
<a name="l00243"></a>00243     }
<a name="l00244"></a>00244 
<a name="l00247"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#70b7ebc269d7a65e00d8eae51a5f01f4">00247</a>     <span class="keywordtype">void</span> SetVals(<span class="keywordtype">double</span> *ptr)
<a name="l00248"></a>00248     {
<a name="l00249"></a>00249      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; _xdim*_ydim*_zdim; ++i)
<a name="l00250"></a>00250        _values[i] = ptr[i];
<a name="l00251"></a>00251     }
<a name="l00252"></a>00252 
<a name="l00254"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#8e87e5ca8491e61def25764da4fdb46d">00254</a>     <span class="keywordtype">bool</span> SetValue(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j, <span class="keywordtype">int</span> k, <span class="keywordtype">double</span> val)
<a name="l00255"></a>00255     {
<a name="l00256"></a>00256       <span class="keywordflow">if</span> (i*_ydim*_zdim + j*_zdim + k &gt; _xdim*_ydim*_zdim)
<a name="l00257"></a>00257         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00258"></a>00258 
<a name="l00259"></a>00259       _values[i*_ydim*_zdim + j*_zdim + k] = val;
<a name="l00260"></a>00260       <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00261"></a>00261     }
<a name="l00262"></a>00262 
<a name="l00264"></a><a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml#2a6903cb1be80ac1055925f1074b75a7">00264</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> Center()
<a name="l00265"></a>00265     {
<a name="l00266"></a>00266       <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a>(_midx,_midy,_midz);
<a name="l00267"></a>00267     }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269     <span class="keyword">friend</span> std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#70c653ee69fdbd27f77d430e4aed3cad" title="Prints a representation of the vector as a row vector of the form &amp;quot;&amp;lt;0.1,1...">operator&lt;&lt; </a>( std::ostream&amp;, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml" title="Handle double precision floating point 3D grids (e.g., charge density around an OBMol)...">OBFloatGrid</a>&amp; ) ;
<a name="l00270"></a>00270     <span class="keyword">friend</span> std::istream&amp; <a class="code" href="namespaceOpenBabel.shtml#54358a339fc06df028bb5fbe403b0032">operator&gt;&gt; </a>( std::istream&amp;,<a class="code" href="classOpenBabel_1_1OBFloatGrid.shtml" title="Handle double precision floating point 3D grids (e.g., charge density around an OBMol)...">OBFloatGrid</a>&amp; ) ;
<a name="l00271"></a>00271 
<a name="l00273"></a>00273     <span class="keywordtype">double</span> Inject(<span class="keywordtype">double</span> x,<span class="keywordtype">double</span> y,<span class="keywordtype">double</span> z);
<a name="l00274"></a>00274     <span class="keywordtype">void</span> IndexToCoords(<span class="keywordtype">int</span> idx, <span class="keywordtype">double</span> &amp;x, <span class="keywordtype">double</span> &amp;y, <span class="keywordtype">double</span> &amp;z);
<a name="l00275"></a>00275     <span class="keywordtype">void</span> CoordsToIndex(<span class="keywordtype">int</span>*,<span class="keywordtype">double</span>*);
<a name="l00276"></a>00276     <span class="keywordtype">int</span> CoordsToIndex(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z);
<a name="l00278"></a>00278     <span class="keywordtype">double</span> Interpolate(<span class="keywordtype">double</span>,<span class="keywordtype">double</span>,<span class="keywordtype">double</span>);
<a name="l00280"></a>00280     <span class="keywordtype">double</span> InterpolateDerivatives(<span class="keywordtype">double</span>,<span class="keywordtype">double</span>,<span class="keywordtype">double</span>,<span class="keywordtype">double</span> *derivatives);
<a name="l00281"></a>00281   };
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 <span class="preprocessor">#ifndef OBPolarGrid</span>
<a name="l00284"></a><a class="code" href="grid_8h.shtml#42518804e5759469eaa8ff61664c91b0">00284</a> <span class="preprocessor"></span><span class="preprocessor">#define OBPolarGrid 0x01 </span><span class="comment">/* polar interactions? */</span>
<a name="l00285"></a>00285 <span class="preprocessor">#endif //OBPolarGrid</span>
<a name="l00286"></a>00286 <span class="preprocessor"></span>
<a name="l00287"></a>00287 <span class="preprocessor">#ifndef OBLipoGrid</span>
<a name="l00288"></a><a class="code" href="grid_8h.shtml#ff71b2a63281edf45027696def551dae">00288</a> <span class="preprocessor"></span><span class="preprocessor">#define OBLipoGrid 0x02 </span><span class="comment">/* lipophilicity? */</span>
<a name="l00289"></a>00289 <span class="preprocessor">#endif //OBLipoGrid</span>
<a name="l00290"></a>00290 <span class="preprocessor"></span>
<a name="l00294"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml">00294</a>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBProxGrid.shtml" title="A grid for determining the proximity of a given point to atoms in an OBMol.">OBProxGrid</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGrid.shtml" title="A base grid class.">OBGrid</a>
<a name="l00295"></a>00295   {
<a name="l00296"></a>00296   <span class="keyword">protected</span>:
<a name="l00297"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#82f62033e7d83304ab2da3418f6be612">00297</a>     <span class="keywordtype">int</span> _gridtype;
<a name="l00298"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#76fe34283476439a274c9a7f099aeaae">00298</a>     <span class="keywordtype">int</span> _nxinc,_nyinc,_nzinc,_maxinc;
<a name="l00299"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#ab8d6695bce362b593ab3dd8c021700b">00299</a>     <span class="keywordtype">double</span> _inc;
<a name="l00300"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#359e5bb0c1ace1a8d23717ae05ce804b">00300</a>     std::vector&lt;std::vector&lt;int&gt; &gt; cell;
<a name="l00301"></a>00301 
<a name="l00302"></a>00302   <span class="keyword">public</span>:
<a name="l00303"></a>00303 
<a name="l00304"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#5d96dd1fe7ca31c165a7ba46527b9f94">00304</a>     <a class="code" href="classOpenBabel_1_1OBProxGrid.shtml" title="A grid for determining the proximity of a given point to atoms in an OBMol.">OBProxGrid</a>(<span class="keywordtype">int</span> gridtype=0)
<a name="l00305"></a>00305       {
<a name="l00306"></a>00306         _gridtype=gridtype;
<a name="l00307"></a>00307       }
<a name="l00308"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#4505a0fdb45f7049f787a3af0c6507e9">00308</a>     ~<a class="code" href="classOpenBabel_1_1OBProxGrid.shtml" title="A grid for determining the proximity of a given point to atoms in an OBMol.">OBProxGrid</a>()
<a name="l00309"></a>00309       {}
<a name="l00310"></a>00310     <span class="keywordtype">void</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol,<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;box, <span class="keywordtype">double</span> cutoff,<span class="keywordtype">double</span> resolution = 0.5);
<a name="l00311"></a>00311     <span class="keywordtype">void</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol,<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;box, <span class="keywordtype">double</span> cutoff,
<a name="l00312"></a>00312                std::vector&lt;bool&gt; &amp;use,<span class="keywordtype">double</span> resolution = 0.5);
<a name="l00313"></a>00313     std::vector&lt;int&gt; *GetProxVector(<span class="keywordtype">double</span>,<span class="keywordtype">double</span>,<span class="keywordtype">double</span>);
<a name="l00314"></a>00314     std::vector&lt;int&gt; *GetProxVector(<span class="keywordtype">double</span>*);
<a name="l00315"></a>00315 
<a name="l00316"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#c83fec56359c563116ec5a845ae20e3e">00316</a>     <span class="keywordtype">bool</span> LipoGrid()
<a name="l00317"></a>00317     {
<a name="l00318"></a>00318       <span class="keywordflow">return</span>((_gridtype&amp;<a class="code" href="grid_8h.shtml#ff71b2a63281edf45027696def551dae">OBLipoGrid</a>) ? <span class="keyword">true</span> : <span class="keyword">false</span>);
<a name="l00319"></a>00319     }
<a name="l00320"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#68fd875c6e50932b149919ebf5fd486a">00320</a>     <span class="keywordtype">bool</span> PolarGrid()
<a name="l00321"></a>00321     {
<a name="l00322"></a>00322       <span class="keywordflow">return</span>(_gridtype&amp;<a class="code" href="grid_8h.shtml#42518804e5759469eaa8ff61664c91b0">OBPolarGrid</a>);
<a name="l00323"></a>00323     }
<a name="l00324"></a><a class="code" href="classOpenBabel_1_1OBProxGrid.shtml#018163ad162fcb4394833ac8c1a370e3">00324</a>     <span class="keywordtype">void</span> SetGridType(<span class="keywordtype">int</span> gridtype)
<a name="l00325"></a>00325     {
<a name="l00326"></a>00326       _gridtype = gridtype;
<a name="l00327"></a>00327     }
<a name="l00328"></a>00328   };
<a name="l00329"></a>00329 
<a name="l00330"></a>00330   <span class="comment">// scoring function used: PLP = Piecewise Linear Potential or ChemScore algorithm</span>
<a name="l00331"></a><a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f18f893264a00711081b62de694f99db4">00331</a>   <span class="keyword">typedef</span> <span class="keyword">enum</span> { <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f18f893264a00711081b62de694f99db4">Undefined</a> = -1, <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f39cfa0b4108a78db97edfb547ad3af91">PLP</a>, <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2fe5edd6b49548b767c8b120ad2640b28c">ChemScore</a> } <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f">score_t</a>;
<a name="l00332"></a>00332 
<a name="l00336"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml">00336</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml" title="A base class for scoring docking interactions between multiple molecules.">OBScoreGrid</a>
<a name="l00337"></a>00337   {
<a name="l00338"></a>00338   <span class="keyword">protected</span>:
<a name="l00339"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#04fe4b9911de166e526288d95b4ce6e1">00339</a>     <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f">score_t</a> gridtype;
<a name="l00340"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#b3f078684998b83967d507d0f453f454">00340</a>     <span class="keywordtype">bool</span> verbose;
<a name="l00341"></a>00341 
<a name="l00342"></a>00342   <span class="keyword">public</span>:
<a name="l00343"></a>00343 
<a name="l00344"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#40a24ec85daa9ac70aa74e4ca744f838">00344</a>     <span class="keywordtype">double</span> score;
<a name="l00345"></a>00345 
<a name="l00346"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#ea55db91f06422c171c3939dd5691b0a">00346</a>     <a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml" title="A base class for scoring docking interactions between multiple molecules.">OBScoreGrid</a>(<span class="keywordtype">void</span>)                 {  verbose = <span class="keyword">false</span>;      }
<a name="l00347"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#14f9977e97f604f4e2f4f09ce7d6cb1b">00347</a>     <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml" title="A base class for scoring docking interactions between multiple molecules.">OBScoreGrid</a>(<span class="keywordtype">void</span>) {}
<a name="l00348"></a>00348 
<a name="l00349"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#25911a8785e3fff79ce03278e09c74f1">00349</a>     <span class="keywordtype">void</span>    SetVerbose(<span class="keywordtype">bool</span> v)        {      verbose = v;      }
<a name="l00350"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#81dba3e924fddc20b688ca613ec2636e">00350</a>     <span class="keywordtype">void</span>    SetType(<a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f">score_t</a> type)     {      gridtype = type;  }
<a name="l00351"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#de656857818e093c4caeada3babafd21">00351</a>     <a class="code" href="namespaceOpenBabel.shtml#d5725304290545e0b3b549501893ce2f">score_t</a> GetType(<span class="keywordtype">void</span>)             {    <span class="keywordflow">return</span> gridtype;    }
<a name="l00352"></a>00352 
<a name="l00353"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#114a309251a09c82e63645b8eaa79f33">00353</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Clear(<span class="keywordtype">void</span>)        { }
<a name="l00354"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#1973f00ba0ab103d78305ba01323f18f">00354</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span>  Eval(<span class="keywordtype">double</span> *)    {       <span class="keywordflow">return</span> -1;       }
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#17b8bb0e69ea72ff166768a24f84a03f">00355</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span>  Eval(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol){<span class="keywordflow">return</span> Eval(mol.<a class="code" href="classOpenBabel_1_1OBMol.shtml#d11003513310725bd54265ef5bf004c0">GetCoordinates</a>());}
<a name="l00356"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#b885605cebc669554a96c7ebf10ed1e9">00356</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Init(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;, <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;, std::string &amp;, <span class="keywordtype">double</span>){}
<a name="l00357"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#dc3c7c5a6cb7592aff127db9b0ed320e">00357</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;) {}
<a name="l00358"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#c766aa1aa09c55ea699945dba5fecc7b">00358</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;, std::vector&lt;int&gt; &amp;){}
<a name="l00359"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#18f46d19bc8a15c0c1f2ceacd3d16e7a">00359</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Setup(std::vector&lt;int&gt; &amp;) {}
<a name="l00360"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#76941ad7910ff3d3864f3a0368836efd">00360</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span>   Config(std::string) {}
<a name="l00361"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#c66c4ef5deacb26c213a9f46a15600c7">00361</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span>   Read(std::string)   {      <span class="keywordflow">return</span> <span class="keyword">false</span>;    }
<a name="l00362"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#85fb990e29228c904dfcd80a3c9ed0dd">00362</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span>   Write(std::string)  {      <span class="keywordflow">return</span> <span class="keyword">false</span>;    }
<a name="l00363"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#1563b71f50c0192978cecaed6fc11fcb">00363</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> Center()           {      <span class="keywordflow">return</span> <a class="code" href="namespaceOpenBabel.shtml#ce51dfd98be07acf3a9c75c21e8d8af2" title="The zero vector: &amp;lt;0.0, 0.0, 0.0&amp;gt;.">VZero</a>;    }
<a name="l00364"></a><a class="code" href="classOpenBabel_1_1OBScoreGrid.shtml#f6996bda138d1b637cf36db2fab269d8">00364</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space.">vector3</a> CenterMol(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;) {      <span class="keywordflow">return</span> <a class="code" href="namespaceOpenBabel.shtml#ce51dfd98be07acf3a9c75c21e8d8af2" title="The zero vector: &amp;lt;0.0, 0.0, 0.0&amp;gt;.">VZero</a>;    }
<a name="l00365"></a>00365   };
<a name="l00366"></a>00366 
<a name="l00367"></a>00367 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00368"></a>00368 
<a name="l00369"></a>00369 <span class="preprocessor">#endif // OB_GRID_H</span>
<a name="l00370"></a>00370 <span class="preprocessor"></span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:33 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
