<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: format.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>format.h</h1><a href="format_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obconversion.cpp -  Declarations for OBFormat</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2004-2007 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2005-2007 by Geoffrey Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"></span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_FORMAT_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_FORMAT_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml" title="Simplify &amp;#39;plugin&amp;#39; classes to be discovered and/or loaded at runtime.">openbabel/plugin.h</a>&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="keyword">namespace </span>OpenBabel
<a name="l00025"></a>00025 {
<a name="l00026"></a>00026   <span class="keyword">class </span>OBBase;
<a name="l00027"></a>00027   <span class="keyword">class </span>OBConversion;
<a name="l00028"></a>00028 
<a name="l00030"></a><a class="code" href="format_8h.shtml#5d766d529e097f852406cf0c434e54e0">00030</a> <span class="preprocessor">#define NOTREADABLE     0x01</span>
<a name="l00031"></a><a class="code" href="format_8h.shtml#ec13538a29f6a7d630b3a59ccce0e03c">00031</a> <span class="preprocessor"></span><span class="preprocessor">#define READONEONLY     0x02</span>
<a name="l00032"></a><a class="code" href="format_8h.shtml#95479d1fb64936c936077e47356bf6e2">00032</a> <span class="preprocessor"></span><span class="preprocessor">#define READBINARY      0x04</span>
<a name="l00033"></a><a class="code" href="format_8h.shtml#0e12fffdb9815dc9bb44cb0635667146">00033</a> <span class="preprocessor"></span><span class="preprocessor">#define ZEROATOMSOK     0x08</span>
<a name="l00034"></a><a class="code" href="format_8h.shtml#201c57b6b8e95558ead652e391d2e157">00034</a> <span class="preprocessor"></span><span class="preprocessor">#define NOTWRITABLE     0x10</span>
<a name="l00035"></a><a class="code" href="format_8h.shtml#b95246c97f4ade91aee102631b6b8666">00035</a> <span class="preprocessor"></span><span class="preprocessor">#define WRITEONEONLY    0x20</span>
<a name="l00036"></a><a class="code" href="format_8h.shtml#655ed7589181707a2c6d18d7777cb1c6">00036</a> <span class="preprocessor"></span><span class="preprocessor">#define WRITEBINARY     0x40</span>
<a name="l00037"></a><a class="code" href="format_8h.shtml#c3cad6ca6aadd6aa9eccfc793e01b30e">00037</a> <span class="preprocessor"></span><span class="preprocessor">#define READXML         0x80</span>
<a name="l00038"></a><a class="code" href="format_8h.shtml#114620de287b71102355c29edc4b0115">00038</a> <span class="preprocessor"></span><span class="preprocessor">#define DEFAULTFORMAT   0x4000</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span>
<a name="l00041"></a>00041   <span class="comment">// class introduction in obconversion.cpp</span>
<a name="l00042"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml">00042</a> <span class="keyword">class </span>OBCONV <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime.">OBPlugin</a>
<a name="l00043"></a>00043   {
<a name="l00044"></a>00044     <span class="comment">//Macro to include functions to handle plugin operations</span>
<a name="l00045"></a>00045     <a class="code" href="plugin_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(<a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>);
<a name="l00046"></a>00046 
<a name="l00047"></a>00047   <span class="keyword">public</span>:
<a name="l00048"></a>00048 
<a name="l00050"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#11590b0840c8360ab4c3b62476d49863">00050</a>     <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>(){}
<a name="l00051"></a>00051 
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#45db88b29eb37e9dd105bf4032e421d2">00052</a>     <span class="keyword">const</span> <span class="keywordtype">char</span>* TypeID(){ <span class="keywordflow">return</span> <span class="stringliteral">"formats"</span>; }
<a name="l00053"></a>00053 
<a name="l00055"></a>00055 
<a name="l00059"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#1e309febfaef70cc3c8d98afc1540931">00059</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ReadMolecule(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00060"></a>00060       { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid input format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00061"></a>00061 
<a name="l00063"></a>00063 
<a name="l00067"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#6044ced825a2a83b7cfe7c45eea63c99">00067</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ReadChemObject(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00068"></a>00068       { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid input format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00069"></a>00069 
<a name="l00071"></a>00071 
<a name="l00076"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#663171ec9788e2d1621d374848b3888b">00076</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WriteMolecule(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00077"></a>00077       { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid output format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00078"></a>00078 
<a name="l00080"></a>00080 
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#5ea5d9623cd9594549a52e116caecaa2">00084</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WriteChemObject(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00085"></a>00085       { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid output format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00086"></a>00086 
<a name="l00088"></a>00088 
<a name="l00092"></a>00092     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description()=0;
<a name="l00093"></a>00093 
<a name="l00095"></a>00095 
<a name="l00097"></a>00097     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* TargetClassDescription();
<a name="l00098"></a>00098 
<a name="l00100"></a>00100 
<a name="l00103"></a>00103     <span class="keyword">virtual</span> <span class="keyword">const</span> std::type_info&amp; GetType();
<a name="l00104"></a>00104 
<a name="l00106"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#1d3a8785a0ad0c85b98fa3406a64d50f">00106</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* SpecificationURL() { <span class="keywordflow">return</span> <span class="stringliteral">""</span>; }
<a name="l00107"></a>00107 
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#2020a6bdb0d53d4baa73ffb57375c7e9">00109</a>     <span class="keyword">const</span> <span class="keywordtype">char</span>* GetMIMEType() { <span class="keywordflow">return</span> pMime; }
<a name="l00110"></a>00110 
<a name="l00112"></a>00112  
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#94a94537cc5ba96b1876db1b612b91a3">00116</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Flags() { <span class="keywordflow">return</span> 0;}; 
<a name="l00117"></a>00117 
<a name="l00119"></a>00119 
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#1f0ee7ba19cc62b53a7ee06fa4f91509">00121</a>     <span class="keyword">virtual</span> <span class="keywordtype">int</span> SkipObjects(<span class="keywordtype">int</span> <span class="comment">/*n*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00122"></a>00122       {
<a name="l00123"></a>00123         <span class="keywordflow">return</span> 0; <span class="comment">//shows not implemented in the format class</span>
<a name="l00124"></a>00124       };
<a name="l00125"></a>00125 
<a name="l00127"></a>00127 
<a name="l00131"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#0924b1a442d147fa036bff23a4cf04ef">00131</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* MakeNewInstance()
<a name="l00132"></a>00132       {
<a name="l00133"></a>00133         <span class="keywordflow">return</span> NULL; <span class="comment">//shows not implemented in the format class</span>
<a name="l00134"></a>00134       }
<a name="l00135"></a>00135 
<a name="l00136"></a>00136     <span class="comment">//New functions since OBFormat is derived from OBPlugin</span>
<a name="l00137"></a>00137     <span class="comment">//\brief Called from, and an alternative to, OBConversion::RegisterFormat();</span>
<a name="l00138"></a>00138     <span class="keywordtype">int</span> RegisterFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <span class="keyword">const</span> <span class="keywordtype">char</span>* MIME = NULL);
<a name="l00139"></a>00139 
<a name="l00144"></a>00144     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Display(std::string&amp; txt, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID=NULL);
<a name="l00145"></a>00145 
<a name="l00146"></a>00146     <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>* FormatFromMIME(<span class="keyword">const</span> <span class="keywordtype">char</span>* MIME);
<a name="l00147"></a>00147 
<a name="l00148"></a>00148 <span class="keyword">private</span>:
<a name="l00149"></a>00149     <span class="keyword">static</span> PluginMapType &amp;FormatsMIMEMap()
<a name="l00150"></a>00150     {
<a name="l00151"></a>00151       <span class="keyword">static</span> PluginMapType m;
<a name="l00152"></a>00152       <span class="keywordflow">return</span> m;
<a name="l00153"></a>00153     }
<a name="l00154"></a>00154 
<a name="l00155"></a>00155     <span class="keyword">const</span> <span class="keywordtype">char</span>* pMime;
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 <span class="comment">/* Functions provided by the MAKE_PLUGIN macro</span>
<a name="l00158"></a>00158 <span class="comment"></span>
<a name="l00160"></a>00160 <span class="comment">  Not currently used for formats</span>
<a name="l00161"></a>00161 <span class="comment">  OBFormat(const char* ID, bool IsDefault=false);</span>
<a name="l00162"></a>00162 <span class="comment"></span>
<a name="l00164"></a>00164 <span class="comment">  static OBFormat* FindType(const char* ID);</span>
<a name="l00165"></a>00165 <span class="comment"></span>
<a name="l00166"></a>00166 <span class="comment">*/</span>};
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 }<span class="comment">//namespace</span>
<a name="l00169"></a>00169 <span class="preprocessor">#endif</span>
<a name="l00170"></a>00170 <span class="preprocessor"></span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:33 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
