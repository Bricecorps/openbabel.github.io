<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: fingerprint.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>fingerprint.h</h1><a href="fingerprint_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">fingerprint.h - Base class for fingerprints and fast searching </span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2005 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_FINGERPRINT_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_FINGERPRINT_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml" title="Simplify &amp;#39;plugin&amp;#39; classes to be discovered and/or loaded at runtime.">openbabel/plugin.h</a>&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#ifndef OBFPRT</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#define OBFPRT</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="keyword">namespace </span>OpenBabel
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036   <span class="keyword">class </span>OBBase; <span class="comment">//Forward declaration; used only as pointer.</span>
<a name="l00037"></a>00037 
<a name="l00039"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml">00039</a> <span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime.">OBPlugin</a>
<a name="l00040"></a>00040 {
<a name="l00041"></a>00041 <span class="comment">//see end of cpp file for detailed documentation</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <a class="code" href="plugin_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(<a class="code" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a>)
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="keyword">const</span> <span class="keywordtype">char</span>* TypeID()
<a name="l00046"></a>00046         {
<a name="l00047"></a>00047                 <span class="keywordflow">return</span> <span class="stringliteral">"fingerprints"</span>;
<a name="l00048"></a>00048         }
<a name="l00049"></a>00049         
<a name="l00050"></a>00050         <span class="comment">//Rest of OBFingerprints declarations</span>
<a name="l00051"></a>00051 <span class="keyword">public</span>:
<a name="l00052"></a>00052 
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#55f9725c7e338f4d4c2d9f7a7c34f0cb">00053</a>   <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a>(){}
<a name="l00054"></a>00054 
<a name="l00056"></a>00056   <span class="keywordtype">void</span> SetBit(std::vector&lt;unsigned int&gt;&amp; vec, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n);
<a name="l00057"></a>00057 
<a name="l00059"></a>00059   <span class="keywordtype">bool</span> GetBit(<span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n);
<a name="l00060"></a>00060 
<a name="l00062"></a>00062   <span class="keywordtype">void</span> Fold(std::vector&lt;unsigned int&gt;&amp; vec, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbits); 
<a name="l00063"></a>00063 
<a name="l00065"></a>00065   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> GetFingerprint(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::vector&lt;unsigned int&gt;&amp; fp, <span class="keywordtype">int</span> nbits=0)=0;
<a name="l00066"></a>00066 
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#48c2b72feb2607662249c83e85ce665b">00068</a>   <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#48c2b72feb2607662249c83e85ce665b" title="Optional flags.">FptFlag</a>{FPT_UNIQUEBITS=1};
<a name="l00069"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#94a94537cc5ba96b1876db1b612b91a3">00069</a>   <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Flags() { <span class="keywordflow">return</span> 0;}; 
<a name="l00070"></a>00070 
<a name="l00073"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#1a7cbd70f2c24b00f1d0a6dc19e2b519">00073</a>   <span class="keyword">virtual</span> std::string DescribeBits(<span class="keyword">const</span> std::  vector&lt;unsigned int&gt; fp, <span class="keywordtype">bool</span> bSet=<span class="keyword">true</span>)
<a name="l00074"></a>00074   {
<a name="l00075"></a>00075     std::string txt(<span class="stringliteral">""</span>);
<a name="l00076"></a>00076     <span class="keywordflow">return</span> txt;
<a name="l00077"></a>00077   }
<a name="l00078"></a>00078 
<a name="l00080"></a>00080   <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#eb3b137500bda8573ee1aa5757011a66" title="The Tanimoto coefficient, which may be regarded as the proportion of the &amp;quot;on-bits&amp;quot;...">Tanimoto</a>(<span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec1, <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec2);
<a name="l00081"></a>00081   
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#e6df021d906a48593e8f9ed11bd8d128">00083</a>   <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#eb3b137500bda8573ee1aa5757011a66" title="The Tanimoto coefficient, which may be regarded as the proportion of the &amp;quot;on-bits&amp;quot;...">Tanimoto</a>(<span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec1, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* p2) 
<a name="l00084"></a>00084   {
<a name="l00086"></a>00086     <span class="keywordtype">int</span> andbits=0, orbits=0;
<a name="l00087"></a>00087     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;
<a name="l00088"></a>00088     <span class="keywordflow">for</span> (i=0;i&lt;vec1.size();++i)
<a name="l00089"></a>00089     {
<a name="l00090"></a>00090       <span class="keywordtype">int</span> andfp = vec1[i] &amp; p2[i];
<a name="l00091"></a>00091       <span class="keywordtype">int</span> orfp = vec1[i] | p2[i];
<a name="l00092"></a>00092       <span class="comment">// Count bits</span>
<a name="l00093"></a>00093 <span class="preprocessor">#ifdef __GNUC__</span>
<a name="l00094"></a>00094 <span class="preprocessor"></span>      andbits += __builtin_popcount(andfp);
<a name="l00095"></a>00095       orbits += __builtin_popcount(orfp);
<a name="l00096"></a>00096 <span class="preprocessor">#else</span>
<a name="l00097"></a>00097 <span class="preprocessor"></span>      <span class="keywordflow">for</span>(;andfp;andfp=andfp&lt;&lt;1)
<a name="l00098"></a>00098         <span class="keywordflow">if</span>(andfp&lt;0) ++andbits;
<a name="l00099"></a>00099       <span class="keywordflow">for</span>(;orfp;orfp=orfp&lt;&lt;1)
<a name="l00100"></a>00100         <span class="keywordflow">if</span>(orfp&lt;0) ++orbits;
<a name="l00101"></a>00101 <span class="preprocessor">#endif</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span>    }
<a name="l00103"></a>00103       <span class="keywordflow">return</span>((<span class="keywordtype">double</span>)andbits/(<span class="keywordtype">double</span>)orbits);
<a name="l00104"></a>00104   };
<a name="l00105"></a>00105   
<a name="l00106"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#d9ecfee3be06f4c37ef48506100f6f0c">00106</a>   <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Getbitsperint(){ <span class="keywordflow">return</span> bitsperint; }
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 <span class="keyword">private</span>:
<a name="l00110"></a>00110   <span class="keyword">struct </span>bit_or
<a name="l00111"></a>00111   {
<a name="l00112"></a>00112     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> operator()(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> a, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> b)
<a name="l00113"></a>00113     {
<a name="l00114"></a>00114       <span class="keywordflow">return</span> a | b;     
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116   };
<a name="l00117"></a>00117   
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 <span class="keyword">public</span>:
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#3f95fb7efe843a55b087edd16fbe4012">00122</a> <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a>* FindFingerprint(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID){ <span class="keywordflow">return</span> FindType(ID);}
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 <span class="keyword">private</span>:
<a name="l00125"></a>00125   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bitsperint;<span class="comment">// = 8 * sizeof(unsigned int);</span>
<a name="l00126"></a>00126 };
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="comment">//Fast search routines</span>
<a name="l00131"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml">00131</a> <span class="comment"></span><span class="keyword">struct </span>OBFPRT <a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml" title="Header for fastsearch index file.">FptIndexHeader</a>
<a name="l00132"></a>00132 {
<a name="l00133"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#ce6a28b9a2f58cb13b09af8fb5c739ba">00133</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> headerlength;
<a name="l00134"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#d186ad63c9d2b800747b680984bb37eb">00134</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nEntries;    
<a name="l00135"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#f562bd9c6faf08f0dab334b23d5788ee">00135</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> words;                           
<a name="l00136"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#fa1b09f7991580662a10548fd55700ee">00136</a>   <span class="keywordtype">char</span> fpid[16];            
<a name="l00137"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#5c36621530d43d4607e35153277a1058">00137</a>   <span class="keywordtype">char</span> datafilename[256];   
<a name="l00138"></a>00138 };
<a name="l00139"></a>00139 
<a name="l00142"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml">00142</a> <span class="keyword">struct </span>OBFPRT <a class="code" href="structOpenBabel_1_1FptIndex.shtml" title="Structure of fastsearch index files.">FptIndex</a>
<a name="l00143"></a>00143 {
<a name="l00144"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml#6d5979c64e7513c829f24e421d253ae5">00144</a>   <a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml" title="Header for fastsearch index file.">FptIndexHeader</a> header;
<a name="l00145"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml#1d071a268033064b8771f42e57e20a0d">00145</a>   std::vector&lt;unsigned int&gt; fptdata;
<a name="l00146"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml#744eaebf662c3b17f14de1cf9d628278">00146</a>   std::vector&lt;unsigned int&gt; seekdata;
<a name="l00147"></a>00147   <span class="keywordtype">bool</span> Read(std::istream* pIndexstream);
<a name="l00149"></a>00149   <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a>* CheckFP();
<a name="l00150"></a>00150 };
<a name="l00151"></a>00151 
<a name="l00154"></a><a class="code" href="classOpenBabel_1_1FastSearch.shtml">00154</a> <span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1FastSearch.shtml" title="Class to search fingerprint index files.">FastSearch</a>
<a name="l00155"></a>00155 {
<a name="l00156"></a>00156 <span class="comment">//see end of cpp file for detailed documentation</span>
<a name="l00157"></a>00157 <span class="keyword">public</span>:
<a name="l00159"></a>00159   std::string ReadIndexFile(std::string IndexFilename);
<a name="l00160"></a>00160   std::string ReadIndex(std::istream* pIndexstream);
<a name="l00161"></a>00161 
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1FastSearch.shtml#2d2d75247574ce3d0f7bbc0d4283b3c2">00162</a>   <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1FastSearch.shtml" title="Class to search fingerprint index files.">FastSearch</a>(){};
<a name="l00163"></a>00163 
<a name="l00165"></a>00165   <span class="keywordtype">bool</span>    Find(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::vector&lt;unsigned int&gt;&amp; SeekPositions, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> MaxCandidates);
<a name="l00166"></a>00166 
<a name="l00169"></a>00169   <span class="keywordtype">bool</span>    FindMatch(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::vector&lt;unsigned int&gt;&amp; SeekPositions,
<a name="l00170"></a>00170                             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> MaxCandidates);
<a name="l00171"></a>00171 
<a name="l00174"></a>00174   <span class="keywordtype">bool</span>    FindSimilar(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::multimap&lt;double, unsigned int&gt;&amp; SeekposMap,
<a name="l00175"></a>00175     <span class="keywordtype">double</span> MinTani);
<a name="l00176"></a>00176 
<a name="l00179"></a>00179   <span class="keywordtype">bool</span>    FindSimilar(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::multimap&lt;double, unsigned int&gt;&amp; SeekposMap,
<a name="l00180"></a>00180     <span class="keywordtype">int</span> nCandidates=0);
<a name="l00181"></a>00181 
<a name="l00183"></a><a class="code" href="classOpenBabel_1_1FastSearch.shtml#753d677380f29e219da02952b7ef7430">00183</a>   <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a>* GetFingerprint()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _pFP;};
<a name="l00184"></a>00184 
<a name="l00186"></a><a class="code" href="classOpenBabel_1_1FastSearch.shtml#6c00d74d4b0859279a48173737b1f8b1">00186</a>   <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml" title="Header for fastsearch index file.">FptIndexHeader</a>&amp; GetIndexHeader()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _index.header;};
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 <span class="keyword">private</span>:
<a name="l00189"></a>00189   <a class="code" href="structOpenBabel_1_1FptIndex.shtml" title="Structure of fastsearch index files.">FptIndex</a>   _index;
<a name="l00190"></a>00190   <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a>* _pFP;
<a name="l00191"></a>00191 };
<a name="l00192"></a>00192 
<a name="l00195"></a><a class="code" href="classOpenBabel_1_1FastSearchIndexer.shtml">00195</a> <span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1FastSearchIndexer.shtml" title="Class to prepare fingerprint index files See FastSearch class for details.">FastSearchIndexer</a>
<a name="l00196"></a>00196 {
<a name="l00197"></a>00197 <span class="comment">//see end of cpp file for detailed documentation</span>
<a name="l00198"></a>00198 <span class="keyword">public</span>:
<a name="l00200"></a>00200   <a class="code" href="classOpenBabel_1_1FastSearchIndexer.shtml" title="Class to prepare fingerprint index files See FastSearch class for details.">FastSearchIndexer</a>(std::string&amp; datafilename, std::ostream* os, std::string&amp; fpid,
<a name="l00201"></a>00201       <span class="keywordtype">int</span> FptBits=0);
<a name="l00202"></a>00202 
<a name="l00204"></a>00204   <a class="code" href="classOpenBabel_1_1FastSearchIndexer.shtml" title="Class to prepare fingerprint index files See FastSearch class for details.">FastSearchIndexer</a>(<a class="code" href="structOpenBabel_1_1FptIndex.shtml" title="Structure of fastsearch index files.">FptIndex</a>* pindex, std::ostream* os);
<a name="l00205"></a>00205   
<a name="l00206"></a>00206   ~<a class="code" href="classOpenBabel_1_1FastSearchIndexer.shtml" title="Class to prepare fingerprint index files See FastSearch class for details.">FastSearchIndexer</a>();
<a name="l00207"></a>00207 
<a name="l00209"></a>00209   <span class="keywordtype">bool</span> Add(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::streampos seekpos);
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 <span class="keyword">private</span>:
<a name="l00212"></a>00212   std::ostream* _indexstream;
<a name="l00213"></a>00213   <a class="code" href="structOpenBabel_1_1FptIndex.shtml" title="Structure of fastsearch index files.">FptIndex</a>*             _pindex;
<a name="l00214"></a>00214   <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints.">OBFingerprint</a>* _pFP;
<a name="l00215"></a>00215   <span class="keywordtype">int</span> _nbits;
<a name="l00216"></a>00216 };
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 } <span class="comment">//namespace OpenBabel</span>
<a name="l00219"></a>00219 <span class="preprocessor">#endif</span>
<a name="l00220"></a>00220 <span class="preprocessor"></span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:33 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
