<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: patty Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1patty.shtml">patty</a>
  </div>
</div>
<div class="contents">
<h1>patty Class Reference</h1><!-- doxytag: class="OpenBabel::patty" -->Programmable Atom Typer.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="patty_8h-source.shtml">openbabel/patty.h</a>&gt;</code>
<p>

<p>
<a href="classOpenBabel_1_1patty-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#aaee844f53e42a1ee6223ddb8beb89a0">patty</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#102e2b842e9f4ba368beb179887a9372">patty</a> (char *s)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#c13d841afa2efae018835cc11f8cdb3a">patty</a> (const std::string &amp;s)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#1a77bb5fc8ac4b4bf97ebdd3515dc4f3">~patty</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#6a15f87df6da0fd11ee2dac41405607a">debug_on</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#313a1354a1326f8be596ee56189314e6">debug_off</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#d52e9084efab7e27fbe7fe394612ca57">read_rules</a> (const std::string &amp;infile)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#55dcef5a39d6765d545e79cff377d332">assign_rules</a> (std::vector&lt; std::string &gt; &amp;rules)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#ef2ec72bd2c0b6c3846d20c1ba1fce3f">assign_types</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::string &gt; &amp;atm_typ)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#b5551b97ffd3df22214ae06ec05e3441">assign_types</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; int &gt; &amp;atm_typ)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#f574984ee6ea81537b5af994f7f590df">type_to_int</a> (const std::string &amp;type, bool failOnUndefined=false)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#c168d612af3854ad41c27c16252e2592">Istype</a> (const std::string &amp;type)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Programmable Atom Typer. 
<p>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000054">Deprecated:</a></b></dt><dd>This code is currently not used by the Open Babel library. Instead, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges.">OBAtomTyper</a> and <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml" title="Assigns aromatic typing to atoms and bonds.">OBAromaticTyper</a> are used. Unless there is interest in retaining this independent class, it will be removed in the future.</dd></dl>
Patty stands for programmable atom typer. The <a class="el" href="classOpenBabel_1_1patty.shtml" title="Programmable Atom Typer.">patty</a> class was kindly donated by W. Patrick Walters. The <a class="el" href="classOpenBabel_1_1patty.shtml" title="Programmable Atom Typer.">patty</a> class provides a more flexible means for atom typing than the <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges.">OBAtomTyper</a>. The behavior of <a class="el" href="classOpenBabel_1_1patty.shtml" title="Programmable Atom Typer.">patty</a> is similar to the <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges.">OBAtomTyper</a> in that rules apply only to the first atom in the SMARTS pattern. The <a class="el" href="classOpenBabel_1_1patty.shtml" title="Programmable Atom Typer.">patty</a> class can read any free format ASCII file which contains SMARTS patterns associated with user defined atom type. The following is an example of a valid <a class="el" href="classOpenBabel_1_1patty.shtml" title="Programmable Atom Typer.">patty</a> rule <div class="fragment"><pre class="fragment">    O=<a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#bc5c98fcc1211af2b80116dd6e0a035d739ce3f516592d245d16fd8a3893472c">C</a> hbacceptor
</pre></div> The following is a code sample that demonstrates the use of <a class="el" href="classOpenBabel_1_1patty.shtml" title="Programmable Atom Typer.">patty</a> class: <div class="fragment"><pre class="fragment">    OBMol mol;

    <span class="keywordtype">string</span> rulefile = <span class="stringliteral">"rules.txt"</span>;
    <a class="code" href="classOpenBabel_1_1patty.shtml#aaee844f53e42a1ee6223ddb8beb89a0">patty</a> p;
    p.read_rules(p);
    vector&lt;string&gt; type;
    p.assign_types(mol,type);
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1;i &lt;= mol.NumAtoms();++i)
       cout &lt;&lt; <span class="stringliteral">"atom number "</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">" was given a type "</span> &lt;&lt; type[i] &lt;&lt; endl;
</pre></div> The array indices in the vector&lt;string&gt; into which the result values are placed match the corresponding atom numbers. Since atoms are numbered beginning from one, the first element in the vector&lt;string&gt; is empty, and the values are placed in [1...mol.NumAtoms()]. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="aaee844f53e42a1ee6223ddb8beb89a0"></a><!-- doxytag: member="OpenBabel::patty::patty" ref="aaee844f53e42a1ee6223ddb8beb89a0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1patty.shtml">patty</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="102e2b842e9f4ba368beb179887a9372"></a><!-- doxytag: member="OpenBabel::patty::patty" ref="102e2b842e9f4ba368beb179887a9372" args="(char *s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1patty.shtml">patty</a>           </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c13d841afa2efae018835cc11f8cdb3a"></a><!-- doxytag: member="OpenBabel::patty::patty" ref="c13d841afa2efae018835cc11f8cdb3a" args="(const std::string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1patty.shtml">patty</a>           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1a77bb5fc8ac4b4bf97ebdd3515dc4f3"></a><!-- doxytag: member="OpenBabel::patty::~patty" ref="1a77bb5fc8ac4b4bf97ebdd3515dc4f3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1patty.shtml">patty</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="6a15f87df6da0fd11ee2dac41405607a"></a><!-- doxytag: member="OpenBabel::patty::debug_on" ref="6a15f87df6da0fd11ee2dac41405607a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void debug_on           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="313a1354a1326f8be596ee56189314e6"></a><!-- doxytag: member="OpenBabel::patty::debug_off" ref="313a1354a1326f8be596ee56189314e6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void debug_off           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="d52e9084efab7e27fbe7fe394612ca57"></a><!-- doxytag: member="OpenBabel::patty::read_rules" ref="d52e9084efab7e27fbe7fe394612ca57" args="(const std::string &amp;infile)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void read_rules           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>infile</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="55dcef5a39d6765d545e79cff377d332"></a><!-- doxytag: member="OpenBabel::patty::assign_rules" ref="55dcef5a39d6765d545e79cff377d332" args="(std::vector&lt; std::string &gt; &amp;rules)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void assign_rules           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>rules</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ef2ec72bd2c0b6c3846d20c1ba1fce3f"></a><!-- doxytag: member="OpenBabel::patty::assign_types" ref="ef2ec72bd2c0b6c3846d20c1ba1fce3f" args="(OBMol &amp;mol, std::vector&lt; std::string &gt; &amp;atm_typ)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void assign_types           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>atm_typ</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b5551b97ffd3df22214ae06ec05e3441"></a><!-- doxytag: member="OpenBabel::patty::assign_types" ref="b5551b97ffd3df22214ae06ec05e3441" args="(OBMol &amp;mol, std::vector&lt; int &gt; &amp;atm_typ)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void assign_types           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>atm_typ</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f574984ee6ea81537b5af994f7f590df"></a><!-- doxytag: member="OpenBabel::patty::type_to_int" ref="f574984ee6ea81537b5af994f7f590df" args="(const std::string &amp;type, bool failOnUndefined=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int type_to_int           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>failOnUndefined</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="patty_8cpp-source.shtml#l00195">patty::assign_types()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c168d612af3854ad41c27c16252e2592"></a><!-- doxytag: member="OpenBabel::patty::Istype" ref="c168d612af3854ad41c27c16252e2592" args="(const std::string &amp;type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Istype           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>type</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
return atom type index, 0 otherwise 
<p>
return null if the type does not exist, the type position otherwise the first position start at 1 
</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="patty_8h-source.shtml">patty.h</a><li><a class="el" href="patty_8cpp.shtml">patty.cpp</a></ul>
</div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:41 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
