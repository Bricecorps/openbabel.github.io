<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBFormat Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>
  </div>
</div>
<div class="contents">
<h1>OBFormat Class Reference</h1><!-- doxytag: class="OpenBabel::OBFormat" --><!-- doxytag: inherits="OpenBabel::OBPlugin" -->Base class for file formats.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="format_8h-source.shtml">openbabel/obconversion.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for OBFormat:</div>
<div class="dynsection">
<p><center><img src="classOpenBabel_1_1OBFormat__inherit__graph.png" border="0" usemap="#OBFormat__inherit__map" alt="Inheritance graph"></center>
<map name="OBFormat__inherit__map">
<area shape="rect" href="classOpenBabel_1_1OBMoleculeFormat.shtml" title="An OBFormat convenience subclass for conversion to/from OBMol data." alt="" coords="6,155,144,181"><area shape="rect" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats." alt="" coords="168,155,294,181"><area shape="rect" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime." alt="" coords="112,5,192,32"><area shape="rect" href="classOpenBabel_1_1XMLMoleculeFormat.shtml" title="Abstract class for XML formats which represent molecules." alt="" coords="156,229,306,256"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center></div>

<p>
<a href="classOpenBabel_1_1OBFormat-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef std::map&lt; const char <br>
*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef <br>
PluginMapType::const_iterator&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#11590b0840c8360ab4c3b62476d49863">OBFormat</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#45db88b29eb37e9dd105bf4032e421d2">TypeID</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1e309febfaef70cc3c8d98afc1540931">ReadMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#6044ced825a2a83b7cfe7c45eea63c99">ReadChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#663171ec9788e2d1621d374848b3888b">WriteMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#5ea5d9623cd9594549a52e116caecaa2">WriteChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#b87525f269e7819d8462f450d30d56a7">Description</a> ()=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1870e0d80a223ef4e1661be80029dbec">TargetClassDescription</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const std::type_info &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#73f632a573cbbfecf9e00f04c5ce73e9">GetType</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1d3a8785a0ad0c85b98fa3406a64d50f">SpecificationURL</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#2020a6bdb0d53d4baa73ffb57375c7e9">GetMIMEType</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#94a94537cc5ba96b1876db1b612b91a3">Flags</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#1f0ee7ba19cc62b53a7ee06fa4f91509">SkipObjects</a> (int, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#0924b1a442d147fa036bff23a4cf04ef">MakeNewInstance</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#47a434f63a789f142966304e35aa6952">RegisterFormat</a> (const char *ID, const char *MIME=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#e0859fdbf134af95a8231eb32c73b7db">Display</a> (std::string &amp;txt, const char *param, const char *ID=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9399e9568ab809d714385f1b237a9335">MakeInstance</a> (const std::vector&lt; std::string &gt; &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#753a34173c6750388d33e5294556790f">GetID</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#abc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#ca0c09ee719aba9da34cb281aa0db6a5">FormatFromMIME</a> (const char *MIME)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#c8ba4fe4a0634561ddd4667c8ef28ae1">GetPlugin</a> (const char *Type, const char *ID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#f95953a5793333ba51e978c4a0a00103">ListAsVector</a> (const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9fabfd2513038ae6ac475ac0ff2c73cd">List</a> (const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#ba22c5352d36c7f058299af7ddffb03e">ListAsString</a> (const char *PluginID, const char *param=NULL)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#84fc973fdf4bba5a6b0e2d402077991c">FirstLine</a> (const char *txt)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1d4d73999ab0518ee471c635bd0a7e87">Begin</a> (const char *PluginID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#9a330280c1cd2e7119dac87a6fd0b762">End</a> (const char *PluginID)</td></tr>

<tr><td colspan="2"><br><h2>Static Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#c40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#dfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#706e628de74c41f357e6fe9de774111c">BaseFindType</a> (<a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1f8d25dafb0bc13814ca451035f67955">_id</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Base class for file formats. 
<p>
Two sets of Read and Write functions are specified for each format to handle two different requirements. The "Convert" interface is for use in file format conversion applications. The user interface, a console, a GUI, or another program is kept unaware of the details of the chemistry and does not need to #include <a class="el" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">mol.h</a>. It is then necessary to manipulate only pointers to <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a> in <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a> and the user interface, with all the construction and deletion of <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> etc objects being done in the Format classes or the OB core. The convention with "Covert" interface functions is that chemical objects are made on the heap with new in the ReadChemicalObject() functions and and deleted in WriteChemicalObject() functions<p>
The "API" interface is for programatic use of the OB routines in application programs where <a class="el" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">mol.h</a> is #included. There is generally no creation or destruction of objects in <a class="el" href="classOpenBabel_1_1OBFormat.shtml#1e309febfaef70cc3c8d98afc1540931" title="The &quot;API&quot; interface Read function.">ReadMolecule()</a> and <a class="el" href="classOpenBabel_1_1OBFormat.shtml#663171ec9788e2d1621d374848b3888b" title="The &quot;API&quot; interface Write function.">WriteMolecule()</a> and no restriction on whether the pointers are to the heap or the stack. <hr><h2>Member Typedef Documentation</h2>
<a class="anchor" name="0fd3c807ed3341c33070c93b14739bc8"></a><!-- doxytag: member="OpenBabel::OBFormat::PluginMapType" ref="0fd3c807ed3341c33070c93b14739bc8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;const char*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>*, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a>&gt; <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8fac85f5497f873a2dd8734b47f0bdc0"></a><!-- doxytag: member="OpenBabel::OBFormat::PluginIterator" ref="8fac85f5497f873a2dd8734b47f0bdc0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef PluginMapType::const_iterator <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a><code> [inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="11590b0840c8360ab4c3b62476d49863"></a><!-- doxytag: member="OpenBabel::OBFormat::OBFormat" ref="11590b0840c8360ab4c3b62476d49863" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor. Registration via <a class="el" href="classOpenBabel_1_1OBFormat.shtml#47a434f63a789f142966304e35aa6952">RegisterFormat()</a>, not via constructor as in other plugins. 
<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="45db88b29eb37e9dd105bf4032e421d2"></a><!-- doxytag: member="OpenBabel::OBFormat::TypeID" ref="45db88b29eb37e9dd105bf4032e421d2" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* TypeID           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1e309febfaef70cc3c8d98afc1540931"></a><!-- doxytag: member="OpenBabel::OBFormat::ReadMolecule" ref="1e309febfaef70cc3c8d98afc1540931" args="(OBBase *, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadMolecule           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "API" interface Read function. 
<p>
Reads a single object. Does not make a new object on the heap; can be used with a pointer to an chem object on the heap or the stack. 
<p>Reimplemented in <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#5a3cd5ffc0d21fe9b95d804c44e7d146">XMLMoleculeFormat</a>.</p>

<p>Referenced by <a class="el" href="obmolecformat_8cpp-source.shtml#l00183">OBMoleculeFormat::DeferMolOutput()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00700">OBConversion::Read()</a>, and <a class="el" href="obmolecformat_8cpp-source.shtml#l00031">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div><p>
<a class="anchor" name="6044ced825a2a83b7cfe7c45eea63c99"></a><!-- doxytag: member="OpenBabel::OBFormat::ReadChemObject" ref="6044ced825a2a83b7cfe7c45eea63c99" args="(OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadChemObject           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "Convert" interface Read function. 
<p>
Possibly reads multiple new objects on the heap and subjects them to its DoTransformations() function, which may delete them again. Sends result to pConv-&gt;AddChemObject() 
<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#9acd362b27e30c19a2c870ca71592723">OBMoleculeFormat</a>, and <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#9acd362b27e30c19a2c870ca71592723">XMLMoleculeFormat</a>.</p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="663171ec9788e2d1621d374848b3888b"></a><!-- doxytag: member="OpenBabel::OBFormat::WriteMolecule" ref="663171ec9788e2d1621d374848b3888b" args="(OBBase *, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteMolecule           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "API" interface Write function. 
<p>
Writes a single object Does not delete the object; can be used with a pointer to an chem object on the heap or the stack. <dl class="return" compact><dt><b>Returns:</b></dt><dd>false on error. </dd></dl>

<p>Referenced by <a class="el" href="obmolecformat_8cpp-source.shtml#l00342">OBMoleculeFormat::OutputDeferredMols()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00763">OBConversion::Write()</a>, and <a class="el" href="obmolecformat_8cpp-source.shtml#l00124">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div><p>
<a class="anchor" name="5ea5d9623cd9594549a52e116caecaa2"></a><!-- doxytag: member="OpenBabel::OBFormat::WriteChemObject" ref="5ea5d9623cd9594549a52e116caecaa2" args="(OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteChemObject           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The "Convert" interface Write function. 
<p>
Writes a single object Deletes the object after writing <dl class="return" compact><dt><b>Returns:</b></dt><dd>false on error </dd></dl>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#39c2aaf250dde6e85d05ff9357d8b003">OBMoleculeFormat</a>, and <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#39c2aaf250dde6e85d05ff9357d8b003">XMLMoleculeFormat</a>.</p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>.</p>

</div>
</div><p>
<a class="anchor" name="b87525f269e7819d8462f450d30d56a7"></a><!-- doxytag: member="OpenBabel::OBFormat::Description" ref="b87525f269e7819d8462f450d30d56a7" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* Description           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Information on this format. Printed out in response to -Hxxx option where xxx id the id of the format. 
<p>
Must be provided by each format class. Can include a list of command line Options. These may be used to construction check boxes, radio buttons etc for GUI interface. 
<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#4a6b8d1611d5d963fc29982cc1ebcbf7">OBPlugin</a>.</p>

<p>Referenced by <a class="el" href="format_8cpp-source.shtml#l00071">OBFormat::Display()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01501">OBConversion::GetNextFormat()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00342">OBMoleculeFormat::OutputDeferredMols()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00031">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01412">OBConversion::RegisterOptionParam()</a>, and <a class="el" href="obmolecformat_8cpp-source.shtml#l00124">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1870e0d80a223ef4e1661be80029dbec"></a><!-- doxytag: member="OpenBabel::OBFormat::TargetClassDescription" ref="1870e0d80a223ef4e1661be80029dbec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * TargetClassDescription           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
A decription of the chemical object converted by this format. 
<p>
If not provided, the object type used by the default format is used (usually <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>). 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01464">OBConversion::ReportNumberConverted()</a>.</p>

</div>
</div><p>
<a class="anchor" name="73f632a573cbbfecf9e00f04c5ce73e9"></a><!-- doxytag: member="OpenBabel::OBFormat::GetType" ref="73f632a573cbbfecf9e00f04c5ce73e9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const type_info &amp; GetType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the type of chemical object used by the format. Defaults to that used by the default format. Useful for checking that a format can handle a particular object. </dd></dl>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#54e576034bd51c66256aa6a98f81d644">OBMoleculeFormat</a>, and <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#54e576034bd51c66256aa6a98f81d644">XMLMoleculeFormat</a>.</p>

</div>
</div><p>
<a class="anchor" name="1d3a8785a0ad0c85b98fa3406a64d50f"></a><!-- doxytag: member="OpenBabel::OBFormat::SpecificationURL" ref="1d3a8785a0ad0c85b98fa3406a64d50f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* SpecificationURL           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Web address where the format is defined. 
<p>

<p>Referenced by <a class="el" href="format_8cpp-source.shtml#l00071">OBFormat::Display()</a>.</p>

</div>
</div><p>
<a class="anchor" name="2020a6bdb0d53d4baa73ffb57375c7e9"></a><!-- doxytag: member="OpenBabel::OBFormat::GetMIMEType" ref="2020a6bdb0d53d4baa73ffb57375c7e9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* GetMIMEType           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Chemical MIME type associated with this file type (if any). 
<p>

</div>
</div><p>
<a class="anchor" name="94a94537cc5ba96b1876db1b612b91a3"></a><!-- doxytag: member="OpenBabel::OBFormat::Flags" ref="94a94537cc5ba96b1876db1b612b91a3" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int Flags           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Decribes the capabilities of the format (Read only etc.). 
<p>
Currently, can be a bitwise OR of any of the following NOTREADABLE READONEONLY NOTWRITABLE WRITEONEONLY DEFAULTFORMAT READBINARY WRITEBINARY READXML 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00575">OBConversion::AddChemObject()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, <a class="el" href="format_8cpp-source.shtml#l00071">OBFormat::Display()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01086">OBConversion::FullConvert()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01501">OBConversion::GetNextFormat()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00744">OBConversion::InstallStreamFilter()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01326">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00031">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00880">OBConversion::ReadFile()</a>, <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00346">OBConversion::SetInFormat()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l00354">OBConversion::SetOutFormat()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00831">OBConversion::WriteFile()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1f0ee7ba19cc62b53a7ee06fa4f91509"></a><!-- doxytag: member="OpenBabel::OBFormat::SkipObjects" ref="1f0ee7ba19cc62b53a7ee06fa4f91509" args="(int, OBConversion *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual int SkipObjects           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Skip past first n objects in input stream (or current one with n=0). 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>1 on success, -1 on error and 0 if not implemented </dd></dl>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#dfcd8e84805c262d8cbca79a83f9d4cc">XMLBaseFormat</a>.</p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00442">OBConversion::Convert()</a>, and <a class="el" href="obconversion_8cpp-source.shtml#l00521">OBConversion::SetStartAndEnd()</a>.</p>

</div>
</div><p>
<a class="anchor" name="0924b1a442d147fa036bff23a4cf04ef"></a><!-- doxytag: member="OpenBabel::OBFormat::MakeNewInstance" ref="0924b1a442d147fa036bff23a4cf04ef" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* MakeNewInstance           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>a pointer to a new instance of the format, or NULL if fails. Normally a single global instance is used but this may cause problems if there are member variables and the format is used in more than one place in the program. </dd></dl>

</div>
</div><p>
<a class="anchor" name="47a434f63a789f142966304e35aa6952"></a><!-- doxytag: member="OpenBabel::OBFormat::RegisterFormat" ref="47a434f63a789f142966304e35aa6952" args="(const char *ID, const char *MIME=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int RegisterFormat           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>MIME</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00281">OBConversion::RegisterFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="e0859fdbf134af95a8231eb32c73b7db"></a><!-- doxytag: member="OpenBabel::OBFormat::Display" ref="e0859fdbf134af95a8231eb32c73b7db" args="(std::string &amp;txt, const char *param, const char *ID=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Display           </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Provides a description in txt of the format specified by itr. If param starts with "in", read", "out" or "write" only the appropriate formats are output. The others return false. If param contains "verbose", the whole description is output. 
<p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#e0859fdbf134af95a8231eb32c73b7db">OBPlugin</a>.</p>

</div>
</div><p>
<a class="anchor" name="ca0c09ee719aba9da34cb281aa0db6a5"></a><!-- doxytag: member="OpenBabel::OBFormat::FormatFromMIME" ref="ca0c09ee719aba9da34cb281aa0db6a5" args="(const char *MIME)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FormatFromMIME           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>MIME</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00695">OBConversion::FormatFromMIME()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9399e9568ab809d714385f1b237a9335"></a><!-- doxytag: member="OpenBabel::OBFormat::MakeInstance" ref="9399e9568ab809d714385f1b237a9335" args="(const std::vector&lt; std::string &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* MakeInstance           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Make a new instance of the class. See <a class="el" href="classOpenBabel_1_1OpTransform.shtml" title="Applies molecular transforms (OBChemTsfm class) read from a datafile.">OpTransform</a>, <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml" title="Handle group contribution algorithms.">OBGroupContrib</a>, SmartsDescriptor classes for derived versions. Usually, the first parameter is the classname, the next three are parameters(ID, filename, description) for a constructor, and the rest data. 
<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#b91e9dba77605edc84876eac596f2094">OBGroupContrib</a>, and <a class="el" href="classOpenBabel_1_1OpTransform.shtml#ed21db4d9fb23cb30d0440e844a69f57">OpTransform</a>.</p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00287">OBConversion::LoadFormatFiles()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c8ba4fe4a0634561ddd4667c8ef28ae1"></a><!-- doxytag: member="OpenBabel::OBFormat::GetPlugin" ref="c8ba4fe4a0634561ddd4667c8ef28ae1" args="(const char *Type, const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* GetPlugin           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>Type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get a pointer to a plugin from its type and ID. Return NULL if not found. Not cast to Type*. 
<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l00287">OBConversion::LoadFormatFiles()</a>.</p>

</div>
</div><p>
<a class="anchor" name="753a34173c6750388d33e5294556790f"></a><!-- doxytag: member="OpenBabel::OBFormat::GetID" ref="753a34173c6750388d33e5294556790f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* GetID           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the ID of the sub-type instance. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00102">OBPlugin::Display()</a>, <a class="el" href="format_8cpp-source.shtml#l00071">OBFormat::Display()</a>, and <a class="el" href="descriptor_8cpp-source.shtml#l00308">OBDescriptor::PredictAndSave()</a>.</p>

</div>
</div><p>
<a class="anchor" name="f95953a5793333ba51e978c4a0a00103"></a><!-- doxytag: member="OpenBabel::OBFormat::ListAsVector" ref="f95953a5793333ba51e978c4a0a00103" args="(const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ListAsVector           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vlist</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Output a list of sub-type classes of the the type PluginID, or, if PluginID is "plugins" or empty, a list of the base types. If PluginID is not recognized or is NULL, the base types are output and the return is false. 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01448">OBConversion::GetSupportedInputFormat()</a>, <a class="el" href="obconversion_8cpp-source.shtml#l01457">OBConversion::GetSupportedOutputFormat()</a>, and <a class="el" href="plugin_8cpp-source.shtml#l00076">OBPlugin::List()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9fabfd2513038ae6ac475ac0ff2c73cd"></a><!-- doxytag: member="OpenBabel::OBFormat::List" ref="9fabfd2513038ae6ac475ac0ff2c73cd" args="(const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void List           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream *&nbsp;</td>
          <td class="paramname"> <em>os</em> = <code>&amp;std::cout</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
As ListAsVector but sent to an ostream with a default of cout if not specified. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00084">OBPlugin::ListAsString()</a>.</p>

</div>
</div><p>
<a class="anchor" name="ba22c5352d36c7f058299af7ddffb03e"></a><!-- doxytag: member="OpenBabel::OBFormat::ListAsString" ref="ba22c5352d36c7f058299af7ddffb03e" args="(const char *PluginID, const char *param=NULL)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string ListAsString           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>param</em> = <code>NULL</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
As ListAsVector but returns a string containing the list. 
<p>

</div>
</div><p>
<a class="anchor" name="84fc973fdf4bba5a6b0e2d402077991c"></a><!-- doxytag: member="OpenBabel::OBFormat::FirstLine" ref="84fc973fdf4bba5a6b0e2d402077991c" args="(const char *txt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string FirstLine           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>txt</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Utility function to return only the first line of a string. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00102">OBPlugin::Display()</a>, <a class="el" href="format_8cpp-source.shtml#l00071">OBFormat::Display()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1d4d73999ab0518ee471c635bd0a7e87"></a><!-- doxytag: member="OpenBabel::OBFormat::Begin" ref="1d4d73999ab0518ee471c635bd0a7e87" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> Begin           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return an iterator at the start of the map of the plugin types PluginID or, if there is no such map, the end of the top level plugin map. 
<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01501">OBConversion::GetNextFormat()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9a330280c1cd2e7119dac87a6fd0b762"></a><!-- doxytag: member="OpenBabel::OBFormat::End" ref="9a330280c1cd2e7119dac87a6fd0b762" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> End           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="obconversion_8cpp-source.shtml#l01501">OBConversion::GetNextFormat()</a>, and <a class="el" href="op_8h-source.shtml#l00049">OBOp::OpOptions()</a>.</p>

</div>
</div><p>
<a class="anchor" name="abc1385cbe63145ffec6edf1f2c3be98"></a><!-- doxytag: member="OpenBabel::OBFormat::GetMap" ref="abc1385cbe63145ffec6edf1f2c3be98" args="() const =0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; GetMap           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [pure virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the map of the subtypes. 
<p>

<p>Referenced by <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c40457336d7b12bb632b4ac4e8955a3a"></a><!-- doxytag: member="OpenBabel::OBFormat::PluginMap" ref="c40457336d7b12bb632b4ac4e8955a3a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; PluginMap           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns a reference to the map of the plugin types. Is a function rather than a static member variable to avoid initialization problems. 
<p>

<p>Referenced by <a class="el" href="plugin_8cpp-source.shtml#l00028">OBPlugin::GetTypeMap()</a>, <a class="el" href="plugin_8cpp-source.shtml#l00037">OBPlugin::ListAsVector()</a>, and <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<a class="anchor" name="dfcf9fda27cfbc4301fc94517a4250ef"></a><!-- doxytag: member="OpenBabel::OBFormat::GetTypeMap" ref="dfcf9fda27cfbc4301fc94517a4250ef" args="(const char *PluginID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">OBPlugin::PluginMapType</a> &amp; GetTypeMap           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>PluginID</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the map of a particular plugin type, e.g. GetMapType("fingerprints"). 
<p>

</div>
</div><p>
<a class="anchor" name="706e628de74c41f357e6fe9de774111c"></a><!-- doxytag: member="OpenBabel::OBFormat::BaseFindType" ref="706e628de74c41f357e6fe9de774111c" args="(PluginMapType &amp;Map, const char *ID)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* BaseFindType           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml#0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>ID</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static, protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the type with the specified ID, or NULL if not found. Will be cast to the appropriate class in the calling routine. 
<p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="1f8d25dafb0bc13814ca451035f67955"></a><!-- doxytag: member="OpenBabel::OBFormat::_id" ref="1f8d25dafb0bc13814ca451035f67955" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char* <a class="el" href="classOpenBabel_1_1OBPlugin.shtml#1f8d25dafb0bc13814ca451035f67955">_id</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

<p>Referenced by <a class="el" href="format_8cpp-source.shtml#l00027">OBFormat::RegisterFormat()</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="format_8h-source.shtml">format.h</a><li><a class="el" href="format_8cpp.shtml">format.cpp</a></ul>
</div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:39 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
