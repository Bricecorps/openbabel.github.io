<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: plugin.h File Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>plugin.h File Reference</h1>Simplify 'plugin' classes to be discovered and/or loaded at runtime. <a href="#_details">More...</a>
<p>
<code>#include &lt;openbabel/babelconfig.h&gt;</code><br>
<code>#include &lt;string&gt;</code><br>
<code>#include &lt;iostream&gt;</code><br>
<code>#include &lt;vector&gt;</code><br>
<code>#include &lt;map&gt;</code><br>
<code>#include &lt;sstream&gt;</code><br>
<code>#include &lt;cstring&gt;</code><br>

<p>
<div class="dynheader">
This graph shows which files directly or indirectly include this file:</div>
<div class="dynsection">
<p><center><img src="plugin_8h__dep__incl.png" border="0" usemap="#plugin.hdep_map" alt=""></center>
<map name="plugin.hdep_map">
<area shape="rect" href="descriptor_8h.shtml" title="Base class for molecular descriptors." alt="" coords="211,80,304,107"><area shape="rect" href="fingerprint_8h.shtml" title="Declaration of OBFingerprint base class and fastsearch classes." alt="" coords="631,80,724,107"><area shape="rect" href="forcefield_8h.shtml" title="Handle forcefields." alt="" coords="755,80,843,107"><area shape="rect" href="format_8h.shtml" title="Declarations for OBFormat." alt="" coords="887,80,959,107"><area shape="rect" href="op_8h.shtml" title="Base plugin class for operations on molecules." alt="" coords="483,80,531,107"><area shape="rect" href="plugin_8cpp.shtml" title="Simplify &#39;plugin&#39; classes to be discovered and/or loaded at runtime." alt="" coords="983,80,1066,107"><area shape="rect" href="groupcontrib_8h.shtml" title="Handle group contribution algorithms." alt="" coords="6,155,115,182"><area shape="rect" href="descriptor_8cpp.shtml" title="Base class for molecular descriptors." alt="" coords="139,155,246,182"><area shape="rect" href="transform_8cpp.shtml" title="Perform command&#45;line requested transformations for OBMol and SMARTS filtering." alt="" coords="270,155,374,182"><area shape="rect" href="fingerprint_8cpp.shtml" title="Definitions for OBFingerprint base class and fastsearch classes." alt="" coords="622,155,728,182"><area shape="rect" href="forcefield_8cpp.shtml" title="Handle OBForceField class." alt="" coords="752,155,854,182"><area shape="rect" href="obconversion_8h.shtml" title="Handle file conversions. Declaration of OBFormat, OBConversion." alt="" coords="878,155,992,182"><area shape="rect" href="format_8cpp.shtml" title="Base class OBFormat for file formats." alt="" coords="1016,155,1102,182"><area shape="rect" href="optransform_8h.shtml" title="Operations to change molecules using a datafile of chemical transformations OBChemTsfm..." alt="" coords="398,155,504,182"><area shape="rect" href="ops_8cpp.shtml" title="Base plugin class for operations on molecules." alt="" coords="528,155,598,182"></map>
</div>

<p>
<a href="plugin_8h-source.shtml">Go to the source code of this file.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Namespaces</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">namespace &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></td></tr>

<tr><td colspan="2"><br><h2>Classes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Case insensitive string comparison for PluginMapType key.  <a href="structOpenBabel_1_1CharPtrLess.shtml#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Base class for all types of dynamic classes discovered at runtime.  <a href="classOpenBabel_1_1OBPlugin.shtml#_details">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="plugin_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(BaseClass)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Simplify 'plugin' classes to be discovered and/or loaded at runtime. 
<p>
The code in this file makes it easy to make 'plugin' classes. These classes are derived from a base class, like OBFingerprint. The derived classes ('sub-types' like fingerprint2) usually have a single instance. Plugin classes are only discovered at runtime, so no existing code needs to be changed when adding a new derived class. In some builds the new code can be added or removed by just moving a DLL or so file. The plugin classes derived from any base class (including new ones) type can be listed from the commandline.<p>
<h2>Step-by-Step Instructions</h2>
<p>
1) In the header file for YourBaseClass (which handles whatsits). Make sure to include the <a class="el" href="plugin_8h.shtml" title="Simplify &#39;plugin&#39; classes to be discovered and/or loaded at runtime.">plugin.h</a> header , derive the class from OBPlugin and in its definition add the MAKE_PLUGIN macro and a function TypeID() containing a simple descriptor of the type <div class="fragment"><pre class="fragment"><span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml" title="Simplify &amp;#39;plugin&amp;#39; classes to be discovered and/or loaded at runtime.">openbabel/plugin.h</a>&gt;</span>
<span class="keyword">class </span>YourBaseClass : <span class="keyword">public</span> OBPlugin
{
  <a class="code" href="plugin_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(YourBaseClass)
  
  const <span class="keywordtype">char</span>* TypeID()
  { <span class="keywordflow">return</span> <span class="stringliteral">"whatsits"</span>; };

  ...rest of implementation, probably involving <span class="keyword">virtual</span> functions redefined
  in the sub-type classes
};
</pre></div> See below for what the macro contains.<p>
2) Declare each sub-type in a class derived from the base class and give it a constructor which calls OBPlugin constructor as shown: <div class="fragment"><pre class="fragment"><span class="keyword">class </span>YourSubType1 : <span class="keyword">public</span> YourBaseClass
{
<span class="keyword">public</span>:
  YourSubtype1(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>) 
    : YourBaseClass(ID, IsDefault){}

  <span class="keyword">virtual</span> <span class="keywordtype">string</span> Description()
  { <span class="keywordflow">return</span> <span class="stringliteral">"A description with one or more lines"</span>;};

  ...rest of implementation
};
</pre></div> Only the first line of the description is used when the subclasses are listed.<p>
3) Declare a global instance of the sub-type class which specifies its ID. and, optionally, whether it is to be regarded as the default type of YourBaseClass. <div class="fragment"><pre class="fragment">YourSubType1 theType1(<span class="stringliteral">"whatsit2"</span>,<span class="keyword">true</span>);
</pre></div><p>
4) The following functions are available:<p>
YourBaseClass* YourBaseClass::FindType(const char* ID); This returns the default type when ID is NULL or empty.<p>
To list the sub-types of any plugin class use the List which sends to cout by default (or any other ostream if specified). <div class="fragment"><pre class="fragment">  OBPlugin::List(<span class="stringliteral">"whatsits"</span>)
</pre></div> The ListAsString and ListAsVector functions are alternatives, usable with scripting.<p>
It is also possible to iterate through each sub-type by the following code: <div class="fragment"><pre class="fragment">  OBPlugin::PluginIterator itr;
  <span class="keywordflow">for</span>(itr=OBPlugin::Begin(<span class="stringliteral">"whatsits"</span>);itr!=OBPlugin::End(<span class="stringliteral">"whatsits"</span>);++itr)
  {
    itr is a std::map::const_iterator
    itr-&gt;first is the ID of the subtype;
    itr-&gt;second is The OBPlugin* which you will have to cast to your type
  }
</pre></div> Since this is not the most beautiful code, it is probably better to use the List methods if possible.<p>
YourBaseClass* MakeNewInstance();<p>
<h2>How it works</h2>
<p>
<a class="el" href="plugin_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN(YourBaseClass)</a> inserts the following code into YourBaseClass: <div class="fragment"><pre class="fragment"><span class="keyword">protected</span>:
  
  <span class="comment">//The collection of sub-types is in a local static variable to avoid</span>
  <span class="comment">//any difficulties with the order of initialization of static objects. </span>
  <span class="keyword">static</span> PluginMapType&amp; Map()
  {
    <span class="keyword">static</span> PluginMapType m;
    <span class="keywordflow">return</span> m;
  }

  <span class="comment">//Making the map accessible to the base class (Cannot be used during construction)</span>
  <span class="keyword">virtual</span> PluginMapType&amp; GetMap()<span class="keyword">const</span>
<span class="keyword">  </span>{
   <span class="keywordflow">return</span> Map();
  }
   
<span class="keyword">public</span>:
  <span class="keyword">static</span> YourBaseClass*&amp; Default()
  {
    <span class="keyword">static</span> YourBaseClass* d;
    <span class="keywordflow">return</span> d;
  }

  <span class="comment">//Constructor registers the sub-type </span>
  YourBaseClass(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>)
  {
    _id = ID;
    <span class="keywordflow">if</span>(ID &amp;&amp; *ID) <span class="comment">//do not register if ID is empty</span>
    {
      <span class="keywordflow">if</span>(IsDefault || Map().empty())
        Default() = <span class="keyword">this</span>;
      Map()[ID]=<span class="keyword">this</span>;
      <span class="comment">//Ensure YourBaseClass is registered in OBPlugin so it can be accessed from the commandline</span>
      PluginMap()[TypeID()] =<span class="keyword">this</span>;
    }
  }
   
  <span class="keyword">static</span> YourBaseClass* FindType(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID)
  {
    <span class="keywordflow">if</span>(!ID || *ID==0)
      <span class="keywordflow">return</span> Default();
    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>YourBaseClass*<span class="keyword">&gt;</span>(BaseFindType(Map(),ID));
  }
</pre></div> <hr><h2>Define Documentation</h2>
<a class="anchor" name="dd740e2a386b7db3e1f0e271cbe8a3f1"></a><!-- doxytag: member="plugin.h::MAKE_PLUGIN" ref="dd740e2a386b7db3e1f0e271cbe8a3f1" args="(BaseClass)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MAKE_PLUGIN          </td>
          <td>(</td>
          <td class="paramtype">BaseClass&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keyword">protected</span>:\
<span class="keyword">virtual</span> PluginMapType&amp; GetMap()<span class="keyword">const</span>{<span class="keywordflow">return</span> Map();}\
<span class="keyword">static</span> PluginMapType&amp; Map(){<span class="keyword">static</span> PluginMapType m;<span class="keywordflow">return</span> m;}\
<span class="keyword">public</span>:\
<span class="keyword">static</span> BaseClass*&amp; Default(){<span class="keyword">static</span> BaseClass* d;<span class="keywordflow">return</span> d;}\
  BaseClass(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>)\
 {_id=ID;<span class="keywordflow">if</span>(ID&amp;&amp;*ID){<span class="keywordflow">if</span>(IsDefault || Map().empty()) Default() = <span class="keyword">this</span>;\
 Map()[ID]=<span class="keyword">this</span>;PluginMap()[TypeID()] =<span class="keyword">this</span>;}}\
<span class="keyword">static</span> BaseClass* FindType(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID)\
 {<span class="keywordflow">if</span>(!ID || *ID==0) <span class="keywordflow">return</span> Default();\
 <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>BaseClass*<span class="keyword">&gt;</span>(BaseFindType(Map(),ID));}
</pre></div>
</div>
</div><p>
</div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:37 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
