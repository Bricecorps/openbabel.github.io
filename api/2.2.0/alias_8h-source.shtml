<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: alias.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>alias.h</h1><a href="alias_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">alias.h - OBGenericData class to hold alias information on atoms</span>
<a name="l00003"></a>00003 <span class="comment">Copyright (C) Copyright (C) 2007 by Chris Morley</span>
<a name="l00004"></a>00004 <span class="comment"> </span>
<a name="l00005"></a>00005 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00006"></a>00006 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00007"></a>00007 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00010"></a>00010 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00011"></a>00011 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00012"></a>00012 <span class="comment">GNU General Public License for more details.</span>
<a name="l00013"></a>00013 <span class="comment">***********************************************************************/</span>
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 <span class="preprocessor">#ifndef OB_ALIAS_H</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span><span class="preprocessor">#define OB_ALIAS_H</span>
<a name="l00017"></a>00017 <span class="preprocessor"></span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">openbabel/mol.h</a>&gt;</span>
<a name="l00021"></a>00021 
<a name="l00022"></a><a class="code" href="namespaceOpenBabel.shtml">00022</a> <span class="keyword">namespace </span>OpenBabel
<a name="l00023"></a>00023 {
<a name="l00024"></a>00024 <span class="comment">// This macro is used in DLL builds. If it has not</span>
<a name="l00025"></a>00025 <span class="comment">// been set in babelconfig.h, define it as nothing.</span>
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef OBAPI</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">  #define OBAPI</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a><a class="code" href="namespaceOpenBabel.shtml#f962a429bf8fe8b8f222ff1a6018c35e">00030</a> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#f962a429bf8fe8b8f222ff1a6018c35e">AliasDataType</a> = 0x7883;
<a name="l00031"></a>00031 
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml">00048</a> <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1AliasData.shtml" title="Indicate atoms as aliases for larger functional groups.">AliasData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050 <span class="keyword">protected</span>:
<a name="l00051"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#7dd8464fd3023ffafa56a134e663a4ae">00051</a>   std::string _alias;
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#7f9c743be05c2235df2c8af4244e44df">00052</a>   std::vector&lt;unsigned int&gt; _expandedatoms;
<a name="l00053"></a>00053 <span class="keyword">public</span>:
<a name="l00054"></a>00054 
<a name="l00055"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#55d097a56763789d4b0d070e51a580fb">00055</a>   <a class="code" href="classOpenBabel_1_1AliasData.shtml" title="Indicate atoms as aliases for larger functional groups.">AliasData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">"Alias"</span>, <a class="code" href="namespaceOpenBabel.shtml#f962a429bf8fe8b8f222ff1a6018c35e">AliasDataType</a>){ }
<a name="l00056"></a>00056 
<a name="l00057"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#67bda850335747e7ac5d66629bda0a67">00057</a>   <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1AliasData.shtml" title="Indicate atoms as aliases for larger functional groups.">AliasData</a>(*<span class="keyword">this</span>);}
<a name="l00058"></a>00058   
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#d3cc04112e0d8320faff12cd8e70bcd4">00060</a>   <span class="keywordtype">void</span> SetAlias(<span class="keyword">const</span> std::string&amp; alias) {_alias = alias;}
<a name="l00061"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#ff1fad2cef60a4d52443058c69ec835d">00061</a>   <span class="keywordtype">void</span> SetAlias(<span class="keyword">const</span> <span class="keywordtype">char</span>* alias) {_alias = alias;}
<a name="l00062"></a>00062 
<a name="l00064"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#3846044d4d59e1d376aa889e9430a72e">00064</a>   std::string GetAlias()<span class="keyword">const </span>{ <span class="keywordflow">return</span> _alias; }
<a name="l00065"></a>00065 
<a name="l00067"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#a8fd0f8e45e9362decce726baeff9396">00067</a>   <span class="keywordtype">void</span> SetExpandedAtoms(std::vector&lt;unsigned int&gt;&amp; atoms){ _expandedatoms = atoms; }
<a name="l00068"></a>00068 
<a name="l00070"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#24ebc7d5dc6473c855528e5ae451805c">00070</a>   std::vector&lt;unsigned int&gt; GetExpandedAtoms()<span class="keyword">const </span>{ <span class="keywordflow">return</span> _expandedatoms; }
<a name="l00071"></a>00071 
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#01c2d9efc5bbab7c9f080f3eec0b94b7">00072</a>   <span class="keywordtype">bool</span> IsExpanded()<span class="keyword">const </span>{ <span class="keywordflow">return</span> !_expandedatoms.empty(); }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   
<a name="l00075"></a>00075   <span class="keywordtype">bool</span> Expand(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>&amp; mol, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomindex);
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 };
<a name="l00078"></a>00078 } <span class="comment">//namespace</span>
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 <span class="preprocessor">#endif // OB_ALIAS_H</span>
<a name="l00081"></a>00081 <span class="preprocessor"></span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:33 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
