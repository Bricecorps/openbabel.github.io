<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: descriptor.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>descriptor.h</h1><a href="descriptor_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">descriptor.h - Base class for molecular descriptors</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2007 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_DESCRIPTOR_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_DESCRIPTOR_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;limits&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml" title="Simplify &amp;#39;plugin&amp;#39; classes to be discovered and/or loaded at runtime.">openbabel/plugin.h</a>&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="keyword">namespace </span>OpenBabel
<a name="l00029"></a>00029 {
<a name="l00030"></a>00030 <span class="keyword">class </span>OBBase; <span class="comment">//Forward declaration; used only as pointer.</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="comment">// Class introduction in descriptor.cpp</span>
<a name="l00033"></a><a class="code" href="classOpenBabel_1_1OBDescriptor.shtml">00033</a> <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features.">OBDescriptor</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime.">OBPlugin</a>
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035   <a class="code" href="plugin_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(<a class="code" href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features.">OBDescriptor</a>)
<a name="l00036"></a>00036 
<a name="l00037"></a>00037   <span class="keyword">public</span>:
<a name="l00038"></a><a class="code" href="classOpenBabel_1_1OBDescriptor.shtml#45db88b29eb37e9dd105bf4032e421d2">00038</a>     <span class="keyword">const</span> <span class="keywordtype">char</span>* TypeID(){<span class="keywordflow">return</span> <span class="stringliteral">"descriptors"</span>;};
<a name="l00039"></a>00039 
<a name="l00041"></a><a class="code" href="classOpenBabel_1_1OBDescriptor.shtml#1d551ecaee77d4e6b2f63ee6cbca89ab">00041</a>   <span class="keyword">virtual</span> <span class="keywordtype">double</span> Predict(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb){<span class="keywordflow">return</span> std::numeric_limits&lt;double&gt;::quiet_NaN();}
<a name="l00042"></a>00042 
<a name="l00044"></a>00044   <span class="keywordtype">double</span> PredictAndSave(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb);
<a name="l00045"></a>00045 
<a name="l00047"></a>00047   <span class="keyword">virtual</span> <span class="keywordtype">double</span> GetStringValue(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::string&amp; svalue);
<a name="l00048"></a>00048 
<a name="l00050"></a>00050   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Compare(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::istream&amp; ss, <span class="keywordtype">bool</span> noEval);
<a name="l00051"></a>00051   
<a name="l00055"></a>00055   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Display(std::string&amp;txt, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID=NULL);
<a name="l00056"></a>00056 
<a name="l00058"></a>00058   <span class="keyword">static</span> <span class="keywordtype">bool</span> FilterCompare(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::istream&amp; ss, <span class="keywordtype">bool</span> noEval);
<a name="l00059"></a>00059   
<a name="l00061"></a>00061   <span class="keyword">static</span> <span class="keywordtype">void</span> AddProperties(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, <span class="keyword">const</span> std::string&amp; DescrList);
<a name="l00062"></a>00062 
<a name="l00064"></a>00064   <span class="keyword">static</span> <span class="keywordtype">void</span> DeleteProperties(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, <span class="keyword">const</span> std::string&amp; DescrList);
<a name="l00065"></a>00065 
<a name="l00068"></a>00068   <span class="keyword">static</span> std::string GetValues(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, <span class="keyword">const</span> std::string&amp; DescrList);
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="keyword">protected</span>:
<a name="l00072"></a>00072   <span class="keyword">static</span> std::string GetIdentifier(std::istream&amp; optionText);
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   <span class="keyword">static</span> <span class="keywordtype">double</span> ParsePredicate(std::istream&amp; optionText, <span class="keywordtype">char</span>&amp; ch1, <span class="keywordtype">char</span>&amp; ch2, std::string&amp; svalue);
<a name="l00075"></a>00075 
<a name="l00078"></a>00078   <span class="keyword">static</span> <span class="keywordtype">bool</span> ReadStringFromFilter(std::istream&amp; ss, std::string&amp; result);
<a name="l00079"></a>00079 
<a name="l00082"></a>00082   <span class="keyword">static</span> <span class="keywordtype">bool</span> CompareStringWithFilter(std::istream&amp; optionText, std::string&amp; s, <span class="keywordtype">bool</span> noEval, <span class="keywordtype">bool</span> NoCompOK=<span class="keyword">false</span>);
<a name="l00083"></a>00083 
<a name="l00084"></a>00084   <span class="comment">// Treats _ as not a punctuation character</span>
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBDescriptor.shtml#865d2be70640a96f185bf78dcaaea8b2">00085</a>   <span class="keyword">static</span> <span class="keywordtype">bool</span> ispunctU(<span class="keywordtype">char</span> ch)
<a name="l00086"></a>00086   {
<a name="l00087"></a>00087     <span class="keywordflow">return</span> ispunct(ch) &amp;&amp; ch!=<span class="charliteral">'_'</span>;
<a name="l00088"></a>00088   }
<a name="l00089"></a>00089 
<a name="l00091"></a>00091   <span class="keyword">static</span> <span class="keywordtype">bool</span> MatchPairData(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, std::string&amp; s);
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 };
<a name="l00094"></a>00094 
<a name="l00095"></a>00095 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00096"></a><a class="code" href="namespaceOpenBabel.shtml#4f1b41f797d4f6def5e87727ab6baf39">00096</a> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#4f1b41f797d4f6def5e87727ab6baf39">DoComparison</a>(<span class="keywordtype">char</span> ch1, <span class="keywordtype">char</span> ch2, <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#bc5c98fcc1211af2b80116dd6e0a035d21f40778b7db9343a6ca75ec2c41ccce">T</a>&amp; val, <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#bc5c98fcc1211af2b80116dd6e0a035d21f40778b7db9343a6ca75ec2c41ccce">T</a>&amp; filterval)
<a name="l00097"></a>00097 {
<a name="l00098"></a>00098   <span class="keywordflow">switch</span>(ch1)
<a name="l00099"></a>00099   {
<a name="l00100"></a>00100   <span class="keywordflow">case</span> (0):  <span class="comment">//no comparison operator is same as =</span>
<a name="l00101"></a>00101   <span class="keywordflow">case</span>(<span class="charliteral">'='</span>):
<a name="l00102"></a>00102   <span class="keywordflow">return</span> val==filterval; <span class="comment">//**needs a better floating point comparison** </span>
<a name="l00103"></a>00103   <span class="keywordflow">case</span>(<span class="charliteral">'!'</span>):
<a name="l00104"></a>00104   <span class="keywordflow">return</span> val!=filterval; <span class="comment">//**needs a better floating point comparison** </span>
<a name="l00105"></a>00105   <span class="keywordflow">case</span>(<span class="charliteral">'&gt;'</span>):              
<a name="l00106"></a>00106   <span class="keywordflow">if</span>(ch2==<span class="charliteral">'='</span>)
<a name="l00107"></a>00107     <span class="keywordflow">return</span> val&gt;=filterval;
<a name="l00108"></a>00108   <span class="keywordflow">else</span>
<a name="l00109"></a>00109     <span class="keywordflow">return</span> val&gt;filterval;
<a name="l00110"></a>00110   <span class="keywordflow">case</span>(<span class="charliteral">'&lt;'</span>):              
<a name="l00111"></a>00111   <span class="keywordflow">if</span>(ch2==<span class="charliteral">'='</span>)
<a name="l00112"></a>00112     <span class="keywordflow">return</span> val&lt;=filterval;
<a name="l00113"></a>00113   <span class="keywordflow">else</span>
<a name="l00114"></a>00114     <span class="keywordflow">return</span> val&lt;filterval;
<a name="l00115"></a>00115   }
<a name="l00116"></a>00116   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00117"></a>00117 }
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 }<span class="comment">//namespace</span>
<a name="l00120"></a>00120 <span class="preprocessor">#endif</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:33 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
