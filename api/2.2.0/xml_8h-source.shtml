<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: xml.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>xml.h</h1><a href="xml_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">xml.h Declaration of XMLConversion, </span>
<a name="l00003"></a>00003 <span class="comment">declaration and definition of XMLBaseFormat and XMLMoleculeFormat </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2005-2006 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00011"></a>00011 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00012"></a>00012 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00013"></a>00013 <span class="comment">GNU General Public License for more details.</span>
<a name="l00014"></a>00014 <span class="comment">***********************************************************************/</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml" title="Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header...">openbabel/mol.h</a>&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;<a class="code" href="obconversion_8h.shtml" title="Handle file conversions. Declaration of OBFormat, OBConversion.">openbabel/obconversion.h</a>&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;<a class="code" href="obmolecformat_8h.shtml" title="Subclass of OBFormat for conversion of OBMol.">openbabel/obmolecformat.h</a>&gt;</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;libxml/xmlreader.h&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;libxml/xmlwriter.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;typeinfo&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="keyword">namespace </span>OpenBabel
<a name="l00025"></a>00025 {
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 
<a name="l00028"></a>00028   <span class="comment">//forward declaration</span>
<a name="l00029"></a>00029   <span class="keyword">class </span>XMLBaseFormat;
<a name="l00030"></a>00030 
<a name="l00031"></a>00031   <span class="comment">//******************************************************</span>
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml">00048</a> <span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLConversion.shtml" title="A subclass for conversion of XML formats.">XMLConversion</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>
<a name="l00049"></a>00049     {
<a name="l00050"></a>00050     <span class="keyword">public</span>:
<a name="l00052"></a>00052       <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#88492ed87e2bb55fa507a811230aa843" title="Existing OBConversion instance copied.">XMLConversion</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv);
<a name="l00053"></a>00053                 
<a name="l00055"></a>00055       <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ac1b603c1695a1a41ebbeaa3fd398e10" title="Frees reader and writer if necessary.">~XMLConversion</a>();
<a name="l00056"></a>00056 
<a name="l00057"></a>00057       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#59c32b70bb5bf6ee27b0611920d5afde" title="opens libxml2 reader">SetupReader</a>();
<a name="l00058"></a>00058       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#f91d68d5aff24430ababf0a5d847b9cb" title="opens libxml2 writer">SetupWriter</a>();
<a name="l00059"></a>00059 
<a name="l00061"></a>00061       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#d107b052021a4cd6976288dc3d9d797b" title="Parses the input xml stream and sends each element to the format&amp;#39;s callback routines...">ReadXML</a>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* pFormat, <a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb);
<a name="l00062"></a>00062 
<a name="l00065"></a>00065       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#e5615879f0acad951ce4c86dca89d328">SkipXML</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* ctag);
<a name="l00066"></a>00066 
<a name="l00067"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6fbcab1e9ed906780aa61cba35c3744a">00067</a>       <span class="keyword">typedef</span> std::map&lt;std::string, XMLBaseFormat*&gt; <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>;
<a name="l00068"></a>00068 
<a name="l00071"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#b188d28fc6fab286f1b4ff18c0a81ae1">00071</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>&amp; <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#b188d28fc6fab286f1b4ff18c0a81ae1">Namespaces</a>()
<a name="l00072"></a>00072         {
<a name="l00073"></a>00073           <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>* nsm = NULL;
<a name="l00074"></a>00074           <span class="keywordflow">if</span> (!nsm)
<a name="l00075"></a>00075             nsm = <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>;
<a name="l00076"></a>00076           <span class="keywordflow">return</span> *nsm;
<a name="l00077"></a>00077         };
<a name="l00078"></a>00078 
<a name="l00079"></a>00079       <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#09777c99e10d28476c0c920dd784a235">RegisterXMLFormat</a>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* pFormat,
<a name="l00080"></a>00080                                     <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* uri=NULL);
<a name="l00081"></a>00081 
<a name="l00083"></a>00083       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml" title="A subclass for conversion of XML formats.">XMLConversion</a>* <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#482fc8135a5ecf62b88f7e5348e62fbf" title="Returns the extended OBConversion class, making it if necessary.">GetDerived</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv, <span class="keywordtype">bool</span> ForReading=<span class="keyword">true</span>);
<a name="l00084"></a>00084 
<a name="l00087"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#0cc38e7988805424c15d68f5444a2a5d">00087</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#0cc38e7988805424c15d68f5444a2a5d">IsLast</a>()
<a name="l00088"></a>00088         { <span class="keywordflow">return</span> _pConv-&gt;<a class="code" href="classOpenBabel_1_1OBConversion.shtml#0cc38e7988805424c15d68f5444a2a5d" title="True if no more objects to be output.">IsLast</a>(); }
<a name="l00089"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#162677bee472136c7078735ac5a3142b">00089</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#162677bee472136c7078735ac5a3142b">GetOutputIndex</a>()
<a name="l00090"></a>00090         { <span class="keywordflow">return</span>  _pConv-&gt;<a class="code" href="classOpenBabel_1_1OBConversion.shtml#d44eaf0b472408acb158334c8725d339" title="Retrieves number of ChemObjects that have been actually output.">GetOutputIndex</a>(); }
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6aae68e56f624f6e485930b8c9532c21">00093</a>       xmlTextReaderPtr <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6aae68e56f624f6e485930b8c9532c21">GetReader</a>()<span class="keyword"> const</span>
<a name="l00094"></a>00094 <span class="keyword">        </span>{ <span class="keywordflow">return</span> _reader;       };
<a name="l00095"></a>00095 
<a name="l00096"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#8caa6e4b2d72f14392c800bdb6fa28cb">00096</a>       xmlTextWriterPtr <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#8caa6e4b2d72f14392c800bdb6fa28cb">GetWriter</a>()<span class="keyword"> const</span>
<a name="l00097"></a>00097 <span class="keyword">        </span>{ <span class="keywordflow">return</span> _writer;       };
<a name="l00098"></a>00098 
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#4964d8defcb0f638a51963d436188f12">00099</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#4964d8defcb0f638a51963d436188f12">OutputToStream</a>()
<a name="l00100"></a>00100         {
<a name="l00101"></a>00101           xmlOutputBufferFlush(_buf);
<a name="l00102"></a>00102         }
<a name="l00103"></a>00103 
<a name="l00104"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#2edcc253b10dd0b9f5e1b600a1dc24e9">00104</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#2edcc253b10dd0b9f5e1b600a1dc24e9">GetDefaultXMLClass</a>() <span class="comment">//TODO make dependent on object type</span>
<a name="l00105"></a>00105         { <span class="keywordflow">return</span> _pDefault;};
<a name="l00106"></a>00106 
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#82425091d5dc3a7becda24e6cd3d13db">00107</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#82425091d5dc3a7becda24e6cd3d13db">LookForNamespace</a>()
<a name="l00108"></a>00108         { _LookingForNamespace = <span class="keyword">true</span>; };
<a name="l00109"></a>00109 
<a name="l00111"></a>00111       <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#499db0113e7e419a0488316e2c51ca05" title="Static callback functions for xmlReaderForIO().">ReadStream</a>(<span class="keywordtype">void</span> * context, <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);
<a name="l00112"></a>00112       <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#2dcb149cda158829b4bd51979532798a">WriteStream</a>(<span class="keywordtype">void</span> * context, <span class="keyword">const</span> <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);
<a name="l00113"></a>00113       <span class="comment">//static int CloseStream(void* context);</span>
<a name="l00114"></a>00114 
<a name="l00115"></a>00115       std::string <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#d465787fba2c11cf2574fb3d142460b5">GetAttribute</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* attrname);
<a name="l00116"></a>00116 
<a name="l00118"></a>00118       std::string <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#81f0e81929276d8fa2d28af1bc47960c" title="Sets value to element content. Returns false if there is no content.">GetContent</a>();
<a name="l00119"></a>00119 
<a name="l00121"></a>00121       <span class="keywordtype">bool</span>    <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#5717310e3e50ca47144910f9968d2011" title="Sets value to element content as an integer. Returns false if there is no content...">GetContentInt</a>(<span class="keywordtype">int</span>&amp; value);
<a name="l00122"></a>00122 
<a name="l00124"></a>00124       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#7b14e97eab5859b8a02cd97abfc7e860" title="Sets value to element content as an double. Returns false if there is no content...">GetContentDouble</a>(<span class="keywordtype">double</span>&amp; value);
<a name="l00125"></a>00125 
<a name="l00126"></a>00126     <span class="keyword">private</span>:
<a name="l00127"></a>00127       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>* _pDefault;
<a name="l00128"></a>00128       <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* _pConv;
<a name="l00129"></a>00129       std::streampos  _requestedpos, _lastpos;  
<a name="l00130"></a>00130       xmlTextReaderPtr _reader;
<a name="l00131"></a>00131       xmlTextWriterPtr _writer;
<a name="l00132"></a>00132       xmlOutputBufferPtr _buf;
<a name="l00133"></a>00133       <span class="comment">//        xmlBufferPtr _buf;</span>
<a name="l00134"></a>00134       <span class="keywordtype">bool</span> _LookingForNamespace;
<a name="l00135"></a>00135     <span class="keyword">public</span>:     
<a name="l00136"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#fecc511417086050a7506ca632546cdb">00136</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#fecc511417086050a7506ca632546cdb">_SkipNextRead</a>;
<a name="l00137"></a>00137     };
<a name="l00138"></a>00138 
<a name="l00139"></a>00139   <span class="comment">//*************************************************</span>
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">00142</a> <span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats.">OBFormat</a>
<a name="l00143"></a>00143     {
<a name="l00144"></a>00144     <span class="keyword">protected</span>:
<a name="l00145"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">00145</a>       <a class="code" href="classOpenBabel_1_1XMLConversion.shtml" title="A subclass for conversion of XML formats.">XMLConversion</a>* <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a>;
<a name="l00146"></a>00146         
<a name="l00147"></a>00147       <span class="comment">//formating for output</span>
<a name="l00148"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#5fd9fbe1a6ecd9798543ec2a55c472a8">00148</a>       std::string <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#5fd9fbe1a6ecd9798543ec2a55c472a8">_prefix</a>;
<a name="l00149"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#4b00721003b8d35559a55c9098ff36c5">00149</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#5e2c3ec36cd04bac7ecad43b9f5501a2">baseindent</a>, <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#4b00721003b8d35559a55c9098ff36c5">ind</a>;
<a name="l00150"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#8000c477c493f1dc954e8a538ae6fda8">00150</a>       std::string <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#8000c477c493f1dc954e8a538ae6fda8">nsdecl</a>;
<a name="l00151"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#c0224265e7d214b7ed98e091fe559c88">00151</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#c0224265e7d214b7ed98e091fe559c88">_embedlevel</a>;
<a name="l00152"></a>00152 
<a name="l00153"></a>00153     <span class="keyword">public</span>:
<a name="l00154"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#429ba96990b23caaca913a23345f3793">00154</a>       <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#429ba96990b23caaca913a23345f3793">~XMLBaseFormat</a>(){}
<a name="l00155"></a>00155       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b3d80dde715e0505ef1818a621ecd888">NamespaceURI</a>()<span class="keyword">const</span>=0;
<a name="l00156"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#6b007f43192f527944eef5136e4b2703">00156</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#6b007f43192f527944eef5136e4b2703">DoElement</a>(<span class="keyword">const</span> std::string&amp; ElName){<span class="keywordflow">return</span> <span class="keyword">false</span>;};
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#0e59feda5d3eb85765b53cf4b42f77ef">00157</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#0e59feda5d3eb85765b53cf4b42f77ef">EndElement</a>(<span class="keyword">const</span> std::string&amp; ElName){<span class="keywordflow">return</span> <span class="keyword">false</span>;};
<a name="l00159"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#d2f75af8aac19e5c3c48dc26c1fa319c">00159</a>       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#d2f75af8aac19e5c3c48dc26c1fa319c" title="The tag at the end of the chemical object e.g. &amp;quot;/molecule&amp;gt;&amp;quot;.">EndTag</a>(){<span class="keywordflow">return</span> <span class="stringliteral">"&gt;"</span>;};
<a name="l00160"></a>00160         
<a name="l00161"></a>00161     <span class="keyword">protected</span>:
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#9d9e2a08b0659f0bc93d3eb7eaf8f05d">00162</a>       xmlTextReaderPtr <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#9d9e2a08b0659f0bc93d3eb7eaf8f05d">reader</a>()<span class="keyword"> const</span>
<a name="l00163"></a>00163 <span class="keyword">        </span>{
<a name="l00164"></a>00164           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6aae68e56f624f6e485930b8c9532c21">GetReader</a>();
<a name="l00165"></a>00165         }
<a name="l00166"></a>00166 
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#9569f81d2916200422a7927572913336">00167</a>       xmlTextWriterPtr <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#9569f81d2916200422a7927572913336">writer</a>()<span class="keyword"> const</span>
<a name="l00168"></a>00168 <span class="keyword">        </span>{
<a name="l00169"></a>00169           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#8caa6e4b2d72f14392c800bdb6fa28cb">GetWriter</a>();
<a name="l00170"></a>00170         }
<a name="l00171"></a>00171         
<a name="l00172"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#4964d8defcb0f638a51963d436188f12">00172</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#4964d8defcb0f638a51963d436188f12">OutputToStream</a>()
<a name="l00173"></a>00173         {
<a name="l00174"></a>00174           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#4964d8defcb0f638a51963d436188f12">OutputToStream</a>();
<a name="l00175"></a>00175         }
<a name="l00176"></a>00176         
<a name="l00179"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#dfcd8e84805c262d8cbca79a83f9d4cc">00179</a>       <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#dfcd8e84805c262d8cbca79a83f9d4cc">SkipObjects</a>(<span class="keywordtype">int</span> n, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00180"></a>00180         {
<a name="l00181"></a>00181           <span class="comment">//don't implement on base class</span>
<a name="l00182"></a>00182           <span class="keywordflow">if</span>(*<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#d2f75af8aac19e5c3c48dc26c1fa319c" title="The tag at the end of the chemical object e.g. &amp;quot;/molecule&amp;gt;&amp;quot;.">EndTag</a>()==<span class="charliteral">'&gt;'</span>)
<a name="l00183"></a>00183             <span class="keywordflow">return</span> 0;
<a name="l00184"></a>00184 
<a name="l00185"></a>00185           <span class="comment">//Set up XMLConversion class with reader </span>
<a name="l00186"></a>00186           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a> = <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#482fc8135a5ecf62b88f7e5348e62fbf" title="Returns the extended OBConversion class, making it if necessary.">XMLConversion::GetDerived</a>(pConv,<span class="keyword">true</span>);
<a name="l00187"></a>00187           <span class="keywordflow">if</span>(!<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a>)
<a name="l00188"></a>00188             <span class="keywordflow">return</span> -1;
<a name="l00189"></a>00189 
<a name="l00190"></a>00190           <span class="comment">//always find the end of at least 1 object</span>
<a name="l00191"></a>00191           <span class="keywordflow">if</span>(n==0)++n;
<a name="l00192"></a>00192                 
<a name="l00193"></a>00193           <span class="comment">//Skip n objects, returning -1 if not successful</span>
<a name="l00194"></a>00194           <span class="keywordtype">int</span> i;
<a name="l00195"></a>00195           <span class="keywordflow">for</span>(i=0; i&lt;n; ++i)
<a name="l00196"></a>00196             <span class="keywordflow">if</span>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#e5615879f0acad951ce4c86dca89d328">SkipXML</a>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#d2f75af8aac19e5c3c48dc26c1fa319c" title="The tag at the end of the chemical object e.g. &amp;quot;/molecule&amp;gt;&amp;quot;.">EndTag</a>())!=1)
<a name="l00197"></a>00197               <span class="keywordflow">return</span> -1;
<a name="l00198"></a>00198                 
<a name="l00199"></a>00199           <span class="keywordflow">return</span> 1;       
<a name="l00200"></a>00200         }
<a name="l00201"></a>00201 
<a name="l00202"></a>00202     };
<a name="l00203"></a>00203 
<a name="l00204"></a>00204   <span class="comment">//*************************************************</span>
<a name="l00207"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">00207</a> <span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml" title="Abstract class for XML formats which represent molecules.">XMLMoleculeFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats.">XMLBaseFormat</a>
<a name="l00208"></a>00208     {
<a name="l00209"></a>00209     <span class="keyword">protected</span>:
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#e286ac3ecc365473ace5c0da2c656ffe">00210</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>* <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#e286ac3ecc365473ace5c0da2c656ffe">_pmol</a>;
<a name="l00211"></a>00211 
<a name="l00212"></a>00212     <span class="keyword">public</span>:
<a name="l00213"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#d794fc5cf08a2a6b1e877168bb784e0f">00213</a>       <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#d794fc5cf08a2a6b1e877168bb784e0f">~XMLMoleculeFormat</a>(){}
<a name="l00214"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#9acd362b27e30c19a2c870ca71592723">00214</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#9acd362b27e30c19a2c870ca71592723" title="The &amp;quot;Convert&amp;quot; interface Read function.">ReadChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00215"></a>00215         {
<a name="l00216"></a>00216           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml#2a5208bfd803385534526eea570bf6b0" title="Static routine, which can be called from elsewhere.">OBMoleculeFormat::ReadChemObjectImpl</a>(pConv, <span class="keyword">this</span>);
<a name="l00217"></a>00217         };
<a name="l00218"></a>00218 
<a name="l00219"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#39c2aaf250dde6e85d05ff9357d8b003">00219</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#39c2aaf250dde6e85d05ff9357d8b003" title="The &amp;quot;Convert&amp;quot; interface Write function.">WriteChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00220"></a>00220         {
<a name="l00221"></a>00221           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml#9c04a77825af89227b6f83f19909d01d" title="Static routine, which can be called from elsewhere.">OBMoleculeFormat::WriteChemObjectImpl</a>(pConv, <span class="keyword">this</span>);
<a name="l00222"></a>00222         };
<a name="l00223"></a>00223 
<a name="l00224"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#5a3cd5ffc0d21fe9b95d804c44e7d146">00224</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#5a3cd5ffc0d21fe9b95d804c44e7d146" title="The &amp;quot;API&amp;quot; interface Read function.">ReadMolecule</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>* pOb, <a class="code" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another.">OBConversion</a>* pConv)
<a name="l00225"></a>00225         {
<a name="l00226"></a>00226           <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#e286ac3ecc365473ace5c0da2c656ffe">_pmol</a> = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>*<span class="keyword">&gt;</span>(pOb);
<a name="l00227"></a>00227           <span class="keywordflow">if</span>(!<a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#e286ac3ecc365473ace5c0da2c656ffe">_pmol</a>)
<a name="l00228"></a>00228             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00229"></a>00229 
<a name="l00230"></a>00230           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a> = <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#482fc8135a5ecf62b88f7e5348e62fbf" title="Returns the extended OBConversion class, making it if necessary.">XMLConversion::GetDerived</a>(pConv,<span class="keyword">true</span>);
<a name="l00231"></a>00231           <span class="keywordflow">if</span>(!<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a>)
<a name="l00232"></a>00232             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00233"></a>00233           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#c0224265e7d214b7ed98e091fe559c88">_embedlevel</a> = -1;
<a name="l00234"></a>00234           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#b50420582d1794a71702ae17e176dc07">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#d107b052021a4cd6976288dc3d9d797b" title="Parses the input xml stream and sends each element to the format&amp;#39;s callback routines...">ReadXML</a>(<span class="keyword">this</span>,pOb);
<a name="l00235"></a>00235         };
<a name="l00236"></a>00236 
<a name="l00237"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#54e576034bd51c66256aa6a98f81d644">00237</a>       <span class="keyword">const</span> std::type_info&amp; <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#54e576034bd51c66256aa6a98f81d644">GetType</a>()
<a name="l00238"></a>00238         {
<a name="l00239"></a>00239           <span class="keywordflow">return</span> <span class="keyword">typeid</span>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>*);
<a name="l00240"></a>00240         };
<a name="l00241"></a>00241 
<a name="l00242"></a>00242     };
<a name="l00243"></a>00243 
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 }<span class="comment">//namespace</span>
<a name="l00246"></a>00246 
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:34 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
