<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBBitVec Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>
  </div>
</div>
<div class="contents">
<h1>OBBitVec Class Reference</h1><!-- doxytag: class="OpenBabel::OBBitVec" -->A speed-optimized vector of bits.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="bitvec_8h-source.shtml">openbabel/bitvec.h</a>&gt;</code>
<p>

<p>
<a href="classOpenBabel_1_1OBBitVec-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">typedef std::vector&lt; unsigned &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#732c7bffa6fdaeb8996f3a63450f422f">word_vector</a></td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#f0100bd07b2642e38b29dc8e74ff765b">OBBitVec</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#c5a4c3682c88b8d666b5d7d33183fb55">OBBitVec</a> (unsigned size_in_bits)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#1a1bd9c96031c99d3209b04ef50b4d6c">OBBitVec</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#0920b57e131b9eab47d6939e890cd521">SetBitOn</a> (unsigned bit_offset)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#5ca76b0cbbf2dd86395b0af704c8cdfb">SetBitOff</a> (unsigned bit_offset)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#1a5ff904f4dbba5c3d92bb1d98fa23c2">SetRangeOn</a> (unsigned lo_bit_offset, unsigned hi_bit_offset)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#f248c931e7d8abdcb0ca18ba0a3e8533">SetRangeOff</a> (unsigned lo_bit_offset, unsigned hi_bit_offset)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#47b489f96fb83fb92444dc4fc69d052e">Fold</a> (unsigned new_bit_size)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#c00671a01df7cc0b2751cf01576cb48b">FirstBit</a> (unsigned bit_offset=0) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#b8bac9f6bedd4c94792757d965945ac6">NextBit</a> (int last_bit_offset) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#787ec2b13a14e73a2732a5eb0941c89a">EndBit</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#5d1e7e6970918644e52e9d09c232ae93">GetSize</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#cf47ba30bf82aff0a9f03029917c5849">CountBits</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#6fcfd4a80bfd7dc324f815cd351bfbdf">Empty</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#aef62c8761ddd1b95824fc57b1b277b5">IsEmpty</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#7bc2d3a9e8b18736d47932ba327afd38">Resize</a> (unsigned size_in_bits)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#6b57d4f315f27f863dfaba863f9d6c4c">ResizeWords</a> (unsigned size_in_words)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#9cbd85a20d3c22eed705e4215b5beff7">BitIsSet</a> (unsigned bit_offset) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#d06f035d55e669326f14cd7c6ff724cc">BitIsOn</a> (int bit_offset) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#6919c04c8f2a7a600d926dfb69a2ccff">FromVecInt</a> (const std::vector&lt; int &gt; &amp;bit_offsets)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#0e38205f69ea775ac85766e8fa84aa09">FromString</a> (const std::string &amp;line, int bits)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#d336607832d6ef7e48bed9fe103e0fa5">ToVecInt</a> (std::vector&lt; int &gt; &amp;bit_offsets) const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a71d36872f416feaa853788a7a7a7ef8">Clear</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#00e05e1bb6f3185b1a40728679be5274">Negate</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#56df5cb29ee1da7ea5626ab4c0f35882">GetWords</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml#732c7bffa6fdaeb8996f3a63450f422f">word_vector</a> &amp;vec)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#24793888dd45beaff49d652ce07bd823">operator=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#3929c86b35d09fcdcf228d9b5989e0f8">operator &amp;=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#d34fbd2840a8afd87d69f4f71174407d">operator|=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#3f7949c8ca082670fa93310be6576854">operator|=</a> (int bit_offset)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#fb212210bd7dffef43eaca0db7e3a499">operator^=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#321d8efee0bf7ca07bbffe94bda40b87">operator-=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a7711d3edd25794568784a430fd7b062">operator+=</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#1f22ca998400b0babe0bee468189225b">operator[]</a> (int bit_offset) const </td></tr>

<tr><td colspan="2"><br><h2>Friends</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">OBERROR <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a46d68ba4737343303962397391cb7ba">operator|</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">OBERROR <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#657ec1b1c3c3019ea29f60356c18c91a">operator &amp;</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">OBERROR <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#b9f45dc2b4c1840d291ea757e431933a">operator^</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">OBERROR <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#4bd7d9808479c28f2cc88650929df4d9">operator-</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">OBERROR bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#792b966c395440b305366a77fd57651d">operator==</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">OBERROR bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#0c4f48d70507806331e9c497f0ed8144">operator&lt;</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">OBERROR std::istream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#501d573f3e7e04cf92470fa0c7d23789">operator&gt;&gt;</a> (std::istream &amp;is, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">OBERROR std::ostream &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#b6ce85c5fdeb93b0aa917346a9deb313">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
A speed-optimized vector of bits. 
<p>
Fast and efficient bitstring class.<p>
This class implements a fast vector of bits using internally a vector of processor native unsigned words. Any bits which are out of reach of the current size are considered to be zero. Streamlined, corrected and documented by <a href="mailto:kshepherd1@users.sourceforge.net">kshepherd1@users.sourceforge.net</a><p>
The <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> class is a fast and efficient bitstring class that is handy to use as a truth table. Truth tables are an easy way to store whether a list of items has a particular property. Instances of <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> can be dynamically resized, and have a number of overloaded operators that make code simple and readable. The following examples demonstrate uses of the <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a> class: <div class="fragment"><pre class="fragment">    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#f0100bd07b2642e38b29dc8e74ff765b" title="Construct a bit vector of the default size.">OBBitVec</a> bv1,bv2,bv3;
    bv1.SetBitOn(5);
    bv2.SetBitOff(200);
    bv1 |= bv2;
    bv1 = bv1 &amp; bv2;
    <span class="keywordflow">if</span> (bv1.IsEmpty()) <span class="comment">// IsEmpty() returns true if no bits are set on</span>
    {
       std::cout &lt;&lt; <span class="stringliteral">"bv1 = "</span> &lt;&lt; bv1 &lt;&lt; std::endl;
    }

    <span class="keywordtype">int</span> bit;
    <span class="keywordflow">for</span> (bit = bv1.NextBit(0);bit != bv1.EndBit();bit = bv1.NextBit(bit))
    {
       cout &lt;&lt; <span class="stringliteral">"the next bit turned on is "</span> &lt;&lt; bit &lt;&lt; endl;
    }
</pre></div> <hr><h2>Member Typedef Documentation</h2>
<a class="anchor" name="732c7bffa6fdaeb8996f3a63450f422f"></a><!-- doxytag: member="OpenBabel::OBBitVec::word_vector" ref="732c7bffa6fdaeb8996f3a63450f422f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;unsigned&gt; <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#732c7bffa6fdaeb8996f3a63450f422f">word_vector</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="f0100bd07b2642e38b29dc8e74ff765b"></a><!-- doxytag: member="OpenBabel::OBBitVec::OBBitVec" ref="f0100bd07b2642e38b29dc8e74ff765b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct a bit vector of the default size. 
<p>
Construct a bit vector of STARTWORDS size, cleared to all zero bits. 
</div>
</div><p>
<a class="anchor" name="c5a4c3682c88b8d666b5d7d33183fb55"></a><!-- doxytag: member="OpenBabel::OBBitVec::OBBitVec" ref="c5a4c3682c88b8d666b5d7d33183fb55" args="(unsigned size_in_bits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>           </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>size_in_bits</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Construct a bit vector of maxbits bits. 
<p>
Construct a bit vector with a size in bits of <code>size_in_bits</code> rounded up to the nearest word and cleared to all zero bits. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>size_in_bits</em>&nbsp;</td><td>The number of bits for which to reserve space </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="1a1bd9c96031c99d3209b04ef50b4d6c"></a><!-- doxytag: member="OpenBabel::OBBitVec::OBBitVec" ref="1a1bd9c96031c99d3209b04ef50b4d6c" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Copy constructor (result has same number of bits). 
<p>
Construct a bit vector which is an exact duplicate of <code>bv</code>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv</em>&nbsp;</td><td>The other bit vector to copy to this </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="0920b57e131b9eab47d6939e890cd521"></a><!-- doxytag: member="OpenBabel::OBBitVec::SetBitOn" ref="0920b57e131b9eab47d6939e890cd521" args="(unsigned bit_offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBitOn           </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>bit_offset</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the <code>bit_offset</code> 'th bit to 1. 
<p>
Set the <code>bit_offset</code> 'th bit to 1 Increases the size of this bit vector if necessary <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bit_offset</em>&nbsp;</td><td>a zero based offset into the bit vector </td></tr>
  </table>
</dl>

<p>Referenced by <a class="el" href="forcefield_8cpp-source.shtml#l00615">OBFFConstraints::AddAtomConstraint()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l00626">OBFFConstraints::AddAtomXConstraint()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l00637">OBFFConstraints::AddAtomYConstraint()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l00648">OBFFConstraints::AddAtomZConstraint()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l00605">OBFFConstraints::AddIgnore()</a>, <a class="el" href="builder_8cpp-source.shtml#l00453">OBBuilder::AddNbrs()</a>, <a class="el" href="ring_8cpp-source.shtml#l00219">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="canon_8cpp-source.shtml#l00609">OpenBabel::BreakChiralTies()</a>, <a class="el" href="builder_8cpp-source.shtml#l00484">OBBuilder::Build()</a>, <a class="el" href="mol_8cpp-source.shtml#l00337">OBMol::ContigFragList()</a>, <a class="el" href="kekulize_8cpp-source.shtml#l00548">OBMol::expandcycle()</a>, <a class="el" href="mol_8cpp-source.shtml#l00560">OBMol::FindChildren()</a>, <a class="el" href="canon_8cpp-source.shtml#l00804">OpenBabel::FindConjugatedEZBonds()</a>, <a class="el" href="mol_8cpp-source.shtml#l00477">OBMol::FindLargestFragment()</a>, <a class="el" href="ring_8cpp-source.shtml#l00359">OpenBabel::FindRings()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00323">OBBitVec::FromString()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00309">OBBitVec::FromVecInt()</a>, <a class="el" href="residue_8cpp-source.shtml#l01024">OBResidue::GetBonds()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00141">OpenBabel::GetDFFVector()</a>, <a class="el" href="builder_8cpp-source.shtml#l00463">OBBuilder::GetFragment()</a>, <a class="el" href="mol_8cpp-source.shtml#l00594">OBMol::GetGTDVector()</a>, <a class="el" href="canon_8cpp-source.shtml#l00219">OpenBabel::GetGTDVector()</a>, <a class="el" href="parsmart_8cpp-source.shtml#l01598">OpenBabel::MarkGrowBonds()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00312">OpenBabel::MinimumPairRMS()</a>, <a class="el" href="kekulize_8cpp-source.shtml#l00046">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00590">OpenBabel::operator&gt;&gt;()</a>, <a class="el" href="ring_8cpp-source.shtml#l00286">OBRingSearch::SaveUniqueRing()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00352">OBRotorList::SetEvalAtoms()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00113">OBBitVec::SetRangeOn()</a>, and <a class="el" href="forcefield_8cpp-source.shtml#l01992">OBForceField::UpdatePairsSimple()</a>.</p>

</div>
</div><p>
<a class="anchor" name="5ca76b0cbbf2dd86395b0af704c8cdfb"></a><!-- doxytag: member="OpenBabel::OBBitVec::SetBitOff" ref="5ca76b0cbbf2dd86395b0af704c8cdfb" args="(unsigned bit_offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBitOff           </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>bit_offset</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the <code>bit_offset</code> 'th bit to 0. 
<p>
Set the <code>bit_offset</code> 'th bit to 0 <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bit_offset</em>&nbsp;</td><td>a zero based offset into the bit vector </td></tr>
  </table>
</dl>

<p>Referenced by <a class="el" href="forcefield_8cpp-source.shtml#l00570">OBFFConstraints::DeleteConstraint()</a>, <a class="el" href="mol_8cpp-source.shtml#l00560">OBMol::FindChildren()</a>, <a class="el" href="obiter_8cpp-source.shtml#l00281">OBMolAtomBFSIter::OBMolAtomBFSIter()</a>, <a class="el" href="obiter_8cpp-source.shtml#l00145">OBMolAtomDFSIter::OBMolAtomDFSIter()</a>, <a class="el" href="obiter_8cpp-source.shtml#l00347">OBMolAtomBFSIter::operator++()</a>, <a class="el" href="obiter_8cpp-source.shtml#l00199">OBMolAtomDFSIter::operator++()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00150">OBBitVec::SetRangeOff()</a>, and <a class="el" href="forcefield_8cpp-source.shtml#l01992">OBForceField::UpdatePairsSimple()</a>.</p>

</div>
</div><p>
<a class="anchor" name="1a5ff904f4dbba5c3d92bb1d98fa23c2"></a><!-- doxytag: member="OpenBabel::OBBitVec::SetRangeOn" ref="1a5ff904f4dbba5c3d92bb1d98fa23c2" args="(unsigned lo_bit_offset, unsigned hi_bit_offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRangeOn           </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>lo_bit_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>hi_bit_offset</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the range of bits from <code>lo_bit_offset</code> to <code>hi_bit_offset</code> to 1. 
<p>
Set the range of bits from <code>lo_bit_offset</code> to <code>hi_bit_offset</code> to 1 Increases the size of this bit vector if necessary <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>lo_bit_offset</em>&nbsp;</td><td>a zero based offset into the bit vector </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>hi_bit_offset</em>&nbsp;</td><td>a zero based offset into the bit vector </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="f248c931e7d8abdcb0ca18ba0a3e8533"></a><!-- doxytag: member="OpenBabel::OBBitVec::SetRangeOff" ref="f248c931e7d8abdcb0ca18ba0a3e8533" args="(unsigned lo_bit_offset, unsigned hi_bit_offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRangeOff           </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>lo_bit_offset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>hi_bit_offset</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set the range of bits from <code>lo_bit_offset</code> to <code>hi_bit_offset</code> to 0. 
<p>
Set the range of bits from <code>lo_bit_offset</code> to <code>hi_bit_offset</code> to 0 <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>lo_bit_offset</em>&nbsp;</td><td>a zero based offset into the bit vector </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>hi_bit_offset</em>&nbsp;</td><td>a zero based offset into the bit vector </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="47b489f96fb83fb92444dc4fc69d052e"></a><!-- doxytag: member="OpenBabel::OBBitVec::Fold" ref="47b489f96fb83fb92444dc4fc69d052e" args="(unsigned new_bit_size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Fold           </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>new_bit_size</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reduce the size of the vector by or-ing the excess bits over the start. 
<p>
Reduce the size of the vector to <code>new_bit_size</code> by or-ing the excess bits over the start of the vector <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>new_bit_size</em>&nbsp;</td><td>the size of the resultant vector, in bits </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="c00671a01df7cc0b2751cf01576cb48b"></a><!-- doxytag: member="OpenBabel::OBBitVec::FirstBit" ref="c00671a01df7cc0b2751cf01576cb48b" args="(unsigned bit_offset=0) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int FirstBit           </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>bit_offset</em> = <code>0</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Find the first true bit at or after <code>bit_offset</code>. 
<p>
Searches the vector for the first true value, starting at the <code>bit_offset</code> 'th bit <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bit_offset</em>&nbsp;</td><td>the first bit to consider </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the bit offset of the first true bit at or after <code>bit_offset</code>, or -1 if there is none </dd></dl>

<p>Referenced by <a class="el" href="obiter_8cpp-source.shtml#l00347">OBMolAtomBFSIter::operator++()</a>, and <a class="el" href="obiter_8cpp-source.shtml#l00199">OBMolAtomDFSIter::operator++()</a>.</p>

</div>
</div><p>
<a class="anchor" name="b8bac9f6bedd4c94792757d965945ac6"></a><!-- doxytag: member="OpenBabel::OBBitVec::NextBit" ref="b8bac9f6bedd4c94792757d965945ac6" args="(int last_bit_offset) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int NextBit           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>last_bit_offset</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Find the next true bit after <code>last_bit_offset</code>. 
<p>
Searches the vector for the first true value, starting at the <code>last_bit_offset</code> 'th bit <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>last_bit_offset</em>&nbsp;</td><td>the bit before the first to consider </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the bit offset of the first true bit after <code>last_bit_offset</code>, or -1 if there is none </dd></dl>

<p>Referenced by <a class="el" href="ring_8cpp-source.shtml#l00511">OpenBabel::BuildOBRTreeVector()</a>, <a class="el" href="mol_8cpp-source.shtml#l00337">OBMol::ContigFragList()</a>, <a class="el" href="mol_8cpp-source.shtml#l00524">OBMol::FindChildren()</a>, <a class="el" href="mol_8cpp-source.shtml#l00477">OBMol::FindLargestFragment()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00141">OpenBabel::GetDFFVector()</a>, <a class="el" href="mol_8cpp-source.shtml#l00594">OBMol::GetGTDVector()</a>, <a class="el" href="canon_8cpp-source.shtml#l00219">OpenBabel::GetGTDVector()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00554">OpenBabel::operator&lt;()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00352">OBRotorList::SetEvalAtoms()</a>, and <a class="el" href="bitvec_8cpp-source.shtml#l00368">OBBitVec::ToVecInt()</a>.</p>

</div>
</div><p>
<a class="anchor" name="787ec2b13a14e73a2732a5eb0941c89a"></a><!-- doxytag: member="OpenBabel::OBBitVec::EndBit" ref="787ec2b13a14e73a2732a5eb0941c89a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int EndBit           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the bit offset of the last bit (for iterating) i.e. -1. 
<p>

<p>Referenced by <a class="el" href="ring_8cpp-source.shtml#l00511">OpenBabel::BuildOBRTreeVector()</a>, <a class="el" href="mol_8cpp-source.shtml#l00337">OBMol::ContigFragList()</a>, <a class="el" href="mol_8cpp-source.shtml#l00524">OBMol::FindChildren()</a>, <a class="el" href="mol_8cpp-source.shtml#l00477">OBMol::FindLargestFragment()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00141">OpenBabel::GetDFFVector()</a>, <a class="el" href="mol_8cpp-source.shtml#l00594">OBMol::GetGTDVector()</a>, <a class="el" href="canon_8cpp-source.shtml#l00219">OpenBabel::GetGTDVector()</a>, <a class="el" href="obiter_8cpp-source.shtml#l00347">OBMolAtomBFSIter::operator++()</a>, <a class="el" href="obiter_8cpp-source.shtml#l00199">OBMolAtomDFSIter::operator++()</a>, and <a class="el" href="rotor_8cpp-source.shtml#l00352">OBRotorList::SetEvalAtoms()</a>.</p>

</div>
</div><p>
<a class="anchor" name="5d1e7e6970918644e52e9d09c232ae93"></a><!-- doxytag: member="OpenBabel::OBBitVec::GetSize" ref="5d1e7e6970918644e52e9d09c232ae93" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned GetSize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the number of words ( NOT the number of bits ). 
<p>

<p>Referenced by <a class="el" href="bitvec_8cpp-source.shtml#l00217">OBBitVec::NextBit()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00400">OBBitVec::operator &amp;=()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00447">OBBitVec::operator-=()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00523">OpenBabel::operator==()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00432">OBBitVec::operator^=()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00417">OBBitVec::operator|=()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00099">OBBitVec::SetBitOff()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00086">OBBitVec::SetBitOn()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00150">OBBitVec::SetRangeOff()</a>, and <a class="el" href="bitvec_8cpp-source.shtml#l00113">OBBitVec::SetRangeOn()</a>.</p>

</div>
</div><p>
<a class="anchor" name="cf47ba30bf82aff0a9f03029917c5849"></a><!-- doxytag: member="OpenBabel::OBBitVec::CountBits" ref="cf47ba30bf82aff0a9f03029917c5849" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned CountBits           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return the number of bits which are set to 1 in the vector. 
<p>
Count the number of bits which are set in this vector <dl class="return" compact><dt><b>Returns:</b></dt><dd>the bit count </dd></dl>

<p>Referenced by <a class="el" href="canon_8cpp-source.shtml#l00547">OpenBabel::CalculateSymmetry()</a>, <a class="el" href="canon_8cpp-source.shtml#l01090">OpenBabel::CanonicalLabels()</a>, <a class="el" href="mol_8cpp-source.shtml#l00337">OBMol::ContigFragList()</a>, <a class="el" href="mol_8cpp-source.shtml#l00477">OBMol::FindLargestFragment()</a>, <a class="el" href="bond_8cpp-source.shtml#l00477">OBBond::IsClosure()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00658">OpenBabel::Tanimoto()</a>, and <a class="el" href="bitvec_8cpp-source.shtml#l00368">OBBitVec::ToVecInt()</a>.</p>

</div>
</div><p>
<a class="anchor" name="6fcfd4a80bfd7dc324f815cd351bfbdf"></a><!-- doxytag: member="OpenBabel::OBBitVec::Empty" ref="6fcfd4a80bfd7dc324f815cd351bfbdf" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Empty           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000004">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#aef62c8761ddd1b95824fc57b1b277b5" title="Are there no bits set to 1 in this vector?">IsEmpty()</a> instead. </dd></dl>

<p>Referenced by <a class="el" href="ring_8cpp-source.shtml#l00511">OpenBabel::BuildOBRTreeVector()</a>, <a class="el" href="mol_8cpp-source.shtml#l00524">OBMol::FindChildren()</a>, <a class="el" href="mol_8cpp-source.shtml#l00477">OBMol::FindLargestFragment()</a>, and <a class="el" href="rotor_8cpp-source.shtml#l00352">OBRotorList::SetEvalAtoms()</a>.</p>

</div>
</div><p>
<a class="anchor" name="aef62c8761ddd1b95824fc57b1b277b5"></a><!-- doxytag: member="OpenBabel::OBBitVec::IsEmpty" ref="aef62c8761ddd1b95824fc57b1b277b5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsEmpty           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Are there no bits set to 1 in this vector? 
<p>
Are there no bits set to 1 in this vector? <dl class="return" compact><dt><b>Returns:</b></dt><dd>true for "is empty", false if not empty </dd></dl>

<p>Referenced by <a class="el" href="mol_8cpp-source.shtml#l00337">OBMol::ContigFragList()</a>, <a class="el" href="mol_8cpp-source.shtml#l00560">OBMol::FindChildren()</a>, <a class="el" href="mol_8cpp-source.shtml#l00477">OBMol::FindLargestFragment()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00141">OpenBabel::GetDFFVector()</a>, <a class="el" href="mol_8cpp-source.shtml#l00594">OBMol::GetGTDVector()</a>, and <a class="el" href="canon_8cpp-source.shtml#l00219">OpenBabel::GetGTDVector()</a>.</p>

</div>
</div><p>
<a class="anchor" name="7bc2d3a9e8b18736d47932ba327afd38"></a><!-- doxytag: member="OpenBabel::OBBitVec::Resize" ref="7bc2d3a9e8b18736d47932ba327afd38" args="(unsigned size_in_bits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Resize           </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>size_in_bits</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reserve space for <code>size_in_bits</code> bits. 
<p>
Reserve space for <code>size_in_bits</code> bits rounded up <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>size_in_bits</em>&nbsp;</td><td>the number of bits </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if enlargement was necessary, false otherwise </dd></dl>

<p>Referenced by <a class="el" href="canon_8cpp-source.shtml#l00609">OpenBabel::BreakChiralTies()</a>, <a class="el" href="mol_8cpp-source.shtml#l00337">OBMol::ContigFragList()</a>, <a class="el" href="canon_8cpp-source.shtml#l00293">OpenBabel::FindRingAtoms()</a>, <a class="el" href="ring_8cpp-source.shtml#l00339">OBMol::FindRingAtomsAndBonds()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00323">OBBitVec::FromString()</a>, <a class="el" href="bond_8cpp-source.shtml#l00477">OBBond::IsClosure()</a>, <a class="el" href="kekulize_8cpp-source.shtml#l00046">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="obiter_8cpp-source.shtml#l00281">OBMolAtomBFSIter::OBMolAtomBFSIter()</a>, <a class="el" href="obiter_8cpp-source.shtml#l00145">OBMolAtomDFSIter::OBMolAtomDFSIter()</a>, and <a class="el" href="ring_8cpp-source.shtml#l00469">OBRing::OBRing()</a>.</p>

</div>
</div><p>
<a class="anchor" name="6b57d4f315f27f863dfaba863f9d6c4c"></a><!-- doxytag: member="OpenBabel::OBBitVec::ResizeWords" ref="6b57d4f315f27f863dfaba863f9d6c4c" args="(unsigned size_in_words)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ResizeWords           </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>size_in_words</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reserve space for <code>size_in_words</code> words. 
<p>
Reserve space for <code>size_in_words</code> words <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>size_in_words</em>&nbsp;</td><td>the number of words </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if enlargement was necessary, false otherwise </dd></dl>

<p>Referenced by <a class="el" href="bitvec_8cpp-source.shtml#l00192">OBBitVec::Fold()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00447">OBBitVec::operator-=()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00432">OBBitVec::operator^=()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00417">OBBitVec::operator|=()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00086">OBBitVec::SetBitOn()</a>, and <a class="el" href="bitvec_8cpp-source.shtml#l00113">OBBitVec::SetRangeOn()</a>.</p>

</div>
</div><p>
<a class="anchor" name="9cbd85a20d3c22eed705e4215b5beff7"></a><!-- doxytag: member="OpenBabel::OBBitVec::BitIsSet" ref="9cbd85a20d3c22eed705e4215b5beff7" args="(unsigned bit_offset) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool BitIsSet           </td>
          <td>(</td>
          <td class="paramtype">unsigned&nbsp;</td>
          <td class="paramname"> <em>bit_offset</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Asks if the <code>bit_offset</code> 'th bit is set. 
<p>
Is the <code>bit_offset</code> 'th bit set ? <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bit_offset</em>&nbsp;</td><td>a zero based offset into the bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if it is set, false otherwise </dd></dl>

<p>Referenced by <a class="el" href="builder_8cpp-source.shtml#l00453">OBBuilder::AddNbrs()</a>, <a class="el" href="builder_8cpp-source.shtml#l00484">OBBuilder::Build()</a>, <a class="el" href="builder_8cpp-source.shtml#l00271">OBBuilder::Connect()</a>, <a class="el" href="canon_8cpp-source.shtml#l00175">OpenBabel::GetHvyBondSum()</a>, <a class="el" href="canon_8cpp-source.shtml#l00144">OpenBabel::GetHvyValence()</a>, <a class="el" href="canon_8cpp-source.shtml#l00121">OpenBabel::GetValence()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l00748">OBFFConstraints::IsFixed()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l00743">OBFFConstraints::IsIgnored()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l00753">OBFFConstraints::IsXFixed()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l00758">OBFFConstraints::IsYFixed()</a>, and <a class="el" href="forcefield_8cpp-source.shtml#l00763">OBFFConstraints::IsZFixed()</a>.</p>

</div>
</div><p>
<a class="anchor" name="d06f035d55e669326f14cd7c6ff724cc"></a><!-- doxytag: member="OpenBabel::OBBitVec::BitIsOn" ref="d06f035d55e669326f14cd7c6ff724cc" args="(int bit_offset) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool BitIsOn           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>bit_offset</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b><a class="el" href="deprecated.shtml#_deprecated000005">Deprecated:</a></b></dt><dd>Use BitIsSet(unsigned bit_offset) instead. </dd></dl>

<p>Referenced by <a class="el" href="canon_8cpp-source.shtml#l00547">OpenBabel::CalculateSymmetry()</a>, <a class="el" href="canon_8cpp-source.shtml#l01090">OpenBabel::CanonicalLabels()</a>, <a class="el" href="mol_8cpp-source.shtml#l00337">OBMol::ContigFragList()</a>, <a class="el" href="canon_8cpp-source.shtml#l00399">OpenBabel::CreateNewClassVector()</a>, <a class="el" href="ring_8cpp-source.shtml#l00145">OpenBabel::DetermineFRJ()</a>, <a class="el" href="mol_8cpp-source.shtml#l00560">OBMol::FindChildren()</a>, <a class="el" href="mol_8cpp-source.shtml#l00477">OBMol::FindLargestFragment()</a>, <a class="el" href="residue_8cpp-source.shtml#l01024">OBResidue::GetBonds()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00141">OpenBabel::GetDFFVector()</a>, <a class="el" href="canon_8cpp-source.shtml#l00331">OpenBabel::GetGIVector()</a>, <a class="el" href="mol_8cpp-source.shtml#l00594">OBMol::GetGTDVector()</a>, <a class="el" href="canon_8cpp-source.shtml#l00219">OpenBabel::GetGTDVector()</a>, and <a class="el" href="ring_8cpp-source.shtml#l00459">OBRing::IsMember()</a>.</p>

</div>
</div><p>
<a class="anchor" name="6919c04c8f2a7a600d926dfb69a2ccff"></a><!-- doxytag: member="OpenBabel::OBBitVec::FromVecInt" ref="6919c04c8f2a7a600d926dfb69a2ccff" args="(const std::vector&lt; int &gt; &amp;bit_offsets)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FromVecInt           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>bit_offsets</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the bits listed as bit offsets. 
<p>
Sets bits on, listed as bit offsets <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bit_offsets</em>&nbsp;</td><td>A list of bit offsets </td></tr>
  </table>
</dl>

<p>Referenced by <a class="el" href="ring_8cpp-source.shtml#l00145">OpenBabel::DetermineFRJ()</a>, <a class="el" href="parsmart_8cpp-source.shtml#l02983">OBSmartsPattern::GetUMapList()</a>, and <a class="el" href="ring_8cpp-source.shtml#l00469">OBRing::OBRing()</a>.</p>

</div>
</div><p>
<a class="anchor" name="0e38205f69ea775ac85766e8fa84aa09"></a><!-- doxytag: member="OpenBabel::OBBitVec::FromString" ref="0e38205f69ea775ac85766e8fa84aa09" args="(const std::string &amp;line, int bits)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FromString           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>new_bit_size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the bits listed as a string of integers. 
<p>
Sets bits on, listed as a string of character-represented integers This bit vector is first cleared. The format is "[ n0 n1 n2 n3 ... ]". The square brackets are optional. The whitespace can be SPACE, NEWLINE or HTAB For example "[ 1 5 6 9 ]" <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>line</em>&nbsp;</td><td>A string containing positive integers </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>new_bit_size</em>&nbsp;</td><td>The size that the vector should become </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="d336607832d6ef7e48bed9fe103e0fa5"></a><!-- doxytag: member="OpenBabel::OBBitVec::ToVecInt" ref="d336607832d6ef7e48bed9fe103e0fa5" args="(std::vector&lt; int &gt; &amp;bit_offsets) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToVecInt           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>bit_offsets</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
List the offsets of the bits which are set. 
<p>
Retrieve a list of bit offsets The <code>bit_offsets</code> vector is first cleared. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[out]</tt>&nbsp;</td><td valign="top"><em>bit_offsets</em>&nbsp;</td><td>A list of bit offsets, in ascending order </td></tr>
  </table>
</dl>

<p>Referenced by <a class="el" href="mol_8cpp-source.shtml#l00337">OBMol::ContigFragList()</a>, and <a class="el" href="mol_8cpp-source.shtml#l00560">OBMol::FindChildren()</a>.</p>

</div>
</div><p>
<a class="anchor" name="a71d36872f416feaa853788a7a7a7ef8"></a><!-- doxytag: member="OpenBabel::OBBitVec::Clear" ref="a71d36872f416feaa853788a7a7a7ef8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Clear           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Set all bits to zero. 
<p>
Set all the bits in this vector to zero Does not currently change the size of the vector. 
<p>Referenced by <a class="el" href="canon_8cpp-source.shtml#l00609">OpenBabel::BreakChiralTies()</a>, <a class="el" href="ring_8cpp-source.shtml#l00511">OpenBabel::BuildOBRTreeVector()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l00480">OBFFConstraints::Clear()</a>, <a class="el" href="mol_8cpp-source.shtml#l00337">OBMol::ContigFragList()</a>, <a class="el" href="ring_8cpp-source.shtml#l00145">OpenBabel::DetermineFRJ()</a>, <a class="el" href="mol_8cpp-source.shtml#l00524">OBMol::FindChildren()</a>, <a class="el" href="mol_8cpp-source.shtml#l00477">OBMol::FindLargestFragment()</a>, <a class="el" href="canon_8cpp-source.shtml#l00293">OpenBabel::FindRingAtoms()</a>, <a class="el" href="bitvec_8cpp-source.shtml#l00323">OBBitVec::FromString()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00141">OpenBabel::GetDFFVector()</a>, <a class="el" href="mol_8cpp-source.shtml#l00594">OBMol::GetGTDVector()</a>, <a class="el" href="canon_8cpp-source.shtml#l00219">OpenBabel::GetGTDVector()</a>, <a class="el" href="parsmart_8cpp-source.shtml#l02983">OBSmartsPattern::GetUMapList()</a>, <a class="el" href="kekulize_8cpp-source.shtml#l00046">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="ring_8cpp-source.shtml#l00178">OBRingSearch::RemoveRedundant()</a>, <a class="el" href="rotor_8cpp-source.shtml#l00352">OBRotorList::SetEvalAtoms()</a>, and <a class="el" href="forcefield_8cpp-source.shtml#l01992">OBForceField::UpdatePairsSimple()</a>.</p>

</div>
</div><p>
<a class="anchor" name="00e05e1bb6f3185b1a40728679be5274"></a><!-- doxytag: member="OpenBabel::OBBitVec::Negate" ref="00e05e1bb6f3185b1a40728679be5274" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Negate           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Inverts every bit in the vector. 
<p>
Inverts the entire vector. Note that this may give unexpected results, as the vector can be considered to end in an arbitrary number of zero bits. 
<p>Referenced by <a class="el" href="obiter_8cpp-source.shtml#l00281">OBMolAtomBFSIter::OBMolAtomBFSIter()</a>, and <a class="el" href="obiter_8cpp-source.shtml#l00145">OBMolAtomDFSIter::OBMolAtomDFSIter()</a>.</p>

</div>
</div><p>
<a class="anchor" name="56df5cb29ee1da7ea5626ab4c0f35882"></a><!-- doxytag: member="OpenBabel::OBBitVec::GetWords" ref="56df5cb29ee1da7ea5626ab4c0f35882" args="(word_vector &amp;vec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetWords           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml#732c7bffa6fdaeb8996f3a63450f422f">word_vector</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>vec</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Return a copy of the internal vector of words, at the end of <code>vec</code>. 
<p>
Copy the internal word vector. The copy is appended to <code>vec</code>. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[out]</tt>&nbsp;</td><td valign="top"><em>vec</em>&nbsp;</td><td>a vector of words to which to append the data </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="24793888dd45beaff49d652ce07bd823"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator=" ref="24793888dd45beaff49d652ce07bd823" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Assignment operator. 
<p>
Assign this vector to be a copy of <code>bv</code> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv</em>&nbsp;</td><td>A bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div><p>
<a class="anchor" name="3929c86b35d09fcdcf228d9b5989e0f8"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator &amp;=" ref="3929c86b35d09fcdcf228d9b5989e0f8" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator &amp;=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
And-equals operator. 
<p>
Assign this vector to the result of And-ing it with <code>bv</code> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv</em>&nbsp;</td><td>A bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div><p>
<a class="anchor" name="d34fbd2840a8afd87d69f4f71174407d"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator|=" ref="d34fbd2840a8afd87d69f4f71174407d" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator|=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Or-equals operator. 
<p>
Assign this vector to the result of Or-ing it with <code>bv</code> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv</em>&nbsp;</td><td>A bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div><p>
<a class="anchor" name="3f7949c8ca082670fa93310be6576854"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator|=" ref="3f7949c8ca082670fa93310be6576854" args="(int bit_offset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&amp; operator|=           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>bit_offset</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Or-equals operator for integer. 
<p>
Or the bit at offset <code>bit_offset</code> with 1 
</div>
</div><p>
<a class="anchor" name="fb212210bd7dffef43eaca0db7e3a499"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator^=" ref="fb212210bd7dffef43eaca0db7e3a499" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator^=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Exclusive-or-equals operator. 
<p>
Assign this vector to the result of Exclusive-or-ing it with <code>bv</code> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv</em>&nbsp;</td><td>A bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div><p>
<a class="anchor" name="321d8efee0bf7ca07bbffe94bda40b87"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator-=" ref="321d8efee0bf7ca07bbffe94bda40b87" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator-=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Minus-equals operator. 
<p>
Unset bits in this vector which are set in <code>bv</code> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv</em>&nbsp;</td><td>A bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div><p>
<a class="anchor" name="a7711d3edd25794568784a430fd7b062"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator+=" ref="a7711d3edd25794568784a430fd7b062" args="(const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator+=           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Plus-equals operator. 
<p>
Append vector <code>bv</code> to the end if this vector <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv</em>&nbsp;</td><td>A bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A reference to this </dd></dl>

</div>
</div><p>
<a class="anchor" name="1f22ca998400b0babe0bee468189225b"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator[]" ref="1f22ca998400b0babe0bee468189225b" args="(int bit_offset) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool operator[]           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>bit_offset</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Asks if the <code>bit_offset</code> 'th bit is set. 
<p>
Is the <code>bit_offset</code> 'th bit set ? <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bit_offset</em>&nbsp;</td><td>a zero based offset into the bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if it is set, false otherwise </dd></dl>

</div>
</div><p>
<hr><h2>Friends And Related Function Documentation</h2>
<a class="anchor" name="a46d68ba4737343303962397391cb7ba"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator|" ref="a46d68ba4737343303962397391cb7ba" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OBERROR <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> operator|           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Or operator. 
<p>
Return a bit vector of the results of Or-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv1</em>&nbsp;</td><td>A bit vector </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv2</em>&nbsp;</td><td>Another bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div><p>
<a class="anchor" name="657ec1b1c3c3019ea29f60356c18c91a"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator &amp;" ref="657ec1b1c3c3019ea29f60356c18c91a" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OBERROR <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> operator &amp;           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
And operator. 
<p>
Return a bit vector of the results of And-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv1</em>&nbsp;</td><td>A bit vector </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv2</em>&nbsp;</td><td>Another bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div><p>
<a class="anchor" name="b9f45dc2b4c1840d291ea757e431933a"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator^" ref="b9f45dc2b4c1840d291ea757e431933a" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OBERROR <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> operator^           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Exclusive-or operator. 
<p>
Return a bit vector of the results of Exclusive-or-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv1</em>&nbsp;</td><td>A bit vector </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv2</em>&nbsp;</td><td>Another bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div><p>
<a class="anchor" name="4bd7d9808479c28f2cc88650929df4d9"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator-" ref="4bd7d9808479c28f2cc88650929df4d9" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OBERROR <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> operator-           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Minus operator. 
<p>
Return a bit vector of the results of clearing each bit in <code>bv1</code> which is set in <code>bv2</code> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv1</em>&nbsp;</td><td>A bit vector </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv2</em>&nbsp;</td><td>Another bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A bit vector </dd></dl>

</div>
</div><p>
<a class="anchor" name="792b966c395440b305366a77fd57651d"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator==" ref="792b966c395440b305366a77fd57651d" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OBERROR bool operator==           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Equivalency operator. 
<p>
Return true if <code>bv1</code> and <code>bv2</code> are equivalent Not that they may be of different size, and still equivalent provided that the extra bits are all zero. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv1</em>&nbsp;</td><td>A bit vector </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv2</em>&nbsp;</td><td>Another bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if equal, false otherwise </dd></dl>

</div>
</div><p>
<a class="anchor" name="0c4f48d70507806331e9c497f0ed8144"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator&lt;" ref="0c4f48d70507806331e9c497f0ed8144" args="(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OBERROR bool operator&lt;           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Smaller-than operator. 
<p>
Return true if <code>bv1</code> i less than <code>bv2</code> Lexicographical order, with bit vectors written LSB first. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv1</em>&nbsp;</td><td>A bit vector </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv2</em>&nbsp;</td><td>Another bit vector </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if equal, false otherwise </dd></dl>

</div>
</div><p>
<a class="anchor" name="501d573f3e7e04cf92470fa0c7d23789"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator&gt;&gt;" ref="501d573f3e7e04cf92470fa0c7d23789" args="(std::istream &amp;is, OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OBERROR std::istream&amp; operator&gt;&gt;           </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&nbsp;</td>
          <td class="paramname"> <em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Input from a stream. 
<p>
Sets bits on, listed as a string of character-represented integers in a stream Only reads one line of input The format is "[ n0 n1 n2 n3 ... ]". The square brackets are optional. The whitespace can be SPACE or HTAB For example "[ 1 5 6 9 ]" <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in,out]</tt>&nbsp;</td><td valign="top"><em>is</em>&nbsp;</td><td>The input stream </td></tr>
    <tr><td valign="top"><tt>[out]</tt>&nbsp;</td><td valign="top"><em>bv</em>&nbsp;</td><td>The bit vector to contain the result </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="b6ce85c5fdeb93b0aa917346a9deb313"></a><!-- doxytag: member="OpenBabel::OBBitVec::operator&lt;&lt;" ref="b6ce85c5fdeb93b0aa917346a9deb313" args="(std::ostream &amp;os, const OBBitVec &amp;bv)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OBERROR std::ostream&amp; operator&lt;&lt;           </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&nbsp;</td>
          <td class="paramname"> <em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>bv</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Output to a stream. 
<p>
Output this bit vector to a stream The format is "[ n0 n1 n2 n3 ... ]". The whitespace is SPACE For example "[ 1 5 6 9 ]" <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[out]</tt>&nbsp;</td><td valign="top"><em>os</em>&nbsp;</td><td>The output stream </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>bv</em>&nbsp;</td><td>The bit vector to be output </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="bitvec_8h-source.shtml">bitvec.h</a><li><a class="el" href="bitvec_8cpp.shtml">bitvec.cpp</a></ul>
</div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:38 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
