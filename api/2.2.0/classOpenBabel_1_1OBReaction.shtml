<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBReaction Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="classes.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="classes.shtml"><span>Alphabetical&nbsp;List</span></a></li>
      <li><a href="annotated.shtml"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>::<a class="el" href="classOpenBabel_1_1OBReaction.shtml">OBReaction</a>
  </div>
</div>
<div class="contents">
<h1>OBReaction Class Reference</h1><!-- doxytag: class="OpenBabel::OBReaction" --><!-- doxytag: inherits="OpenBabel::OBBase" -->Used to store chemical reactions (i.e., reactants -&gt; products).  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="reaction_8h-source.shtml">reaction.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for OBReaction:</div>
<div class="dynsection">
<p><center><img src="classOpenBabel_1_1OBReaction__inherit__graph.png" border="0" usemap="#OBReaction__inherit__map" alt="Inheritance graph"></center>
<map name="OBReaction__inherit__map">
<area shape="rect" href="classOpenBabel_1_1OBBase.shtml" title="Base Class." alt="" coords="18,5,90,32"></map>
<center><font size="2">[<a href="graph_legend.shtml">legend</a>]</font></center></div>

<p>
<a href="classOpenBabel_1_1OBReaction-members.shtml">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#d4146c04740bf08485bdea0a457015b0">OBReaction</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#98af182824f0924e7582c98a7252b89f">NumReactants</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#de31c5d085eac99f304d8f93c0f8a68a">NumProducts</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#11abcc56e00e0f88f48fb571f386f377">AddReactant</a> (const std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt; sp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#6f3d5f49daac91a3c6202536a44983a3">AddProduct</a> (const std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt; sp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#12e0921f488b9a80c9fc29a059acac3b">SetTransitionState</a> (const std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt; sp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#5f6a16a25ac4f2eddd118d06723cdb48">AddAgent</a> (const std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt; sp)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#1f467b540119fc778937ce4c1e0c6cf3">GetReactant</a> (const unsigned i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#c0521b76f1480f0a1f51dc1d2fbe5aae">GetProduct</a> (const unsigned i)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#ec930fabef776a15a3e155e0bd34f863">GetTransitionState</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#e9d1bff1a5cd8205604dbb0998eedd15">GetAgent</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#85cb18896dd69857181b9f0fee289f53">GetTitle</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::string&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#756028b52b8e0945201426d53a80b47a">GetComment</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#54294c70e5c7d4e8edacbdde65a07ab3">SetTitle</a> (const std::string &amp;title)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#172c10e306c608ed9687a06d065dcf7d">SetComment</a> (const std::string &amp;comment)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#ffd0e8a81e6376c7af13d9265170bb93">IsReversible</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#b8592aab9b061be89f1d86e642d748b4">SetReversible</a> (bool b=true)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#d12fd937da5f4b0c4562888252fe214b">Clear</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#c124224e62a72e842a6b61b1e5e3190d">DoTransformations</a> (const std::map&lt; std::string, std::string &gt; *)</td></tr>

<tr><td class="memTemplParams" nowrap colspan="2">template&lt;class T&gt; </td></tr>
<tr><td class="memTemplItemLeft" nowrap align="right" valign="top">T *&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#305f9b75226a0e4d51c769e3a7dd6f13">CastAndClear</a> (bool clear=true)</td></tr>

<tr><td colspan="2"><div class="groupHeader">Generic data handling methods (via OBGenericData)</div></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#86dd58fc1da5652d70e823fa77cc1637">HasData</a> (const std::string &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#01b429ffcaf47cf265acd439ed2faca0">HasData</a> (const char *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#6cb103f12f49d86132ece200000da830">HasData</a> (const unsigned int type)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#797e5b4d20b6233062d2fdba78a08e06">DeleteData</a> (unsigned int type)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#b586df65e3f115b69510820b34098ce9">DeleteData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#af61a3ecb8f2926aaf117299388d43c2">DeleteData</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a068a2a7b64d2ee73aedb8c6e3cf0c4c">DeleteData</a> (const std::string &amp;s)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#db6b0ec89bfea783825b3b466e4dbc00">SetData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a6f692332837387535e337413d0100de">CloneData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#584f49e458c30b6d45a11eeebd8518f9">DataSize</a> () const </td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ee672d91b694547fb072fdaa8e03cfe9">GetData</a> (const unsigned int type)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#22f0eade8b5924eec28ad50f0ce2031f">GetData</a> (const std::string &amp;)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#483b277678a8ca48998742c80985fd0b">GetData</a> (const char *)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#90a551ff0a0ed3fa58745dff0ecacdaa">GetData</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a959146c3f7b458009dc04f61b5a2e7f">GetData</a> (<a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#fb56decc1b824c9fad980fc22e1d778c">GetAllData</a> (const unsigned int type)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#d5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#15b47c65393d46fde62d1f0a19bcf9fa">BeginData</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#d5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#117c836710dd3aaa8748509262a5c280">EndData</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static const char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml#6bb6ed5c064e3957d8dd03aba51e61f7">ClassDescription</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#f7811cf8aadbf3b3477c560b0ef2f797">_vdata</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Used to store chemical reactions (i.e., reactants -&gt; products). 
<p>
Reactants and products stored as smart pointers to molecules stored elsewhere.<p>
For performing actual reaction transformations (i.e., deleting atoms, changing bonds, etc.) use the <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml" title="SMARTS based structural modification (chemical transformation).">OBChemTsfm</a> class. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="d4146c04740bf08485bdea0a457015b0"></a><!-- doxytag: member="OpenBabel::OBReaction::OBReaction" ref="d4146c04740bf08485bdea0a457015b0" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBReaction.shtml">OBReaction</a>           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="98af182824f0924e7582c98a7252b89f"></a><!-- doxytag: member="OpenBabel::OBReaction::NumReactants" ref="98af182824f0924e7582c98a7252b89f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int NumReactants           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="de31c5d085eac99f304d8f93c0f8a68a"></a><!-- doxytag: member="OpenBabel::OBReaction::NumProducts" ref="de31c5d085eac99f304d8f93c0f8a68a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int NumProducts           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="11abcc56e00e0f88f48fb571f386f377"></a><!-- doxytag: member="OpenBabel::OBReaction::AddReactant" ref="11abcc56e00e0f88f48fb571f386f377" args="(const std::tr1::shared_ptr&lt; OBMol &gt; sp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddReactant           </td>
          <td>(</td>
          <td class="paramtype">const std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt;&nbsp;</td>
          <td class="paramname"> <em>sp</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6f3d5f49daac91a3c6202536a44983a3"></a><!-- doxytag: member="OpenBabel::OBReaction::AddProduct" ref="6f3d5f49daac91a3c6202536a44983a3" args="(const std::tr1::shared_ptr&lt; OBMol &gt; sp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddProduct           </td>
          <td>(</td>
          <td class="paramtype">const std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt;&nbsp;</td>
          <td class="paramname"> <em>sp</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="12e0921f488b9a80c9fc29a059acac3b"></a><!-- doxytag: member="OpenBabel::OBReaction::SetTransitionState" ref="12e0921f488b9a80c9fc29a059acac3b" args="(const std::tr1::shared_ptr&lt; OBMol &gt; sp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTransitionState           </td>
          <td>(</td>
          <td class="paramtype">const std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt;&nbsp;</td>
          <td class="paramname"> <em>sp</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="5f6a16a25ac4f2eddd118d06723cdb48"></a><!-- doxytag: member="OpenBabel::OBReaction::AddAgent" ref="5f6a16a25ac4f2eddd118d06723cdb48" args="(const std::tr1::shared_ptr&lt; OBMol &gt; sp)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void AddAgent           </td>
          <td>(</td>
          <td class="paramtype">const std::tr1::shared_ptr&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt;&nbsp;</td>
          <td class="paramname"> <em>sp</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="1f467b540119fc778937ce4c1e0c6cf3"></a><!-- doxytag: member="OpenBabel::OBReaction::GetReactant" ref="1f467b540119fc778937ce4c1e0c6cf3" args="(const unsigned i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tr1::shared_ptr&lt;<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&gt; GetReactant           </td>
          <td>(</td>
          <td class="paramtype">const unsigned&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="c0521b76f1480f0a1f51dc1d2fbe5aae"></a><!-- doxytag: member="OpenBabel::OBReaction::GetProduct" ref="c0521b76f1480f0a1f51dc1d2fbe5aae" args="(const unsigned i)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tr1::shared_ptr&lt;<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&gt; GetProduct           </td>
          <td>(</td>
          <td class="paramtype">const unsigned&nbsp;</td>
          <td class="paramname"> <em>i</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ec930fabef776a15a3e155e0bd34f863"></a><!-- doxytag: member="OpenBabel::OBReaction::GetTransitionState" ref="ec930fabef776a15a3e155e0bd34f863" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tr1::shared_ptr&lt;<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&gt; GetTransitionState           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="e9d1bff1a5cd8205604dbb0998eedd15"></a><!-- doxytag: member="OpenBabel::OBReaction::GetAgent" ref="e9d1bff1a5cd8205604dbb0998eedd15" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::tr1::shared_ptr&lt;<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&gt; GetAgent           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="85cb18896dd69857181b9f0fee289f53"></a><!-- doxytag: member="OpenBabel::OBReaction::GetTitle" ref="85cb18896dd69857181b9f0fee289f53" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetTitle           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="756028b52b8e0945201426d53a80b47a"></a><!-- doxytag: member="OpenBabel::OBReaction::GetComment" ref="756028b52b8e0945201426d53a80b47a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetComment           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="54294c70e5c7d4e8edacbdde65a07ab3"></a><!-- doxytag: member="OpenBabel::OBReaction::SetTitle" ref="54294c70e5c7d4e8edacbdde65a07ab3" args="(const std::string &amp;title)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTitle           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>title</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="172c10e306c608ed9687a06d065dcf7d"></a><!-- doxytag: member="OpenBabel::OBReaction::SetComment" ref="172c10e306c608ed9687a06d065dcf7d" args="(const std::string &amp;comment)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetComment           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>comment</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="ffd0e8a81e6376c7af13d9265170bb93"></a><!-- doxytag: member="OpenBabel::OBReaction::IsReversible" ref="ffd0e8a81e6376c7af13d9265170bb93" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsReversible           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="b8592aab9b061be89f1d86e642d748b4"></a><!-- doxytag: member="OpenBabel::OBReaction::SetReversible" ref="b8592aab9b061be89f1d86e642d748b4" args="(bool b=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetReversible           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>b</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="6bb6ed5c064e3957d8dd03aba51e61f7"></a><!-- doxytag: member="OpenBabel::OBReaction::ClassDescription" ref="6bb6ed5c064e3957d8dd03aba51e61f7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static const char* ClassDescription           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>A list of descriptions of command-line options for <a class="el" href="classOpenBabel_1_1OBBase.shtml#c124224e62a72e842a6b61b1e5e3190d">DoTransformations()</a> </dd></dl>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#6bb6ed5c064e3957d8dd03aba51e61f7">OBBase</a>.</p>

</div>
</div><p>
<a class="anchor" name="d12fd937da5f4b0c4562888252fe214b"></a><!-- doxytag: member="OpenBabel::OBReaction::Clear" ref="d12fd937da5f4b0c4562888252fe214b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Clear           </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Clear any and all data associated with this object. 
<p>
This method can be called by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#1204f9b613067a04ebfe881a58775918" title="Reads an object of a class derived from OBBase into pOb.">OBConversion::Read()</a> before reading data. Derived classes should be sure to call <a class="el" href="classOpenBabel_1_1OBBase.shtml#d12fd937da5f4b0c4562888252fe214b" title="Clear any and all data associated with this object.">OBBase::Clear()</a> to remove inherited generic data.<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Whether the call was successful. </dd></dl>
<dl class="since" compact><dt><b>Since:</b></dt><dd>version 2.1. </dd></dl>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBAtom.shtml#d12fd937da5f4b0c4562888252fe214b">OBAtom</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#d12fd937da5f4b0c4562888252fe214b">OBMol</a>, and <a class="el" href="classOpenBabel_1_1OBResidue.shtml#d12fd937da5f4b0c4562888252fe214b">OBResidue</a>.</p>

<p>Referenced by <a class="el" href="residue_8cpp-source.shtml#l00945">OBResidue::Clear()</a>, <a class="el" href="mol_8cpp-source.shtml#l01303">OBMol::Clear()</a>, and <a class="el" href="atom_8cpp-source.shtml#l00127">OBAtom::Clear()</a>.</p>

</div>
</div><p>
<a class="anchor" name="c124224e62a72e842a6b61b1e5e3190d"></a><!-- doxytag: member="OpenBabel::OBReaction::DoTransformations" ref="c124224e62a72e842a6b61b1e5e3190d" args="(const std::map&lt; std::string, std::string &gt; *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* DoTransformations           </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::string &gt; *&nbsp;</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Perform a set of transformations specified by the user<p>
Typically these are program options to filter or modify an object For example, see <a class="el" href="classOpenBabel_1_1OBMol.shtml#035de6b4d4b6834f08d08940911f645d">OBMol::DoTransformations()</a> and <a class="el" href="classOpenBabel_1_1OBMol.shtml#b72bba66cc9e40fb3b657a30d87bbe6d">OBMol::ClassDescription()</a> 
<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#035de6b4d4b6834f08d08940911f645d">OBMol</a>.</p>

</div>
</div><p>
<a class="anchor" name="305f9b75226a0e4d51c769e3a7dd6f13"></a><!-- doxytag: member="OpenBabel::OBReaction::CastAndClear" ref="305f9b75226a0e4d51c769e3a7dd6f13" args="(bool clear=true)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">T* CastAndClear           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>clear</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
By default clears the object. Called from ReadMolecule of most format classes. 
<p>

</div>
</div><p>
<a class="anchor" name="86dd58fc1da5652d70e823fa77cc1637"></a><!-- doxytag: member="OpenBabel::OBReaction::HasData" ref="86dd58fc1da5652d70e823fa77cc1637" args="(const std::string &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>

<p>Referenced by <a class="el" href="mol_8cpp-source.shtml#l01562">OBMol::AddAtom()</a>, <a class="el" href="mol_8cpp-source.shtml#l00389">OBMol::FindAngles()</a>, <a class="el" href="ring_8cpp-source.shtml#l00082">OBMol::FindSSSR()</a>, <a class="el" href="mol_8cpp-source.shtml#l00432">OBMol::FindTorsions()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l01064">OBForceField::GetConformers()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l01033">OBForceField::GetCoordinates()</a>, <a class="el" href="mol_8cpp-source.shtml#l03693">OBMol::GetEnergies()</a>, <a class="el" href="mol_8cpp-source.shtml#l03703">OBMol::GetEnergy()</a>, <a class="el" href="mol_8cpp-source.shtml#l00898">OBMol::GetSSSR()</a>, <a class="el" href="base_8cpp-source.shtml#l00099">OBBase::HasData()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00455">OBDescriptor::MatchPairData()</a>, <a class="el" href="mol_8cpp-source.shtml#l01474">OBMol::NewAtom()</a>, <a class="el" href="mol_8cpp-source.shtml#l01156">OBMol::operator=()</a>, and <a class="el" href="mol_8cpp-source.shtml#l03685">OBMol::SetEnergies()</a>.</p>

</div>
</div><p>
<a class="anchor" name="01b429ffcaf47cf265acd439ed2faca0"></a><!-- doxytag: member="OpenBabel::OBReaction::HasData" ref="01b429ffcaf47cf265acd439ed2faca0" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists </dd></dl>

</div>
</div><p>
<a class="anchor" name="6cb103f12f49d86132ece200000da830"></a><!-- doxytag: member="OpenBabel::OBReaction::HasData" ref="6cb103f12f49d86132ece200000da830" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData           </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&nbsp;</td>
          <td class="paramname"> <em>type</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>whether the generic attribute/value pair exists, for a given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> </dd></dl>

</div>
</div><p>
<a class="anchor" name="797e5b4d20b6233062d2fdba78a08e06"></a><!-- doxytag: member="OpenBabel::OBReaction::DeleteData" ref="797e5b4d20b6233062d2fdba78a08e06" args="(unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>type</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Delete any data matching the given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a>. 
<p>

<p>Referenced by <a class="el" href="mol_8cpp-source.shtml#l01562">OBMol::AddAtom()</a>, <a class="el" href="mol_8cpp-source.shtml#l01345">OBMol::BeginModify()</a>, <a class="el" href="builder_8cpp-source.shtml#l00617">OBBuilder::CorrectStereoBonds()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00407">OBDescriptor::DeleteProperties()</a>, <a class="el" href="ring_8cpp-source.shtml#l00082">OBMol::FindSSSR()</a>, <a class="el" href="mol_8cpp-source.shtml#l01474">OBMol::NewAtom()</a>, and <a class="el" href="forcefield_8cpp-source.shtml#l00843">OBForceField::Setup()</a>.</p>

</div>
</div><p>
<a class="anchor" name="b586df65e3f115b69510820b34098ce9"></a><!-- doxytag: member="OpenBabel::OBReaction::DeleteData" ref="b586df65e3f115b69510820b34098ce9" args="(OBGenericData *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td>
          <td class="paramname"> <em>gd</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Delete the given generic data from this object. 
<p>

</div>
</div><p>
<a class="anchor" name="af61a3ecb8f2926aaf117299388d43c2"></a><!-- doxytag: member="OpenBabel::OBReaction::DeleteData" ref="af61a3ecb8f2926aaf117299388d43c2" args="(std::vector&lt; OBGenericData * &gt; &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData           </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>vg</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Delete all of the given generic data from this object. 
<p>

</div>
</div><p>
<a class="anchor" name="a068a2a7b64d2ee73aedb8c6e3cf0c4c"></a><!-- doxytag: member="OpenBabel::OBReaction::DeleteData" ref="a068a2a7b64d2ee73aedb8c6e3cf0c4c" args="(const std::string &amp;s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteData           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Deletes the generic data with the specified attribute, returning false if not found. 
<p>

</div>
</div><p>
<a class="anchor" name="db6b0ec89bfea783825b3b466e4dbc00"></a><!-- doxytag: member="OpenBabel::OBReaction::SetData" ref="db6b0ec89bfea783825b3b466e4dbc00" args="(OBGenericData *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetData           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td>
          <td class="paramname"> <em>d</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Adds a data object; does nothing if d==NULL. 
<p>

<p>Referenced by <a class="el" href="mol_8cpp-source.shtml#l02671">OBMol::AddBond()</a>, <a class="el" href="molchrg_8cpp-source.shtml#l00058">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="chiral_8cpp-source.shtml#l00206">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="transform_8cpp-source.shtml#l00028">OBMol::DoTransformations()</a>, <a class="el" href="atom_8cpp-source.shtml#l00157">OBAtom::Duplicate()</a>, <a class="el" href="mol_8cpp-source.shtml#l00389">OBMol::FindAngles()</a>, <a class="el" href="ring_8cpp-source.shtml#l00082">OBMol::FindSSSR()</a>, <a class="el" href="mol_8cpp-source.shtml#l00432">OBMol::FindTorsions()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l01064">OBForceField::GetConformers()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l01033">OBForceField::GetCoordinates()</a>, <a class="el" href="mol_8cpp-source.shtml#l03693">OBMol::GetEnergies()</a>, <a class="el" href="mol_8cpp-source.shtml#l03703">OBMol::GetEnergy()</a>, <a class="el" href="mol_8cpp-source.shtml#l01052">OBMol::GetFormula()</a>, <a class="el" href="mol_8cpp-source.shtml#l03839">OBMol::GetNextFragment()</a>, <a class="el" href="mol_8cpp-source.shtml#l00898">OBMol::GetSSSR()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00273">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="mol_8cpp-source.shtml#l01156">OBMol::operator=()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00308">OBDescriptor::PredictAndSave()</a>, <a class="el" href="mol_8cpp-source.shtml#l03685">OBMol::SetEnergies()</a>, and <a class="el" href="mol_8cpp-source.shtml#l01075">OBMol::SetFormula()</a>.</p>

</div>
</div><p>
<a class="anchor" name="a6f692332837387535e337413d0100de"></a><!-- doxytag: member="OpenBabel::OBReaction::CloneData" ref="a6f692332837387535e337413d0100de" args="(OBGenericData *d)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CloneData           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&nbsp;</td>
          <td class="paramname"> <em>d</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Adds a copy of a data object; does nothing if d == NULL <dl class="since" compact><dt><b>Since:</b></dt><dd>version 2.2 </dd></dl>

</div>
</div><p>
<a class="anchor" name="584f49e458c30b6d45a11eeebd8518f9"></a><!-- doxytag: member="OpenBabel::OBReaction::DataSize" ref="584f49e458c30b6d45a11eeebd8518f9" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int DataSize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the number of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> items attached to this molecule. </dd></dl>

</div>
</div><p>
<a class="anchor" name="ee672d91b694547fb072fdaa8e03cfe9"></a><!-- doxytag: member="OpenBabel::OBReaction::GetData" ref="ee672d91b694547fb072fdaa8e03cfe9" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData           </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&nbsp;</td>
          <td class="paramname"> <em>type</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the first matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> or NULL if nothing matches </dd></dl>

<p>Referenced by <a class="el" href="chiral_8cpp-source.shtml#l00206">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="chiral_8cpp-source.shtml#l00146">OpenBabel::CorrectChirality()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00085">OBDescriptor::FilterCompare()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l01064">OBForceField::GetConformers()</a>, <a class="el" href="forcefield_8cpp-source.shtml#l01033">OBForceField::GetCoordinates()</a>, <a class="el" href="mol_8cpp-source.shtml#l03839">OBMol::GetNextFragment()</a>, <a class="el" href="descriptor_8cpp-source.shtml#l00423">OBDescriptor::GetValues()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00273">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="obiter_8cpp-source.shtml#l00901">OBMolAngleIter::OBMolAngleIter()</a>, <a class="el" href="obiter_8cpp-source.shtml#l00809">OBMolRingIter::OBMolRingIter()</a>, <a class="el" href="obiter_8cpp-source.shtml#l01000">OBMolTorsionIter::OBMolTorsionIter()</a>, <a class="el" href="mol_8cpp-source.shtml#l01156">OBMol::operator=()</a>, and <a class="el" href="descriptor_8cpp-source.shtml#l00308">OBDescriptor::PredictAndSave()</a>.</p>

</div>
</div><p>
<a class="anchor" name="22f0eade8b5924eec28ad50f0ce2031f"></a><!-- doxytag: member="OpenBabel::OBReaction::GetData" ref="22f0eade8b5924eec28ad50f0ce2031f" args="(const std::string &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData           </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>any data matching the given attribute name or NULL if nothing matches<p>
the value given an attribute name </dd></dl>

</div>
</div><p>
<a class="anchor" name="483b277678a8ca48998742c80985fd0b"></a><!-- doxytag: member="OpenBabel::OBReaction::GetData" ref="483b277678a8ca48998742c80985fd0b" args="(const char *)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData           </td>
          <td>(</td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>s</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>any data matching the given attribute name or NULL if nothing matches<p>
the value given an attribute name </dd></dl>

</div>
</div><p>
<a class="anchor" name="90a551ff0a0ed3fa58745dff0ecacdaa"></a><!-- doxytag: member="OpenBabel::OBReaction::GetData" ref="90a551ff0a0ed3fa58745dff0ecacdaa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt;&amp; GetData           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>all data, suitable for iterating </dd></dl>

<p>Referenced by <a class="el" href="mol_8cpp-source.shtml#l01345">OBMol::BeginModify()</a>, <a class="el" href="transform_8cpp-source.shtml#l00028">OBMol::DoTransformations()</a>, <a class="el" href="ring_8cpp-source.shtml#l00082">OBMol::FindSSSR()</a>, <a class="el" href="base_8cpp-source.shtml#l00134">OBBase::GetData()</a>, <a class="el" href="mol_8cpp-source.shtml#l03693">OBMol::GetEnergies()</a>, <a class="el" href="mol_8cpp-source.shtml#l03703">OBMol::GetEnergy()</a>, <a class="el" href="mol_8cpp-source.shtml#l01052">OBMol::GetFormula()</a>, <a class="el" href="mol_8cpp-source.shtml#l00898">OBMol::GetSSSR()</a>, <a class="el" href="mol_8cpp-source.shtml#l03685">OBMol::SetEnergies()</a>, and <a class="el" href="mol_8cpp-source.shtml#l01075">OBMol::SetFormula()</a>.</p>

</div>
</div><p>
<a class="anchor" name="a959146c3f7b458009dc04f61b5a2e7f"></a><!-- doxytag: member="OpenBabel::OBReaction::GetData" ref="a959146c3f7b458009dc04f61b5a2e7f" args="(DataOrigin source)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetData           </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&nbsp;</td>
          <td class="paramname"> <em>source</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>all data with a specific origin, suitable for iterating </dd></dl>

</div>
</div><p>
<a class="anchor" name="fb56decc1b824c9fad980fc22e1d778c"></a><!-- doxytag: member="OpenBabel::OBReaction::GetAllData" ref="fb56decc1b824c9fad980fc22e1d778c" args="(const unsigned int type)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetAllData           </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&nbsp;</td>
          <td class="paramname"> <em>type</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>the all matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> or an empty vector if nothing matches </dd></dl>
<dl class="since" compact><dt><b>Since:</b></dt><dd>version 2.2 </dd></dl>

</div>
</div><p>
<a class="anchor" name="15b47c65393d46fde62d1f0a19bcf9fa"></a><!-- doxytag: member="OpenBabel::OBReaction::BeginData" ref="15b47c65393d46fde62d1f0a19bcf9fa" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#d5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> BeginData           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>An iterator pointing to the beginning of the data </dd></dl>

<p>Referenced by <a class="el" href="mol_8cpp-source.shtml#l01562">OBMol::AddAtom()</a>, <a class="el" href="atom_8cpp-source.shtml#l00157">OBAtom::Duplicate()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00273">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="mol_8cpp-source.shtml#l01474">OBMol::NewAtom()</a>, and <a class="el" href="mol_8cpp-source.shtml#l01156">OBMol::operator=()</a>.</p>

</div>
</div><p>
<a class="anchor" name="117c836710dd3aaa8748509262a5c280"></a><!-- doxytag: member="OpenBabel::OBReaction::EndData" ref="117c836710dd3aaa8748509262a5c280" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#d5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> EndData           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>An iterator pointing to the end of the data </dd></dl>

<p>Referenced by <a class="el" href="mol_8cpp-source.shtml#l01562">OBMol::AddAtom()</a>, <a class="el" href="atom_8cpp-source.shtml#l00157">OBAtom::Duplicate()</a>, <a class="el" href="obmolecformat_8cpp-source.shtml#l00273">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="mol_8cpp-source.shtml#l01474">OBMol::NewAtom()</a>, and <a class="el" href="mol_8cpp-source.shtml#l01156">OBMol::operator=()</a>.</p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="f7811cf8aadbf3b3477c560b0ef2f797"></a><!-- doxytag: member="OpenBabel::OBReaction::_vdata" ref="f7811cf8aadbf3b3477c560b0ef2f797" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt; <a class="el" href="classOpenBabel_1_1OBBase.shtml#f7811cf8aadbf3b3477c560b0ef2f797">_vdata</a><code> [protected, inherited]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Custom data. 
<p>

<p>Referenced by <a class="el" href="base_8cpp-source.shtml#l00071">OBBase::Clear()</a>, <a class="el" href="base_8cpp-source.shtml#l00174">OBBase::CloneData()</a>, <a class="el" href="base_8cpp-source.shtml#l00188">OBBase::DeleteData()</a>, <a class="el" href="atom_8cpp-source.shtml#l00157">OBAtom::Duplicate()</a>, <a class="el" href="base_8cpp-source.shtml#l00149">OBBase::GetAllData()</a>, <a class="el" href="base_8cpp-source.shtml#l00122">OBBase::GetData()</a>, <a class="el" href="base_8cpp-source.shtml#l00084">OBBase::HasData()</a>, <a class="el" href="bond_8cpp-source.shtml#l00050">OBBond::OBBond()</a>, <a class="el" href="mol_8cpp-source.shtml#l02895">OBMol::OBMol()</a>, and <a class="el" href="residue_8cpp-source.shtml#l00847">OBResidue::OBResidue()</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="reaction_8h-source.shtml">reaction.h</a></ul>
</div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:41 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
