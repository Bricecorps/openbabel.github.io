<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: obiter.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.6 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="classes.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    </ul>
  </div>
<h1>obiter.h</h1><a href="obiter_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obiter.h - STL-style iterators for Open Babel.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_OBITER_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_OBITER_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml" title="Fast and efficient bitstring class.">openbabel/bitvec.h</a>&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;stack&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;queue&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">namespace </span>OpenBabel
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033 
<a name="l00034"></a>00034   <span class="keyword">class </span>OBMol;
<a name="l00035"></a>00035   <span class="keyword">class </span>OBAtom;
<a name="l00036"></a>00036   <span class="keyword">class </span>OBBond;
<a name="l00037"></a>00037   <span class="keyword">class </span>OBResidue;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039   <span class="comment">// more detailed descriptions and documentation in obiter.cpp</span>
<a name="l00040"></a>00040 
<a name="l00042"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">00042</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml" title="Iterate over all atoms in an OBMol.">OBMolAtomIter</a> {
<a name="l00043"></a>00043     std::vector&lt;OBAtom*&gt;::iterator _i;
<a name="l00044"></a>00044     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00045"></a>00045     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *_ptr;
<a name="l00046"></a>00046   <span class="keyword">public</span>:
<a name="l00047"></a>00047 
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#0e0a0033461ca2e8bd7d3553613acb68">00048</a>     <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml" title="Iterate over all atoms in an OBMol.">OBMolAtomIter</a>() :_parent(NULL), _ptr(NULL) { }
<a name="l00049"></a>00049     <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml" title="Iterate over all atoms in an OBMol.">OBMolAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00050"></a>00050     <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml" title="Iterate over all atoms in an OBMol.">OBMolAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00051"></a>00051     <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml" title="Iterate over all atoms in an OBMol.">OBMolAtomIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml" title="Iterate over all atoms in an OBMol.">OBMolAtomIter</a> &amp;ai);
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#b41faac5de2b33826f98ef32e67d99fa">00052</a>     ~<a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml" title="Iterate over all atoms in an OBMol.">OBMolAtomIter</a>() { }
<a name="l00053"></a>00053 
<a name="l00054"></a>00054     <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml" title="Iterate over all atoms in an OBMol.">OBMolAtomIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml" title="Iterate over all atoms in an OBMol.">OBMolAtomIter</a> &amp;ai);
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00056</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00058"></a>00058     <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml" title="Iterate over all atoms in an OBMol.">OBMolAtomIter</a>&amp; operator++();
<a name="l00060"></a>00060     <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml" title="Iterate over all atoms in an OBMol.">OBMolAtomIter</a>  operator++(<span class="keywordtype">int</span>);
<a name="l00062"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#4230379a2279d9f0311112181bdd0257">00062</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00064"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#8cd672d91a1ef3171799bf9ea27e2409">00064</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00065"></a>00065   };
<a name="l00066"></a>00066 
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">00068</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS).">OBMolAtomDFSIter</a> {
<a name="l00069"></a>00069     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>               *_parent;
<a name="l00070"></a>00070     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>              *_ptr;
<a name="l00071"></a>00071     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a>             _notVisited;
<a name="l00072"></a>00072     std::stack&lt;OBAtom *&gt; _stack;
<a name="l00073"></a>00073   <span class="keyword">public</span>:
<a name="l00074"></a>00074 
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#28577ca5de6b95b9ac0d4210be8d9fde">00075</a>     <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS).">OBMolAtomDFSIter</a>() : _parent(NULL), _ptr(NULL) { }
<a name="l00076"></a>00076     <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS).">OBMolAtomDFSIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol, <span class="keywordtype">int</span> StartIndex=1);
<a name="l00077"></a>00077     <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS).">OBMolAtomDFSIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol, <span class="keywordtype">int</span> StartIndex=1);
<a name="l00078"></a>00078     <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS).">OBMolAtomDFSIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS).">OBMolAtomDFSIter</a> &amp;ai);
<a name="l00079"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#6d1833f8401794abf419e65503bb4fb2">00079</a>     ~<a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS).">OBMolAtomDFSIter</a>() { }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS).">OBMolAtomDFSIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS).">OBMolAtomDFSIter</a> &amp;ai);
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00083</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00085"></a>00085     <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS).">OBMolAtomDFSIter</a>&amp; operator++();
<a name="l00087"></a>00087     <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml" title="Iterate over all atoms in an OBMol in a depth-first search (DFS).">OBMolAtomDFSIter</a>  operator++(<span class="keywordtype">int</span>);
<a name="l00089"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#4230379a2279d9f0311112181bdd0257">00089</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#8cd672d91a1ef3171799bf9ea27e2409">00091</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#aaffd1bb24cbcff3418b09c755f2b5bc">00093</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* next()
<a name="l00094"></a>00094     { 
<a name="l00095"></a>00095       <span class="keywordflow">if</span>(_stack.empty())
<a name="l00096"></a>00096         <span class="keywordflow">return</span> NULL; <span class="comment">//end of a disconnected fragment</span>
<a name="l00097"></a>00097       <span class="keywordflow">else</span>
<a name="l00098"></a>00098         <span class="keywordflow">return</span> _stack.top(); <span class="comment">//the next atom</span>
<a name="l00099"></a>00099     }
<a name="l00100"></a>00100   };
<a name="l00101"></a>00101 
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">00103</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml" title="Iterate over all atoms in an OBMol in a breadth-first search (BFS).">OBMolAtomBFSIter</a> {
<a name="l00104"></a>00104     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>               *_parent;
<a name="l00105"></a>00105     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>              *_ptr;
<a name="l00106"></a>00106     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits.">OBBitVec</a>             _notVisited;
<a name="l00107"></a>00107     std::queue&lt;OBAtom *&gt; _queue;
<a name="l00108"></a>00108     std::vector&lt;int&gt;     _depth;
<a name="l00109"></a>00109   <span class="keyword">public</span>:
<a name="l00110"></a>00110 
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#1afe0a6b964c9975a5eab78a4fe6012f">00111</a>     <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml" title="Iterate over all atoms in an OBMol in a breadth-first search (BFS).">OBMolAtomBFSIter</a>(): _parent(NULL), _ptr(NULL) { }
<a name="l00112"></a>00112     <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml" title="Iterate over all atoms in an OBMol in a breadth-first search (BFS).">OBMolAtomBFSIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol, <span class="keywordtype">int</span> StartIndex = 1);
<a name="l00113"></a>00113     <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml" title="Iterate over all atoms in an OBMol in a breadth-first search (BFS).">OBMolAtomBFSIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol, <span class="keywordtype">int</span> StartIndex = 1);
<a name="l00114"></a>00114     <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml" title="Iterate over all atoms in an OBMol in a breadth-first search (BFS).">OBMolAtomBFSIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml" title="Iterate over all atoms in an OBMol in a breadth-first search (BFS).">OBMolAtomBFSIter</a> &amp;ai);
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#0ed2011d285caf87692d837c05b3ab37">00115</a>     ~<a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml" title="Iterate over all atoms in an OBMol in a breadth-first search (BFS).">OBMolAtomBFSIter</a>() { }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117     <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml" title="Iterate over all atoms in an OBMol in a breadth-first search (BFS).">OBMolAtomBFSIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml" title="Iterate over all atoms in an OBMol in a breadth-first search (BFS).">OBMolAtomBFSIter</a> &amp;ai);
<a name="l00119"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00119</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00121"></a>00121     <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml" title="Iterate over all atoms in an OBMol in a breadth-first search (BFS).">OBMolAtomBFSIter</a>&amp; operator++();
<a name="l00123"></a>00123     <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml" title="Iterate over all atoms in an OBMol in a breadth-first search (BFS).">OBMolAtomBFSIter</a>  operator++(<span class="keywordtype">int</span>);
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#4230379a2279d9f0311112181bdd0257">00125</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#8cd672d91a1ef3171799bf9ea27e2409">00127</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00130"></a>00130     <span class="keywordtype">int</span> CurrentDepth() <span class="keyword">const</span>;
<a name="l00131"></a>00131   };
<a name="l00132"></a>00132 
<a name="l00134"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">00134</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml" title="Iterate over all bonds in an OBMol.">OBMolBondIter</a> {
<a name="l00135"></a>00135     std::vector&lt;OBBond*&gt;::iterator _i;
<a name="l00136"></a>00136     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00137"></a>00137     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *_ptr;
<a name="l00138"></a>00138   <span class="keyword">public</span>:
<a name="l00139"></a>00139 
<a name="l00140"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#455059ecfe54c9a0c32e8456aa848569">00140</a>     <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml" title="Iterate over all bonds in an OBMol.">OBMolBondIter</a>() : _parent(NULL), _ptr(NULL) {}
<a name="l00141"></a>00141     <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml" title="Iterate over all bonds in an OBMol.">OBMolBondIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00142"></a>00142     <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml" title="Iterate over all bonds in an OBMol.">OBMolBondIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00143"></a>00143     <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml" title="Iterate over all bonds in an OBMol.">OBMolBondIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml" title="Iterate over all bonds in an OBMol.">OBMolBondIter</a> &amp;bi);
<a name="l00144"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#6ab51a3738ec0fa144ed6b3e49545cd7">00144</a>     ~<a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml" title="Iterate over all bonds in an OBMol.">OBMolBondIter</a>() { }
<a name="l00145"></a>00145 
<a name="l00146"></a>00146     <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml" title="Iterate over all bonds in an OBMol.">OBMolBondIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml" title="Iterate over all bonds in an OBMol.">OBMolBondIter</a> &amp;bi);
<a name="l00148"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00148</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00150"></a>00150     <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml" title="Iterate over all bonds in an OBMol.">OBMolBondIter</a>&amp; operator++();
<a name="l00152"></a>00152     <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml" title="Iterate over all bonds in an OBMol.">OBMolBondIter</a>  operator++(<span class="keywordtype">int</span>);
<a name="l00154"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#3f8f5f0e7c6e7c69467b815de9082a69">00154</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00156"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#adede7839311add35bf5710a3031f13d">00156</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00157"></a>00157   };
<a name="l00158"></a>00158 
<a name="l00160"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">00160</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml" title="Iterate over all neighboring atoms to an OBAtom.">OBAtomAtomIter</a> {
<a name="l00161"></a>00161     std::vector&lt;OBBond*&gt;::iterator _i;
<a name="l00162"></a>00162     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *_parent;
<a name="l00163"></a>00163     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *_ptr;
<a name="l00164"></a>00164   <span class="keyword">public</span>:
<a name="l00165"></a>00165 
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#f8a4eb72f4e027a2f7d2649b01b847f1">00166</a>     <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml" title="Iterate over all neighboring atoms to an OBAtom.">OBAtomAtomIter</a>() : _parent(NULL), _ptr(NULL) { }
<a name="l00167"></a>00167     <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml" title="Iterate over all neighboring atoms to an OBAtom.">OBAtomAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atm);
<a name="l00168"></a>00168     <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml" title="Iterate over all neighboring atoms to an OBAtom.">OBAtomAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;atm);
<a name="l00169"></a>00169     <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml" title="Iterate over all neighboring atoms to an OBAtom.">OBAtomAtomIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml" title="Iterate over all neighboring atoms to an OBAtom.">OBAtomAtomIter</a> &amp;ai);
<a name="l00170"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#e08b3633f489a115c0708df48a086337">00170</a>     ~<a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml" title="Iterate over all neighboring atoms to an OBAtom.">OBAtomAtomIter</a>() { }
<a name="l00171"></a>00171 
<a name="l00172"></a>00172     <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml" title="Iterate over all neighboring atoms to an OBAtom.">OBAtomAtomIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml" title="Iterate over all neighboring atoms to an OBAtom.">OBAtomAtomIter</a> &amp;ai);
<a name="l00174"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00174</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00176"></a>00176     <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml" title="Iterate over all neighboring atoms to an OBAtom.">OBAtomAtomIter</a>&amp; operator++();
<a name="l00178"></a>00178     <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml" title="Iterate over all neighboring atoms to an OBAtom.">OBAtomAtomIter</a>  operator++(<span class="keywordtype">int</span>);
<a name="l00180"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#4230379a2279d9f0311112181bdd0257">00180</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00182"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#8cd672d91a1ef3171799bf9ea27e2409">00182</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00183"></a>00183   };
<a name="l00184"></a>00184 
<a name="l00186"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">00186</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml" title="Iterate over all bonds on an OBAtom.">OBAtomBondIter</a> {
<a name="l00187"></a>00187     std::vector&lt;OBBond*&gt;::iterator _i;
<a name="l00188"></a>00188     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *_parent;
<a name="l00189"></a>00189     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> *_ptr;
<a name="l00190"></a>00190   <span class="keyword">public</span>:
<a name="l00191"></a>00191 
<a name="l00192"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#f28bfccc1ea71cb3c90d4131fd0ffaac">00192</a>     <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml" title="Iterate over all bonds on an OBAtom.">OBAtomBondIter</a>(): _parent(NULL), _ptr(NULL) { }
<a name="l00193"></a>00193     <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml" title="Iterate over all bonds on an OBAtom.">OBAtomBondIter</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *atm);
<a name="l00194"></a>00194     <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml" title="Iterate over all bonds on an OBAtom.">OBAtomBondIter</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;atm);
<a name="l00195"></a>00195     <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml" title="Iterate over all bonds on an OBAtom.">OBAtomBondIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml" title="Iterate over all bonds on an OBAtom.">OBAtomBondIter</a> &amp;bi);
<a name="l00196"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#8049d0d3287127c18a69a03a0ada3389">00196</a>     ~<a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml" title="Iterate over all bonds on an OBAtom.">OBAtomBondIter</a>() { }
<a name="l00197"></a>00197 
<a name="l00198"></a>00198     <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml" title="Iterate over all bonds on an OBAtom.">OBAtomBondIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml" title="Iterate over all bonds on an OBAtom.">OBAtomBondIter</a> &amp;bi);
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00200</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00202"></a>00202     <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml" title="Iterate over all bonds on an OBAtom.">OBAtomBondIter</a>&amp; operator++();
<a name="l00204"></a>00204     <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml" title="Iterate over all bonds on an OBAtom.">OBAtomBondIter</a>  operator++(<span class="keywordtype">int</span>);
<a name="l00206"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#3f8f5f0e7c6e7c69467b815de9082a69">00206</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00208"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#adede7839311add35bf5710a3031f13d">00208</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00209"></a>00209   };
<a name="l00210"></a>00210 
<a name="l00212"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">00212</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml" title="Iterate over all residues in an OBMol.">OBResidueIter</a> {
<a name="l00213"></a>00213     std::vector&lt;OBResidue*&gt;::iterator _i;
<a name="l00214"></a>00214     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *_ptr;
<a name="l00215"></a>00215     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00216"></a>00216   <span class="keyword">public</span>:
<a name="l00217"></a>00217 
<a name="l00218"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#222f27c41a5414c4fb612d260c21a5fc">00218</a>     <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml" title="Iterate over all residues in an OBMol.">OBResidueIter</a>() : _ptr(NULL), _parent(NULL) { }
<a name="l00219"></a>00219     <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml" title="Iterate over all residues in an OBMol.">OBResidueIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00220"></a>00220     <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml" title="Iterate over all residues in an OBMol.">OBResidueIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00221"></a>00221     <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml" title="Iterate over all residues in an OBMol.">OBResidueIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml" title="Iterate over all residues in an OBMol.">OBResidueIter</a> &amp;ri);
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#f01b06a6ef42d96b03e8026780e87365">00222</a>     ~<a class="code" href="classOpenBabel_1_1OBResidueIter.shtml" title="Iterate over all residues in an OBMol.">OBResidueIter</a>() { }
<a name="l00223"></a>00223 
<a name="l00224"></a>00224     <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml" title="Iterate over all residues in an OBMol.">OBResidueIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml" title="Iterate over all residues in an OBMol.">OBResidueIter</a> &amp;ri);
<a name="l00226"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00226</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00228"></a>00228     <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml" title="Iterate over all residues in an OBMol.">OBResidueIter</a>&amp; operator++();
<a name="l00230"></a>00230     <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml" title="Iterate over all residues in an OBMol.">OBResidueIter</a>  operator++(<span class="keywordtype">int</span>);
<a name="l00232"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#059d24fee2eccec2e30b9502ded937fa">00232</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>* operator-&gt;()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#833179fe8d90821086f13903fb00467a">00234</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00235"></a>00235   };
<a name="l00236"></a>00236 
<a name="l00238"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">00238</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml" title="Iterate over all atoms in an OBResidue.">OBResidueAtomIter</a> {
<a name="l00239"></a>00239     std::vector&lt;OBAtom*&gt;::iterator _i;
<a name="l00240"></a>00240     <a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *_parent;
<a name="l00241"></a>00241     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a>    *_ptr;
<a name="l00242"></a>00242   <span class="keyword">public</span>:
<a name="l00243"></a>00243 
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#248fb7bc3b3279d171bfa2d1bf9eeb41">00244</a>     <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml" title="Iterate over all atoms in an OBResidue.">OBResidueAtomIter</a>() : _parent(NULL), _ptr(NULL) { }
<a name="l00245"></a>00245     <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml" title="Iterate over all atoms in an OBResidue.">OBResidueAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> *res);
<a name="l00246"></a>00246     <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml" title="Iterate over all atoms in an OBResidue.">OBResidueAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a> &amp;res);
<a name="l00247"></a>00247     <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml" title="Iterate over all atoms in an OBResidue.">OBResidueAtomIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml" title="Iterate over all atoms in an OBResidue.">OBResidueAtomIter</a> &amp;ri);
<a name="l00248"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#2a89fef9e1122bf74748b6312c9852dc">00248</a>     ~<a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml" title="Iterate over all atoms in an OBResidue.">OBResidueAtomIter</a>() { }
<a name="l00249"></a>00249 
<a name="l00250"></a>00250     <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml" title="Iterate over all atoms in an OBResidue.">OBResidueAtomIter</a> &amp;operator = (<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml" title="Iterate over all atoms in an OBResidue.">OBResidueAtomIter</a> &amp;ri);
<a name="l00252"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00252</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00254"></a>00254     <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml" title="Iterate over all atoms in an OBResidue.">OBResidueAtomIter</a>&amp; operator++ ();
<a name="l00256"></a>00256     <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml" title="Iterate over all atoms in an OBResidue.">OBResidueAtomIter</a>  operator++ (<span class="keywordtype">int</span>);
<a name="l00258"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#4230379a2279d9f0311112181bdd0257">00258</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> *operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00260"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#8cd672d91a1ef3171799bf9ea27e2409">00260</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> &amp;<a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00261"></a>00261   };
<a name="l00262"></a>00262   
<a name="l00264"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml">00264</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml" title="Iterate over all angles in an OBMol.">OBMolAngleIter</a> {
<a name="l00265"></a>00265     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>     *_parent;
<a name="l00266"></a>00266     std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vangle;
<a name="l00267"></a>00267     std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;
<a name="l00268"></a>00268     std::vector&lt;unsigned int&gt; _angle;
<a name="l00269"></a>00269   <span class="keyword">public</span>:
<a name="l00270"></a>00270 
<a name="l00271"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#482e4131f901dd1ec3c1d6305b1df9b4">00271</a>     <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml" title="Iterate over all angles in an OBMol.">OBMolAngleIter</a>() :_parent(NULL) { }
<a name="l00272"></a>00272     <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml" title="Iterate over all angles in an OBMol.">OBMolAngleIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00273"></a>00273     <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml" title="Iterate over all angles in an OBMol.">OBMolAngleIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00274"></a>00274     <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml" title="Iterate over all angles in an OBMol.">OBMolAngleIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml" title="Iterate over all angles in an OBMol.">OBMolAngleIter</a> &amp;ai);
<a name="l00275"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#917fefa24816b0e6bca7497496cdb918">00275</a>     ~<a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml" title="Iterate over all angles in an OBMol.">OBMolAngleIter</a>() { }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277     <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml" title="Iterate over all angles in an OBMol.">OBMolAngleIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml" title="Iterate over all angles in an OBMol.">OBMolAngleIter</a> &amp;ai);
<a name="l00279"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00279</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> (_i != _vangle.end()); }
<a name="l00281"></a>00281     <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml" title="Iterate over all angles in an OBMol.">OBMolAngleIter</a>&amp; operator++();
<a name="l00284"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#67b12e17cbb37010d7aa2e7a6f292fc7">00284</a>     std::vector&lt;unsigned int&gt; <a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _angle;     }
<a name="l00285"></a>00285   };
<a name="l00286"></a>00286 
<a name="l00288"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml">00288</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml" title="Iterate over all torsions in an OBMol.">OBMolTorsionIter</a> {
<a name="l00289"></a>00289     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00290"></a>00290     std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vtorsion;
<a name="l00291"></a>00291     std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;
<a name="l00292"></a>00292     std::vector&lt;unsigned int&gt; _torsion;
<a name="l00293"></a>00293   <span class="keyword">public</span>:
<a name="l00294"></a>00294 
<a name="l00295"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#2e6d7ebd2d9d520ecd18112ac456da81">00295</a>     <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml" title="Iterate over all torsions in an OBMol.">OBMolTorsionIter</a>() :_parent(NULL) { }
<a name="l00296"></a>00296     <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml" title="Iterate over all torsions in an OBMol.">OBMolTorsionIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00297"></a>00297     <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml" title="Iterate over all torsions in an OBMol.">OBMolTorsionIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00298"></a>00298     <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml" title="Iterate over all torsions in an OBMol.">OBMolTorsionIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml" title="Iterate over all torsions in an OBMol.">OBMolTorsionIter</a> &amp;ai);
<a name="l00299"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#c739d51704add695fff280e299ea91d5">00299</a>     ~<a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml" title="Iterate over all torsions in an OBMol.">OBMolTorsionIter</a>() { }
<a name="l00300"></a>00300 
<a name="l00301"></a>00301     <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml" title="Iterate over all torsions in an OBMol.">OBMolTorsionIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml" title="Iterate over all torsions in an OBMol.">OBMolTorsionIter</a> &amp;ai);
<a name="l00303"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00303</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> (_i != _vtorsion.end()); }
<a name="l00305"></a>00305     <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml" title="Iterate over all torsions in an OBMol.">OBMolTorsionIter</a>&amp; operator++();
<a name="l00308"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#67b12e17cbb37010d7aa2e7a6f292fc7">00308</a>     std::vector&lt;unsigned int&gt; <a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _torsion;     }
<a name="l00309"></a>00309   };
<a name="l00310"></a>00310   
<a name="l00312"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml">00312</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml" title="Iterate over all pairs of atoms (&amp;gt;1-4) in an OBMol.">OBMolPairIter</a> {
<a name="l00313"></a>00313     std::vector&lt;OBAtom*&gt;::iterator _i;
<a name="l00314"></a>00314     std::vector&lt;OBAtom*&gt;::iterator _j;
<a name="l00315"></a>00315     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00316"></a>00316     <span class="comment">//std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vpair;</span>
<a name="l00317"></a>00317     <span class="comment">//std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;</span>
<a name="l00318"></a>00318     std::vector&lt;unsigned int&gt; _pair;
<a name="l00319"></a>00319  
<a name="l00320"></a>00320   <span class="keyword">public</span>:
<a name="l00321"></a>00321 
<a name="l00322"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#a604593cfb41d4c23618d71b4b26ea6d">00322</a>     <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml" title="Iterate over all pairs of atoms (&amp;gt;1-4) in an OBMol.">OBMolPairIter</a>() :_parent(NULL) { }
<a name="l00323"></a>00323     <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml" title="Iterate over all pairs of atoms (&amp;gt;1-4) in an OBMol.">OBMolPairIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00324"></a>00324     <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml" title="Iterate over all pairs of atoms (&amp;gt;1-4) in an OBMol.">OBMolPairIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00325"></a>00325     <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml" title="Iterate over all pairs of atoms (&amp;gt;1-4) in an OBMol.">OBMolPairIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml" title="Iterate over all pairs of atoms (&amp;gt;1-4) in an OBMol.">OBMolPairIter</a> &amp;ai);
<a name="l00326"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#daa9e198d76f5f97560146d1673205b6">00326</a>     ~<a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml" title="Iterate over all pairs of atoms (&amp;gt;1-4) in an OBMol.">OBMolPairIter</a>() { }
<a name="l00327"></a>00327 
<a name="l00328"></a>00328     <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml" title="Iterate over all pairs of atoms (&amp;gt;1-4) in an OBMol.">OBMolPairIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml" title="Iterate over all pairs of atoms (&amp;gt;1-4) in an OBMol.">OBMolPairIter</a> &amp;ai);
<a name="l00330"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00330</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _pair.size()&gt;0; }
<a name="l00332"></a>00332     <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml" title="Iterate over all pairs of atoms (&amp;gt;1-4) in an OBMol.">OBMolPairIter</a>&amp; operator++();
<a name="l00335"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#67b12e17cbb37010d7aa2e7a6f292fc7">00335</a>     std::vector&lt;unsigned int&gt; <a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _pair;     }
<a name="l00336"></a>00336   };
<a name="l00337"></a>00337 
<a name="l00338"></a>00338 
<a name="l00340"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">00340</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml" title="Iterate over all rings in an OBMol.">OBMolRingIter</a> {
<a name="l00341"></a>00341     std::vector&lt;OBRing*&gt;::iterator _i;
<a name="l00342"></a>00342     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a> *_ptr;
<a name="l00343"></a>00343     <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *_parent;
<a name="l00344"></a>00344     <a class="code" href="classOpenBabel_1_1OBRingData.shtml" title="Used to store the SSSR set (filled in by OBMol::GetSSSR()).">OBRingData</a> *_rings;
<a name="l00345"></a>00345   <span class="keyword">public</span>:
<a name="l00346"></a>00346 
<a name="l00347"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#4201ae784613cc343f4c85aff073f8b6">00347</a>     <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml" title="Iterate over all rings in an OBMol.">OBMolRingIter</a>() : _ptr(NULL), _parent(NULL), _rings(NULL) { }
<a name="l00348"></a>00348     <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml" title="Iterate over all rings in an OBMol.">OBMolRingIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol);
<a name="l00349"></a>00349     <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml" title="Iterate over all rings in an OBMol.">OBMolRingIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> &amp;mol);
<a name="l00350"></a>00350     <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml" title="Iterate over all rings in an OBMol.">OBMolRingIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml" title="Iterate over all rings in an OBMol.">OBMolRingIter</a> &amp;ri);
<a name="l00351"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#1d382621222fab3106bbf62d88d12c16">00351</a>     ~<a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml" title="Iterate over all rings in an OBMol.">OBMolRingIter</a>() { }
<a name="l00352"></a>00352 
<a name="l00353"></a>00353     <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml" title="Iterate over all rings in an OBMol.">OBMolRingIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml" title="Iterate over all rings in an OBMol.">OBMolRingIter</a> &amp;ri);
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#a385aa18f5e42db5a415c25a90f4193d">00355</a>     operator bool()<span class="keyword">      const </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00357"></a>00357     <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml" title="Iterate over all rings in an OBMol.">OBMolRingIter</a>&amp; operator++();
<a name="l00359"></a>00359     <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml" title="Iterate over all rings in an OBMol.">OBMolRingIter</a>  operator++(<span class="keywordtype">int</span>);
<a name="l00361"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#9557a79ffa8eabbacc3a30122de63719">00361</a>     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a>* operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00363"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#9b8a5740df429b13336d7a5466c6aa83">00363</a>     <a class="code" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception.">OBRing</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#56b20579149ab8b5807475d4302c33a2" title="Multiplication with a scalar.">operator*</a>()<span class="keyword">  const </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00364"></a>00364   };
<a name="l00365"></a>00365 
<a name="l00366"></a><a class="code" href="obiter_8h.shtml#fb051cb17b46d381998c24fc41db2a79">00366</a> <span class="preprocessor">#define FOR_ATOMS_OF_MOL(a,m)     for( OBMolAtomIter     a(m); a; ++a )</span>
<a name="l00367"></a><a class="code" href="obiter_8h.shtml#16c0f68c4f2d476fae98338b31e77e46">00367</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BONDS_OF_MOL(b,m)     for( OBMolBondIter     b(m); b; ++b )</span>
<a name="l00368"></a><a class="code" href="obiter_8h.shtml#18326b3c74bff171f5807ce9725e0c47">00368</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_NBORS_OF_ATOM(a,p)    for( OBAtomAtomIter    a(p); a; ++a )</span>
<a name="l00369"></a><a class="code" href="obiter_8h.shtml#a102b7f8200028ba654f022dc63fdf35">00369</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BONDS_OF_ATOM(b,p)    for( OBAtomBondIter    b(p); b; ++b )</span>
<a name="l00370"></a><a class="code" href="obiter_8h.shtml#483bbcfb9673a775c47ab6adf8e53451">00370</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_RESIDUES_OF_MOL(r,m)  for( OBResidueIter     r(m); r; ++r )</span>
<a name="l00371"></a><a class="code" href="obiter_8h.shtml#a4f83897733e3f3a1fb1ff9a1a85db1f">00371</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_ATOMS_OF_RESIDUE(a,r) for( OBResidueAtomIter a(r); a; ++a )</span>
<a name="l00372"></a><a class="code" href="obiter_8h.shtml#15820464f7b1f60c2d343932d5eda8cd">00372</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_DFS_OF_MOL(a,m)       for( OBMolAtomDFSIter  a(m); a; ++a )</span>
<a name="l00373"></a><a class="code" href="obiter_8h.shtml#7c427f32f67339fb215933423bace3e4">00373</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BFS_OF_MOL(a,m)       for( OBMolAtomBFSIter  a(m); a; ++a )</span>
<a name="l00374"></a><a class="code" href="obiter_8h.shtml#0297c6de75de6131cc5289475787841a">00374</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_RINGS_OF_MOL(a,m)     for( OBMolRingIter     r(m); r; ++r )</span>
<a name="l00375"></a><a class="code" href="obiter_8h.shtml#1fc0ae63791285f6155fa53658c2e4ae">00375</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_ANGLES_OF_MOL(a,m)    for( OBMolAngleIter    a(m); a; ++a )</span>
<a name="l00376"></a><a class="code" href="obiter_8h.shtml#ee758b2fef3dcacb197e41b5819d7465">00376</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_TORSIONS_OF_MOL(t,m)  for( OBMolTorsionIter  t(m); t; ++t )</span>
<a name="l00377"></a><a class="code" href="obiter_8h.shtml#640062d330b1455694059113b560a4aa">00377</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_PAIRS_OF_MOL(p,m)     for( OBMolPairIter     p(m); p; ++p )</span>
<a name="l00378"></a>00378 <span class="preprocessor"></span>
<a name="l00379"></a>00379 } <span class="comment">// namespace OpenBabel</span>
<a name="l00380"></a>00380 <span class="preprocessor">#endif // OB_OBITER_H</span>
<a name="l00381"></a>00381 <span class="preprocessor"></span>
</pre></div></div>
</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Thu Jul 3 14:30:34 2008 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.6.
</div>

</body>
</html>
