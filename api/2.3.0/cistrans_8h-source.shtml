<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: cistrans.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>cistrans.h</h1><a href="cistrans_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#ifndef OB_CISTRANS_H</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span><span class="preprocessor">#define OB_CISTRANS_H</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span>
<a name="l00004"></a>00004 <span class="preprocessor">#include &lt;<a class="code" href="tetraplanar_8h.shtml">openbabel/stereo/tetraplanar.h</a>&gt;</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="keyword">namespace </span>OpenBabel {
<a name="l00008"></a>00008 
<a name="l00011"></a>00011 
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1OBCisTransStereo.shtml">00053</a> <span class="keyword">class </span>OBAPI OBCisTransStereo : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBTetraPlanarStereo.shtml">OBTetraPlanarStereo</a>
<a name="l00055"></a>00055 {
<a name="l00056"></a>00056   <span class="keyword">public</span>:
<a name="l00074"></a>00074 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00075"></a><a class="code" href="structOpenBabel_1_1OBCisTransStereo_1_1Config.shtml">00075</a> <span class="preprocessor"></span>    <span class="keyword">struct </span>OBAPI Config
<a name="l00076"></a>00076     {
<a name="l00081"></a><a class="code" href="structOpenBabel_1_1OBCisTransStereo_1_1Config.shtml#e2ab8d711707b5eb8c0afd9c76327614">00081</a>       Config() : begin(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::NoRef), end(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::NoRef), shape(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::ShapeU),
<a name="l00082"></a>00082           specified(true)
<a name="l00083"></a>00083       {  }
<a name="l00092"></a><a class="code" href="structOpenBabel_1_1OBCisTransStereo_1_1Config.shtml#d02189d67f1228a9110b22ee51e16af1">00092</a>       Config(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> _begin, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> _end, <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#38b951402b7cd70c2af2fec6c2c8fb8f">OBStereo::Refs</a> &amp;_refs, 
<a name="l00093"></a>00093           <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed">OBStereo::Shape</a> _shape = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed4115a1af058d6d943a2d8c3dc32206b8">OBStereo::ShapeU</a>) : begin(_begin), end(_end),
<a name="l00094"></a>00094           refs(_refs), shape(_shape), specified(true)
<a name="l00095"></a>00095       {  }
<a name="l00160"></a>00160       <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#e8a689b821c5b5e0b57dbc7b22b486af">operator==</a>(<span class="keyword">const</span> Config &amp;other) <span class="keyword">const</span>;
<a name="l00166"></a><a class="code" href="structOpenBabel_1_1OBCisTransStereo_1_1Config.shtml#eef7025642d3582d4238500455d2dffe">00166</a>       <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> Config &amp;other)<span class="keyword"> const</span>
<a name="l00167"></a>00167 <span class="keyword">      </span>{ 
<a name="l00168"></a>00168         <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other); 
<a name="l00169"></a>00169       }
<a name="l00170"></a>00170             
<a name="l00175"></a><a class="code" href="structOpenBabel_1_1OBCisTransStereo_1_1Config.shtml#b7232c2baf473b4e98e982190fd408d1">00175</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> begin, end; <span class="comment">//&lt;! The double bond begin and end ids.</span>
<a name="l00176"></a><a class="code" href="structOpenBabel_1_1OBCisTransStereo_1_1Config.shtml#947f33699149e23fdfa1670335901fff">00176</a>       <a class="code" href="structOpenBabel_1_1OBStereo.shtml#38b951402b7cd70c2af2fec6c2c8fb8f">OBStereo::Refs</a> refs; 
<a name="l00177"></a><a class="code" href="structOpenBabel_1_1OBCisTransStereo_1_1Config.shtml#2c26ed79e0098a2a2b54cfd49556d2cd">00177</a>       <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed">OBStereo::Shape</a> shape; 
<a name="l00178"></a><a class="code" href="structOpenBabel_1_1OBCisTransStereo_1_1Config.shtml#34eb72dee7ab08852472f87f8d133b78">00178</a>       <span class="keywordtype">bool</span> specified; 
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 
<a name="l00181"></a>00181     };
<a name="l00182"></a>00182 <span class="preprocessor">#endif</span>
<a name="l00183"></a>00183 <span class="preprocessor"></span>
<a name="l00186"></a>00186     OBCisTransStereo(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00190"></a>00190     <span class="keyword">virtual</span> ~OBCisTransStereo();
<a name="l00191"></a>00191 
<a name="l00194"></a>00194 
<a name="l00198"></a><a class="code" href="classOpenBabel_1_1OBCisTransStereo.shtml#c9e35967b6c6b43614532b829af3220f">00198</a>     <a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7c">OBStereo::Type</a> GetType()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7c88b75270aa403b60b50f459344e8beec">OBStereo::CisTrans</a>; }
<a name="l00206"></a>00206     <span class="keywordtype">bool</span> IsValid() <span class="keyword">const</span>;
<a name="l00207"></a>00207 
<a name="l00211"></a>00211 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00212"></a>00212 <span class="preprocessor"></span>    <span class="keywordtype">void</span> SetConfig(<span class="keyword">const</span> Config &amp;config);
<a name="l00216"></a>00216     Config GetConfig(<a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed">OBStereo::Shape</a> shape = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed4115a1af058d6d943a2d8c3dc32206b8">OBStereo::ShapeU</a>) <span class="keyword">const</span>;
<a name="l00221"></a>00221     Config GetConfig(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> start, 
<a name="l00222"></a>00222         <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed">OBStereo::Shape</a> shape = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed4115a1af058d6d943a2d8c3dc32206b8">OBStereo::ShapeU</a>) <span class="keyword">const</span>;
<a name="l00223"></a>00223 <span class="preprocessor">#endif</span>
<a name="l00224"></a>00224 <span class="preprocessor"></span>
<a name="l00230"></a>00230     <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#e8a689b821c5b5e0b57dbc7b22b486af">operator==</a>(<span class="keyword">const</span> OBCisTransStereo &amp;other) <span class="keyword">const</span>;
<a name="l00236"></a><a class="code" href="classOpenBabel_1_1OBCisTransStereo.shtml#e1d02ed8bfc8830c8b4a08c594ade034">00236</a>     <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> OBCisTransStereo &amp;other)<span class="keyword"> const</span>
<a name="l00237"></a>00237 <span class="keyword">    </span>{
<a name="l00238"></a>00238       <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other); 
<a name="l00239"></a>00239     }
<a name="l00241"></a>00241     
<a name="l00242"></a>00242     <span class="comment">/*</span>
<a name="l00243"></a>00243 <span class="comment">     * Implement OBGenericData::Clone().</span>
<a name="l00244"></a>00244 <span class="comment">     */</span>
<a name="l00245"></a>00245     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *mol) <span class="keyword">const</span>;
<a name="l00246"></a>00246  
<a name="l00247"></a>00247 
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 
<a name="l00277"></a>00277     <span class="keywordtype">bool</span> IsOnSameAtom(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id1, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id2) <span class="keyword">const</span>;
<a name="l00281"></a>00281     <span class="keywordtype">bool</span> IsTrans(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id1, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id2) <span class="keyword">const</span>;
<a name="l00285"></a>00285     <span class="keywordtype">bool</span> IsCis(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id1, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id2) <span class="keyword">const</span>;
<a name="l00290"></a>00290     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> GetTransRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;
<a name="l00295"></a>00295     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> GetCisRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;
<a name="l00297"></a>00297  
<a name="l00298"></a>00298   <span class="keyword">private</span>:
<a name="l00299"></a>00299     Config m_cfg; 
<a name="l00300"></a>00300     <span class="comment">// The following function sits behind GetCisRef and GetTransRef</span>
<a name="l00301"></a>00301     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> GetCisOrTransRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> getcisref) <span class="keyword">const</span>;
<a name="l00302"></a>00302 };
<a name="l00303"></a>00303 
<a name="l00304"></a>00304 } <span class="comment">// namespace OpenBabel</span>
<a name="l00305"></a>00305 
<a name="l00306"></a>00306 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00307"></a><a class="code" href="namespacestd.shtml">00307</a> <span class="preprocessor"></span><span class="keyword">namespace </span>std {
<a name="l00308"></a>00308 
<a name="l00311"></a>00311 
<a name="l00328"></a>00328 OBAPI ostream&amp; <a class="code" href="group__stereo.shtml#g63d6f28a7f35d843e301c77c57369afe">operator&lt;&lt;</a>(ostream &amp;out, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBCisTransStereo.shtml">OpenBabel::OBCisTransStereo</a> &amp;ct);
<a name="l00343"></a>00343 OBAPI ostream&amp; <a class="code" href="group__stereo.shtml#g63d6f28a7f35d843e301c77c57369afe">operator&lt;&lt;</a>(ostream &amp;out, <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBCisTransStereo_1_1Config.shtml">OpenBabel::OBCisTransStereo::Config</a> &amp;cfg);
<a name="l00344"></a>00344 
<a name="l00346"></a>00346 
<a name="l00347"></a>00347 } <span class="comment">// namespace std</span>
<a name="l00348"></a>00348 <span class="preprocessor">#endif // Not SWIG</span>
<a name="l00349"></a>00349 <span class="preprocessor"></span>
<a name="l00350"></a>00350 <span class="preprocessor">#endif</span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
