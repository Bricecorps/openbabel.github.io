<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: generic.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>generic.h</h1><a href="generic_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">generic.h - Handle generic data classes. Custom data for atoms, bonds, etc.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_GENERIC_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_GENERIC_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="spacegroup_8h.shtml">openbabel/math/spacegroup.h</a>&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;<a class="code" href="obutil_8h.shtml">openbabel/obutil.h</a>&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">namespace </span>OpenBabel
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035 
<a name="l00036"></a>00036   <span class="comment">// Forward declarations</span>
<a name="l00037"></a>00037   <span class="keyword">class </span>OBBase;
<a name="l00038"></a>00038   <span class="keyword">class </span>OBAtom;
<a name="l00039"></a>00039   <span class="keyword">class </span>OBBond;
<a name="l00040"></a>00040   <span class="keyword">class </span>OBMol;
<a name="l00041"></a>00041   <span class="keyword">class </span>OBRing;
<a name="l00042"></a>00042 
<a name="l00045"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml">00045</a>  <span class="keyword">class </span>OBAPI OBCommentData : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00046"></a>00046   {
<a name="l00047"></a>00047   <span class="keyword">protected</span>:
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#c8c99b3126fd85b89c297ff130c676a4">00048</a>     std::string _data;
<a name="l00049"></a>00049   <span class="keyword">public</span>:
<a name="l00050"></a>00050     OBCommentData();
<a name="l00051"></a>00051     OBCommentData(<span class="keyword">const</span> OBCommentData&amp;);
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00052</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBCommentData(*<span class="keyword">this</span>);}
<a name="l00053"></a>00053                 
<a name="l00054"></a>00054     OBCommentData&amp; operator=(<span class="keyword">const</span> OBCommentData &amp;src);
<a name="l00055"></a>00055 
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#d028f12a8695c56085abb70f4839bacb">00056</a>     <span class="keywordtype">void</span>          <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<span class="keyword">const</span> std::string &amp;data)
<a name="l00057"></a>00057     { _data = data; <a class="code" href="namespaceOpenBabel.shtml#164d99c09f3971d2cd6bfcc67eb5755f">Trim</a>(_data); }
<a name="l00058"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#c82ededa773b6030d41289f1f58ac0b1">00058</a>     <span class="keywordtype">void</span>          <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *d)
<a name="l00059"></a>00059     {_data = d; <a class="code" href="namespaceOpenBabel.shtml#164d99c09f3971d2cd6bfcc67eb5755f">Trim</a>(_data);     }
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#8249f89633d0aaab1854a554f13a5d0e">00060</a>     <span class="keyword">const</span> std::string &amp;GetData()<span class="keyword">              const</span>
<a name="l00061"></a>00061 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_data);      }
<a name="l00062"></a><a class="code" href="classOpenBabel_1_1OBCommentData.shtml#53b106aeffbab94c992178b754e1f336">00062</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetValue()<span class="keyword">              const  </span>
<a name="l00063"></a>00063 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_data);      }
<a name="l00064"></a>00064   };
<a name="l00065"></a>00065 
<a name="l00069"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml">00069</a>   <span class="keyword">class </span>OBAPI OBExternalBond
<a name="l00070"></a>00070   {
<a name="l00071"></a>00071     <span class="keywordtype">int</span>     _idx;
<a name="l00072"></a>00072     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_atom;
<a name="l00073"></a>00073     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *_bond;
<a name="l00074"></a>00074   <span class="keyword">public</span>:
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#97254ba9dc4fcfdc7d2e7a89fa16f229">00075</a>   OBExternalBond(): _idx(0), _atom(NULL), _bond(NULL) {}
<a name="l00076"></a>00076     OBExternalBond(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *,<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *,<span class="keywordtype">int</span>);
<a name="l00077"></a>00077     OBExternalBond(<span class="keyword">const</span> OBExternalBond &amp;);
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#25d92a3084db9ed85fc7a3c6c30118c7">00078</a>     ~OBExternalBond()   {}
<a name="l00079"></a>00079 
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#d6a79fe0713c9bd0efbaebfc2294f376">00080</a>     <span class="keywordtype">int</span>     GetIdx()<span class="keyword">  const    </span>{        <span class="keywordflow">return</span>(_idx);    }
<a name="l00081"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#567405f2fd2edd8365c81880fc64da0a">00081</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *GetAtom()<span class="keyword"> const    </span>{        <span class="keywordflow">return</span>(_atom);   }
<a name="l00082"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#040f4d52ebc7b4586d48bf01c7fc9679">00082</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *GetBond()<span class="keyword"> const    </span>{        <span class="keywordflow">return</span>(_bond);   }
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#be09c2e27eb33a0945a832c46a979c3e">00083</a>     <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)       {        _idx = idx;      }
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#5021806baa517ca9e0cbf29a32516b14">00084</a>     <span class="keywordtype">void</span> SetAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom) {        _atom = atom;    }
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBExternalBond.shtml#8b2cc5de7a8c424678d60ba803588e45">00085</a>     <span class="keywordtype">void</span> SetBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond) {        _bond = bond;    }
<a name="l00086"></a>00086   };
<a name="l00087"></a>00087 
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml">00090</a>  <span class="keyword">class </span>OBAPI OBExternalBondData : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00091"></a>00091   {
<a name="l00092"></a>00092   <span class="keyword">protected</span>:
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#11fcbea89695de95c3078e47fc228ac0">00093</a>     std::vector&lt;OBExternalBond&gt; _vexbnd;
<a name="l00094"></a>00094   <span class="keyword">public</span>:
<a name="l00095"></a>00095     OBExternalBondData();
<a name="l00096"></a>00096                 
<a name="l00097"></a>00097     <span class="comment">//Copying is not used and too much work to set up</span>
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00098</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> NULL;}
<a name="l00099"></a>00099     
<a name="l00100"></a>00100     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*,<span class="keywordtype">int</span>);
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBExternalBondData.shtml#29b6cb06c0bd19a3e73d24505524a49b">00101</a>     std::vector&lt;OBExternalBond&gt; *GetData()
<a name="l00102"></a>00102       {
<a name="l00103"></a>00103         <span class="keywordflow">return</span>(&amp;_vexbnd);
<a name="l00104"></a>00104       }
<a name="l00105"></a>00105   };
<a name="l00106"></a>00106 
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml">00112</a>  <span class="keyword">class </span>OBAPI OBPairData : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00113"></a>00113   {
<a name="l00114"></a>00114   <span class="keyword">protected</span>:
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#312b5359a387db964c2ed01dec0080d9">00115</a>     std::string _value; 
<a name="l00116"></a>00116   <span class="keyword">public</span>:
<a name="l00117"></a>00117     OBPairData();
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00118</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00119"></a>00119 <span class="keyword">      </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBPairData(*<span class="keyword">this</span>);}
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#2a250edd3f10d03d6ed1c129db2a3a78">00120</a>     <span class="keywordtype">void</span>    SetValue(<span class="keyword">const</span> <span class="keywordtype">char</span> *v)        {      _value = v;    }
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#a9d1534c0b59b8b35414f97c13f87ff4">00121</a>     <span class="keywordtype">void</span>    SetValue(<span class="keyword">const</span> std::string &amp;v) {      _value = v;    }
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBPairData.shtml#53b106aeffbab94c992178b754e1f336">00122</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetValue()<span class="keyword"> const</span>
<a name="l00123"></a>00123 <span class="keyword">    </span>{      <span class="keywordflow">return</span>(_value);    }
<a name="l00124"></a>00124   };
<a name="l00125"></a>00125 
<a name="l00128"></a>00128   <span class="comment">// More detailed description in generic.cpp</span>
<a name="l00129"></a>00129   <span class="keyword">template</span> &lt;<span class="keyword">class</span> ValueT&gt;
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml">00130</a>     <span class="keyword">class </span>OBAPI OBPairTemplate : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00131"></a>00131   {
<a name="l00132"></a>00132   <span class="keyword">protected</span>:
<a name="l00133"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#1db53a1c2f30e4face1f54dc51bc2354">00133</a>     ValueT _value; 
<a name="l00134"></a>00134   <span class="keyword">public</span>:
<a name="l00135"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#68e1b692fb2638b4526b289ec401e42a">00135</a>   OBPairTemplate():
<a name="l00136"></a>00136     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">"PairData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f9432288522c338fb92c2b6ac97b14e2c">PairData</a>) {};
<a name="l00137"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#87e0eb89786bbb5cea17c168ffedd8e2">00137</a>     <span class="keywordtype">void</span> SetValue(<span class="keyword">const</span> ValueT t)             { _value = t;     }
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml#bec9654e337e8d277d96d155fb434aae">00138</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> ValueT &amp;GetGenericValue()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_value); }
<a name="l00139"></a>00139   };
<a name="l00140"></a>00140 
<a name="l00142"></a><a class="code" href="namespaceOpenBabel.shtml#82709e1ae926915b35d7dc05249068c2">00142</a>   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate&lt;int&gt;</a>     <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairInteger</a>;
<a name="l00144"></a><a class="code" href="namespaceOpenBabel.shtml#f884af3330a5e0366ff0513fdee66bc3">00144</a>   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate&lt;double&gt;</a>  <a class="code" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairFloatingPoint</a>;
<a name="l00145"></a>00145 
<a name="l00149"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml">00149</a>  <span class="keyword">class </span>OBAPI OBSetData : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00150"></a>00150   {
<a name="l00151"></a>00151   <span class="keyword">protected</span>:
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#a8901ae8586563e30c405ef78f29067f">00152</a>     std::vector&lt;OBGenericData *&gt; _vdata;
<a name="l00153"></a>00153   <span class="keyword">public</span>:
<a name="l00154"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#686b50407ec2c9cf6531bf3983073dd1">00154</a>   OBSetData() : <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">"SetData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>) {}
<a name="l00155"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00155</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBSetData(*<span class="keyword">this</span>);}
<a name="l00156"></a>00156 
<a name="l00158"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#e3a6d816cf923c1d80efb3c6cb87c03f">00158</a>     <span class="keywordtype">void</span> AddData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)
<a name="l00159"></a>00159     {
<a name="l00160"></a>00160       <span class="keywordflow">if</span>(d)
<a name="l00161"></a>00161         {
<a name="l00162"></a>00162           _vdata.push_back(d);
<a name="l00163"></a>00163         }
<a name="l00164"></a>00164     }
<a name="l00165"></a>00165 
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#e19d8b4087b8468f8b215ea2e42254a0">00167</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(std::vector&lt;OBGenericData *&gt; &amp;vdata)
<a name="l00168"></a>00168     {
<a name="l00169"></a>00169       _vdata = vdata;
<a name="l00170"></a>00170     }
<a name="l00171"></a>00171 
<a name="l00173"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#5cf9a1c91b1a9c4880248c75710944ee">00173</a>     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *GetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *s)
<a name="l00174"></a>00174     {
<a name="l00175"></a>00175       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00178"></a>00178         <span class="keywordflow">if</span> ((*i)-&gt;GetAttribute() == s)
<a name="l00179"></a>00179           <span class="keywordflow">return</span>(*i);
<a name="l00180"></a>00180 
<a name="l00181"></a>00181       <span class="keywordflow">return</span>(NULL);
<a name="l00182"></a>00182     }
<a name="l00183"></a>00183 
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#984396cc41b356cd5139b57bdb723273">00185</a>     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *GetData(<span class="keyword">const</span> std::string &amp;s)
<a name="l00186"></a>00186     {
<a name="l00187"></a>00187       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00188"></a>00188 
<a name="l00189"></a>00189       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00190"></a>00190         <span class="keywordflow">if</span> ((*i)-&gt;GetAttribute() == s)
<a name="l00191"></a>00191           <span class="keywordflow">return</span>(*i);
<a name="l00192"></a>00192 
<a name="l00193"></a>00193       <span class="keywordflow">return</span>(NULL);
<a name="l00194"></a>00194     }
<a name="l00195"></a>00195 
<a name="l00197"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#5a219c5298101db3e849893d557c2576">00197</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::vector&lt;OBGenericData *&gt; &amp;GetData() const <span class="comment">//now virtual and const</span>
<a name="l00198"></a>00198     {
<a name="l00199"></a>00199       <span class="keywordflow">return</span>(_vdata);
<a name="l00200"></a>00200     }
<a name="l00201"></a>00201 
<a name="l00203"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#605b4537f16abc020b4e8af80f806703">00203</a>     std::vector&lt;OBGenericData*&gt;::iterator GetBegin()
<a name="l00204"></a>00204       {
<a name="l00205"></a>00205         <span class="keywordflow">return</span> _vdata.begin();
<a name="l00206"></a>00206       }
<a name="l00207"></a>00207 
<a name="l00209"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#8c87ee20485d24d2411e4e84abf5cd1b">00209</a>     std::vector&lt;OBGenericData*&gt;::iterator GetEnd()
<a name="l00210"></a>00210       {
<a name="l00211"></a>00211         <span class="keywordflow">return</span> _vdata.end();
<a name="l00212"></a>00212       }
<a name="l00213"></a>00213 
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1OBSetData.shtml#2eaddb293ca79b68ba7789162e142632">00215</a>     <span class="keywordtype">void</span> DeleteData(<a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *gd)
<a name="l00216"></a>00216     {
<a name="l00217"></a>00217       std::vector&lt;OBGenericData*&gt;::iterator i;
<a name="l00218"></a>00218       <span class="keywordflow">for</span> (i = _vdata.begin();i != _vdata.end();++i)
<a name="l00219"></a>00219         <span class="keywordflow">if</span> (*i == gd)
<a name="l00220"></a>00220           {
<a name="l00221"></a>00221             <span class="keyword">delete</span> *i;
<a name="l00222"></a>00222             _vdata.erase(i);
<a name="l00223"></a>00223             <span class="keywordflow">break</span>; <span class="comment">// Done, don't do anything more, since iterator is invalid</span>
<a name="l00224"></a>00224           }
<a name="l00225"></a>00225     }
<a name="l00226"></a>00226 
<a name="l00227"></a>00227   }; <span class="comment">// OBSetData</span>
<a name="l00228"></a>00228 
<a name="l00232"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml">00232</a>  <span class="keyword">class </span>OBAPI OBVirtualBond : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00233"></a>00233   {
<a name="l00234"></a>00234   <span class="keyword">protected</span>:
<a name="l00235"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#73e437209453ffbfaa3eff2ae71420a4">00235</a>     <span class="keywordtype">int</span> _bgn;
<a name="l00236"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#53c798091a7c456a1c2c0e34e7d685b2">00236</a>     <span class="keywordtype">int</span> _end;
<a name="l00237"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#b1960a6a4443ec8a12d9676e3cadf7f1">00237</a>     <span class="keywordtype">int</span> _ord;
<a name="l00238"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#1a173bf9eef45c31400f5bdaaf15e491">00238</a>     <span class="keywordtype">int</span> _stereo;
<a name="l00239"></a>00239   <span class="keyword">public</span>:
<a name="l00240"></a>00240     OBVirtualBond();
<a name="l00241"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#5fa180b15907b8a5630da957ef8f3dd2">00241</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBVirtualBond(*<span class="keyword">this</span>);}
<a name="l00242"></a>00242     OBVirtualBond(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span> stereo=0);
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#cf13e13071d7238f17d41f52f6b1a7d9">00243</a>     <span class="keywordtype">int</span> GetBgn()    {      <span class="keywordflow">return</span>(_bgn);    }
<a name="l00244"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#5fab0b6dc401f70473a31bc69443c8cd">00244</a>     <span class="keywordtype">int</span> GetEnd()    {      <span class="keywordflow">return</span>(_end);    }
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#65f81917b7c17649ece678f48f87f677">00245</a>     <span class="keywordtype">int</span> GetOrder()  {      <span class="keywordflow">return</span>(_ord);    }
<a name="l00246"></a><a class="code" href="classOpenBabel_1_1OBVirtualBond.shtml#4317c69ca96f9420527907ca9a188044">00246</a>     <span class="keywordtype">int</span> GetStereo() {      <span class="keywordflow">return</span>(_stereo); }
<a name="l00247"></a>00247   };
<a name="l00248"></a>00248 
<a name="l00251"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml">00251</a>  <span class="keyword">class </span>OBAPI OBRingData : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00252"></a>00252   {
<a name="l00253"></a>00253   <span class="keyword">protected</span>:
<a name="l00254"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#717473702d2b434776ae4d71cc55dc18">00254</a>     std::vector&lt;OBRing*&gt; _vr;
<a name="l00255"></a>00255   <span class="keyword">public</span>:
<a name="l00256"></a>00256     OBRingData();
<a name="l00257"></a>00257     OBRingData(<span class="keyword">const</span> OBRingData &amp;);
<a name="l00258"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00258</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBRingData(*<span class="keyword">this</span>);}
<a name="l00259"></a>00259     ~OBRingData();
<a name="l00260"></a>00260 
<a name="l00261"></a>00261     OBRingData &amp;operator=(<span class="keyword">const</span> OBRingData &amp;);
<a name="l00262"></a>00262 
<a name="l00263"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#2336f38a7d82a58ad58604b48a17c833">00263</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(std::vector&lt;OBRing*&gt; &amp;vr)
<a name="l00264"></a>00264     {
<a name="l00265"></a>00265       _vr = vr;
<a name="l00266"></a>00266     }
<a name="l00267"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#e0758dc1939e48e5019c7d105aa37a9c">00267</a>     <span class="keywordtype">void</span> PushBack(<a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *r)
<a name="l00268"></a>00268     {
<a name="l00269"></a>00269       _vr.push_back(r);
<a name="l00270"></a>00270     }
<a name="l00271"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#c262dd46081c454a7bd16cf356820aeb">00271</a>     std::vector&lt;OBRing*&gt; &amp;GetData()
<a name="l00272"></a>00272       {
<a name="l00273"></a>00273         <span class="keywordflow">return</span>(_vr);
<a name="l00274"></a>00274       }
<a name="l00275"></a>00275 
<a name="l00276"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#6a146b5b943b2d6ba369777b9bc27737">00276</a>     std::vector&lt;OBRing*&gt;::iterator BeginRings()
<a name="l00277"></a>00277       { <span class="keywordflow">return</span>(_vr.begin()); }
<a name="l00278"></a><a class="code" href="classOpenBabel_1_1OBRingData.shtml#31b5a03be41b2e97ef8fe74ba9d58bd4">00278</a>     std::vector&lt;OBRing*&gt;::iterator EndRings()
<a name="l00279"></a>00279       { <span class="keywordflow">return</span>(_vr.end()); }
<a name="l00280"></a>00280     <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *BeginRing(std::vector&lt;OBRing*&gt;::iterator &amp;i);
<a name="l00281"></a>00281     <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *NextRing(std::vector&lt;OBRing*&gt;::iterator &amp;i);
<a name="l00282"></a>00282   };
<a name="l00283"></a>00283 
<a name="l00288"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml">00288</a>  <span class="keyword">class </span>OBAPI OBUnitCell: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00289"></a>00289   {
<a name="l00290"></a>00290   <span class="keyword">public</span>:
<a name="l00291"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#99dd5d8500770e1f742f8b15a9ed22b6">00291</a>     <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#99dd5d8500770e1f742f8b15a9ed22b6">LatticeType</a> { <a class="code" href="namespaceOpenBabel.shtml#f0b882642817cd5f092a408958c66c015a3ee8dc595cdaba138f096c2e6fd1e3">Undefined</a>, 
<a name="l00292"></a>00292                        Triclinic, 
<a name="l00293"></a>00293                        Monoclinic, 
<a name="l00294"></a>00294                        Orthorhombic, 
<a name="l00295"></a>00295                        Tetragonal, 
<a name="l00296"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#99dd5d8500770e1f742f8b15a9ed22b6a6079f548a534788d06d9043323570bd">00296</a>                        Rhombohedral , 
<a name="l00297"></a>00297                        Hexagonal, 
<a name="l00298"></a>00298                        Cubic};
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 
<a name="l00301"></a>00301   <span class="keyword">protected</span>:
<a name="l00302"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a707fbec611f7344da577097b32de82b">00302</a>     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> _mOrtho;<span class="comment">// Orthogonal matrix of column vectors </span>
<a name="l00303"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#4a0cd95afc6d52cca912c17989b5f9f1">00303</a>     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> _mOrient;<span class="comment">// Orientation matrix</span>
<a name="l00304"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#1f5c0a76a6d18fd7dbf158855c7cd50c">00304</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> _offset;
<a name="l00305"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#62634cc22a6824a5874a1f535028a96a">00305</a>     std::string _spaceGroupName;
<a name="l00306"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#a3c0bdf38520f530b9d312dc8d9f5864">00306</a>     <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml">SpaceGroup</a>* _spaceGroup;
<a name="l00307"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#08c1b2c843dbed5cb311e0a576699e65">00307</a>     <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#99dd5d8500770e1f742f8b15a9ed22b6">LatticeType</a> _lattice;
<a name="l00308"></a>00308   <span class="keyword">public</span>:
<a name="l00310"></a>00310     OBUnitCell();
<a name="l00311"></a>00311     OBUnitCell(<span class="keyword">const</span> OBUnitCell &amp;);
<a name="l00312"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#5fa180b15907b8a5630da957ef8f3dd2">00312</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00313"></a>00313 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBUnitCell(*<span class="keyword">this</span>);}
<a name="l00314"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#b8f303919244a48b288f12391823da39">00314</a>     ~OBUnitCell()    {}
<a name="l00315"></a>00315 
<a name="l00316"></a>00316     OBUnitCell &amp;operator=(<span class="keyword">const</span> OBUnitCell &amp;);
<a name="l00317"></a>00317 
<a name="l00327"></a>00327     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> a, <span class="keyword">const</span> <span class="keywordtype">double</span> b, <span class="keyword">const</span> <span class="keywordtype">double</span> c,
<a name="l00328"></a>00328                  <span class="keyword">const</span> <span class="keywordtype">double</span> alpha, <span class="keyword">const</span> <span class="keywordtype">double</span> beta, <span class="keyword">const</span> <span class="keywordtype">double</span> gamma);
<a name="l00336"></a>00336     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> v1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> v2, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> v3);
<a name="l00337"></a>00337 
<a name="l00343"></a>00343     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> m);
<a name="l00344"></a>00344 
<a name="l00346"></a>00346     <span class="keywordtype">void</span> SetOffset(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> v1);
<a name="l00347"></a>00347 
<a name="l00350"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#ca63160fa1415a1fcef68bd8e98503b8">00350</a>     <span class="keywordtype">void</span> SetSpaceGroup(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml">SpaceGroup</a>* sg) { _spaceGroup = sg; }
<a name="l00351"></a>00351 
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#e2c63bd3a8302b03c542313cadd428fc">00355</a>     <span class="keywordtype">void</span> SetSpaceGroup(<span class="keyword">const</span> std::string sg) { _spaceGroup = <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#40de03b96fa9197812c59b357043655a">SpaceGroup::GetSpaceGroup</a> (sg); 
<a name="l00356"></a>00356                                                _spaceGroupName = sg; }
<a name="l00357"></a>00357     
<a name="l00363"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#dd0fc767ef4af319927eeed24dd689da">00363</a>     <span class="keywordtype">void</span> SetSpaceGroup(<span class="keyword">const</span> <span class="keywordtype">int</span> sg) { _spaceGroup = <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml#40de03b96fa9197812c59b357043655a">SpaceGroup::GetSpaceGroup</a> (sg); }
<a name="l00364"></a>00364     
<a name="l00366"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#bb360782f5a412defad050c8094eccdf">00366</a>     <span class="keywordtype">void</span> SetLatticeType(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#99dd5d8500770e1f742f8b15a9ed22b6">LatticeType</a> lt) { _lattice = lt; }
<a name="l00367"></a>00367 
<a name="l00370"></a>00370     <span class="keywordtype">void</span> FillUnitCell(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *);
<a name="l00371"></a>00371 
<a name="l00373"></a>00373     <span class="keywordtype">double</span> GetA();
<a name="l00375"></a>00375     <span class="keywordtype">double</span> GetB();
<a name="l00377"></a>00377     <span class="keywordtype">double</span> GetC();
<a name="l00379"></a>00379     <span class="keywordtype">double</span> GetAlpha();
<a name="l00381"></a>00381     <span class="keywordtype">double</span> GetBeta();
<a name="l00383"></a>00383     <span class="keywordtype">double</span> GetGamma();
<a name="l00385"></a>00385     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> GetOffset();
<a name="l00386"></a>00386 
<a name="l00388"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#88a1d5fa94b6f1d0c2b3070edb41bf9f">00388</a>     <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1SpaceGroup.shtml">SpaceGroup</a>* GetSpaceGroup() { <span class="keywordflow">return</span>(_spaceGroup); }
<a name="l00389"></a>00389                 
<a name="l00391"></a><a class="code" href="classOpenBabel_1_1OBUnitCell.shtml#13bafbcb36e76be6caf367aa9ee79d34">00391</a>     <span class="keyword">const</span> std::string GetSpaceGroupName() { <span class="keywordflow">return</span>(_spaceGroupName); }
<a name="l00392"></a>00392 
<a name="l00394"></a>00394     LatticeType GetLatticeType( <span class="keywordtype">int</span> spacegroup );
<a name="l00395"></a>00395     
<a name="l00397"></a>00397     LatticeType GetLatticeType();
<a name="l00398"></a>00398 
<a name="l00400"></a>00400     std::vector&lt;vector3&gt; GetCellVectors();
<a name="l00409"></a>00409     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>   GetCellMatrix();
<a name="l00416"></a>00416     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> GetOrthoMatrix();
<a name="l00426"></a>00426     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> GetOrientationMatrix();
<a name="l00433"></a>00433     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> GetFractionalMatrix();
<a name="l00434"></a>00434 
<a name="l00441"></a>00441     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> FractionalToCartesian(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> frac);
<a name="l00448"></a>00448     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> CartesianToFractional(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> cart);
<a name="l00449"></a>00449 
<a name="l00453"></a>00453     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> WrapCartesianCoordinate(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> cart);
<a name="l00457"></a>00457     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> WrapFractionalCoordinate(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> frac);
<a name="l00458"></a>00458 
<a name="l00460"></a>00460     <span class="keywordtype">int</span> GetSpaceGroupNumber( std::string name = <span class="stringliteral">""</span> );
<a name="l00462"></a>00462     <span class="keywordtype">double</span> GetCellVolume();
<a name="l00463"></a>00463   };
<a name="l00464"></a>00464 
<a name="l00470"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml">00470</a>  <span class="keyword">class </span>OBAPI OBConformerData: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00471"></a>00471   {
<a name="l00472"></a>00472   <span class="keyword">protected</span>:
<a name="l00474"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#e3fc3720a6e27ecbdeac7938237c20c9">00474</a>     std::vector&lt;unsigned short&gt;              _vDimension;
<a name="l00476"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#334924128e727221834679cf233af16e">00476</a>     std::vector&lt;double&gt;                      _vEnergies;
<a name="l00478"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#921cb80f372f1d6b83e34896f6b03454">00478</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vForces;
<a name="l00480"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#524ea677be19535fcb93b29e675d8789">00480</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vVelocity;
<a name="l00482"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#7beeff98dec02d58647db53de95337b7">00482</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt;    _vDisplace;
<a name="l00484"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#76b8588da86a189071e68b39209835f2">00484</a>     std::vector&lt;std::string&gt;                 _vData;
<a name="l00485"></a>00485     
<a name="l00486"></a>00486   <span class="keyword">public</span>:
<a name="l00487"></a>00487     OBConformerData();
<a name="l00488"></a>00488     OBConformerData(<span class="keyword">const</span> OBConformerData &amp;);
<a name="l00489"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00489</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBConformerData(*<span class="keyword">this</span>);}
<a name="l00490"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#326c58052271cde58862c3987441448e">00490</a>     ~OBConformerData()    {}
<a name="l00491"></a>00491 
<a name="l00492"></a>00492     OBConformerData &amp;operator=(<span class="keyword">const</span> OBConformerData &amp;);
<a name="l00493"></a>00493 
<a name="l00494"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#a5105eb34ba7afa85995cb29b3d54392">00494</a>     <span class="keywordtype">void</span> SetDimension(std::vector&lt;unsigned short&gt; vd) { _vDimension = vd; }
<a name="l00495"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#c693e07b5cc8a6b6e7229862b6c117db">00495</a>     <span class="keywordtype">void</span> SetEnergies(std::vector&lt;double&gt; ve) { _vEnergies = ve; }
<a name="l00496"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#0e8443acd9b5914a00e71a36df4e9734">00496</a>     <span class="keywordtype">void</span> SetForces(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vf) {_vForces = vf;}
<a name="l00497"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#601ea6575eb259fdd74d1beb4d4222ed">00497</a>     <span class="keywordtype">void</span> SetVelocities(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vv)
<a name="l00498"></a>00498     { _vVelocity = vv; }
<a name="l00499"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#5b8d52c951c97d2574ec8720d8341334">00499</a>     <span class="keywordtype">void</span> SetDisplacements(std::vector&lt; std::vector&lt; vector3 &gt; &gt; vd)
<a name="l00500"></a>00500     { _vDisplace = vd; }
<a name="l00501"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#e68732d4fc99f6c4120b8ab358b80b73">00501</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(std::vector&lt;std::string&gt; vdat) { _vData = vdat; }
<a name="l00502"></a>00502 
<a name="l00503"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#bd9aa3d457341fd2bf3618ffc199107d">00503</a>     std::vector&lt;unsigned short&gt; GetDimension() { <span class="keywordflow">return</span> _vDimension; }
<a name="l00504"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ad8c1481b0d95c4fa79d7dfcbe18ff24">00504</a>     std::vector&lt;double&gt;         GetEnergies()  { <span class="keywordflow">return</span> _vEnergies; }
<a name="l00505"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#c29dc49b3ee446690bc0741ee089703e">00505</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetForces() {<span class="keywordflow">return</span> _vForces; }
<a name="l00506"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#24abae3f955d7d64775ffd6f4717981e">00506</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetVelocities()
<a name="l00507"></a>00507       {<span class="keywordflow">return</span> _vVelocity;}
<a name="l00508"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#55153841305834d22983c2b30f8a2347">00508</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetDisplacements()
<a name="l00509"></a>00509       {<span class="keywordflow">return</span> _vDisplace;}
<a name="l00510"></a><a class="code" href="classOpenBabel_1_1OBConformerData.shtml#ee7029da3f236e495a749a029c0e22fe">00510</a>     std::vector&lt;std::string&gt;    GetData() { <span class="keywordflow">return</span> _vData; }
<a name="l00511"></a>00511 
<a name="l00512"></a>00512   };
<a name="l00513"></a>00513 
<a name="l00518"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml">00518</a>  <span class="keyword">class </span>OBAPI OBSymmetryData: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00519"></a>00519   {
<a name="l00520"></a>00520   <span class="keyword">protected</span>:
<a name="l00521"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#18ca34ca6bba0439a5e276e765d7106f">00521</a>     std::string _spaceGroup;
<a name="l00522"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#8b21c459b427a34db81b31ff9fdba876">00522</a>     std::string _pointGroup;
<a name="l00523"></a>00523   <span class="keyword">public</span>:
<a name="l00524"></a>00524     OBSymmetryData();
<a name="l00525"></a>00525     OBSymmetryData(<span class="keyword">const</span> OBSymmetryData &amp;);
<a name="l00526"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00526</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBSymmetryData(*<span class="keyword">this</span>);}
<a name="l00527"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#e07e382f9ebb5b25185361cff8a5df87">00527</a>     ~OBSymmetryData()    {}
<a name="l00528"></a>00528 
<a name="l00529"></a>00529     OBSymmetryData &amp;operator=(<span class="keyword">const</span> OBSymmetryData &amp;);
<a name="l00530"></a>00530 
<a name="l00531"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#7be528513ed41ff1393496aa01101676">00531</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(std::string pg, std::string sg = <span class="stringliteral">""</span>)
<a name="l00532"></a>00532     { _pointGroup = pg; _spaceGroup = sg; }
<a name="l00533"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#68fcb955bd9d418ed35e854f9d15fdd8">00533</a>     <span class="keywordtype">void</span> SetPointGroup(std::string pg) { _pointGroup = pg; }
<a name="l00534"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#0a6f6df42ccd71e40adea80dd4085195">00534</a>     <span class="keywordtype">void</span> SetSpaceGroup(std::string sg) { _spaceGroup = sg; }
<a name="l00535"></a>00535 
<a name="l00536"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a52a1e281f0395fe728b04a92a338ac0">00536</a>     std::string GetPointGroup() { <span class="keywordflow">return</span> _pointGroup; }
<a name="l00537"></a><a class="code" href="classOpenBabel_1_1OBSymmetryData.shtml#a8b57a758580c104d8e55990c8d4e607">00537</a>     std::string GetSpaceGroup() { <span class="keywordflow">return</span> _spaceGroup; }
<a name="l00538"></a>00538   };
<a name="l00539"></a>00539 
<a name="l00543"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml">00543</a>   <span class="keyword">class </span>OBAPI OBTorsion
<a name="l00544"></a>00544   {
<a name="l00545"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#46c24bfe7070d49139c2dce2eb5ed8de">00545</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00546"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#367676e0f953086b8fa39ca861865e60">00546</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml">OBTorsionData</a>;
<a name="l00547"></a>00547 
<a name="l00548"></a>00548   <span class="keyword">protected</span>:
<a name="l00549"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#c31d0bac4290631c204469d56803f414">00549</a>     std::pair&lt;OBAtom*,OBAtom*&gt; _bc;
<a name="l00551"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#72123929bde777e3c6d96792b5b8e3c9">00551</a>     std::vector&lt;triple&lt;OBAtom*,OBAtom*,double&gt; &gt; _ads;
<a name="l00552"></a>00552 
<a name="l00553"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#f4b7998e6a3a392b024d46ececcfde23">00553</a>     OBTorsion(): _bc(NULL, NULL)      {      }
<a name="l00554"></a>00554     <span class="comment">//protected for use only by friend classes</span>
<a name="l00555"></a>00555     OBTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *);
<a name="l00556"></a>00556 
<a name="l00557"></a>00557     std::vector&lt;quad&lt;OBAtom*,OBAtom*,OBAtom*,OBAtom*&gt; &gt; GetTorsions();
<a name="l00558"></a>00558 
<a name="l00559"></a>00559   <span class="keyword">public</span>:
<a name="l00560"></a>00560     OBTorsion(<span class="keyword">const</span> OBTorsion &amp;);
<a name="l00561"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#125a60fb568dbd5e1d41b40fdcc82c94">00561</a>     ~OBTorsion()      {}
<a name="l00562"></a>00562 
<a name="l00563"></a>00563     OBTorsion&amp; operator=(<span class="keyword">const</span> OBTorsion &amp;);
<a name="l00564"></a>00564 
<a name="l00565"></a>00565     <span class="keywordtype">void</span> Clear();
<a name="l00566"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#ea621a6ef267f1db0d3c4e859371670d">00566</a>     <span class="keywordtype">bool</span> Empty()    {      <span class="keywordflow">return</span>(_bc.first == 0 &amp;&amp; _bc.second == 0);    }
<a name="l00567"></a>00567 
<a name="l00568"></a>00568     <span class="keywordtype">bool</span> AddTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *c,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *d);
<a name="l00569"></a>00569     <span class="keywordtype">bool</span> AddTorsion(<a class="code" href="structOpenBabel_1_1quad.shtml">quad&lt;OBAtom*,OBAtom*,OBAtom*,OBAtom*&gt;</a> &amp;atoms);
<a name="l00570"></a>00570 
<a name="l00571"></a>00571     <span class="keywordtype">bool</span> SetAngle(<span class="keywordtype">double</span> radians, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index = 0);
<a name="l00572"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#61894e8081987c416560ab6b0c8cb308">00572</a>     <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * <span class="comment">/*bond*/</span>) { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00573"></a>00573 
<a name="l00574"></a>00574     <span class="keywordtype">bool</span> GetAngle(<span class="keywordtype">double</span> &amp;radians, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> index =0);
<a name="l00577"></a>00577     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetBondIdx();
<a name="l00578"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#ea1a6543dfaaaafd6680aaa61941329e">00578</a>     size_t GetSize()<span class="keyword"> const    </span>{      <span class="keywordflow">return</span> _ads.size();    }
<a name="l00579"></a>00579 
<a name="l00582"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#2b2812afbfe7ab338a5b27dd6616cf55">00582</a>     std::pair&lt;OBAtom*,OBAtom*&gt;                  GetBC()
<a name="l00583"></a>00583       {
<a name="l00584"></a>00584         <span class="keywordflow">return</span>(_bc);
<a name="l00585"></a>00585       }
<a name="l00588"></a><a class="code" href="classOpenBabel_1_1OBTorsion.shtml#9ebd2b578cbfefd3036a0172df5af6b8">00588</a>     std::vector&lt;triple&lt;OBAtom*,OBAtom*,double&gt; &gt; GetADs()
<a name="l00589"></a>00589     {
<a name="l00590"></a>00590       <span class="keywordflow">return</span>(_ads) ;
<a name="l00591"></a>00591     }
<a name="l00592"></a>00592 
<a name="l00593"></a>00593     <span class="keywordtype">bool</span> IsProtonRotor();
<a name="l00594"></a>00594   };
<a name="l00595"></a>00595 
<a name="l00600"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml">00600</a>  <span class="keyword">class </span>OBAPI OBTorsionData : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00601"></a>00601   {
<a name="l00602"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#46c24bfe7070d49139c2dce2eb5ed8de">00602</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00603"></a>00603 
<a name="l00604"></a>00604   <span class="keyword">protected</span>:
<a name="l00605"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#d460502c29125adfadd0a3cd728d1bd5">00605</a>     std::vector&lt;OBTorsion&gt; _torsions;
<a name="l00606"></a>00606 
<a name="l00607"></a>00607     OBTorsionData();
<a name="l00608"></a>00608     OBTorsionData(<span class="keyword">const</span> OBTorsionData &amp;);
<a name="l00609"></a>00609 
<a name="l00610"></a>00610   <span class="keyword">public</span>:
<a name="l00611"></a>00611     OBTorsionData &amp;operator=(<span class="keyword">const</span> OBTorsionData &amp;);
<a name="l00612"></a>00612 
<a name="l00614"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00614</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00615"></a>00615 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBTorsionData(*<span class="keyword">this</span>);}
<a name="l00616"></a>00616 
<a name="l00617"></a>00617     <span class="keywordtype">void</span> Clear();
<a name="l00618"></a>00618 
<a name="l00621"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#c4577c900da171e85e2a7591a1755529">00621</a>     std::vector&lt;OBTorsion&gt; GetData()<span class="keyword"> const</span>
<a name="l00622"></a>00622 <span class="keyword">      </span>{
<a name="l00623"></a>00623         <span class="keywordflow">return</span> _torsions;
<a name="l00624"></a>00624       }
<a name="l00625"></a>00625       
<a name="l00628"></a><a class="code" href="classOpenBabel_1_1OBTorsionData.shtml#ea1a6543dfaaaafd6680aaa61941329e">00628</a>     size_t      GetSize()<span class="keyword"> const</span>
<a name="l00629"></a>00629 <span class="keyword">    </span>{
<a name="l00630"></a>00630       <span class="keywordflow">return</span> _torsions.size();
<a name="l00631"></a>00631     }
<a name="l00632"></a>00632 
<a name="l00633"></a>00633     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(OBTorsion &amp;torsion);
<a name="l00634"></a>00634 
<a name="l00635"></a>00635     <span class="keywordtype">bool</span> FillTorsionArray(std::vector&lt;std::vector&lt;unsigned int&gt; &gt; &amp;torsions);
<a name="l00636"></a>00636   };
<a name="l00637"></a>00637 
<a name="l00640"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml">00640</a>   <span class="keyword">class </span>OBAPI OBAngle
<a name="l00641"></a>00641   {
<a name="l00642"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#46c24bfe7070d49139c2dce2eb5ed8de">00642</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00643"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#5acd31e1c52b5f4010150ffa66be9e77">00643</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAngleData.shtml">OBAngleData</a>;
<a name="l00644"></a>00644 
<a name="l00645"></a>00645   <span class="keyword">protected</span>:
<a name="l00646"></a>00646 
<a name="l00647"></a>00647     <span class="comment">//member data</span>
<a name="l00648"></a>00648 
<a name="l00649"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#1b7f216765a9d848319ed37188a67c0f">00649</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>                *_vertex;
<a name="l00650"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#eee7e3e65765adbf1cc17b0db3d74f0b">00650</a>     std::pair&lt;OBAtom*,OBAtom*&gt;  _termini;
<a name="l00651"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#05567a1638ca049d36287346a2d25ebf">00651</a>     <span class="keywordtype">double</span>                  _radians;
<a name="l00652"></a>00652 
<a name="l00653"></a>00653     <span class="comment">//protected member functions</span>
<a name="l00654"></a>00654 
<a name="l00655"></a>00655     OBAngle();  <span class="comment">//protect constructor for use only by friend classes</span>
<a name="l00656"></a>00656     OBAngle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *vertex,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b);
<a name="l00657"></a>00657 
<a name="l00658"></a>00658     <a class="code" href="structOpenBabel_1_1triple.shtml">triple&lt;OBAtom*,OBAtom*,OBAtom*&gt;</a> GetAtoms();
<a name="l00659"></a>00659     <span class="keywordtype">void</span> SortByIndex();
<a name="l00660"></a>00660 
<a name="l00661"></a>00661   <span class="keyword">public</span>:
<a name="l00662"></a>00662 
<a name="l00663"></a>00663     OBAngle(<span class="keyword">const</span> OBAngle &amp;);
<a name="l00664"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#173e14a2ccd127ac7c651c89044ad500">00664</a>     ~OBAngle()
<a name="l00665"></a>00665       {
<a name="l00666"></a>00666         _vertex = NULL;
<a name="l00667"></a>00667       }
<a name="l00668"></a>00668 
<a name="l00669"></a>00669     OBAngle &amp;operator = (<span class="keyword">const</span> OBAngle &amp;);
<a name="l00670"></a>00670     <span class="keywordtype">bool</span>     <a class="code" href="namespaceOpenBabel.shtml#e8a689b821c5b5e0b57dbc7b22b486af">operator ==</a>(<span class="keyword">const</span> OBAngle &amp;);
<a name="l00671"></a>00671 
<a name="l00672"></a>00672     <span class="keywordtype">void</span>  Clear();
<a name="l00673"></a>00673 
<a name="l00676"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#be42bf8150f3f47b09cbb2a6bc594526">00676</a>     <span class="keywordtype">double</span> GetAngle()<span class="keyword"> const</span>
<a name="l00677"></a>00677 <span class="keyword">    </span>{
<a name="l00678"></a>00678       <span class="keywordflow">return</span>(_radians);
<a name="l00679"></a>00679     }
<a name="l00682"></a><a class="code" href="classOpenBabel_1_1OBAngle.shtml#f5bee454dad5cea96924c95f76cdc07b">00682</a>     <span class="keywordtype">void</span>  SetAngle(<span class="keywordtype">double</span> angle)
<a name="l00683"></a>00683     {
<a name="l00684"></a>00684       _radians = angle;
<a name="l00685"></a>00685     }
<a name="l00686"></a>00686     <span class="keywordtype">void</span>  SetAtoms(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *vertex,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b);
<a name="l00687"></a>00687     <span class="keywordtype">void</span>  SetAtoms(<a class="code" href="structOpenBabel_1_1triple.shtml">triple&lt;OBAtom*,OBAtom*,OBAtom*&gt;</a> &amp;atoms);
<a name="l00688"></a>00688 
<a name="l00689"></a>00689   };
<a name="l00690"></a>00690 
<a name="l00693"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml">00693</a>  <span class="keyword">class </span>OBAPI OBAngleData : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00694"></a>00694   {
<a name="l00695"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#46c24bfe7070d49139c2dce2eb5ed8de">00695</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00696"></a>00696 
<a name="l00697"></a>00697   <span class="keyword">protected</span>:
<a name="l00698"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#8f946723aab2b8146ee075be0f1e4eb8">00698</a>     std::vector&lt;OBAngle&gt; _angles;
<a name="l00699"></a>00699 
<a name="l00700"></a>00700     OBAngleData();
<a name="l00701"></a>00701     OBAngleData(<span class="keyword">const</span> OBAngleData &amp;);
<a name="l00703"></a>00703 
<a name="l00704"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#54d7e9be3917e4f25f475ca471ced45b">00704</a>     std::vector&lt;OBAngle&gt; GetData()<span class="keyword"> const</span>
<a name="l00705"></a>00705 <span class="keyword">      </span>{
<a name="l00706"></a>00706         <span class="keywordflow">return</span>(_angles);
<a name="l00707"></a>00707       }
<a name="l00708"></a>00708 
<a name="l00709"></a>00709   <span class="keyword">public</span>:
<a name="l00710"></a>00710     OBAngleData &amp;operator =(<span class="keyword">const</span> OBAngleData &amp;);
<a name="l00711"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00711</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00712"></a>00712 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBAngleData(*<span class="keyword">this</span>);}
<a name="l00713"></a>00713 
<a name="l00714"></a>00714     <span class="keywordtype">void</span> Clear();
<a name="l00715"></a>00715     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> FillAngleArray(<span class="keywordtype">int</span> **angles, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;size);
<a name="l00716"></a>00716     <span class="keywordtype">bool</span> FillAngleArray(std::vector&lt;std::vector&lt;unsigned int&gt; &gt; &amp;angles);
<a name="l00717"></a>00717 
<a name="l00718"></a>00718     <span class="keywordtype">void</span>         <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(OBAngle &amp;);
<a name="l00721"></a><a class="code" href="classOpenBabel_1_1OBAngleData.shtml#ea1a6543dfaaaafd6680aaa61941329e">00721</a>     size_t GetSize()<span class="keyword"> const</span>
<a name="l00722"></a>00722 <span class="keyword">    </span>{
<a name="l00723"></a>00723       <span class="keywordflow">return</span> _angles.size();
<a name="l00724"></a>00724     }
<a name="l00725"></a>00725   };
<a name="l00726"></a>00726 
<a name="l00727"></a><a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a90">00727</a>   <span class="keyword">enum</span> <a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a90">atomreftype</a>{
<a name="l00728"></a>00728     <a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a90a05248461c84a60bc97aad44f218e5dc">output</a>,     
<a name="l00729"></a>00729     <a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a90585462b5ad33a0118d52d2ba232d4e5a">input</a>,      
<a name="l00730"></a><a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a908f89e8cd4c1876a1619247cd9e11cf46">00730</a>     <a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a908f89e8cd4c1876a1619247cd9e11cf46">calcvolume</a>  
<a name="l00731"></a>00731   }; <span class="comment">// sets which atom4ref is accessed by OBChiralData</span>
<a name="l00732"></a>00732 
<a name="l00735"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml">00735</a>  <span class="keyword">class </span>OBAPI OBChiralData : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00736"></a>00736   {
<a name="l00737"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#46c24bfe7070d49139c2dce2eb5ed8de">00737</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00738"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#bfa1e89fac8aa98f7a892b69f860cc48">00738</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>;
<a name="l00739"></a>00739 
<a name="l00740"></a>00740   <span class="keyword">protected</span>:
<a name="l00741"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#e492a3e65ed1357d7797779691746f0e">00741</a>     std::vector&lt;unsigned int&gt; _atom4refs; 
<a name="l00742"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#f22b6fb6779ad92d290ed4dc65e34b8b">00742</a>     std::vector&lt;unsigned int&gt; _atom4refo; 
<a name="l00743"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#236bc85fdd8706a1e4d8888caf88b404">00743</a>     std::vector&lt;unsigned int&gt; _atom4refc; 
<a name="l00744"></a>00744 
<a name="l00747"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#0cc4cf76dc8e03611e1121b2f8afb18b">00747</a>     <span class="keywordtype">int</span> parity;
<a name="l00748"></a>00748 
<a name="l00749"></a>00749   <span class="keyword">public</span>:
<a name="l00750"></a>00750 
<a name="l00751"></a>00751     OBChiralData();
<a name="l00752"></a>00752     OBChiralData(<span class="keyword">const</span> OBChiralData &amp;src);
<a name="l00753"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00753</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00754"></a>00754 <span class="keyword">      </span>{ <span class="keywordflow">return</span> <span class="keyword">new</span> OBChiralData(*<span class="keyword">this</span>); }
<a name="l00755"></a>00755     OBChiralData &amp;operator =(<span class="keyword">const</span> OBChiralData &amp;);
<a name="l00756"></a><a class="code" href="classOpenBabel_1_1OBChiralData.shtml#3d55c06d55a7249240a8b1600543a902">00756</a>     ~OBChiralData(){}
<a name="l00757"></a>00757 
<a name="l00758"></a>00758     <span class="keywordtype">void</span> Clear();
<a name="l00759"></a>00759 
<a name="l00761"></a>00761     std::vector&lt;unsigned int&gt; GetAtom4Refs(<a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a90">atomreftype</a> t) <span class="keyword">const</span>;
<a name="l00763"></a>00763     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetAtomRef(<span class="keywordtype">int</span> a,<a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a90">atomreftype</a> t);
<a name="l00764"></a>00764 
<a name="l00765"></a>00765     <span class="keywordtype">bool</span> SetAtom4Refs(std::vector&lt;unsigned int&gt; atom4refs, <a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a90">atomreftype</a> t);
<a name="l00766"></a>00766     <span class="keywordtype">int</span> AddAtomRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomref, <a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a90">atomreftype</a> t);
<a name="l00767"></a>00767 
<a name="l00769"></a>00769     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetSize(<a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a90">atomreftype</a> t) <span class="keyword">const</span>;
<a name="l00770"></a>00770   };
<a name="l00771"></a>00771 
<a name="l00774"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml">00774</a>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml">OBSerialNums</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00775"></a>00775   {
<a name="l00776"></a>00776   <span class="keyword">protected</span>:
<a name="l00777"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#1b47bd88b33dd04df47f47097a6f4a1d">00777</a>     std::map&lt;int, OBAtom*&gt; <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#1b47bd88b33dd04df47f47097a6f4a1d">_serialMap</a>; 
<a name="l00778"></a>00778 
<a name="l00779"></a>00779   <span class="keyword">public</span>:
<a name="l00780"></a>00780 
<a name="l00781"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9c0d895fd9b5829fd56ca048052f30c8">00781</a>   <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9c0d895fd9b5829fd56ca048052f30c8">OBSerialNums</a>() :
<a name="l00782"></a>00782     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">"obSerialNums"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f7bb172a27399e4d31e46d38d66dd4d49">SerialNums</a>)
<a name="l00783"></a>00783       {}
<a name="l00784"></a>00784 
<a name="l00785"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9d859438540e5eeaf3bc89558ea561e1">00785</a>   <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9c0d895fd9b5829fd56ca048052f30c8">OBSerialNums</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml">OBSerialNums</a> &amp;cp) : <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(cp)
<a name="l00786"></a>00786     {
<a name="l00787"></a>00787       <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#1b47bd88b33dd04df47f47097a6f4a1d">_serialMap</a> = cp.<a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#1b47bd88b33dd04df47f47097a6f4a1d">_serialMap</a>;
<a name="l00788"></a>00788     }
<a name="l00791"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#5fa180b15907b8a5630da957ef8f3dd2">00791</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#5fa180b15907b8a5630da957ef8f3dd2">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00792"></a>00792 <span class="keyword">    </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#9c0d895fd9b5829fd56ca048052f30c8">OBSerialNums</a>(*<span class="keyword">this</span>);}
<a name="l00793"></a>00793       
<a name="l00794"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#0ced3547b6d1eac8780a527512ddcdac">00794</a>     std::map&lt;int,OBAtom*&gt; &amp;<a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#0ced3547b6d1eac8780a527512ddcdac">GetData</a>()    { <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#1b47bd88b33dd04df47f47097a6f4a1d">_serialMap</a>;    }
<a name="l00795"></a><a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#ef59d63d0caeaeea663fc79671843f1e">00795</a>     <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#ef59d63d0caeaeea663fc79671843f1e">SetData</a>(std::map&lt;int,OBAtom*&gt; &amp;sm) { <a class="code" href="classOpenBabel_1_1OBSerialNums.shtml#1b47bd88b33dd04df47f47097a6f4a1d">_serialMap</a> = sm;  }
<a name="l00796"></a>00796       
<a name="l00797"></a>00797   };
<a name="l00798"></a>00798 
<a name="l00801"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml">00801</a>  <span class="keyword">class </span>OBAPI OBVibrationData: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00802"></a>00802   {
<a name="l00803"></a>00803   <span class="keyword">protected</span>:
<a name="l00805"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#9bb62c6b372b7bd6821d798fca5eb113">00805</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; _vLx;
<a name="l00806"></a>00806     
<a name="l00808"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#3ae6f33ee2641ea607f5d04f521151c7">00808</a>     std::vector&lt;double&gt;  _vFrequencies;
<a name="l00809"></a>00809     
<a name="l00811"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#d1df6b38700f66a7481c677e5bfd263e">00811</a>     std::vector&lt;double&gt;  _vIntensities;
<a name="l00812"></a>00812 
<a name="l00814"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#9e00ec7a1dfcba749f9db01d9d2e5996">00814</a>     std::vector&lt;double&gt;  _vRamanActivities;
<a name="l00815"></a>00815 
<a name="l00816"></a>00816   <span class="keyword">public</span>:
<a name="l00817"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#99c0bb6b4a1b60a5522d4f5609dd560f">00817</a>     OBVibrationData(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">"VibrationData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fb0f129098bd55fa099d892b2d6be0aac">VibrationData</a>){};
<a name="l00818"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#5d0a0caa7a37f7be27b51c733c3bd532">00818</a>     <span class="keyword">virtual</span> ~OBVibrationData() {}
<a name="l00819"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00819</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00820"></a>00820 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBVibrationData(*<span class="keyword">this</span>);}
<a name="l00821"></a>00821     
<a name="l00822"></a>00822     OBVibrationData &amp; operator=(<span class="keyword">const</span> OBVibrationData &amp;);
<a name="l00823"></a>00823     
<a name="l00824"></a>00824     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<span class="keyword">const</span> std::vector&lt; std::vector&lt; vector3 &gt; &gt; &amp; lx,
<a name="l00825"></a>00825                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp; frequencies,
<a name="l00826"></a>00826                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp; intensities);
<a name="l00827"></a>00827     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<span class="keyword">const</span> std::vector&lt; std::vector&lt; vector3 &gt; &gt; &amp;,
<a name="l00828"></a>00828                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;,
<a name="l00829"></a>00829                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;,
<a name="l00830"></a>00830                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00831"></a>00831     
<a name="l00832"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#047183ea0c5ec821cbd907f039388385">00832</a>     std::vector&lt; std::vector&lt; vector3 &gt; &gt; GetLx()<span class="keyword"> const</span>
<a name="l00833"></a>00833 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vLx; }
<a name="l00834"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#a542aff8a7c85d990b1ce79e2fe1a757">00834</a>     std::vector&lt;double&gt; GetFrequencies()<span class="keyword"> const</span>
<a name="l00835"></a>00835 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vFrequencies; }
<a name="l00836"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#51f32cdd9598f35030cbcfb6bb5ac86e">00836</a>     std::vector&lt;double&gt; GetIntensities()<span class="keyword"> const</span>
<a name="l00837"></a>00837 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vIntensities; }
<a name="l00838"></a><a class="code" href="classOpenBabel_1_1OBVibrationData.shtml#f9f2fdbc270f54d850b26a710b6be224">00838</a>     std::vector&lt;double&gt; GetRamanActivities()<span class="keyword"> const</span>
<a name="l00839"></a>00839 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vRamanActivities; }
<a name="l00840"></a>00840 
<a name="l00841"></a>00841     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetNumberOfFrequencies() <span class="keyword">const</span>;
<a name="l00842"></a>00842 };
<a name="l00843"></a>00843 
<a name="l00846"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml">00846</a>  <span class="keyword">class </span>OBAPI OBDOSData: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00847"></a>00847   {
<a name="l00848"></a>00848   <span class="keyword">protected</span>:
<a name="l00850"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#8970881b3f422c11b23e9fccb98959c4">00850</a>     <span class="keywordtype">double</span> _fermi;
<a name="l00851"></a>00851     
<a name="l00853"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#334924128e727221834679cf233af16e">00853</a>     std::vector&lt;double&gt;  _vEnergies;
<a name="l00854"></a>00854     
<a name="l00856"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#76ad65c1cc12c913f441c1bc94bd3d66">00856</a>     std::vector&lt;double&gt;  _vDensities;
<a name="l00857"></a>00857 
<a name="l00859"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#93b9a02779914408c5d42b4630e843c0">00859</a>     std::vector&lt;double&gt;  _vIntegration;
<a name="l00860"></a>00860 
<a name="l00861"></a>00861   <span class="keyword">public</span>:
<a name="l00862"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#81e1eb2dc03773941ff5923dde9116d5">00862</a>     OBDOSData(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">"DOSData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f1c3700a2d25f9f1941cd5dcba364ed4a">DOSData</a>){};
<a name="l00863"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#e02ac2c27c9584032f7087bb3e439fb7">00863</a>     <span class="keyword">virtual</span> ~OBDOSData() {}
<a name="l00864"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00864</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00865"></a>00865 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBDOSData(*<span class="keyword">this</span>);}
<a name="l00866"></a>00866     
<a name="l00867"></a>00867     OBDOSData &amp; operator=(<span class="keyword">const</span> OBDOSData &amp;);
<a name="l00868"></a>00868     
<a name="l00869"></a>00869     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<span class="keywordtype">double</span>,
<a name="l00870"></a>00870                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;,
<a name="l00871"></a>00871                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;,
<a name="l00872"></a>00872                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00873"></a>00873     
<a name="l00874"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#13689794f453756fa714efa8b4cd7b3c">00874</a>     <span class="keywordtype">double</span> GetFermiEnergy()<span class="keyword"> const</span>
<a name="l00875"></a>00875 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_fermi; }
<a name="l00876"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#1293bf5175820849135353034f7112bf">00876</a>     std::vector&lt;double&gt; GetEnergies()<span class="keyword"> const</span>
<a name="l00877"></a>00877 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vEnergies; }
<a name="l00878"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#dfd951f87f14bd363585b41ff9be39a1">00878</a>     std::vector&lt;double&gt; GetDensities()<span class="keyword"> const</span>
<a name="l00879"></a>00879 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vDensities; }
<a name="l00880"></a><a class="code" href="classOpenBabel_1_1OBDOSData.shtml#8e96c1c3d2666073a59b7a267063822a">00880</a>     std::vector&lt;double&gt; GetIntegration()<span class="keyword"> const</span>
<a name="l00881"></a>00881 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vIntegration; }
<a name="l00882"></a>00882 };
<a name="l00883"></a>00883 
<a name="l00886"></a><a class="code" href="classOpenBabel_1_1OBOrbitalEnergyData.shtml">00886</a>   <span class="keyword">class </span>OBAPI OBOrbitalEnergyData: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00887"></a>00887   {
<a name="l00888"></a>00888   <span class="keyword">protected</span>:
<a name="l00889"></a><a class="code" href="classOpenBabel_1_1OBOrbitalEnergyData.shtml#5ca26299795a0bdecf210b8796460b41">00889</a>     std::vector&lt;double&gt; _alphaEigenvalues;
<a name="l00890"></a><a class="code" href="classOpenBabel_1_1OBOrbitalEnergyData.shtml#95c464e1f918b054974cb43e64f34df8">00890</a>     std::vector&lt;double&gt; _betaEigenvalues;
<a name="l00891"></a><a class="code" href="classOpenBabel_1_1OBOrbitalEnergyData.shtml#4e41f87419bca1a3dbf91975d7e8760b">00891</a>     std::vector&lt;std::string&gt; _alphaMullikenSymbols;
<a name="l00892"></a><a class="code" href="classOpenBabel_1_1OBOrbitalEnergyData.shtml#8f5e812c440335682098bff9b38b4e91">00892</a>     std::vector&lt;std::string&gt; _betaMullikenSymbols;
<a name="l00893"></a>00893   };
<a name="l00894"></a>00894 
<a name="l00897"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml">00897</a>  <span class="keyword">class </span>OBAPI OBElectronicTransitionData: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00898"></a>00898   {
<a name="l00899"></a>00899   <span class="keyword">protected</span>:
<a name="l00901"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#66403c2032b0a186ebbf0f511a4ad9c8">00901</a>     std::vector&lt;double&gt;  _vWavelengths;
<a name="l00902"></a>00902     
<a name="l00904"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#bbd479775565fb1046193b3ad3c066c8">00904</a>     std::vector&lt;double&gt;  _vForces;
<a name="l00905"></a>00905 
<a name="l00907"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#7110e168445028ef815db598149e3811">00907</a>     std::vector&lt;double&gt;  _vEDipole;
<a name="l00908"></a>00908 
<a name="l00910"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#77f4b513c3f18b2ccd76346ebd98406c">00910</a>     std::vector&lt;double&gt;  _vRotatoryStrengthsVelocity;
<a name="l00911"></a>00911 
<a name="l00913"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#00454ee3d1e567a6b3cca008dc43face">00913</a>     std::vector&lt;double&gt;  _vRotatoryStrengthsLength;
<a name="l00914"></a>00914 
<a name="l00915"></a>00915   <span class="keyword">public</span>:
<a name="l00916"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#4337c46563df20501c202107ab67b1fe">00916</a>     OBElectronicTransitionData(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">"ElectronicTransitionData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fb5b4bd0b7d821c53bf920dbcaf7a86b3">ElectronicTransitionData</a>) {}
<a name="l00917"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#f8d0ee82ef78b790b986ab7cb4f63b28">00917</a>     <span class="keyword">virtual</span> ~OBElectronicTransitionData() {}
<a name="l00918"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00918</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00919"></a>00919 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBElectronicTransitionData(*<span class="keyword">this</span>);}
<a name="l00920"></a>00920     
<a name="l00921"></a>00921     OBElectronicTransitionData &amp; operator=(<span class="keyword">const</span> OBElectronicTransitionData &amp;);
<a name="l00922"></a>00922     
<a name="l00923"></a>00923     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<span class="keyword">const</span> std::vector&lt;double&gt; &amp; wavelengths,
<a name="l00924"></a>00924                  <span class="keyword">const</span> std::vector&lt;double&gt; &amp; forces);
<a name="l00925"></a>00925 
<a name="l00926"></a>00926     <span class="keywordtype">void</span> SetEDipole(<span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00927"></a>00927     <span class="keywordtype">void</span> SetRotatoryStrengthsVelocity(<span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00928"></a>00928     <span class="keywordtype">void</span> SetRotatoryStrengthsLength(<span class="keyword">const</span> std::vector&lt;double&gt; &amp;);
<a name="l00929"></a>00929 
<a name="l00930"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#3bf1a5ab9c26b9a45b34d5fd117b9233">00930</a>     std::vector&lt;double&gt; GetWavelengths()<span class="keyword"> const</span>
<a name="l00931"></a>00931 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vWavelengths; }
<a name="l00932"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#9c9d0836abe637ad35693407ab5cb18e">00932</a>     std::vector&lt;double&gt; GetForces()<span class="keyword"> const</span>
<a name="l00933"></a>00933 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vForces; }
<a name="l00934"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#15fb8234f11dab1e56648e1e582327d8">00934</a>     std::vector&lt;double&gt; GetEDipole()<span class="keyword"> const</span>
<a name="l00935"></a>00935 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vEDipole; }
<a name="l00936"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#1ad7197cee057ac7da02aaa022ff35da">00936</a>     std::vector&lt;double&gt; GetRotatoryStrengthsVelocity()<span class="keyword"> const</span>
<a name="l00937"></a>00937 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vRotatoryStrengthsVelocity; }
<a name="l00938"></a><a class="code" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#2d1810502c3eea61626f699d9b74518d">00938</a>     std::vector&lt;double&gt; GetRotatoryStrengthsLength()<span class="keyword"> const</span>
<a name="l00939"></a>00939 <span class="keyword">      </span>{ <span class="keywordflow">return</span> this-&gt;_vRotatoryStrengthsLength; }
<a name="l00940"></a>00940 };
<a name="l00941"></a>00941 
<a name="l00944"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml">00944</a>  <span class="keyword">class </span>OBAPI OBRotationData: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00945"></a>00945  {
<a name="l00946"></a>00946  <span class="keyword">public</span>:
<a name="l00947"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#084eec64da4f4d99d3914184f97dc507">00947</a>    <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#084eec64da4f4d99d3914184f97dc507">RType</a>{UNKNOWN, ASYMMETRIC, SYMMETRIC, LINEAR};
<a name="l00948"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#bf0e9c265039d4b554c78121201e0fb9">00948</a>    OBRotationData(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">"RotationData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f9bde8dedca5dc16dfe60c61cfb0d5396">RotationData</a>){}
<a name="l00949"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#bb859181e69a01bd945503669cb3fbfd">00949</a>    <span class="keyword">virtual</span> ~OBRotationData(){};
<a name="l00950"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00950</a>    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00951"></a>00951 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBRotationData(*<span class="keyword">this</span>);}
<a name="l00952"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#c67b0680f193e05ddd0702f7c619b2d7">00952</a>    <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<a class="code" href="classOpenBabel_1_1OBRotationData.shtml#084eec64da4f4d99d3914184f97dc507">RType</a> RotorType, std::vector&lt;double&gt; RotationalConstants, <span class="keywordtype">int</span> SymmetryNumber)
<a name="l00953"></a>00953    {
<a name="l00954"></a>00954      RotConsts = RotationalConstants;
<a name="l00955"></a>00955      type = RotorType;
<a name="l00956"></a>00956      SymNum = SymmetryNumber;
<a name="l00957"></a>00957    }
<a name="l00958"></a>00958 
<a name="l00960"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#5459d997b0f3a8471cd5de5667489d20">00960</a>    std::vector&lt;double&gt; GetRotConsts()<span class="keyword">const</span>{ <span class="keywordflow">return</span> RotConsts; }
<a name="l00961"></a>00961 
<a name="l00962"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#6e2ee52a5190416c4cb1bb5b5c1ca4d3">00962</a>    <span class="keywordtype">int</span> GetSymmetryNumber()<span class="keyword">const</span>{ <span class="keywordflow">return</span> SymNum; }
<a name="l00963"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#4f2a97788469e439137b2be3741a446d">00963</a>    <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#084eec64da4f4d99d3914184f97dc507">RType</a> GetRotorType()<span class="keyword">const   </span>{ <span class="keywordflow">return</span> type; }
<a name="l00964"></a>00964 
<a name="l00965"></a>00965  <span class="keyword">protected</span>:
<a name="l00966"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#e3623e2c09632a9687df26433a60e204">00966</a>    std::vector&lt;double&gt; RotConsts;
<a name="l00967"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#3c6a37f12eb8071290590dbd64daded8">00967</a>    <span class="keywordtype">int</span>                 SymNum;   
<a name="l00968"></a><a class="code" href="classOpenBabel_1_1OBRotationData.shtml#5cc9a2c85b916ff7116b6bee4cf594e6">00968</a>    <a class="code" href="classOpenBabel_1_1OBRotationData.shtml#084eec64da4f4d99d3914184f97dc507">RType</a>               type;     
<a name="l00969"></a>00969  };
<a name="l00970"></a>00970  
<a name="l00974"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml">00974</a>  <span class="keyword">class </span>OBAPI OBVectorData: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00975"></a>00975  {
<a name="l00976"></a>00976  <span class="keyword">public</span>:
<a name="l00977"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#d83592bfbb4aebdaf8a701343ae57d65">00977</a>    OBVectorData(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">"VectorData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f3e2938595c3e04bfbfc1d3687cb39ce1">VectorData</a>){}
<a name="l00978"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#c10e58678ed59ae93c0f97b4caf120fc">00978</a>    <span class="keyword">virtual</span> ~OBVectorData(){};
<a name="l00979"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00979</a>    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*)<span class="keyword"> const</span>
<a name="l00980"></a>00980 <span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBVectorData(*<span class="keyword">this</span>);}
<a name="l00981"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#6ffa2cf8192ff263c8b10d95d3a2d5a0">00981</a>    <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z)
<a name="l00982"></a>00982      { _vec = <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>(x, y, z); }
<a name="l00983"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#ff07329264fcfb076e9d0bc3ca38873a">00983</a>    <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> data)
<a name="l00984"></a>00984      { _vec = data; }
<a name="l00985"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#07191a59898f8b756f520730f42993c1">00985</a>    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> GetData()<span class="keyword"> const</span>
<a name="l00986"></a>00986 <span class="keyword">     </span>{ <span class="keywordflow">return</span> _vec; }
<a name="l00987"></a>00987    
<a name="l00988"></a>00988  <span class="keyword">protected</span>:
<a name="l00989"></a><a class="code" href="classOpenBabel_1_1OBVectorData.shtml#83bf4b3dcfacbe22c6c6af235abd27be">00989</a>    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>            _vec; 
<a name="l00990"></a>00990  };
<a name="l00991"></a>00991  
<a name="l00995"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml">00995</a>   <span class="keyword">class </span>OBAPI OBMatrixData: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00996"></a>00996   {
<a name="l00997"></a>00997   <span class="keyword">public</span>:
<a name="l00998"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#4f2c580a66eba76df1a02230db0543b3">00998</a>     OBMatrixData(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">"MatrixData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f33b4bfebc81e8591e40892e061e4992a">MatrixData</a>){}
<a name="l00999"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#4c608f86617ed1f9088dd7ad8c44cf25">00999</a>     <span class="keyword">virtual</span> ~OBMatrixData(){};
<a name="l01000"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#5fa180b15907b8a5630da957ef8f3dd2">01000</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*)<span class="keyword"> const</span>
<a name="l01001"></a>01001 <span class="keyword">          </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> OBMatrixData(*<span class="keyword">this</span>);}
<a name="l01002"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#f037d3550d9bc8f4585a3fa6e6fdfbdd">01002</a>     <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(<a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> data)
<a name="l01003"></a>01003       { _matrix = data; }
<a name="l01004"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#c891f71409ca3992083006bc1d9282bb">01004</a>     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> GetData()<span class="keyword"> const</span>
<a name="l01005"></a>01005 <span class="keyword">      </span>{ <span class="keywordflow">return</span> _matrix; }
<a name="l01006"></a>01006 
<a name="l01007"></a>01007   <span class="keyword">protected</span>:
<a name="l01008"></a><a class="code" href="classOpenBabel_1_1OBMatrixData.shtml#6c46b42ad57d69381c32a80abb4b41d3">01008</a>     <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>            _matrix; 
<a name="l01009"></a>01009   };
<a name="l01010"></a>01010 
<a name="l01012"></a><a class="code" href="namespaceOpenBabel.shtml#59b304fb983820cf38d2a2ca387560a3">01012</a>   <span class="keyword">typedef</span> std::vector&lt;OBGenericData*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#59b304fb983820cf38d2a2ca387560a3">OBDataIterator</a>;
<a name="l01013"></a>01013 
<a name="l01014"></a>01014 } <span class="comment">//end namespace OpenBabel</span>
<a name="l01015"></a>01015 
<a name="l01016"></a>01016 <span class="preprocessor">#endif // OB_GENERIC_H</span>
<a name="l01017"></a>01017 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
