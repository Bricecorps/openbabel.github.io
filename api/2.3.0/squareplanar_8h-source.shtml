<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: squareplanar.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>squareplanar.h</h1><a href="squareplanar_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="preprocessor">#ifndef OB_SQUAREPLANAR_H</span>
<a name="l00002"></a>00002 <span class="preprocessor"></span><span class="preprocessor">#define OB_SQUAREPLANAR_H</span>
<a name="l00003"></a>00003 <span class="preprocessor"></span>
<a name="l00004"></a>00004 <span class="preprocessor">#include &lt;<a class="code" href="tetraplanar_8h.shtml">openbabel/stereo/tetraplanar.h</a>&gt;</span>
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="keyword">namespace </span>OpenBabel {
<a name="l00008"></a>00008 
<a name="l00011"></a>00011 
<a name="l00025"></a><a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">00025</a> <span class="keyword">class </span>OBAPI OBSquarePlanarStereo : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBTetraPlanarStereo.shtml">OBTetraPlanarStereo</a>
<a name="l00027"></a>00027 {
<a name="l00028"></a>00028   <span class="keyword">public</span>:
<a name="l00045"></a>00045 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00046"></a><a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">00046</a> <span class="preprocessor"></span>    <span class="keyword">struct </span>OBAPI Config
<a name="l00047"></a>00047     {
<a name="l00052"></a><a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#e2ab8d711707b5eb8c0afd9c76327614">00052</a>       Config() : center(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::NoRef), shape(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::ShapeU),
<a name="l00053"></a>00053           specified(true)
<a name="l00054"></a>00054       {  }
<a name="l00062"></a><a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#ad64652d7bf5288e2a4638fabf32511c">00062</a>       Config(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> _center, <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#38b951402b7cd70c2af2fec6c2c8fb8f">OBStereo::Refs</a> &amp;_refs, 
<a name="l00063"></a>00063           <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed">OBStereo::Shape</a> _shape = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed4115a1af058d6d943a2d8c3dc32206b8">OBStereo::ShapeU</a>) : center(_center),
<a name="l00064"></a>00064           refs(_refs), shape(_shape), specified(true)
<a name="l00065"></a>00065       {  }
<a name="l00130"></a>00130       <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#e8a689b821c5b5e0b57dbc7b22b486af">operator==</a>(<span class="keyword">const</span> Config &amp;other) <span class="keyword">const</span>;
<a name="l00136"></a><a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#eef7025642d3582d4238500455d2dffe">00136</a>       <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> Config &amp;other)<span class="keyword"> const</span>
<a name="l00137"></a>00137 <span class="keyword">      </span>{ 
<a name="l00138"></a>00138         <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other); 
<a name="l00139"></a>00139       }
<a name="l00140"></a>00140             
<a name="l00145"></a><a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#23b9402cc628665329799b0d20662b85">00145</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> center; <span class="comment">//&lt;! The central atom id.</span>
<a name="l00146"></a><a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#947f33699149e23fdfa1670335901fff">00146</a>       <a class="code" href="structOpenBabel_1_1OBStereo.shtml#38b951402b7cd70c2af2fec6c2c8fb8f">OBStereo::Refs</a> refs; 
<a name="l00147"></a><a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#2c26ed79e0098a2a2b54cfd49556d2cd">00147</a>       <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed">OBStereo::Shape</a> shape; 
<a name="l00148"></a><a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#34eb72dee7ab08852472f87f8d133b78">00148</a>       <span class="keywordtype">bool</span> specified; 
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 
<a name="l00151"></a>00151     };
<a name="l00152"></a>00152 <span class="preprocessor">#endif</span>
<a name="l00153"></a>00153 <span class="preprocessor"></span>
<a name="l00156"></a>00156     OBSquarePlanarStereo(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00160"></a>00160     <span class="keyword">virtual</span> ~OBSquarePlanarStereo();
<a name="l00161"></a>00161 
<a name="l00164"></a>00164 
<a name="l00168"></a><a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#c9e35967b6c6b43614532b829af3220f">00168</a>     <a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7c">OBStereo::Type</a> GetType()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7c2381a518888fab1959cf98c23a91909f">OBStereo::SquarePlanar</a>; }
<a name="l00173"></a>00173     <span class="keywordtype">bool</span> IsValid() <span class="keyword">const</span>;
<a name="l00174"></a>00174 
<a name="l00178"></a>00178 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00179"></a>00179 <span class="preprocessor"></span>    <span class="keywordtype">void</span> SetConfig(<span class="keyword">const</span> Config &amp;config);
<a name="l00183"></a>00183     Config GetConfig(<a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed">OBStereo::Shape</a> shape = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed4115a1af058d6d943a2d8c3dc32206b8">OBStereo::ShapeU</a>) <span class="keyword">const</span>;
<a name="l00188"></a>00188     Config GetConfig(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> start, 
<a name="l00189"></a>00189         <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed">OBStereo::Shape</a> shape = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed4115a1af058d6d943a2d8c3dc32206b8">OBStereo::ShapeU</a>) <span class="keyword">const</span>;
<a name="l00190"></a>00190 <span class="preprocessor">#endif</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span>
<a name="l00197"></a>00197     <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#e8a689b821c5b5e0b57dbc7b22b486af">operator==</a>(<span class="keyword">const</span> OBSquarePlanarStereo &amp;other) <span class="keyword">const</span>;
<a name="l00203"></a><a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#7dfce884fa4790c2ab4c36fdfb4e73e8">00203</a>     <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> OBSquarePlanarStereo &amp;other)<span class="keyword"> const</span>
<a name="l00204"></a>00204 <span class="keyword">    </span>{
<a name="l00205"></a>00205       <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other); 
<a name="l00206"></a>00206     }
<a name="l00208"></a>00208     
<a name="l00209"></a>00209     <span class="comment">/*</span>
<a name="l00210"></a>00210 <span class="comment">     * Implement OBGenericData::Clone().</span>
<a name="l00211"></a>00211 <span class="comment">     */</span>
<a name="l00212"></a>00212     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *mol) <span class="keyword">const</span>;
<a name="l00213"></a>00213  
<a name="l00215"></a>00215 
<a name="l00216"></a>00216 
<a name="l00219"></a>00219     <span class="keywordtype">bool</span> IsTrans(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id1, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id2) <span class="keyword">const</span>;
<a name="l00223"></a>00223     <span class="keywordtype">bool</span> IsCis(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id1, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id2) <span class="keyword">const</span>;
<a name="l00228"></a>00228     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> GetTransRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;
<a name="l00232"></a>00232     std::vector&lt;unsigned long&gt; GetCisRefs(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;
<a name="l00234"></a>00234  
<a name="l00235"></a>00235   <span class="keyword">private</span>:
<a name="l00236"></a>00236     Config m_cfg; 
<a name="l00237"></a>00237     <span class="comment">// The following function sits behind GetCisRef and GetTransRef</span>
<a name="l00238"></a>00238     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> GetCisOrTransRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> getcisref) <span class="keyword">const</span>;
<a name="l00239"></a>00239 };
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 } <span class="comment">// namespace OpenBabel</span>
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00244"></a>00244 <span class="preprocessor"></span><span class="keyword">namespace </span>std {
<a name="l00245"></a>00245 
<a name="l00248"></a>00248 
<a name="l00264"></a>00264 OBAPI ostream&amp; <a class="code" href="group__stereo.shtml#g63d6f28a7f35d843e301c77c57369afe">operator&lt;&lt;</a>(ostream &amp;out, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OpenBabel::OBSquarePlanarStereo</a> &amp;ct);
<a name="l00278"></a>00278 OBAPI ostream&amp; <a class="code" href="group__stereo.shtml#g63d6f28a7f35d843e301c77c57369afe">operator&lt;&lt;</a>(ostream &amp;out, <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">OpenBabel::OBSquarePlanarStereo::Config</a> &amp;cfg);
<a name="l00279"></a>00279 
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 } <span class="comment">// namespace std</span>
<a name="l00283"></a>00283 <span class="preprocessor">#endif // Not SWIG</span>
<a name="l00284"></a>00284 <span class="preprocessor"></span>
<a name="l00285"></a>00285 
<a name="l00286"></a>00286 <span class="preprocessor">#endif</span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
