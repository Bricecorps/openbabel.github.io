<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: stereo.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>stereo.h</h1><a href="stereo_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">  stereo.h - OBStereo &amp; OBStereoBase</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">  Copyright (C) 2009 by Tim Vandermeersch</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">  This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">  For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">  This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">  it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">  the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00012"></a>00012 <span class="comment">  (at your option) any later version.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">  This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">  GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment"></span>
<a name="l00019"></a>00019 <span class="comment">  You should have received a copy of the GNU General Public License</span>
<a name="l00020"></a>00020 <span class="comment">  along with this program; if not, write to the Free Software</span>
<a name="l00021"></a>00021 <span class="comment">  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span>
<a name="l00022"></a>00022 <span class="comment">  02110-1301, USA.</span>
<a name="l00023"></a>00023 <span class="comment"> **********************************************************************/</span>
<a name="l00024"></a>00024 <span class="preprocessor">#ifndef OB_STEREO_H</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#define OB_STEREO_H</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span> <span class="comment">// OBGenericData</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;climits&gt;</span> <span class="comment">// UINT_MAX</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">namespace </span>OpenBabel {
<a name="l00034"></a>00034   
<a name="l00037"></a>00037 
<a name="l00072"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml">00072</a>   <span class="keyword">struct </span>OBAPI OBStereo 
<a name="l00073"></a>00073   {
<a name="l00077"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7c">00077</a>     <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7c">Type</a> {
<a name="l00078"></a>00078       CisTrans            = (1&lt;&lt;0), 
<a name="l00079"></a>00079       ExtendedCisTrans    = (1&lt;&lt;1), 
<a name="l00080"></a>00080       SquarePlanar        = (1&lt;&lt;2), 
<a name="l00081"></a>00081       Tetrahedral         = (1&lt;&lt;3), 
<a name="l00082"></a>00082       ExtendedTetrahedral = (1&lt;&lt;4), 
<a name="l00083"></a>00083       TrigonalBipyramidal = (1&lt;&lt;5), 
<a name="l00084"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7c49cddf775e9106ebe2f14ba436b3c3fd">00084</a>       Octahedral          = (1&lt;&lt;6)  
<a name="l00085"></a>00085     };
<a name="l00086"></a>00086 
<a name="l00091"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#39faddcdfad876ab0320fd360b1787f6">00091</a>     <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#39faddcdfad876ab0320fd360b1787f6">BondDirection</a> { <span class="comment">// Values taken from MDL format</span>
<a name="l00092"></a>00092       NotStereo =   0,
<a name="l00093"></a>00093       UpBond =      1,
<a name="l00094"></a>00094       DownBond =    6,
<a name="l00095"></a>00095       UnknownDir =  4
<a name="l00096"></a>00096     };
<a name="l00097"></a>00097 
<a name="l00105"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed">00105</a>     <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#365c92c64344de88b025d573b8754fed">Shape</a> {
<a name="l00106"></a>00106       ShapeU = 1,
<a name="l00107"></a>00107       ShapeZ = 2,
<a name="l00108"></a>00108       Shape4 = 3
<a name="l00109"></a>00109     };
<a name="l00110"></a>00110 
<a name="l00116"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#03545e626f3c27dc982c2e9194e4c909">00116</a>     <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#03545e626f3c27dc982c2e9194e4c909">View</a>
<a name="l00117"></a>00117     {
<a name="l00118"></a>00118       ViewFrom = 1, 
<a name="l00119"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#03545e626f3c27dc982c2e9194e4c9098cc0fe76b0227bf833320aa24ae8e31d">00119</a>       ViewTowards = 2 
<a name="l00120"></a>00120     };
<a name="l00121"></a>00121 
<a name="l00127"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#14b44cd67149a6a308b7836e939401e9">00127</a>     <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#14b44cd67149a6a308b7836e939401e9">Winding</a> {
<a name="l00128"></a>00128       Clockwise = 1,     
<a name="l00129"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#14b44cd67149a6a308b7836e939401e9cea2ca8d1d8af2a2f1b161696f3a4512">00129</a>       AntiClockwise = 2  
<a name="l00130"></a>00130     };
<a name="l00131"></a>00131 
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 
<a name="l00141"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#964e5f111b7353735a514c216e194939">00141</a>     <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> Ref;
<a name="l00145"></a>00145     <span class="keyword">enum</span> {
<a name="l00146"></a>00146       NoRef = UINT_MAX,       
<a name="l00147"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#9776a0545c4469f87d7addeabca77ac46a20251be103d92348541934714b92b2">00147</a>       ImplicitRef = UINT_MAX - 1  
<a name="l00148"></a>00148     };
<a name="l00152"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#38b951402b7cd70c2af2fec6c2c8fb8f">00152</a>     <span class="keyword">typedef</span> std::vector&lt;Ref&gt; <a class="code" href="structOpenBabel_1_1OBStereo.shtml#38b951402b7cd70c2af2fec6c2c8fb8f">Refs</a>;
<a name="l00156"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#036d817d969e96ccb0b0031a1c1c4722">00156</a>     <span class="keyword">typedef</span> Refs::iterator RefIter;
<a name="l00160"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#1418bd6e8de33b92d38cc6939719790f">00160</a>     <span class="keyword">typedef</span> Refs::const_iterator ConstRefIter;
<a name="l00162"></a>00162 
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 
<a name="l00171"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#861564b42c6f050b6d4754bc5bb8cd48">00171</a>     <span class="keyword">static</span> Refs MakeRefs(Ref ref1, Ref ref2, Ref ref3, Ref ref4 = NoRef)
<a name="l00172"></a>00172     {
<a name="l00173"></a>00173       Refs refs(3);
<a name="l00174"></a>00174       refs[0] = ref1;
<a name="l00175"></a>00175       refs[1] = ref2;
<a name="l00176"></a>00176       refs[2] = ref3;
<a name="l00177"></a>00177       <span class="keywordflow">if</span> (ref4 != NoRef)
<a name="l00178"></a>00178         refs.push_back(ref4);
<a name="l00179"></a>00179       <span class="keywordflow">return</span> refs;
<a name="l00180"></a>00180     }
<a name="l00193"></a>00193     <span class="keyword">static</span> <span class="keywordtype">bool</span> ContainsSameRefs(<span class="keyword">const</span> Refs &amp;refs1, <span class="keyword">const</span> Refs &amp;refs2);
<a name="l00197"></a>00197     <span class="keyword">static</span> <span class="keywordtype">bool</span> ContainsRef(<span class="keyword">const</span> Refs &amp;refs, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> ref);
<a name="l00199"></a>00199 
<a name="l00201"></a>00201 
<a name="l00202"></a>00202 
<a name="l00222"></a>00222     <span class="keyword">static</span> <span class="keywordtype">int</span> NumInversions(<span class="keyword">const</span> Refs &amp;refs);
<a name="l00232"></a>00232     <span class="keyword">static</span> <span class="keywordtype">void</span> Permutate(Refs &amp;refs, <span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j);
<a name="l00244"></a>00244     <span class="keyword">static</span> Refs Permutated(<span class="keyword">const</span> Refs &amp;refs, <span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j);
<a name="l00246"></a>00246  
<a name="l00247"></a>00247   };
<a name="l00248"></a>00248 
<a name="l00249"></a><a class="code" href="structOpenBabel_1_1StereogenicUnit.shtml">00249</a>   <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1StereogenicUnit.shtml">StereogenicUnit</a>
<a name="l00250"></a>00250   {
<a name="l00251"></a><a class="code" href="structOpenBabel_1_1StereogenicUnit.shtml#132af99aebed847d9acf914964501643">00251</a>     <a class="code" href="structOpenBabel_1_1StereogenicUnit.shtml">StereogenicUnit</a>() : type(static_cast&lt;OBStereo::Type&gt;(0)), id(OBStereo::NoRef), para(false)
<a name="l00252"></a>00252     {
<a name="l00253"></a>00253     }
<a name="l00254"></a>00254 
<a name="l00255"></a><a class="code" href="structOpenBabel_1_1StereogenicUnit.shtml#eae68b1a946700f6a7b554e75e07116b">00255</a>     <a class="code" href="structOpenBabel_1_1StereogenicUnit.shtml">StereogenicUnit</a>(<a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7c">OBStereo::Type</a> _type, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> _id, <span class="keywordtype">bool</span> _para = <span class="keyword">false</span>) :
<a name="l00256"></a>00256         type(_type), id(_id), para(_para)
<a name="l00257"></a>00257     {
<a name="l00258"></a>00258     }
<a name="l00259"></a>00259     
<a name="l00260"></a><a class="code" href="structOpenBabel_1_1StereogenicUnit.shtml#6e5ba5e5fc259b2346d5a2cca288484e">00260</a>     <a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7c">OBStereo::Type</a> type; 
<a name="l00261"></a><a class="code" href="structOpenBabel_1_1StereogenicUnit.shtml#e56a1a48b22078e766c0bb185269b370">00261</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id; 
<a name="l00262"></a><a class="code" href="structOpenBabel_1_1StereogenicUnit.shtml#6cd16fc308b354230f74bb109dfa362c">00262</a>     <span class="keywordtype">bool</span> para; 
<a name="l00263"></a>00263   };
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 
<a name="l00266"></a>00266   <span class="comment">// fwd decl</span>
<a name="l00267"></a>00267   <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00288"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml">00288</a>   <span class="keyword">class </span>OBAPI OBStereoBase : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00289"></a>00289   {
<a name="l00290"></a>00290     <span class="keyword">public</span>:
<a name="l00297"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#547cb9ff811aa0cc6f675bc6ccf988a6">00297</a>       OBStereoBase(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol) : 
<a name="l00298"></a>00298         <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">"StereoData"</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f0e61da080ed7ceab058b5355fb61e78c">StereoData</a>, <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262ad0ee05f7c3bd0848f36c05d69bf47d5">perceived</a>),
<a name="l00299"></a>00299         m_mol(mol), m_specified(true)
<a name="l00300"></a>00300       {
<a name="l00301"></a>00301       }
<a name="l00305"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#9cbd6bc831683bb522ab44eeb9b3cc70">00305</a>       <span class="keyword">virtual</span> ~OBStereoBase() { m_mol = 0; }
<a name="l00306"></a>00306 
<a name="l00308"></a>00308 
<a name="l00309"></a>00309 
<a name="l00313"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#a4a0b5f752205db46c8ddd7e104ff896">00313</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* GetMolecule()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_mol; }
<a name="l00317"></a>00317       <span class="keyword">virtual</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7c">OBStereo::Type</a> GetType() <span class="keyword">const </span>= 0;
<a name="l00323"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#020c79ff46a109972c1216e11c3c958b">00323</a>       <span class="keywordtype">void</span> SetSpecified(<span class="keywordtype">bool</span> specified) { m_specified = specified; }
<a name="l00327"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#ed2fb63f51e794c1c0d7ca6a335fa214">00327</a>       <span class="keywordtype">bool</span> IsSpecified()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_specified; }
<a name="l00329"></a>00329     <span class="keyword">private</span>:
<a name="l00330"></a>00330       <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *m_mol; 
<a name="l00331"></a>00331       <span class="keywordtype">bool</span> m_specified; 
<a name="l00332"></a>00332   };
<a name="l00333"></a>00333 
<a name="l00334"></a>00334   <span class="comment">// fwd decl</span>
<a name="l00335"></a>00335   <span class="keyword">class </span>OBTetrahedralStereo;
<a name="l00336"></a>00336   <span class="keyword">class </span>OBCisTransStereo;
<a name="l00337"></a>00337   <span class="keyword">class </span>OBSquarePlanarStereo;
<a name="l00349"></a><a class="code" href="classOpenBabel_1_1OBStereoFacade.shtml">00349</a>   <span class="keyword">class </span>OBAPI OBStereoFacade
<a name="l00350"></a>00350   {
<a name="l00351"></a>00351     <span class="keyword">public</span>:
<a name="l00359"></a><a class="code" href="classOpenBabel_1_1OBStereoFacade.shtml#016c8bfb71b7a479a5eeadde3ec5456a">00359</a>       OBStereoFacade(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <span class="keywordtype">bool</span> perceive = <span class="keyword">true</span>) : 
<a name="l00360"></a>00360           m_mol(mol), m_init(false), m_perceive(perceive)
<a name="l00361"></a>00361       {
<a name="l00362"></a>00362       }
<a name="l00363"></a>00363 
<a name="l00366"></a>00366 
<a name="l00369"></a>00369       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumTetrahedralStereo();
<a name="l00374"></a>00374       <span class="keywordtype">bool</span> HasTetrahedralStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);
<a name="l00380"></a>00380       <a class="code" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OBTetrahedralStereo</a>* GetTetrahedralStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);
<a name="l00382"></a>00382  
<a name="l00385"></a>00385 
<a name="l00388"></a>00388       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumCisTransStereo();
<a name="l00393"></a>00393       <span class="keywordtype">bool</span> HasCisTransStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> bondId);
<a name="l00399"></a>00399       <a class="code" href="classOpenBabel_1_1OBCisTransStereo.shtml">OBCisTransStereo</a>* GetCisTransStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> bondId);
<a name="l00401"></a>00401 
<a name="l00404"></a>00404 
<a name="l00407"></a>00407       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumSquarePlanarStereo();
<a name="l00412"></a>00412       <span class="keywordtype">bool</span> HasSquarePlanarStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);
<a name="l00418"></a>00418       <a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a>* GetSquarePlanarStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);
<a name="l00420"></a>00420 
<a name="l00421"></a>00421 
<a name="l00422"></a>00422     <span class="keyword">private</span>:
<a name="l00426"></a>00426       <span class="keyword">inline</span> <span class="keywordtype">void</span> EnsureInit() { <span class="keywordflow">if</span> (!m_init) InitMaps(); }
<a name="l00432"></a>00432       <span class="keywordtype">void</span> InitMaps();
<a name="l00433"></a>00433 
<a name="l00434"></a>00434       OBMol *m_mol;
<a name="l00435"></a>00435       <span class="keywordtype">bool</span> m_init;
<a name="l00436"></a>00436       <span class="keywordtype">bool</span> m_perceive;
<a name="l00437"></a>00437       std::map&lt;unsigned long, OBTetrahedralStereo*&gt; m_tetrahedralMap;
<a name="l00438"></a>00438       std::map&lt;unsigned long, OBCisTransStereo*&gt; m_cistransMap;
<a name="l00439"></a>00439       std::map&lt;unsigned long, OBSquarePlanarStereo*&gt; m_squarePlanarMap;
<a name="l00440"></a>00440   };
<a name="l00441"></a>00441 
<a name="l00442"></a>00442   <span class="comment">// fwd decl</span>
<a name="l00443"></a>00443   <span class="keyword">class </span>OBBond;
<a name="l00446"></a>00446 
<a name="l00453"></a>00453   OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#g869273b970f276148c608279862c4401">PerceiveStereo</a>(OBMol *mol, <span class="keywordtype">bool</span> force = <span class="keyword">false</span>); 
<a name="l00483"></a>00483   OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#ge872d3526d013d97b3f8c2401ef04e88">StereoFrom2D</a>(OBMol *mol, 
<a name="l00484"></a>00484     std::map&lt;OBBond*, enum OBStereo::BondDirection&gt; *updown = NULL, <span class="keywordtype">bool</span> force = <span class="keyword">false</span>);
<a name="l00500"></a>00500   OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#ge4846ed2eca2e17eea43f935487182c9">StereoFrom3D</a>(OBMol *mol, <span class="keywordtype">bool</span> force = <span class="keyword">false</span>);
<a name="l00516"></a>00516   OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#g65bc2599c34e04cfa82777baddccee36">StereoFrom0D</a>(OBMol *mol);
<a name="l00518"></a>00518 
<a name="l00521"></a>00521 
<a name="l00558"></a>00558   OBAPI std::vector&lt;OBTetrahedralStereo*&gt; <a class="code" href="group__stereo.shtml#g9e04ee84d42c31c8ab570cc6221279b8">TetrahedralFrom3D</a>(OBMol *mol, 
<a name="l00559"></a>00559       <span class="keyword">const</span> std::vector&lt;StereogenicUnit&gt; &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00603"></a>00603   OBAPI std::vector&lt;OBTetrahedralStereo*&gt; <a class="code" href="group__stereo.shtml#g04ef705f43cca76f97355dc00903a9dc">TetrahedralFrom2D</a>(OBMol *mol, 
<a name="l00604"></a>00604       <span class="keyword">const</span> std::vector&lt;StereogenicUnit&gt; &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00623"></a>00623   OBAPI std::vector&lt;OBTetrahedralStereo*&gt; <a class="code" href="group__stereo.shtml#g9e686bf88e555e7aa47ceeb3c76d2034">TetrahedralFrom0D</a>(OBMol *mol, 
<a name="l00624"></a>00624       <span class="keyword">const</span> std::vector&lt;StereogenicUnit&gt; &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00625"></a>00625  
<a name="l00659"></a>00659   OBAPI std::vector&lt;OBCisTransStereo*&gt; <a class="code" href="group__stereo.shtml#g1cc0279c6fb5e6a1dd63f45fde4606fe">CisTransFrom3D</a>(OBMol *mol, 
<a name="l00660"></a>00660       <span class="keyword">const</span> std::vector&lt;StereogenicUnit&gt; &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00689"></a>00689   OBAPI std::vector&lt;OBCisTransStereo*&gt; <a class="code" href="group__stereo.shtml#g403401f4d21c93616189eab7a62d02b7">CisTransFrom2D</a>(OBMol *mol, 
<a name="l00690"></a>00690       <span class="keyword">const</span> std::vector&lt;StereogenicUnit&gt; &amp;stereoUnits, 
<a name="l00691"></a>00691       <span class="keyword">const</span> std::map&lt;OBBond*, enum OBStereo::BondDirection&gt; *updown = NULL, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00692"></a>00692   <span class="comment">// TODO DOCS (HASSLE NOEL ABOUT THIS!!)</span>
<a name="l00693"></a>00693   OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#gdbc5dc123d67504140ed7318b96868c5">TetStereoTo0D</a>(OBMol &amp;mol, 
<a name="l00694"></a>00694       std::map&lt;OBBond*, enum OBStereo::BondDirection&gt; &amp;updown,
<a name="l00695"></a>00695       std::map&lt;OBBond*, OBStereo::Ref&gt; &amp;from);
<a name="l00696"></a>00696   <span class="comment">// TODO DOCS (HASSLE NOEL ABOUT THIS!!)</span>
<a name="l00697"></a>00697   OBAPI std::set&lt;OBBond*&gt; <a class="code" href="group__stereo.shtml#g26003c285d4069795ad5a22957d741cf">GetUnspecifiedCisTrans</a>(OBMol&amp; mol);
<a name="l00716"></a>00716   OBAPI std::vector&lt;OBCisTransStereo*&gt; <a class="code" href="group__stereo.shtml#g3379b99f2d6a2460ee28011ac16681a4">CisTransFrom0D</a>(OBMol *mol, 
<a name="l00717"></a>00717       <span class="keyword">const</span> std::vector&lt;StereogenicUnit&gt; &amp;stereoUnits,
<a name="l00718"></a>00718       <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00720"></a>00720 
<a name="l00721"></a>00721 
<a name="l00724"></a>00724   OBAPI std::vector&lt;StereogenicUnit&gt; <a class="code" href="group__stereo.shtml#g1e99853e349b22dc490447e08518010d">FindStereogenicUnits</a>(OBMol *mol, 
<a name="l00725"></a>00725       <span class="keyword">const</span> std::vector&lt;unsigned int&gt; &amp;symClasses);
<a name="l00727"></a>00727 
<a name="l00876"></a>00876 
<a name="l00877"></a>00877 }
<a name="l00878"></a>00878 
<a name="l00879"></a>00879 <span class="preprocessor">#endif</span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
