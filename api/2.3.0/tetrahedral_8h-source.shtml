<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: tetrahedral.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>tetrahedral.h</h1><a href="tetrahedral_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">  tetrahedral.h - OBTetrahedralStereo</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">  Copyright (C) 2009 by Tim Vandermeersch</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">  This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">  For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">  This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">  it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">  the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00012"></a>00012 <span class="comment">  (at your option) any later version.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">  This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">  GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment"></span>
<a name="l00019"></a>00019 <span class="comment">  You should have received a copy of the GNU General Public License</span>
<a name="l00020"></a>00020 <span class="comment">  along with this program; if not, write to the Free Software</span>
<a name="l00021"></a>00021 <span class="comment">  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span>
<a name="l00022"></a>00022 <span class="comment">  02110-1301, USA.</span>
<a name="l00023"></a>00023 <span class="comment"> **********************************************************************/</span>
<a name="l00024"></a>00024 <span class="preprocessor">#ifndef OB_TETRAHEDRAL_H</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#define OB_TETRAHEDRAL_H</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;<a class="code" href="tetranonplanar_8h.shtml">openbabel/stereo/tetranonplanar.h</a>&gt;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="keyword">namespace </span>OpenBabel {
<a name="l00030"></a>00030 
<a name="l00033"></a>00033 
<a name="l00057"></a><a class="code" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">00057</a> <span class="keyword">class </span>OBAPI OBTetrahedralStereo : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml">OBTetraNonPlanarStereo</a>
<a name="l00059"></a>00059 {
<a name="l00060"></a>00060   <span class="keyword">public</span>:
<a name="l00061"></a>00061 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span>
<a name="l00081"></a><a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml">00081</a>     <span class="keyword">struct </span>OBAPI Config
<a name="l00082"></a>00082     {
<a name="l00088"></a><a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml#e2ab8d711707b5eb8c0afd9c76327614">00088</a>       Config() : center(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::NoRef), from(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::NoRef), 
<a name="l00089"></a>00089           winding(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::Clockwise), view(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::ViewFrom),
<a name="l00090"></a>00090           specified(true)
<a name="l00091"></a>00091       {  }
<a name="l00101"></a><a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml#73dd6c5b2701c390f7a8523af6f0b69f">00101</a>       Config(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> _center, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> from_or_towards, 
<a name="l00102"></a>00102           <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#38b951402b7cd70c2af2fec6c2c8fb8f">OBStereo::Refs</a> &amp;_refs, <a class="code" href="structOpenBabel_1_1OBStereo.shtml#14b44cd67149a6a308b7836e939401e9">OBStereo::Winding</a> _winding = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#14b44cd67149a6a308b7836e939401e9815b9e47b11a50a20904521bd08b89eb">OBStereo::Clockwise</a>,
<a name="l00103"></a>00103           <a class="code" href="structOpenBabel_1_1OBStereo.shtml#03545e626f3c27dc982c2e9194e4c909">OBStereo::View</a> _view = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#03545e626f3c27dc982c2e9194e4c909938e442002c5c2530fbb720db66d2547">OBStereo::ViewFrom</a>) : center(_center), 
<a name="l00104"></a>00104           from(from_or_towards), refs(_refs), winding(_winding), view(_view),
<a name="l00105"></a>00105           specified(true)
<a name="l00106"></a>00106       {  }
<a name="l00146"></a>00146       <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#e8a689b821c5b5e0b57dbc7b22b486af">operator==</a>(<span class="keyword">const</span> Config &amp;other) <span class="keyword">const</span>;
<a name="l00152"></a><a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml#eef7025642d3582d4238500455d2dffe">00152</a>       <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> Config &amp;other)<span class="keyword"> const</span>
<a name="l00153"></a>00153 <span class="keyword">      </span>{ 
<a name="l00154"></a>00154         <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other); 
<a name="l00155"></a>00155       }
<a name="l00156"></a>00156       
<a name="l00161"></a><a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml#23b9402cc628665329799b0d20662b85">00161</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> center; <span class="comment">//&lt;! The center (chiral) atom id.</span>
<a name="l00169"></a>00169 <span class="comment"></span>      <span class="keyword">union </span>{
<a name="l00170"></a><a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml#e3f9e47bede21b85680dd97855285124">00170</a>         <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> from; <span class="comment">//&lt;! The viewing from atom id.</span>
<a name="l00171"></a><a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml#1ac7ecde78f3d92fd50b4dede7d7d584">00171</a>         <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> towards; <span class="comment">//&lt;! The viewing towards id.</span>
<a name="l00172"></a>00172       };
<a name="l00173"></a><a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml#947f33699149e23fdfa1670335901fff">00173</a>       <a class="code" href="structOpenBabel_1_1OBStereo.shtml#38b951402b7cd70c2af2fec6c2c8fb8f">OBStereo::Refs</a> refs; 
<a name="l00174"></a><a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml#fd1ce3d0de412a4e76c7760161483679">00174</a>       <a class="code" href="structOpenBabel_1_1OBStereo.shtml#14b44cd67149a6a308b7836e939401e9">OBStereo::Winding</a> winding; <span class="comment">//&lt;! The winding for the 3 reference ids.</span>
<a name="l00175"></a><a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml#5852db33777cf42f94724be5a063c7bc">00175</a>       <a class="code" href="structOpenBabel_1_1OBStereo.shtml#03545e626f3c27dc982c2e9194e4c909">OBStereo::View</a> view; 
<a name="l00176"></a><a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml#34eb72dee7ab08852472f87f8d133b78">00176</a>       <span class="keywordtype">bool</span> specified; 
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 
<a name="l00179"></a>00179     };
<a name="l00180"></a>00180 <span class="preprocessor">#endif</span>
<a name="l00181"></a>00181 <span class="preprocessor"></span>
<a name="l00184"></a>00184     OBTetrahedralStereo(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00188"></a>00188     <span class="keyword">virtual</span> ~OBTetrahedralStereo();
<a name="l00189"></a>00189 
<a name="l00192"></a>00192 
<a name="l00196"></a><a class="code" href="classOpenBabel_1_1OBTetrahedralStereo.shtml#c9e35967b6c6b43614532b829af3220f">00196</a>     <a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7c">OBStereo::Type</a> GetType()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#673c5014e2bb0cd30b863385ff09ad7cbaece47967dbbd35f67b3a6a411bd210">OBStereo::Tetrahedral</a>; }
<a name="l00201"></a>00201     <span class="keywordtype">bool</span> IsValid() <span class="keyword">const</span>;
<a name="l00202"></a>00202 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00203"></a>00203 <span class="preprocessor"></span>
<a name="l00206"></a>00206     <span class="keywordtype">void</span> SetConfig(<span class="keyword">const</span> Config &amp;config);
<a name="l00210"></a>00210     Config GetConfig(<a class="code" href="structOpenBabel_1_1OBStereo.shtml#14b44cd67149a6a308b7836e939401e9">OBStereo::Winding</a> winding = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#14b44cd67149a6a308b7836e939401e9815b9e47b11a50a20904521bd08b89eb">OBStereo::Clockwise</a>, 
<a name="l00211"></a>00211         <a class="code" href="structOpenBabel_1_1OBStereo.shtml#03545e626f3c27dc982c2e9194e4c909">OBStereo::View</a> view = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#03545e626f3c27dc982c2e9194e4c909938e442002c5c2530fbb720db66d2547">OBStereo::ViewFrom</a>) <span class="keyword">const</span>;
<a name="l00215"></a>00215     Config GetConfig(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> from_or_towards, 
<a name="l00216"></a>00216         <a class="code" href="structOpenBabel_1_1OBStereo.shtml#14b44cd67149a6a308b7836e939401e9">OBStereo::Winding</a> winding = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#14b44cd67149a6a308b7836e939401e9815b9e47b11a50a20904521bd08b89eb">OBStereo::Clockwise</a>, 
<a name="l00217"></a>00217         <a class="code" href="structOpenBabel_1_1OBStereo.shtml#03545e626f3c27dc982c2e9194e4c909">OBStereo::View</a> view = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#03545e626f3c27dc982c2e9194e4c909938e442002c5c2530fbb720db66d2547">OBStereo::ViewFrom</a>) <span class="keyword">const</span>;
<a name="l00218"></a>00218 <span class="preprocessor">#endif</span>
<a name="l00219"></a>00219 <span class="preprocessor"></span>
<a name="l00225"></a>00225     <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#e8a689b821c5b5e0b57dbc7b22b486af">operator==</a>(<span class="keyword">const</span> OBTetrahedralStereo &amp;other) <span class="keyword">const</span>;
<a name="l00231"></a><a class="code" href="classOpenBabel_1_1OBTetrahedralStereo.shtml#4335e3eb4c99c2a429a724134592bd8a">00231</a>     <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> OBTetrahedralStereo &amp;other)<span class="keyword"> const</span>
<a name="l00232"></a>00232 <span class="keyword">    </span>{
<a name="l00233"></a>00233       <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other); 
<a name="l00234"></a>00234     }
<a name="l00236"></a>00236     
<a name="l00237"></a>00237     <span class="comment">/*</span>
<a name="l00238"></a>00238 <span class="comment">     * Implement OBGenericData::Clone().</span>
<a name="l00239"></a>00239 <span class="comment">     */</span>
<a name="l00240"></a>00240     <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *mol) <span class="keyword">const</span>;
<a name="l00241"></a>00241   <span class="keyword">private</span>:
<a name="l00242"></a>00242     Config m_cfg; 
<a name="l00243"></a>00243 };
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 } <span class="comment">// namespace OpenBabel</span>
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00248"></a>00248 <span class="preprocessor"></span><span class="keyword">namespace </span>std {
<a name="l00249"></a>00249 
<a name="l00252"></a>00252 
<a name="l00270"></a>00270 OBAPI ostream&amp; <a class="code" href="group__stereo.shtml#g63d6f28a7f35d843e301c77c57369afe">operator&lt;&lt;</a>(ostream &amp;out, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OpenBabel::OBTetrahedralStereo</a> &amp;ts);
<a name="l00286"></a>00286 OBAPI ostream&amp; <a class="code" href="group__stereo.shtml#g63d6f28a7f35d843e301c77c57369afe">operator&lt;&lt;</a>(ostream &amp;out, <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml">OpenBabel::OBTetrahedralStereo::Config</a> &amp;cfg);
<a name="l00287"></a>00287 
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 } <span class="comment">// namespace std</span>
<a name="l00291"></a>00291 <span class="preprocessor">#endif // SWIG</span>
<a name="l00292"></a>00292 <span class="preprocessor"></span>
<a name="l00293"></a>00293 <span class="preprocessor">#endif</span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
