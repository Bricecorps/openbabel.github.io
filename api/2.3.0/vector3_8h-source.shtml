<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: vector3.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>vector3.h</h1><a href="vector3_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">vector3.h - Handle 3D coordinates.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2006 by Benoit Jacob</span>
<a name="l00007"></a>00007 <span class="comment"> </span>
<a name="l00008"></a>00008 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00009"></a>00009 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00010"></a>00010 <span class="comment"> </span>
<a name="l00011"></a>00011 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00012"></a>00012 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00013"></a>00013 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00014"></a>00014 <span class="comment"> </span>
<a name="l00015"></a>00015 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00016"></a>00016 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00017"></a>00017 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00018"></a>00018 <span class="comment">GNU General Public License for more details.</span>
<a name="l00019"></a>00019 <span class="comment">***********************************************************************/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef OB_VECTOR_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define OB_VECTOR_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;ostream&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;<a class="code" href="rand_8h.shtml">openbabel/rand.h</a>&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#ifndef RAD_TO_DEG</span>
<a name="l00031"></a><a class="code" href="vector3_8h.shtml#992a15fe17c2b7456f82e8002f53009a">00031</a> <span class="preprocessor"></span><span class="preprocessor">#define RAD_TO_DEG (180.0/M_PI)</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="preprocessor">#ifndef DEG_TO_RAD</span>
<a name="l00035"></a><a class="code" href="vector3_8h.shtml#c3ab940255f3e56eceb8f12fcdcc71ab">00035</a> <span class="preprocessor"></span><span class="preprocessor">#define DEG_TO_RAD (M_PI/180.0)</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span>
<a name="l00038"></a>00038 <span class="keyword">namespace </span>OpenBabel
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040 
<a name="l00041"></a>00041   <span class="keyword">class </span>matrix3x3; <span class="comment">// declared in math/matrix3x3.h</span>
<a name="l00042"></a>00042   <span class="keyword">class </span>OBRandom; <span class="comment">// declared in rand.h</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044   <span class="comment">// class introduction in vector3.cpp</span>
<a name="l00045"></a><a class="code" href="classOpenBabel_1_1vector3.shtml">00045</a>   <span class="keyword">class </span>OBAPI vector3
<a name="l00046"></a>00046   {
<a name="l00047"></a>00047   <span class="keyword">private</span> :
<a name="l00048"></a>00048     <span class="keywordtype">double</span> _vx, _vy, _vz ;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050   <span class="keyword">public</span> :
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#189e84f1b75dfbddd05a093429049c4c">00052</a>     vector3 (<span class="keyword">const</span> <span class="keywordtype">double</span> inX=0.0, <span class="keyword">const</span> <span class="keywordtype">double</span> inY=0.0, <span class="keyword">const</span> <span class="keywordtype">double</span> inZ=0.0):
<a name="l00053"></a>00053       _vx(inX), _vy(inY), _vz(inZ)
<a name="l00054"></a>00054       {}
<a name="l00055"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#7d7b8a77a5bae75c0fece0264a7c739e">00055</a>     vector3 (<span class="keywordtype">double</span> inV[3]):
<a name="l00056"></a>00056       _vx(inV[0]), _vy(inV[1]), _vz(inV[2])
<a name="l00057"></a>00057       {}
<a name="l00059"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#f1e0c1f9f15688298702f6d4ff616e90">00059</a>     vector3 (<span class="keyword">const</span> vector3&amp; v):
<a name="l00060"></a>00060       _vx(v._vx), _vy(v._vy), _vz(v._vz)
<a name="l00061"></a>00061         { }
<a name="l00062"></a>00062         
<a name="l00064"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#044d124c3c2404a5e06a337a6efaaaf4">00064</a>     ~vector3() { }
<a name="l00065"></a>00065 
<a name="l00067"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#0374a85f6cd60b6c5fa2c33af18e4a04">00067</a>     <span class="keywordtype">void</span> Set(<span class="keyword">const</span> <span class="keywordtype">double</span> inX, <span class="keyword">const</span> <span class="keywordtype">double</span> inY, <span class="keyword">const</span> <span class="keywordtype">double</span> inZ)
<a name="l00068"></a>00068     {
<a name="l00069"></a>00069       _vx = inX;
<a name="l00070"></a>00070       _vy = inY;
<a name="l00071"></a>00071       _vz = inZ;
<a name="l00072"></a>00072     }
<a name="l00074"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#6341abf120fe08d7dc99009c944b9897">00074</a>     <span class="keywordtype">void</span> Set(<span class="keyword">const</span> <span class="keywordtype">double</span> *c)
<a name="l00075"></a>00075     {
<a name="l00076"></a>00076       _vx = c[0];
<a name="l00077"></a>00077       _vy = c[1];
<a name="l00078"></a>00078       _vz = c[2];
<a name="l00079"></a>00079     }
<a name="l00081"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#d8706bfa6a7f336efb13e15b17a158d3">00081</a>     <span class="keywordtype">void</span> SetX(<span class="keyword">const</span> <span class="keywordtype">double</span> inX)
<a name="l00082"></a>00082     {
<a name="l00083"></a>00083       _vx = inX;
<a name="l00084"></a>00084     }
<a name="l00086"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#a3f1e7c5416f52b3ca91c1ddc922c56e">00086</a>     <span class="keywordtype">void</span> SetY(<span class="keyword">const</span> <span class="keywordtype">double</span> inY)
<a name="l00087"></a>00087     {
<a name="l00088"></a>00088       _vy = inY;
<a name="l00089"></a>00089     }
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#a8eb0ebecc7419e75dd789e630ec125e">00091</a>     <span class="keywordtype">void</span> SetZ(<span class="keyword">const</span> <span class="keywordtype">double</span> inZ)
<a name="l00092"></a>00092     {
<a name="l00093"></a>00093       _vz = inZ;
<a name="l00094"></a>00094     }
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#dd29b7ff8d3ef6f91fb61753c757a05e">00097</a>     <span class="keywordtype">void</span> Get(<span class="keywordtype">double</span> *c)
<a name="l00098"></a>00098     {
<a name="l00099"></a>00099       c[0]=_vx;
<a name="l00100"></a>00100       c[1]=_vy;
<a name="l00101"></a>00101       c[2]=_vz;
<a name="l00102"></a>00102     }
<a name="l00104"></a>00104     <span class="keywordtype">double</span> operator[] ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;
<a name="l00105"></a>00105 
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#78e4e0338e59b45337140d493a158ad4">00107</a>     vector3&amp; operator= ( <span class="keyword">const</span> vector3&amp; v)
<a name="l00108"></a>00108       {
<a name="l00109"></a>00109         _vx = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#87d7f2726cd60b508b589589bbfbd119">_vx</a>;
<a name="l00110"></a>00110         _vy = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#7c8af7c735162f4b4cc7a6f8f89aa070">_vy</a>;
<a name="l00111"></a>00111         _vz = v.<a class="code" href="classOpenBabel_1_1vector3.shtml#5c34c095aedcf78b3815e7c604e2a03e">_vz</a>;
<a name="l00112"></a>00112         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00113"></a>00113       }
<a name="l00114"></a>00114 
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#4078df4f6014d0bf928ac1acc8440230">00116</a>     <span class="keyword">const</span> <span class="keywordtype">double</span> *AsArray()<span class="keyword"> const</span>
<a name="l00117"></a>00117 <span class="keyword">    </span>{
<a name="l00118"></a>00118       <span class="keywordflow">return</span> &amp;_vx;
<a name="l00119"></a>00119     }
<a name="l00120"></a>00120 
<a name="l00123"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#d49e3c79c57206f90fb724e4ec9f5c1c">00123</a>     vector3&amp; operator+= ( <span class="keyword">const</span> vector3&amp; v)
<a name="l00124"></a>00124       {
<a name="l00125"></a>00125         _vx += v.<a class="code" href="classOpenBabel_1_1vector3.shtml#87d7f2726cd60b508b589589bbfbd119">_vx</a>;
<a name="l00126"></a>00126         _vy += v.<a class="code" href="classOpenBabel_1_1vector3.shtml#7c8af7c735162f4b4cc7a6f8f89aa070">_vy</a>;
<a name="l00127"></a>00127         _vz += v.<a class="code" href="classOpenBabel_1_1vector3.shtml#5c34c095aedcf78b3815e7c604e2a03e">_vz</a>;
<a name="l00128"></a>00128         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00129"></a>00129       };
<a name="l00132"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#e3a511a6e57fefb44bb37dee1a30fda5">00132</a>     vector3&amp; operator-= ( <span class="keyword">const</span> vector3&amp; v)
<a name="l00133"></a>00133       {
<a name="l00134"></a>00134         _vx -= v.<a class="code" href="classOpenBabel_1_1vector3.shtml#87d7f2726cd60b508b589589bbfbd119">_vx</a>;
<a name="l00135"></a>00135         _vy -= v.<a class="code" href="classOpenBabel_1_1vector3.shtml#7c8af7c735162f4b4cc7a6f8f89aa070">_vy</a>;
<a name="l00136"></a>00136         _vz -= v.<a class="code" href="classOpenBabel_1_1vector3.shtml#5c34c095aedcf78b3815e7c604e2a03e">_vz</a>;
<a name="l00137"></a>00137         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00138"></a>00138       };
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#5c4420507a8d0761353d09790e1b8df8">00141</a>     vector3&amp; operator+= ( <span class="keyword">const</span> <span class="keywordtype">double</span>* f)
<a name="l00142"></a>00142       {
<a name="l00143"></a>00143         _vx += f[0];
<a name="l00144"></a>00144         _vy += f[1];
<a name="l00145"></a>00145         _vz += f[2];
<a name="l00146"></a>00146         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00147"></a>00147       };
<a name="l00150"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#1a134d30a717e27bf5ead02442da4838">00150</a>     vector3&amp; operator-= ( <span class="keyword">const</span> <span class="keywordtype">double</span>* f)
<a name="l00151"></a>00151       {
<a name="l00152"></a>00152         _vx -= f[0];
<a name="l00153"></a>00153         _vy -= f[1];
<a name="l00154"></a>00154         _vz -= f[2];
<a name="l00155"></a>00155         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00156"></a>00156       };
<a name="l00159"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#d7aa7119d6e3d54fdd29d9fa31dc52b2">00159</a>     vector3&amp; operator*= ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00160"></a>00160       {
<a name="l00161"></a>00161         _vx *= c;
<a name="l00162"></a>00162         _vy *= c;
<a name="l00163"></a>00163         _vz *= c;
<a name="l00164"></a>00164         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00165"></a>00165       };
<a name="l00166"></a>00166 
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#fc5c1e21cf6a13279f4b0e5294fa06ca">00169</a>     vector3&amp; operator/= ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00170"></a>00170       {
<a name="l00171"></a>00171         <span class="keywordtype">double</span> inv = 1.0 / c;
<a name="l00172"></a>00172         <span class="keywordflow">return</span>( (*<span class="keyword">this</span>) *= inv );
<a name="l00173"></a>00173       };
<a name="l00177"></a>00177     vector3&amp; operator*= ( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;);
<a name="l00178"></a>00178 
<a name="l00180"></a>00180     <span class="keywordtype">void</span> randomUnitVector(<a class="code" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> *oeRand= NULL);
<a name="l00181"></a>00181 
<a name="l00182"></a>00182     <span class="comment">//  Member Functions</span>
<a name="l00183"></a>00183 
<a name="l00186"></a>00186     vector3&amp; normalize () ;
<a name="l00187"></a>00187 
<a name="l00189"></a>00189     <span class="keywordtype">bool</span> CanBeNormalized () <span class="keyword">const</span>;
<a name="l00190"></a>00190 
<a name="l00192"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#894c17c87d7ea523380e20cdecf8ff08">00192</a>     <span class="keyword">inline</span> <span class="keywordtype">double</span> length_2 ()<span class="keyword"> const</span>
<a name="l00193"></a>00193 <span class="keyword">    </span>{
<a name="l00194"></a>00194       <span class="keywordflow">return</span> _vx*_vx + _vy*_vy + _vz*_vz;
<a name="l00195"></a>00195     };
<a name="l00197"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#9177b1d2f2bbe4783d0e77223ca8feda">00197</a>     <span class="keywordtype">double</span> length ()<span class="keyword"> const</span>
<a name="l00198"></a>00198 <span class="keyword">    </span>{
<a name="l00199"></a>00199       <span class="keywordflow">return</span> sqrt( length_2() );
<a name="l00200"></a>00200     };
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">00202</a>     <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; x ()<span class="keyword"> const</span>
<a name="l00203"></a>00203 <span class="keyword">    </span>{
<a name="l00204"></a>00204       <span class="keywordflow">return</span> _vx ;
<a name="l00205"></a>00205     } ;
<a name="l00207"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">00207</a>     <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; y ()<span class="keyword"> const</span>
<a name="l00208"></a>00208 <span class="keyword">    </span>{
<a name="l00209"></a>00209       <span class="keywordflow">return</span> _vy ;
<a name="l00210"></a>00210     } ;
<a name="l00212"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">00212</a>     <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; z ()<span class="keyword"> const</span>
<a name="l00213"></a>00213 <span class="keyword">    </span>{
<a name="l00214"></a>00214       <span class="keywordflow">return</span> _vz ;
<a name="l00215"></a>00215     } ;
<a name="l00217"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#fb87159aeaed49d3846b77065db5bc42">00217</a>     <span class="keywordtype">double</span> &amp; x ()
<a name="l00218"></a>00218     {
<a name="l00219"></a>00219       <span class="keywordflow">return</span> _vx ;
<a name="l00220"></a>00220     } ;
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#f7f04fd2f9915d0495b27cbdea3d345d">00222</a>     <span class="keywordtype">double</span> &amp; y ()
<a name="l00223"></a>00223     {
<a name="l00224"></a>00224       <span class="keywordflow">return</span> _vy ;
<a name="l00225"></a>00225     } ;
<a name="l00227"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#33e1e89ea4f102fae9ac00b74c008e36">00227</a>     <span class="keywordtype">double</span> &amp; z ()
<a name="l00228"></a>00228     {
<a name="l00229"></a>00229       <span class="keywordflow">return</span> _vz ;
<a name="l00230"></a>00230     } ;
<a name="l00231"></a>00231 
<a name="l00233"></a>00233     <span class="comment">// @{</span>
<a name="l00238"></a>00238 <span class="comment"></span>    <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#e8a689b821c5b5e0b57dbc7b22b486af">operator== </a>( <span class="keyword">const</span> vector3&amp; ) <span class="keyword">const</span>;
<a name="l00242"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#f9e743c45c1066bb5962706ce2181968">00242</a>     <span class="keywordtype">int</span> operator!= ( <span class="keyword">const</span> vector3&amp; other )<span class="keyword"> const</span>
<a name="l00243"></a>00243 <span class="keyword">    </span>{
<a name="l00244"></a>00244       <span class="keywordflow">return</span> ! ( (*this) == other );
<a name="l00245"></a>00245     }
<a name="l00255"></a>00255     <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#2ecc52e83dd2ad2b07c61f80e19ffd40">IsApprox</a>( <span class="keyword">const</span> vector3 &amp; other, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; precision ) <span class="keyword">const</span>;
<a name="l00257"></a>00257 
<a name="l00259"></a>00259 
<a name="l00261"></a><a class="code" href="classOpenBabel_1_1vector3.shtml#e1a1cbb64fb2b814075506ceaeaa7e5b">00261</a>     <span class="keywordtype">double</span> distSq(<span class="keyword">const</span> vector3 &amp;vv)<span class="keyword"> const</span>
<a name="l00262"></a>00262 <span class="keyword">    </span>{
<a name="l00263"></a>00263       <span class="keywordtype">double</span> dx = x() - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">x</a>();
<a name="l00264"></a>00264       <span class="keywordtype">double</span> dy = y() - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">y</a>();
<a name="l00265"></a>00265       <span class="keywordtype">double</span> dz = z() - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">z</a>();
<a name="l00266"></a>00266       <span class="keywordflow">return</span>( dx*dx + dy*dy + dz*dz );
<a name="l00267"></a>00267     }
<a name="l00268"></a>00268 
<a name="l00271"></a>00271     <span class="keywordtype">bool</span> createOrthoVector(vector3 &amp;v) <span class="keyword">const</span>;
<a name="l00272"></a>00272 
<a name="l00273"></a>00273   };
<a name="l00274"></a>00274 
<a name="l00276"></a>00276   OBAPI std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#6c74b3f189b23bb0ff9130679d210ce5">operator&lt;&lt; </a>( std::ostream&amp;, <span class="keyword">const</span> vector3&amp; );
<a name="l00277"></a>00277 
<a name="l00278"></a>00278   <span class="comment">//  Sum, Difference, Scalar Product</span>
<a name="l00280"></a><a class="code" href="namespaceOpenBabel.shtml#9db1b3550c692bcecda3ce7f5bc05538">00280</a> <span class="comment"></span>  <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#9db1b3550c692bcecda3ce7f5bc05538">operator+ </a>( <span class="keyword">const</span> vector3&amp; v1, <span class="keyword">const</span> vector3&amp; v2)
<a name="l00281"></a>00281   {
<a name="l00282"></a>00282     <span class="keywordflow">return</span> vector3(v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">x</a>()+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">x</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">y</a>()+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">y</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">z</a>()+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">z</a>());
<a name="l00283"></a>00283   }
<a name="l00285"></a><a class="code" href="namespaceOpenBabel.shtml#8fae3168c04f174bd8e5b48b95ddbc45">00285</a>   <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#8fae3168c04f174bd8e5b48b95ddbc45">operator- </a>( <span class="keyword">const</span> vector3&amp; v1, <span class="keyword">const</span> vector3&amp; v2)
<a name="l00286"></a>00286   {
<a name="l00287"></a>00287     <span class="keywordflow">return</span> vector3(v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">x</a>()-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">x</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">y</a>()-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">y</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">z</a>()-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">z</a>());
<a name="l00288"></a>00288   }
<a name="l00290"></a><a class="code" href="namespaceOpenBabel.shtml#d44bb74a0bbed783771adc2c453c94f3">00290</a>   <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#8fae3168c04f174bd8e5b48b95ddbc45">operator- </a>( <span class="keyword">const</span> vector3&amp; v)
<a name="l00291"></a>00291   {
<a name="l00292"></a>00292     <span class="keywordflow">return</span> vector3(-v.<a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">x</a>(), -v.<a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">y</a>(), -v.<a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">z</a>());
<a name="l00293"></a>00293   }
<a name="l00295"></a><a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">00295</a>   <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator* </a>( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c, <span class="keyword">const</span> vector3&amp; v)
<a name="l00296"></a>00296     {
<a name="l00297"></a>00297       <span class="keywordflow">return</span> vector3( c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">x</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">y</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">z</a>());
<a name="l00298"></a>00298     }
<a name="l00300"></a><a class="code" href="namespaceOpenBabel.shtml#751d2e933c860decba51ba9e15851c63">00300</a>   <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator* </a>( <span class="keyword">const</span> vector3&amp; v, <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00301"></a>00301     {
<a name="l00302"></a>00302       <span class="keywordflow">return</span> vector3( c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">x</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">y</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">z</a>());
<a name="l00303"></a>00303     }
<a name="l00305"></a><a class="code" href="namespaceOpenBabel.shtml#c02df62c89352fed65228f79420d9845">00305</a>   <span class="keyword">inline</span> OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#c02df62c89352fed65228f79420d9845">operator/ </a>( <span class="keyword">const</span> vector3&amp; v, <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)
<a name="l00306"></a>00306   {
<a name="l00307"></a>00307     <span class="keywordflow">return</span> vector3( v.<a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">x</a>()/c, v.<a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">y</a>()/c, v.<a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">z</a>()/c);
<a name="l00308"></a>00308   }
<a name="l00309"></a>00309   <span class="comment">// @removed@ misleading operation</span>
<a name="l00310"></a>00310   <span class="comment">// friend vector3 operator* ( const vector3 &amp;,const vector3 &amp;);</span>
<a name="l00311"></a>00311 
<a name="l00312"></a>00312   <span class="comment">//vector and matrix ops</span>
<a name="l00313"></a>00313   <span class="comment">// @removed@ misleading operation; matrix multiplication is not commutitative</span>
<a name="l00314"></a>00314   <span class="comment">//     friend vector3 operator *(const vector3 &amp;v,const matrix3x3 &amp;m);</span>
<a name="l00315"></a>00315 
<a name="l00317"></a>00317   OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator *</a>(<span class="keyword">const</span> matrix3x3 &amp;m, <span class="keyword">const</span> vector3 &amp;v);
<a name="l00318"></a>00318 
<a name="l00320"></a><a class="code" href="namespaceOpenBabel.shtml#0c6acd7601bcd058809ef21bce9316b9">00320</a>   <span class="keyword">inline</span> OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#0c6acd7601bcd058809ef21bce9316b9">dot</a> ( <span class="keyword">const</span> vector3&amp; v1, <span class="keyword">const</span> vector3&amp; v2 )
<a name="l00321"></a>00321   {
<a name="l00322"></a>00322     <span class="keywordflow">return</span> v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">x</a>()*v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#7620859cea26eaecf778b299c0be2c35">x</a>() + v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">y</a>()*v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#3b41142aca411e8e7daba53aec467dd2">y</a>() + v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">z</a>()*v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#6adea9b442be4b5abaf13c04400d778d">z</a>() ;
<a name="l00323"></a>00323   }
<a name="l00325"></a>00325   OBAPI vector3 <a class="code" href="namespaceOpenBabel.shtml#9ed75bfc0c677e29d3407c9286a6188e">cross</a> ( <span class="keyword">const</span> vector3&amp;, <span class="keyword">const</span> vector3&amp; );
<a name="l00326"></a>00326 
<a name="l00328"></a>00328   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#0db1e4796bf04543a95489c303d33299">vectorAngle</a> ( <span class="keyword">const</span> vector3&amp; v1, <span class="keyword">const</span> vector3&amp; v2 );
<a name="l00329"></a>00329 
<a name="l00331"></a>00331   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#4cb4e7dbe872ca20fd7a5ee327687a7f">CalcTorsionAngle</a>(<span class="keyword">const</span> vector3 &amp;a, <span class="keyword">const</span> vector3 &amp;b,
<a name="l00332"></a>00332                                         <span class="keyword">const</span> vector3 &amp;c, <span class="keyword">const</span> vector3 &amp;d);
<a name="l00333"></a>00333 
<a name="l00335"></a>00335   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#085ffe67bbaaeb22b5006270c48ae310">Point2Plane</a>(vector3 a, vector3 b, vector3 c, vector3 d);
<a name="l00337"></a>00337   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#307900fbc999b46be95df164bf68ad72">Point2PlaneAngle</a>(<span class="keyword">const</span> vector3 a, <span class="keyword">const</span> vector3 b, <span class="keyword">const</span> vector3 c, <span class="keyword">const</span> vector3 d);
<a name="l00338"></a>00338 
<a name="l00339"></a>00339   <span class="comment">//  The global constant vector3 objects</span>
<a name="l00341"></a>00341 <span class="comment"></span>  <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#85b14d39485b68c0521267a973e13241">VZero</a>;
<a name="l00343"></a>00343   <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#b8ee612210992d090efe4102609ece8a">VX</a>;
<a name="l00345"></a>00345   <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#e964aaf41d96230a2a922f348d65b77b">VY</a>;
<a name="l00347"></a>00347   <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> vector3 <a class="code" href="namespaceOpenBabel.shtml#e14651415fae326fd4ab5e185a322ad0">VZ</a>;
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 }
<a name="l00350"></a>00350 
<a name="l00351"></a>00351 <span class="preprocessor">#endif // OB_VECTOR_H</span>
<a name="l00352"></a>00352 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
