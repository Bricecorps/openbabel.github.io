<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: format.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>format.h</h1><a href="format_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obconversion.cpp -  Declarations for OBFormat</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2004-2007 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2005-2007 by Geoffrey Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"></span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"></span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_FORMAT_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_FORMAT_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml">openbabel/plugin.h</a>&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;typeinfo&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="keyword">namespace </span>OpenBabel
<a name="l00026"></a>00026 {
<a name="l00027"></a>00027   <span class="keyword">class </span>OBBase;
<a name="l00028"></a>00028   <span class="keyword">class </span>OBConversion;
<a name="l00029"></a>00029 
<a name="l00031"></a><a class="code" href="format_8h.shtml#fcc8c269c00eaea486493353f8f7acea">00031</a> <span class="preprocessor">#define NOTREADABLE     0x01</span>
<a name="l00032"></a><a class="code" href="format_8h.shtml#a0609339a2c16c5425477845a8dd6fc2">00032</a> <span class="preprocessor"></span><span class="preprocessor">#define READONEONLY     0x02</span>
<a name="l00033"></a><a class="code" href="format_8h.shtml#8d6620d9b7d5fb153983e907fe438681">00033</a> <span class="preprocessor"></span><span class="preprocessor">#define READBINARY      0x04</span>
<a name="l00034"></a><a class="code" href="format_8h.shtml#d2d936973ff9e485cd711a58fdca932f">00034</a> <span class="preprocessor"></span><span class="preprocessor">#define ZEROATOMSOK     0x08</span>
<a name="l00035"></a><a class="code" href="format_8h.shtml#c8bc06edffbeff862223fa37ffd8f3f5">00035</a> <span class="preprocessor"></span><span class="preprocessor">#define NOTWRITABLE     0x10</span>
<a name="l00036"></a><a class="code" href="format_8h.shtml#7a41dd21821faa103f9c983d2345beba">00036</a> <span class="preprocessor"></span><span class="preprocessor">#define WRITEONEONLY    0x20</span>
<a name="l00037"></a><a class="code" href="format_8h.shtml#1b3724d401a5b37a99c0bc233a62781c">00037</a> <span class="preprocessor"></span><span class="preprocessor">#define WRITEBINARY     0x40</span>
<a name="l00038"></a><a class="code" href="format_8h.shtml#71a53bfe241beac96663e4f29a16188f">00038</a> <span class="preprocessor"></span><span class="preprocessor">#define READXML         0x80</span>
<a name="l00039"></a><a class="code" href="format_8h.shtml#7d9087465757f93ed9fbec17fabb6c8f">00039</a> <span class="preprocessor"></span><span class="preprocessor">#define DEFAULTFORMAT   0x4000</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span>
<a name="l00042"></a>00042   <span class="comment">// class introduction in obconversion.cpp</span>
<a name="l00043"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml">00043</a> <span class="keyword">class </span>OBCONV OBFormat : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>
<a name="l00044"></a>00044   {
<a name="l00045"></a>00045     <span class="comment">//Macro to include functions to handle plugin operations</span>
<a name="l00046"></a>00046     <a class="code" href="plugin_8h.shtml#e7d38c51c2ef93a98ee7cc6e33fb64f2">MAKE_PLUGIN</a>(OBFormat);
<a name="l00047"></a>00047 
<a name="l00048"></a>00048   <span class="keyword">public</span>:
<a name="l00049"></a>00049 
<a name="l00051"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#46696e52953b901507d090c5825a1551">00051</a>     OBFormat(){}
<a name="l00052"></a>00052 
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#83fe34b548277e7942398d42602d09da">00053</a>     <span class="keyword">const</span> <span class="keywordtype">char</span>* TypeID(){ <span class="keywordflow">return</span> <span class="stringliteral">"formats"</span>; }
<a name="l00054"></a>00054 
<a name="l00056"></a>00056 
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#05437877465431a1da4842d8785dcd6f">00060</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ReadMolecule(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00061"></a>00061       { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid input format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00062"></a>00062 
<a name="l00064"></a>00064 
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#0e5fb42bafdba7783f58add2c8444a54">00068</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ReadChemObject(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00069"></a>00069       { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid input format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00070"></a>00070 
<a name="l00072"></a>00072 
<a name="l00077"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#66ae0db3e2ed318788b7368a1598d73c">00077</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WriteMolecule(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00078"></a>00078       { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid output format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00079"></a>00079 
<a name="l00081"></a>00081 
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#ff82c624a72b8c0c44e09c047e233680">00085</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WriteChemObject(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00086"></a>00086       { std::cerr &lt;&lt; <span class="stringliteral">"Not a valid output format"</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}
<a name="l00087"></a>00087 
<a name="l00089"></a>00089 
<a name="l00093"></a>00093     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description()=0;
<a name="l00094"></a>00094 
<a name="l00096"></a>00096 
<a name="l00098"></a>00098     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* TargetClassDescription();
<a name="l00099"></a>00099 
<a name="l00101"></a>00101 
<a name="l00104"></a>00104     <span class="keyword">virtual</span> <span class="keyword">const</span> std::type_info&amp; GetType();
<a name="l00105"></a>00105 
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#14d10637d876cb934a80c2c4beffe7be">00107</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* SpecificationURL() { <span class="keywordflow">return</span> <span class="stringliteral">""</span>; }
<a name="l00108"></a>00108 
<a name="l00110"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#b870eb384aa4a26c57505e3d587fd6e1">00110</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* GetMIMEType() { <span class="keywordflow">return</span> pMime; }
<a name="l00111"></a>00111 
<a name="l00113"></a>00113  
<a name="l00117"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#c7b28cf29732802948c393d3b3e0417b">00117</a>     <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Flags() { <span class="keywordflow">return</span> 0;}; 
<a name="l00118"></a>00118 
<a name="l00120"></a>00120 
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#edcddf7387fdaf6a3d07cb933ececc1b">00122</a>     <span class="keyword">virtual</span> <span class="keywordtype">int</span> SkipObjects(<span class="keywordtype">int</span> <span class="comment">/*n*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00123"></a>00123       {
<a name="l00124"></a>00124         <span class="keywordflow">return</span> 0; <span class="comment">//shows not implemented in the format class</span>
<a name="l00125"></a>00125       };
<a name="l00126"></a>00126 
<a name="l00128"></a>00128 
<a name="l00132"></a><a class="code" href="classOpenBabel_1_1OBFormat.shtml#8719810eac9042cb936e4ff5cd132bb5">00132</a>     <span class="keyword">virtual</span> OBFormat* MakeNewInstance()
<a name="l00133"></a>00133       {
<a name="l00134"></a>00134         <span class="keywordflow">return</span> NULL; <span class="comment">//shows not implemented in the format class</span>
<a name="l00135"></a>00135       }
<a name="l00136"></a>00136 
<a name="l00137"></a>00137     <span class="comment">//New functions since OBFormat is derived from OBPlugin</span>
<a name="l00138"></a>00138     <span class="comment">//\brief Called from, and an alternative to, OBConversion::RegisterFormat();</span>
<a name="l00139"></a>00139     <span class="keywordtype">int</span> RegisterFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <span class="keyword">const</span> <span class="keywordtype">char</span>* MIME = NULL);
<a name="l00140"></a>00140 
<a name="l00145"></a>00145     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Display(std::string&amp; txt, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID=NULL);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147     <span class="keyword">static</span> OBFormat* FormatFromMIME(<span class="keyword">const</span> <span class="keywordtype">char</span>* MIME);
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 <span class="keyword">private</span>:
<a name="l00150"></a>00150     <span class="keyword">static</span> PluginMapType &amp;FormatsMIMEMap()
<a name="l00151"></a>00151     {
<a name="l00152"></a>00152       <span class="keyword">static</span> PluginMapType m;
<a name="l00153"></a>00153       <span class="keywordflow">return</span> m;
<a name="l00154"></a>00154     }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156     <span class="keyword">const</span> <span class="keywordtype">char</span>* pMime;
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="comment">/* Functions provided by the MAKE_PLUGIN macro</span>
<a name="l00159"></a>00159 <span class="comment"></span>
<a name="l00161"></a>00161 <span class="comment">  Not currently used for formats</span>
<a name="l00162"></a>00162 <span class="comment">  OBFormat(const char* ID, bool IsDefault=false);</span>
<a name="l00163"></a>00163 <span class="comment"></span>
<a name="l00165"></a>00165 <span class="comment">  static OBFormat* FindType(const char* ID);</span>
<a name="l00166"></a>00166 <span class="comment"></span>
<a name="l00167"></a>00167 <span class="comment">*/</span>};
<a name="l00168"></a>00168 
<a name="l00169"></a>00169 }<span class="comment">//namespace</span>
<a name="l00170"></a>00170 <span class="preprocessor">#endif</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
