<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: plugin.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>plugin.h</h1><a href="plugin_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">plugin.h - facilitates construction of plugin classes</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2007 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_PLUGIN_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_PLUGIN_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;cstring&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#ifndef OBERROR</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor"> #define OBERROR</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="keyword">namespace </span>OpenBabel
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036 
<a name="l00038"></a><a class="code" href="structOpenBabel_1_1CharPtrLess.shtml">00038</a> <span class="keyword">struct </span>OBERROR CharPtrLess : <span class="keyword">public</span> std::binary_function&lt;const char*,const char*, bool&gt;
<a name="l00039"></a>00039 {
<a name="l00040"></a><a class="code" href="structOpenBabel_1_1CharPtrLess.shtml#48f67f0d5f974e3215a9852aaf02069a">00040</a>   <span class="keywordtype">bool</span> operator()(<span class="keyword">const</span> <span class="keywordtype">char</span>* p1,<span class="keyword">const</span> <span class="keywordtype">char</span>* p2)<span class="keyword"> const</span>
<a name="l00041"></a>00041 <span class="keyword">  </span>{ <span class="keywordflow">return</span> strcasecmp(p1,p2)&lt;0; }
<a name="l00042"></a>00042 };
<a name="l00043"></a>00043 
<a name="l00049"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml">00049</a> <span class="keyword">class </span>OBERROR OBPlugin
<a name="l00050"></a>00050 {
<a name="l00051"></a>00051 <span class="keyword">public</span>:
<a name="l00052"></a>00052 
<a name="l00053"></a>00053   <span class="comment">//Maps of thistype are used to store </span>
<a name="l00054"></a>00054   <span class="comment">// (a)a list of the plugin types in OBPlugin, and</span>
<a name="l00055"></a>00055   <span class="comment">// (b)a list of the sub-types in each type class derived from OBPlugin.</span>
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#b26efb6326cdaaf08f2abb3e0b0ac2e4">00056</a>   <span class="keyword">typedef</span> std::map&lt;const char*, OBPlugin*, CharPtrLess&gt; <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#b26efb6326cdaaf08f2abb3e0b0ac2e4">PluginMapType</a>;
<a name="l00057"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#0cb8ca530cc677bb6bc8dd6831d68e52">00057</a>   <span class="keyword">typedef</span> PluginMapType::const_iterator PluginIterator;
<a name="l00058"></a>00058 
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#c24d37639ddeba9806d4bb45d7e863cf">00060</a>   <span class="keyword">virtual</span> ~OBPlugin(){};
<a name="l00061"></a>00061 
<a name="l00063"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#1e366f9470579795588b8ec40b5fa33c">00063</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description() { <span class="keywordflow">return</span> NULL;} ;
<a name="l00064"></a>00064 
<a name="l00066"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#f8910015aaead503bcc4d5b00990cdaa">00066</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* TypeID(){ <span class="keywordflow">return</span> <span class="stringliteral">"plugins"</span>; }
<a name="l00067"></a>00067 
<a name="l00073"></a>00073   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Display(std::string&amp;txt, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID=NULL);
<a name="l00074"></a>00074 
<a name="l00079"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#464e1631b75b8a460e258a40245f9899">00079</a>   <span class="keyword">virtual</span> OBPlugin* MakeInstance(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp;){<span class="keywordflow">return</span> NULL;}
<a name="l00080"></a>00080 
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#d2cc002db004547025f1559a35bced21">00083</a>   <span class="keyword">virtual</span> <span class="keywordtype">void</span> Init(){};
<a name="l00084"></a>00084 
<a name="l00087"></a>00087   <span class="keyword">static</span> OBPlugin* GetPlugin(<span class="keyword">const</span> <span class="keywordtype">char</span>* Type, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID);
<a name="l00088"></a>00088 
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#09b89ae96b2f3fe0befd02b286e683b6">00090</a>   <span class="keyword">const</span> <span class="keywordtype">char</span>* GetID()<span class="keyword">const</span>{<span class="keywordflow">return</span> _id;};
<a name="l00091"></a>00091 
<a name="l00095"></a>00095   <span class="keyword">static</span> <span class="keywordtype">bool</span> ListAsVector(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, std::vector&lt;std::string&gt;&amp; vlist);
<a name="l00096"></a>00096 
<a name="l00098"></a>00098   <span class="keyword">static</span> <span class="keywordtype">void</span> List(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID, <span class="keyword">const</span> <span class="keywordtype">char</span>* param=NULL, std::ostream* os=&amp;std::cout);
<a name="l00099"></a>00099 
<a name="l00101"></a>00101   <span class="keyword">static</span> std::string ListAsString(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID, <span class="keyword">const</span> <span class="keywordtype">char</span>* param=NULL);
<a name="l00102"></a>00102 
<a name="l00104"></a>00104   <span class="keyword">static</span> std::string FirstLine(<span class="keyword">const</span> <span class="keywordtype">char</span>* txt);
<a name="l00105"></a>00105 
<a name="l00108"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#61f56413b478eb7de76ff47e0e1cb2f9">00108</a>   <span class="keyword">static</span> PluginIterator Begin(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID)
<a name="l00109"></a>00109   {
<a name="l00110"></a>00110     <span class="keywordflow">if</span>( !strcmp(PluginID, <span class="stringliteral">"plugins"</span>) || GetTypeMap(PluginID)!=PluginMap())
<a name="l00111"></a>00111       <span class="keywordflow">return</span> GetTypeMap(PluginID).begin();
<a name="l00112"></a>00112     <span class="keywordflow">else</span>
<a name="l00113"></a>00113       <span class="keywordflow">return</span> PluginMap().end();
<a name="l00114"></a>00114   }
<a name="l00115"></a>00115 
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#e893d1a3b6cf1458707d1dc500d69dfc">00116</a>   <span class="keyword">static</span> PluginIterator End(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID)
<a name="l00117"></a>00117   {
<a name="l00118"></a>00118     <span class="keywordflow">return</span> GetTypeMap(PluginID).end();
<a name="l00119"></a>00119   }
<a name="l00120"></a>00120 
<a name="l00122"></a>00122   <span class="keyword">virtual</span> PluginMapType&amp; GetMap() <span class="keyword">const </span>=0;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 <span class="keyword">protected</span>:
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#9523da1b1ac44e5c8d9c474c0ab2c6c4">00127</a>   <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#b26efb6326cdaaf08f2abb3e0b0ac2e4">PluginMapType</a>&amp; PluginMap()
<a name="l00128"></a>00128   {
<a name="l00129"></a>00129     <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#b26efb6326cdaaf08f2abb3e0b0ac2e4">PluginMapType</a> m;
<a name="l00130"></a>00130     <span class="keywordflow">return</span> m;
<a name="l00131"></a>00131   }
<a name="l00132"></a>00132 
<a name="l00134"></a>00134   <span class="keyword">static</span> PluginMapType&amp; GetTypeMap(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID);
<a name="l00135"></a>00135 
<a name="l00138"></a>00138   <span class="keyword">static</span> OBPlugin* BaseFindType(PluginMapType&amp; Map, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID);
<a name="l00139"></a>00139 
<a name="l00140"></a>00140 <span class="keyword">protected</span>:
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBPlugin.shtml#a90a0d53dc241f599ebd2e5806bbe9db">00141</a>   <span class="keyword">const</span> <span class="keywordtype">char</span>* _id;
<a name="l00142"></a>00142 };
<a name="l00143"></a>00143 
<a name="l00144"></a>00144 <span class="preprocessor">#if defined(__CYGWIN__) || defined(__MINGW32__)</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span>
<a name="l00146"></a>00146 <span class="comment">//Macro to be added to definition of the base class</span>
<a name="l00147"></a>00147 <span class="preprocessor">#define MAKE_PLUGIN(BaseClass)\</span>
<a name="l00148"></a>00148 <span class="preprocessor">protected:\</span>
<a name="l00149"></a>00149 <span class="preprocessor">static PluginMapType&amp; Map();\</span>
<a name="l00150"></a>00150 <span class="preprocessor">virtual PluginMapType&amp; GetMap()const{return Map();}\</span>
<a name="l00151"></a>00151 <span class="preprocessor">public:\</span>
<a name="l00152"></a>00152 <span class="preprocessor">static BaseClass*&amp; Default(){static BaseClass* d;return d;}\</span>
<a name="l00153"></a>00153 <span class="preprocessor">  BaseClass(const char* ID, bool IsDefault=false)\</span>
<a name="l00154"></a>00154 <span class="preprocessor"> {_id=ID;if(ID&amp;&amp;*ID){if(IsDefault || Map().empty()) Default() = this;\</span>
<a name="l00155"></a>00155 <span class="preprocessor"> Map()[ID]=this;PluginMap()[TypeID()] =this;}}\</span>
<a name="l00156"></a>00156 <span class="preprocessor">static BaseClass* FindType(const char* ID)\</span>
<a name="l00157"></a>00157 <span class="preprocessor"> {if(!ID || *ID==0) return Default();\</span>
<a name="l00158"></a>00158 <span class="preprocessor"> return static_cast&lt;BaseClass*&gt;(BaseFindType(Map(),ID));}</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span>
<a name="l00160"></a>00160 <span class="preprocessor">#define PLUGIN_CPP_FILE(BaseClass)\</span>
<a name="l00161"></a>00161 <span class="preprocessor">OBPlugin::PluginMapType&amp; BaseClass::Map()\</span>
<a name="l00162"></a>00162 <span class="preprocessor">{ static OBPlugin::PluginMapType map; return map; }</span>
<a name="l00163"></a>00163 <span class="preprocessor"></span>
<a name="l00164"></a>00164 <span class="preprocessor">#else // __CYGWIN__ || __MINGW32__</span>
<a name="l00165"></a>00165 <span class="preprocessor"></span>
<a name="l00166"></a>00166 <span class="comment">//Macro to be added to definition of the base class</span>
<a name="l00167"></a><a class="code" href="plugin_8h.shtml#e7d38c51c2ef93a98ee7cc6e33fb64f2">00167</a> <span class="preprocessor">#define MAKE_PLUGIN(BaseClass)\</span>
<a name="l00168"></a>00168 <span class="preprocessor">protected:\</span>
<a name="l00169"></a>00169 <span class="preprocessor">static PluginMapType&amp; Map(){static PluginMapType m;return m;}\</span>
<a name="l00170"></a>00170 <span class="preprocessor">virtual PluginMapType&amp; GetMap()const{return Map();}\</span>
<a name="l00171"></a>00171 <span class="preprocessor">public:\</span>
<a name="l00172"></a>00172 <span class="preprocessor">static BaseClass*&amp; Default(){static BaseClass* d;return d;}\</span>
<a name="l00173"></a>00173 <span class="preprocessor">  BaseClass(const char* ID, bool IsDefault=false)\</span>
<a name="l00174"></a>00174 <span class="preprocessor"> {_id=ID;if(ID&amp;&amp;*ID){if(IsDefault || Map().empty()) Default() = this;\</span>
<a name="l00175"></a>00175 <span class="preprocessor"> Map()[ID]=this;PluginMap()[TypeID()] =this;}}\</span>
<a name="l00176"></a>00176 <span class="preprocessor">static BaseClass* FindType(const char* ID)\</span>
<a name="l00177"></a>00177 <span class="preprocessor"> {if(!ID || *ID==0 &amp;&amp; *ID!=' ') return Default();\</span>
<a name="l00178"></a>00178 <span class="preprocessor"> return static_cast&lt;BaseClass*&gt;(BaseFindType(Map(),ID));}</span>
<a name="l00179"></a>00179 <span class="preprocessor"></span>
<a name="l00180"></a>00180 <span class="preprocessor">#endif // __CYGWIN__ || __MINGW32__</span>
<a name="l00181"></a>00181 <span class="preprocessor"></span>
<a name="l00310"></a>00310 
<a name="l00319"></a>00319 } <span class="comment">// end namespce</span>
<a name="l00320"></a>00320 
<a name="l00321"></a>00321 <span class="preprocessor">#endif</span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
