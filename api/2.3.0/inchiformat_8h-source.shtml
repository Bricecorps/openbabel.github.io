<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: inchiformat.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>inchiformat.h</h1><a href="inchiformat_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">Copyright (C) 2005,2006,2007 Chris Morley</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Based on the IUPAC InChI reference software, which is distributed</span>
<a name="l00005"></a>00005 <span class="comment">under the GNU LGPL:</span>
<a name="l00006"></a>00006 <span class="comment">Copyright (C) 2005 The International Union of Pure and Applied Chemistry</span>
<a name="l00007"></a>00007 <span class="comment">IUPAC International Chemical Identifier (InChI) (contact:secretariat@iupac.org)</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &lt;<a class="code" href="obconversion_8h.shtml">openbabel/obconversion.h</a>&gt;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="obmolecformat_8h.shtml">openbabel/obmolecformat.h</a>&gt;</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#include "inchi_api.h"</span>
<a name="l00024"></a>00024 <span class="preprocessor">#ifdef HAVE_SSTREAM</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#else</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#include &lt;strstream&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#endif</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include "<a class="code" href="chiral_8h.shtml">openbabel/chiral.h</a>"</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">using namespace </span>std;
<a name="l00034"></a>00034 <span class="keyword">namespace </span>OpenBabel
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036 <span class="keyword">extern</span> string <a class="code" href="namespaceOpenBabel.shtml#44fd6da7cf4667df6b56ceb06d6c4730">GetInChI</a>(istream&amp; is);
<a name="l00037"></a>00037 
<a name="l00038"></a><a class="code" href="classOpenBabel_1_1InChIFormat.shtml">00038</a> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1InChIFormat.shtml">InChIFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml">OBMoleculeFormat</a>
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040 <span class="keyword">public</span>:
<a name="l00041"></a><a class="code" href="classOpenBabel_1_1InChIFormat.shtml#2a632689c85490649bb502169492fba1">00041</a>   <a class="code" href="classOpenBabel_1_1InChIFormat.shtml#2a632689c85490649bb502169492fba1">InChIFormat</a>()
<a name="l00042"></a>00042   {
<a name="l00043"></a>00043     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#abd48769369b75f7b7dc81aa227e25f0">OBConversion::RegisterFormat</a>(<span class="stringliteral">"inchi"</span>,<span class="keyword">this</span>);
<a name="l00044"></a>00044     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#4ae7c596da40d4dffa0d1334fbea8640">OBConversion::RegisterOptionParam</a>(<span class="stringliteral">"n"</span>, <span class="keyword">this</span>, 0, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#1527a0a12210467a9dbd6d53f856750ba67eb12c03e13a7604813e2b0b4d3ec3">OBConversion::INOPTIONS</a>);
<a name="l00045"></a>00045     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#4ae7c596da40d4dffa0d1334fbea8640">OBConversion::RegisterOptionParam</a>(<span class="stringliteral">"t"</span>, <span class="keyword">this</span>);
<a name="l00046"></a>00046     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#4ae7c596da40d4dffa0d1334fbea8640">OBConversion::RegisterOptionParam</a>(<span class="stringliteral">"l"</span>, <span class="keyword">this</span>);
<a name="l00047"></a>00047     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#4ae7c596da40d4dffa0d1334fbea8640">OBConversion::RegisterOptionParam</a>(<span class="stringliteral">"X"</span>, <span class="keyword">this</span>, 1, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#1527a0a12210467a9dbd6d53f856750b186512a57baacc64eaae0a2eab55baa9">OBConversion::OUTOPTIONS</a>);
<a name="l00048"></a>00048     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#4ae7c596da40d4dffa0d1334fbea8640">OBConversion::RegisterOptionParam</a>(<span class="stringliteral">"K"</span>, <span class="keyword">this</span>, 0, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#1527a0a12210467a9dbd6d53f856750b186512a57baacc64eaae0a2eab55baa9">OBConversion::OUTOPTIONS</a>);
<a name="l00049"></a>00049     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#4ae7c596da40d4dffa0d1334fbea8640">OBConversion::RegisterOptionParam</a>(<span class="stringliteral">"F"</span>, <span class="keyword">this</span>, 0, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#1527a0a12210467a9dbd6d53f856750b186512a57baacc64eaae0a2eab55baa9">OBConversion::OUTOPTIONS</a>);
<a name="l00050"></a>00050     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#4ae7c596da40d4dffa0d1334fbea8640">OBConversion::RegisterOptionParam</a>(<span class="stringliteral">"X"</span>, <span class="keyword">this</span>, 1, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#1527a0a12210467a9dbd6d53f856750ba67eb12c03e13a7604813e2b0b4d3ec3">OBConversion::INOPTIONS</a>);
<a name="l00051"></a>00051     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#4ae7c596da40d4dffa0d1334fbea8640">OBConversion::RegisterOptionParam</a>(<span class="stringliteral">"T"</span>, <span class="keyword">this</span>, 1, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#1527a0a12210467a9dbd6d53f856750b186512a57baacc64eaae0a2eab55baa9">OBConversion::OUTOPTIONS</a>);
<a name="l00052"></a>00052   }
<a name="l00053"></a>00053 
<a name="l00054"></a><a class="code" href="classOpenBabel_1_1InChIFormat.shtml#1e366f9470579795588b8ec40b5fa33c">00054</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1InChIFormat.shtml#1e366f9470579795588b8ec40b5fa33c">Description</a>()
<a name="l00055"></a>00055   {
<a name="l00056"></a>00056     <span class="keywordflow">return</span> 
<a name="l00057"></a>00057     <span class="stringliteral">"InChI format\n"</span>
<a name="l00058"></a>00058     <span class="stringliteral">"IUPAC/NIST molecular identifier\n"</span>
<a name="l00059"></a>00059     <span class="stringliteral">"Write options, e.g. -xat\n"</span>
<a name="l00060"></a>00060     <span class="comment">//" n do not use 'recommended' InChI options\n"</span>
<a name="l00061"></a>00061     <span class="stringliteral">" X &lt;Option string&gt; List of additional InChI options\n"</span>
<a name="l00062"></a>00062     <span class="comment">//" F include fixed hydrogen layer\n"</span>
<a name="l00063"></a>00063     <span class="comment">//" M include bonds to metal\n"</span>
<a name="l00064"></a>00064     <span class="stringliteral">" t add molecule name\n"</span>
<a name="l00065"></a>00065     <span class="stringliteral">" a output auxilliary information\n"</span>
<a name="l00066"></a>00066     <span class="stringliteral">" K output InChIKey\n"</span>
<a name="l00067"></a>00067     <span class="stringliteral">" w don't warn on undef stereo or charge rearrangement\n"</span>
<a name="l00068"></a>00068     <span class="stringliteral">" l display InChI log\n"</span>
<a name="l00069"></a>00069     <span class="stringliteral">" u output only unique molecules\n"</span>
<a name="l00070"></a>00070     <span class="stringliteral">" U output only unique molecules and sort them\n"</span>
<a name="l00071"></a>00071     <span class="stringliteral">" e compare first molecule to others\n"</span>
<a name="l00072"></a>00072     <span class="stringliteral">" T &lt;param&gt; truncate InChI, /nostereo etc.\n\n"</span>
<a name="l00073"></a>00073 
<a name="l00074"></a>00074     <span class="stringliteral">"Input options, e.g. -an\n"</span>
<a name="l00075"></a>00075     <span class="stringliteral">" X &lt;Option string&gt; List of InChI options\n"</span>
<a name="l00076"></a>00076     <span class="stringliteral">" n molecule name follows InChI on same line\n"</span>
<a name="l00077"></a>00077     <span class="stringliteral">" a add InChI string to molecule name\n\n"</span>
<a name="l00078"></a>00078     <span class="stringliteral">"Currently the output is standard InChI only."</span>
<a name="l00079"></a>00079     <span class="stringliteral">"InChI options may be reintroduced later."</span>
<a name="l00080"></a>00080     <span class="stringliteral">" The InChI options should be space delimited in a single quoted string.\n"</span>
<a name="l00081"></a>00081     <span class="stringliteral">" See InChI documentation for possible options.\n\n"</span>
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="stringliteral">" Truncation parameters used with -xT\n"</span>
<a name="l00084"></a>00084     <span class="stringliteral">"/formula  formula only\n"</span>
<a name="l00085"></a>00085     <span class="stringliteral">"/connect  formula and connectivity only\n"</span>
<a name="l00086"></a>00086     <span class="stringliteral">"/nostereo ignore E/Z and sp3 stereochemistry\n"</span>
<a name="l00087"></a>00087     <span class="stringliteral">"/sp3      ignore sp3 stereochemistry\n"</span>
<a name="l00088"></a>00088     <span class="stringliteral">"/noEZ     ignore E/Z steroeochemistry\n"</span>
<a name="l00089"></a>00089     <span class="stringliteral">"/nochg    ignore charge and protonation\n"</span>
<a name="l00090"></a>00090     <span class="stringliteral">"/noiso    ignore isotopes\n\n"</span>
<a name="l00091"></a>00091 ;
<a name="l00092"></a>00092   };
<a name="l00093"></a>00093 
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1InChIFormat.shtml#14d10637d876cb934a80c2c4beffe7be">00094</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1InChIFormat.shtml#14d10637d876cb934a80c2c4beffe7be">SpecificationURL</a>()
<a name="l00095"></a>00095   { <span class="keywordflow">return</span> <span class="stringliteral">"http://www.iupac.org/inchi/"</span>;};
<a name="l00096"></a>00096 
<a name="l00097"></a>00097   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1InChIFormat.shtml#d23a1fca7e930ac0f435a432e3684b0e">ReadMolecule</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv);
<a name="l00098"></a>00098   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1InChIFormat.shtml#8aa729933c3cbe7af2d17a886aa016b6">WriteMolecule</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv);
<a name="l00099"></a>00099   <span class="keyword">virtual</span> <span class="keywordtype">int</span>  <a class="code" href="classOpenBabel_1_1InChIFormat.shtml#a4f1585b558e6f90fafec7442ce140d1">SkipObjects</a>(<span class="keywordtype">int</span> n, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv);
<a name="l00100"></a>00100 
<a name="l00101"></a>00101   <span class="keyword">static</span> <span class="keywordtype">char</span>   <a class="code" href="classOpenBabel_1_1InChIFormat.shtml#6c286dba34f6996f8d3d985f18e0d53a">CompareInchi</a>(<span class="keyword">const</span> string&amp; Inchi1, <span class="keyword">const</span> string&amp; Inchi2);
<a name="l00102"></a>00102   <span class="keyword">static</span> string <a class="code" href="classOpenBabel_1_1InChIFormat.shtml#0f1cb146d57b9fa1b1ac1f611f29a4ca">InChIErrorMessage</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> ch);
<a name="l00103"></a>00103 
<a name="l00106"></a>00106   <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1InChIFormat.shtml#243f07592c13a50b132f625c3d0ae2fb">EditInchi</a>(std::string&amp; inchi, std::string&amp; spec);
<a name="l00107"></a>00107 
<a name="l00109"></a>00109   <span class="comment">// "a6b" (or "a06b") is less than "a15b"</span>
<a name="l00110"></a>00110   <span class="comment">// and "CH4" is less than "C2H6"</span>
<a name="l00111"></a>00111   <span class="comment">// and "CH4" is less than "ClH" (hydrogen chloride)</span>
<a name="l00112"></a><a class="code" href="structOpenBabel_1_1InChIFormat_1_1InchiLess.shtml">00112</a>   <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1InChIFormat_1_1InchiLess.shtml">InchiLess</a>
<a name="l00113"></a>00113     : <span class="keyword">public</span> binary_function&lt;const string&amp;, const string&amp;, bool&gt;
<a name="l00114"></a>00114   {
<a name="l00115"></a><a class="code" href="structOpenBabel_1_1InChIFormat_1_1InchiLess.shtml#8243db8601295fd578e6c7e4eca542ac">00115</a>     <span class="keywordtype">bool</span> <a class="code" href="structOpenBabel_1_1InChIFormat_1_1InchiLess.shtml#8243db8601295fd578e6c7e4eca542ac">operator()</a>(<span class="keyword">const</span> string&amp; s1, <span class="keyword">const</span> string&amp; s2)<span class="keyword"> const</span>
<a name="l00116"></a>00116 <span class="keyword">    </span>{
<a name="l00117"></a>00117       <span class="comment">//stop at the first space or the end of the strings</span>
<a name="l00118"></a>00118       string::const_iterator p1=s1.begin(), p2=s2.begin(),
<a name="l00119"></a>00119         p1end=find(s1.begin(), s1.end(), <span class="charliteral">' '</span>), p2end=find(s2.begin(), s2.end(), <span class="charliteral">' '</span>);
<a name="l00120"></a>00120 
<a name="l00121"></a>00121       <span class="keywordflow">while</span>( p1&lt;p1end &amp;&amp; p2&lt;p2end)
<a name="l00122"></a>00122       {
<a name="l00123"></a>00123         <span class="keywordtype">int</span> n1=-1,n2=-1;
<a name="l00124"></a>00124         <span class="keywordflow">if</span>(isdigit(*p1))
<a name="l00125"></a>00125           {
<a name="l00126"></a>00126             n1 = atoi(&amp;*p1);
<a name="l00127"></a>00127             <span class="comment">//skip over number</span>
<a name="l00128"></a>00128             <span class="keywordflow">while</span>(p1!=s1.end() &amp;&amp; isdigit(*p1++)); --p1;
<a name="l00129"></a>00129           }
<a name="l00130"></a>00130         <span class="keywordflow">if</span>(isdigit(*p2))
<a name="l00131"></a>00131           {
<a name="l00132"></a>00132             n2 = atoi(&amp;*p2);
<a name="l00133"></a>00133             <span class="keywordflow">while</span>(p2!=s2.end() &amp;&amp; isdigit(*p2++)); --p2;
<a name="l00134"></a>00134           }
<a name="l00135"></a>00135         <span class="keywordflow">if</span>(n1&lt;0 &amp;&amp; n2 &lt; 0)
<a name="l00136"></a>00136           {
<a name="l00137"></a>00137             <span class="comment">//neither numbers</span>
<a name="l00138"></a>00138             <span class="keywordflow">if</span>(*p1 != *p2)
<a name="l00139"></a>00139         <span class="keywordflow">return</span> *p1 &lt; *p2;
<a name="l00140"></a>00140           }
<a name="l00141"></a>00141         <span class="keywordflow">else</span> <span class="keywordflow">if</span>(n1&gt;=0 &amp;&amp; n2&gt;0)
<a name="l00142"></a>00142           {
<a name="l00143"></a>00143             <span class="comment">//both numbers</span>
<a name="l00144"></a>00144             <span class="keywordflow">if</span>(n1!=n2)
<a name="l00145"></a>00145         <span class="keywordflow">return</span> n1 &lt; n2;
<a name="l00146"></a>00146           }
<a name="l00147"></a>00147         <span class="keywordflow">else</span> <span class="keywordflow">if</span>(n1&gt;0)
<a name="l00148"></a>00148           <span class="keywordflow">return</span> islower(*p2)!=0;
<a name="l00149"></a>00149         <span class="keywordflow">else</span> <span class="keywordflow">if</span>(n2&gt;0)
<a name="l00150"></a>00150           <span class="keywordflow">return</span> !islower(*p1);
<a name="l00151"></a>00151 
<a name="l00152"></a>00152         ++p1; ++p2; <span class="comment">// iterate</span>
<a name="l00153"></a>00153       } <span class="comment">// while loop</span>
<a name="l00154"></a>00154       <span class="keywordflow">return</span> <span class="keyword">false</span>; <span class="comment">//identical</span>
<a name="l00155"></a>00155     }
<a name="l00156"></a>00156   };
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="keyword">private</span>:
<a name="l00160"></a>00160   <span class="keyword">static</span> <span class="keywordtype">void</span> RemoveLayer (std::string&amp; inchi, <span class="keyword">const</span> std::string&amp; str, <span class="keywordtype">bool</span> all=<span class="keyword">false</span>);
<a name="l00161"></a>00161 
<a name="l00162"></a>00162 <span class="keyword">private</span>:
<a name="l00163"></a>00163   <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* GetCommonAtom(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* pb1, <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* pb2);
<a name="l00164"></a>00164   <span class="keywordtype">char</span>* GetInChIOptions(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv, <span class="keywordtype">bool</span> Reading);
<a name="l00165"></a>00165 
<a name="l00166"></a>00166   <span class="keyword">typedef</span>       set&lt;string, InchiLess&gt; nSet;
<a name="l00167"></a>00167   nSet allInchi;
<a name="l00168"></a>00168   string firstInchi;
<a name="l00169"></a>00169   string firstID;
<a name="l00170"></a>00170 };
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="comment">//*****************************************************</span>
<a name="l00173"></a><a class="code" href="classOpenBabel_1_1InChICompareFormat.shtml">00173</a> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1InChICompareFormat.shtml">InChICompareFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml">OBMoleculeFormat</a>
<a name="l00174"></a>00174 {
<a name="l00175"></a>00175 <span class="keyword">public</span>:
<a name="l00176"></a><a class="code" href="classOpenBabel_1_1InChICompareFormat.shtml#565fa6c09d5e49f015cc4499f1bc3d11">00176</a>   <a class="code" href="classOpenBabel_1_1InChICompareFormat.shtml#565fa6c09d5e49f015cc4499f1bc3d11">InChICompareFormat</a>()
<a name="l00177"></a>00177   {
<a name="l00178"></a>00178       <a class="code" href="classOpenBabel_1_1OBConversion.shtml#abd48769369b75f7b7dc81aa227e25f0">OBConversion::RegisterFormat</a>(<span class="stringliteral">"k"</span>,<span class="keyword">this</span>);
<a name="l00179"></a>00179   }
<a name="l00180"></a><a class="code" href="classOpenBabel_1_1InChICompareFormat.shtml#1e366f9470579795588b8ec40b5fa33c">00180</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1InChICompareFormat.shtml#1e366f9470579795588b8ec40b5fa33c">Description</a>() <span class="comment">//required</span>
<a name="l00181"></a>00181   {
<a name="l00182"></a>00182     <span class="keywordflow">return</span> 
<a name="l00183"></a>00183       <span class="stringliteral">"Compare molecules using InChI\n"</span>
<a name="l00184"></a>00184       <span class="stringliteral">"The first molecule is compared with the rest\n"</span>
<a name="l00185"></a>00185       <span class="stringliteral">"e.g. babel first.smi second.mol third.cml -ok\n"</span>
<a name="l00186"></a>00186       <span class="stringliteral">"Same as  -oinchi -xet  and can take the same options as InChI format.\n"</span>;
<a name="l00187"></a>00187   }
<a name="l00188"></a>00188   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1InChICompareFormat.shtml#8aa729933c3cbe7af2d17a886aa016b6">WriteMolecule</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv);
<a name="l00189"></a><a class="code" href="classOpenBabel_1_1InChICompareFormat.shtml#c7b28cf29732802948c393d3b3e0417b">00189</a>   <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1InChICompareFormat.shtml#c7b28cf29732802948c393d3b3e0417b">Flags</a>() { <span class="keywordflow">return</span> <a class="code" href="format_8h.shtml#fcc8c269c00eaea486493353f8f7acea">NOTREADABLE</a>;};
<a name="l00190"></a>00190 };
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 }<span class="comment">//namespace OpenBabel</span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
