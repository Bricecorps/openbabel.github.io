<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: atom.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>atom.h</h1><a href="atom_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">atom.h - Handle OBAtom class.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span>
<a name="l00007"></a>00007 <span class="comment"> </span>
<a name="l00008"></a>00008 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00009"></a>00009 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00010"></a>00010 <span class="comment"> </span>
<a name="l00011"></a>00011 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00012"></a>00012 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00013"></a>00013 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00014"></a>00014 <span class="comment"> </span>
<a name="l00015"></a>00015 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00016"></a>00016 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00017"></a>00017 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00018"></a>00018 <span class="comment">GNU General Public License for more details.</span>
<a name="l00019"></a>00019 <span class="comment">***********************************************************************/</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef OB_ATOM_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define OB_ATOM_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;<a class="code" href="residue_8h.shtml">openbabel/residue.h</a>&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;<a class="code" href="vector3_8h.shtml">openbabel/math/vector3.h</a>&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">namespace </span>OpenBabel
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039 
<a name="l00040"></a>00040   <span class="keyword">class </span>OBBond;
<a name="l00041"></a><a class="code" href="namespaceOpenBabel.shtml#077e421ba1ce2493b892cd44762f27c0">00041</a>   <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;
<a name="l00042"></a>00042 
<a name="l00044"></a>00044   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBNodeBase</a>;
<a name="l00046"></a><a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">00046</a>   <span class="keyword">typedef</span> std::vector&lt;OBBond*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a>;
<a name="l00048"></a><a class="code" href="namespaceOpenBabel.shtml#b9b3180238e83c2c9930c11d91406e24">00048</a>   <span class="keyword">typedef</span> std::vector&lt;OBAtom*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#b9b3180238e83c2c9930c11d91406e24">OBAtomIterator</a>;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050   <span class="comment">//ATOM Property Macros (flags)</span>
<a name="l00052"></a><a class="code" href="atom_8h.shtml#237e2b03b6ad605107e16d42799e0a9c">00052</a> <span class="comment"></span><span class="preprocessor">#define OB_4RING_ATOM     (1&lt;&lt;1)</span>
<a name="l00054"></a><a class="code" href="atom_8h.shtml#efe31e37ec0990dd43aa938e1b0f0c90">00054</a> <span class="preprocessor">#define OB_3RING_ATOM     (1&lt;&lt;2)</span>
<a name="l00056"></a><a class="code" href="atom_8h.shtml#28421247644863c06737427b1e28babb">00056</a> <span class="preprocessor">#define OB_AROMATIC_ATOM  (1&lt;&lt;3)</span>
<a name="l00058"></a><a class="code" href="atom_8h.shtml#c922d4614a2408b181941792344c810a">00058</a> <span class="preprocessor">#define OB_RING_ATOM      (1&lt;&lt;4)</span>
<a name="l00060"></a><a class="code" href="atom_8h.shtml#f813274d93d9bb2e7cd6b9036f0094ed">00060</a> <span class="preprocessor">#define OB_CSTEREO_ATOM   (1&lt;&lt;5)</span>
<a name="l00062"></a><a class="code" href="atom_8h.shtml#04692f5d75ff6283012e54dc51c6fbf4">00062</a> <span class="preprocessor">#define OB_ACSTEREO_ATOM  (1&lt;&lt;6)</span>
<a name="l00064"></a><a class="code" href="atom_8h.shtml#572001a8bd47ff893c984036e62eb82d">00064</a> <span class="preprocessor">#define OB_DONOR_ATOM     (1&lt;&lt;7)</span>
<a name="l00066"></a><a class="code" href="atom_8h.shtml#8e63b07d28e40368ee6a0553b8119d16">00066</a> <span class="preprocessor">#define OB_ACCEPTOR_ATOM  (1&lt;&lt;8)</span>
<a name="l00068"></a><a class="code" href="atom_8h.shtml#f49790825f2319680aa4dda72ec95deb">00068</a> <span class="preprocessor">#define OB_CHIRAL_ATOM    (1&lt;&lt;9)</span>
<a name="l00070"></a><a class="code" href="atom_8h.shtml#6478e7b8c771513ab408c82740c63f61">00070</a> <span class="preprocessor">#define OB_POS_CHIRAL_ATOM (1&lt;&lt;10)</span>
<a name="l00072"></a><a class="code" href="atom_8h.shtml#34bd7794f21256314ae2e81ff3cc621d">00072</a> <span class="preprocessor">#define OB_NEG_CHIRAL_ATOM (1&lt;&lt;11)</span>
<a name="l00074"></a><a class="code" href="atom_8h.shtml#546eb8a9ad59de2eadb51ba9519f1aca">00074</a> <span class="preprocessor">#define OB_ATOM_HAS_NO_H   (1&lt;&lt;12)</span>
<a name="l00076"></a><a class="code" href="atom_8h.shtml#78f38fb539ef7ef386ca73d0e0a0fc5d">00076</a> <span class="preprocessor">#define OB_ATOM_NOT_H_DEFICIENT (1&lt;&lt;13)</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span>
<a name="l00078"></a>00078   <span class="comment">// Class OBAtom</span>
<a name="l00079"></a>00079   <span class="comment">// class introduction in atom.cpp</span>
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml">00080</a>  <span class="keyword">class </span>OBAPI OBAtom: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>
<a name="l00081"></a>00081     {
<a name="l00082"></a>00082     <span class="keyword">protected</span>:
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#78025469db236a7996858222e6333d9a">00083</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>                 _ele;       
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a55863fc86122c73cbd1b11cabe64d9c">00084</a>       <span class="keywordtype">char</span>                          _impval;    
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#94688a431c1d5fc5d7eb58718857d1ea">00085</a>       <span class="keywordtype">char</span>                          _type[6];   
<a name="l00086"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0aaead8bac3cfc1e196442d0737408e8">00086</a>       <span class="keywordtype">short</span>                         _fcharge;   
<a name="l00087"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6bf91cc6c3a4d702aed31acf09a80867">00087</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _isotope;   
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d0aa89a8273bd7fc804cddc6add3bc3e">00088</a>       <span class="keywordtype">short</span>                         _spinmultiplicity;
<a name="l00089"></a>00089 
<a name="l00090"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#4c93d1db1e8bdab78e96ca880b3ab603">00090</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _idx;       
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#653caaea90b3449f100e4738a5ab8610">00091</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>                        *_parent;    
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#595db55da6c1ece37bc3208d8a8ea004">00092</a>       std::vector&lt;OBBond*&gt;          _vbond;     
<a name="l00093"></a>00093 
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b6c5a087d4e9498d1842545680e30d0e">00094</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _cidx;      
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#833374dc6f400413176c07c06f405f55">00095</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _hyb;       
<a name="l00096"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#2f8d3bde544c2385461c1f2e48bb1666">00096</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span>                _flags;     
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b0d4fffdcaa2314413a16e090c84e6a6">00097</a>       <span class="keywordtype">double</span>                        _pcharge;   
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#631201e9771ba36a8561b214be422a90">00098</a>       <span class="keywordtype">double</span>                      **_c;         
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0e5f372c98d8a51028e93dda6865b6d3">00099</a>       <span class="keyword">mutable</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>               _v;         
<a name="l00100"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3979831e5ab51a54650fa4255da85ea7">00100</a>       <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>                    *_residue;   
<a name="l00101"></a>00101 
<a name="l00102"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#15852dca7d07d669b408c722f892421c">00102</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>                 _id;        
<a name="l00103"></a>00103 
<a name="l00105"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3b503a67c1d02fe9918c28929637a10d">00105</a>       <span class="keywordtype">int</span>  GetFlag()<span class="keyword"> const    </span>{  <span class="keywordflow">return</span>(_flags);  }
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#063912ea063eb9a89e1d8012726af989">00107</a>       <span class="keywordtype">void</span> SetFlag(<span class="keywordtype">int</span> flag)  { _flags |= flag;   }
<a name="l00109"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#944bef92a47e48ea43a258a87578d820">00109</a>       <span class="keywordtype">bool</span> HasFlag(<span class="keywordtype">int</span> flag)  {  <span class="keywordflow">return</span>((_flags &amp; flag) ? <span class="keyword">true</span> : <span class="keyword">false</span>); }
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     <span class="keyword">public</span>:
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9e01316142f951d25591407b66aaf8f9">00112</a>       <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml#9e01316142f951d25591407b66aaf8f9">StereoFlag</a> {
<a name="l00113"></a>00113         
<a name="l00114"></a>00114       };
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5fc668e0360e1287869e3c90ceecf587">00118</a>       <span class="keywordtype">bool</span> Visit;
<a name="l00119"></a>00119 
<a name="l00121"></a>00121       OBAtom();
<a name="l00123"></a>00123       <span class="keyword">virtual</span> ~OBAtom();
<a name="l00125"></a>00125       OBAtom &amp;operator = (OBAtom &amp;);
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0aaa50f5737b91ef3473c340780a3dfc">00127</a>       <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#e8a689b821c5b5e0b57dbc7b22b486af">operator==</a>(<span class="keyword">const</span> OBAtom * other)<span class="keyword"> const </span>{  <span class="keywordflow">return</span> (GetIdx() == other-&gt;<a class="code" href="classOpenBabel_1_1OBAtom.shtml#05e11dc0b0a8c1d5c4ebc987f488f45f">GetIdx</a>()); }
<a name="l00130"></a>00130       <span class="keywordtype">void</span> Duplicate(OBAtom *);
<a name="l00133"></a>00133       <span class="keywordtype">bool</span> Clear();
<a name="l00134"></a>00134 
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#be09c2e27eb33a0945a832c46a979c3e">00138</a>       <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)    { _idx = idx; _cidx = (idx-1)*3; }
<a name="l00139"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e0ae596dafe399dea3c19e894ab84606">00139</a>       <span class="keywordtype">void</span> SetId(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) { _id = id; }
<a name="l00141"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e74ba282eca7e8d43d37ef8b496dc729">00141</a>       <span class="keywordtype">void</span> SetHyb(<span class="keywordtype">int</span> hyb)    { _hyb = hyb; }
<a name="l00143"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#df54b61eeb1ac75ab31eb534ab8149bc">00143</a>       <span class="keywordtype">void</span> SetAtomicNum(<span class="keywordtype">int</span> atomicnum)    { _ele = (char)atomicnum; }
<a name="l00145"></a>00145       <span class="keywordtype">void</span> SetIsotope(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> iso);
<a name="l00147"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#4033d35a0a73d876c963e7b1af617fc2">00147</a>       <span class="keywordtype">void</span> SetImplicitValence(<span class="keywordtype">int</span> val)    { _impval = (char)val; }
<a name="l00149"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#8cf6e47dfabdcfd56b70d17ebd12b118">00149</a>       <span class="keywordtype">void</span> IncrementImplicitValence()     { _impval++; }
<a name="l00151"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#fbc4e0efece41daf37f92979c4d4aa30">00151</a>       <span class="keywordtype">void</span> DecrementImplicitValence()     { _impval--; }
<a name="l00153"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9e94b6a9e3b3a15e20efa78905b89f12">00153</a>       <span class="keywordtype">void</span> SetFormalCharge(<span class="keywordtype">int</span> fcharge)   { _fcharge = fcharge; }
<a name="l00155"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#81b49eeee5624455cdf6940aede33186">00155</a>       <span class="keywordtype">void</span> SetSpinMultiplicity(<span class="keywordtype">short</span> spin){ _spinmultiplicity = spin; }
<a name="l00157"></a>00157       <span class="keywordtype">void</span> SetType(<span class="keyword">const</span> <span class="keywordtype">char</span> *type);
<a name="l00159"></a>00159       <span class="keywordtype">void</span> SetType(<span class="keyword">const</span> std::string &amp;type);
<a name="l00161"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1284e7e049da2b207de1a97d756ad1f7">00161</a>       <span class="keywordtype">void</span> SetPartialCharge(<span class="keywordtype">double</span> pcharge){ _pcharge = pcharge; }
<a name="l00163"></a>00163       <span class="keywordtype">void</span> SetVector(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v);
<a name="l00165"></a>00165       <span class="keywordtype">void</span> SetVector(<span class="keyword">const</span> <span class="keywordtype">double</span> x,<span class="keyword">const</span> <span class="keywordtype">double</span> y,<span class="keyword">const</span> <span class="keywordtype">double</span> z);
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0bdce447052288d604aba7101664a1f0">00167</a>       <span class="keywordtype">void</span> SetCoordPtr(<span class="keywordtype">double</span> **c)        { _c = c; _cidx = (GetIdx()-1)*3; }
<a name="l00169"></a>00169       <span class="keywordtype">void</span> SetVector();
<a name="l00171"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#cfcbc9d85073c9c8c314ecb252baa681">00171</a>       <span class="keywordtype">void</span> SetResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *res)     { _residue=res; }
<a name="l00173"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#699e858285444f3497084dddbdb7d898">00173</a>       <span class="keywordtype">void</span> SetParent(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *ptr)          { _parent=ptr; }
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#ea3580ff7343be0e4daec917db63618f">00175</a>       <span class="keywordtype">void</span> SetAromatic()                  { SetFlag(<a class="code" href="atom_8h.shtml#28421247644863c06737427b1e28babb">OB_AROMATIC_ATOM</a>); }
<a name="l00177"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e0a25424667561b0cd547ffd11b4fdb4">00177</a>       <span class="keywordtype">void</span> UnsetAromatic()                { _flags &amp;= (~(<a class="code" href="atom_8h.shtml#28421247644863c06737427b1e28babb">OB_AROMATIC_ATOM</a>)); }
<a name="l00179"></a>00179       <span class="comment">//void SetClockwiseStereo()           { SetFlag(OB_CSTEREO_ATOM|OB_CHIRAL_ATOM); }</span>
<a name="l00181"></a>00181 <span class="comment"></span>      <span class="comment">//void SetAntiClockwiseStereo()       { SetFlag(OB_ACSTEREO_ATOM|OB_CHIRAL_ATOM); }</span>
<a name="l00183"></a>00183 <span class="comment"></span>      <span class="comment">//void SetPositiveStereo() { SetFlag(OB_POS_CHIRAL_ATOM|OB_CHIRAL_ATOM); }</span>
<a name="l00185"></a>00185 <span class="comment"></span>      <span class="comment">//void SetNegativeStereo() { SetFlag(OB_NEG_CHIRAL_ATOM|OB_CHIRAL_ATOM); }</span>
<a name="l00187"></a>00187 <span class="comment"></span>      <span class="comment">/*</span>
<a name="l00188"></a>00188 <span class="comment">      void UnsetStereo()</span>
<a name="l00189"></a>00189 <span class="comment">        {</span>
<a name="l00190"></a>00190 <span class="comment">          _flags &amp;= ~(OB_ACSTEREO_ATOM);</span>
<a name="l00191"></a>00191 <span class="comment">          _flags &amp;= ~(OB_CSTEREO_ATOM);</span>
<a name="l00192"></a>00192 <span class="comment">          _flags &amp;= ~(OB_POS_CHIRAL_ATOM);</span>
<a name="l00193"></a>00193 <span class="comment">          _flags &amp;= ~(OB_NEG_CHIRAL_ATOM);</span>
<a name="l00194"></a>00194 <span class="comment">          _flags &amp;= ~(OB_CHIRAL_ATOM);</span>
<a name="l00195"></a>00195 <span class="comment">        }</span>
<a name="l00196"></a>00196 <span class="comment">        */</span>
<a name="l00198"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0304a1613c65081967db024342b57bca">00198</a>       <span class="keywordtype">void</span> SetInRing()         { SetFlag(<a class="code" href="atom_8h.shtml#c922d4614a2408b181941792344c810a">OB_RING_ATOM</a>); }
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#fc8c061a243516fd0b5f173da4f6e2bc">00200</a>       <span class="keywordtype">void</span> SetChiral()         { SetFlag(<a class="code" href="atom_8h.shtml#f49790825f2319680aa4dda72ec95deb">OB_CHIRAL_ATOM</a>); }
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#deaa97063016dba89d8683265f7afcae">00202</a>       <span class="keywordtype">void</span> ClearCoordPtr()     { _c = NULL; _cidx=0; }
<a name="l00204"></a>00204 
<a name="l00206"></a>00206 
<a name="l00207"></a>00207 
<a name="l00208"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#e1337a43af377570da8c3a4c2662f38b">00208</a>       <span class="keywordtype">int</span>          GetFormalCharge()<span class="keyword">  const </span>{ <span class="keywordflow">return</span>(_fcharge);    }
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#c651c3a7252bca4e302cccfd6ecf47c7">00210</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetAtomicNum()<span class="keyword">     const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)_ele); }
<a name="l00212"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#603211b3fc7bcebce3e5be7fe461763b">00212</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> GetIsotope()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_isotope);    }
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#352764a6e86ebdfe5b10392e31ad482e">00215</a>       <span class="keywordtype">int</span>          GetSpinMultiplicity()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(_spinmultiplicity); }
<a name="l00218"></a>00218       <span class="keywordtype">double</span>     GetAtomicMass()    <span class="keyword">const</span>;
<a name="l00221"></a>00221       <span class="keywordtype">double</span>     GetExactMass()     <span class="keyword">const</span>;
<a name="l00223"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#05e11dc0b0a8c1d5c4ebc987f488f45f">00223</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetIdx()<span class="keyword">           const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_idx);  }
<a name="l00224"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5277a729b022a0fe72310cc868185452">00224</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetIndex()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _idx - 1; }
<a name="l00225"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#a48d0d18446ed8d56732070292b3d7b9">00225</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> GetId()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _id; }
<a name="l00228"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#3702d489463f865559310617b200a01e">00228</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetCoordinateIdx()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_cidx); }
<a name="l00230"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9169e8ce1c8133b776b02280329acb77">00230</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetCIdx()<span class="keyword">          const </span>{ <span class="keywordflow">return</span>((<span class="keywordtype">int</span>)_cidx); }
<a name="l00232"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#0c1c9817196b50f936f4f84275c6f87e">00232</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#aab98f4129d077cff461571e601e5be5">GetValence</a>()<span class="keyword">       const</span>
<a name="l00233"></a>00233 <span class="keyword">        </span>{
<a name="l00234"></a>00234           <span class="keywordflow">return</span>((_vbond.empty()) ? 0 : static_cast&lt;unsigned int&gt; (_vbond.size()));
<a name="l00235"></a>00235         }
<a name="l00237"></a>00237       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHyb()             <span class="keyword">const</span>;
<a name="l00239"></a>00239       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetImplicitValence() <span class="keyword">const</span>;
<a name="l00241"></a>00241       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#f34f6d754496ff9869a8b7f714be6217">GetHvyValence</a>()      <span class="keyword">const</span>;
<a name="l00243"></a>00243       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHeteroValence()   <span class="keyword">const</span>;
<a name="l00245"></a>00245       <span class="keywordtype">char</span>        *GetType();
<a name="l00246"></a>00246 
<a name="l00248"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#428964b46a2e3c81247552baf9584adb">00248</a>       <span class="keywordtype">double</span>      GetX()<span class="keyword"> const   </span>{        <span class="keywordflow">return</span>(x());    }
<a name="l00250"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#c747529063c40258d9d00111a375afb7">00250</a>       <span class="keywordtype">double</span>      GetY()<span class="keyword"> const  </span>{        <span class="keywordflow">return</span>(y());    }
<a name="l00252"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#2f61eeaab957f44d55f5e986e4d15943">00252</a>       <span class="keywordtype">double</span>      GetZ()<span class="keyword"> const  </span>{        <span class="keywordflow">return</span>(z());    }
<a name="l00253"></a>00253 
<a name="l00254"></a>00254       <span class="comment">// These methods check to see if there is a coordinate pointer</span>
<a name="l00255"></a>00255       <span class="comment">// or an internal vector (e.g., SetCoordPtr())</span>
<a name="l00257"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#dc1d05172993de36769b12ec291c8a6f">00257</a> <span class="comment"></span>      <span class="keywordtype">double</span>      x()<span class="keyword"> const </span>{
<a name="l00258"></a>00258         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx]);
<a name="l00259"></a>00259         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.x();
<a name="l00260"></a>00260       }
<a name="l00262"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d6d9a99ff63d1d59bed4742298ba84c3">00262</a>       <span class="keywordtype">double</span>      y()<span class="keyword"> const </span>{
<a name="l00263"></a>00263         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx+1]);
<a name="l00264"></a>00264         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.y();
<a name="l00265"></a>00265       }
<a name="l00267"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9fca8110aa4e1596795a90b2d1d891b4">00267</a>       <span class="keywordtype">double</span>      z()<span class="keyword"> const </span>{
<a name="l00268"></a>00268         <span class="keywordflow">if</span> (_c)            <span class="keywordflow">return</span>((*_c)[_cidx+2]);
<a name="l00269"></a>00269         <span class="keywordflow">else</span>               <span class="keywordflow">return</span> _v.z();
<a name="l00270"></a>00270       }
<a name="l00275"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#54a3aa4403f825bb54a019e9069396a0">00275</a>       <span class="keywordtype">double</span>     *GetCoordinate(){
<a name="l00276"></a>00276         <span class="keywordflow">if</span> (_c)          <span class="keywordflow">return</span>(&amp;(*_c)[_cidx]);
<a name="l00277"></a>00277         <span class="keywordflow">else</span>             <span class="keywordflow">return</span> NULL;
<a name="l00278"></a>00278       }
<a name="l00280"></a>00280       <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>   &amp;GetVector();
<a name="l00282"></a>00282       <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>   &amp;GetVector() <span class="keyword">const</span>;
<a name="l00284"></a>00284       <span class="keywordtype">double</span>     GetPartialCharge();
<a name="l00286"></a>00286       <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *GetResidue();
<a name="l00289"></a>00289       <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *GetResidue(<span class="keywordtype">bool</span> perception);
<a name="l00291"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#591186a9911abecee7ad2c92ea2fc949">00291</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>     *GetParent()        {<span class="keywordflow">return</span>((<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>*)_parent);}
<a name="l00294"></a>00294       <span class="keywordtype">bool</span>       GetNewBondVector(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v,<span class="keywordtype">double</span> length);
<a name="l00297"></a>00297       <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>    *GetBond(OBAtom *);
<a name="l00302"></a>00302       OBAtom    *GetNextAtom();
<a name="l00304"></a>00304 
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 
<a name="l00308"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#6218f741fe73ed5241941b2cb01e96a5">00308</a>       <a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a> BeginBonds()
<a name="l00309"></a>00309         { <span class="keywordflow">return</span>(_vbond.begin()); }
<a name="l00311"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f920c97445642093b6a7224624c9a5dd">00311</a>       <a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a> EndBonds()
<a name="l00312"></a>00312         { <span class="keywordflow">return</span>(_vbond.end());   }
<a name="l00315"></a>00315       <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *BeginBond(<a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a> &amp;i);
<a name="l00318"></a>00318       <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *NextBond(<a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a> &amp;i);
<a name="l00321"></a>00321       OBAtom *BeginNbrAtom(<a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a> &amp;i);
<a name="l00324"></a>00324       OBAtom *NextNbrAtom(<a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a> &amp;i);
<a name="l00326"></a>00326 
<a name="l00328"></a>00328       <span class="keywordtype">double</span> GetDistance(<span class="keywordtype">int</span> index);
<a name="l00330"></a>00330       <span class="keywordtype">double</span> GetDistance(OBAtom*);
<a name="l00332"></a>00332       <span class="keywordtype">double</span> GetAngle(<span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c);
<a name="l00334"></a>00334       <span class="keywordtype">double</span> GetAngle(OBAtom *b, OBAtom *c);
<a name="l00335"></a>00335 
<a name="l00337"></a>00337 
<a name="l00338"></a>00338 
<a name="l00340"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#b9149c1500997ccc8a5c76f5d5c208b1">00340</a>       <span class="keywordtype">void</span> NewResidue()
<a name="l00341"></a>00341         {
<a name="l00342"></a>00342           <span class="keywordflow">if</span> (!_residue)
<a name="l00343"></a>00343             _residue = <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>;
<a name="l00344"></a>00344         }
<a name="l00346"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#03d25f7eb900cfe46d11c9cd31fa4407">00346</a>       <span class="keywordtype">void</span> AddResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *res) { SetResidue(res); }
<a name="l00348"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#c39948c809af5aabb05fdfd8cdc81d71">00348</a>       <span class="keywordtype">void</span> DeleteResidue(){
<a name="l00349"></a>00349         <span class="keywordflow">if</span> (_residue) {
<a name="l00350"></a>00350           <span class="keyword">delete</span> _residue;
<a name="l00351"></a>00351           _residue = NULL; <span class="comment">// Make sure to clear that a residue existed</span>
<a name="l00352"></a>00352         }
<a name="l00353"></a>00353       }
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#aa890947c02f74f7c19a7bc5577af33e">00355</a>       <span class="keywordtype">void</span> AddBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond) { _vbond.push_back(bond); }
<a name="l00358"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#69d6d73435346afd96b1c2fe2cbda982">00358</a>       <span class="keywordtype">void</span> InsertBond(<a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a> &amp;i, <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)
<a name="l00359"></a>00359         {
<a name="l00360"></a>00360           _vbond.insert(i, bond);
<a name="l00361"></a>00361         }
<a name="l00363"></a>00363       <span class="keywordtype">bool</span> DeleteBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* bond);
<a name="l00365"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#d74816aa4f1607dba8e98b954b6c031d">00365</a>       <span class="keywordtype">void</span> ClearBond() {_vbond.clear();}
<a name="l00367"></a>00367 
<a name="l00369"></a>00369 
<a name="l00370"></a>00370 
<a name="l00373"></a>00373       <span class="keywordtype">bool</span> HtoMethyl();
<a name="l00376"></a>00376       <span class="keywordtype">bool</span> SetHybAndGeom(<span class="keywordtype">int</span>);
<a name="l00378"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#78ec4b8139141fe18c781aa6c91cb725">00378</a>       <span class="keywordtype">void</span> ForceNoH() {SetFlag(<a class="code" href="atom_8h.shtml#546eb8a9ad59de2eadb51ba9519f1aca">OB_ATOM_HAS_NO_H</a>);}
<a name="l00380"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#dd5b2a2e15465a7a67c67e2324b6fea4">00380</a>       <span class="keywordtype">bool</span> HasNoHForced() {<span class="keywordflow">return</span> HasFlag(<a class="code" href="atom_8h.shtml#546eb8a9ad59de2eadb51ba9519f1aca">OB_ATOM_HAS_NO_H</a>);}
<a name="l00381"></a>00381 
<a name="l00384"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#1afb7f1c179433ca73ae807d353d5cb5">00384</a>       <span class="keywordtype">void</span> ForceImplH() {SetFlag(<a class="code" href="atom_8h.shtml#78f38fb539ef7ef386ca73d0e0a0fc5d">OB_ATOM_NOT_H_DEFICIENT</a>);}
<a name="l00387"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#213d17c51bdd9299edae3c4e2265f41c">00387</a>       <span class="keywordtype">bool</span> HasImplHForced() {<span class="keywordflow">return</span> HasFlag(<a class="code" href="atom_8h.shtml#78f38fb539ef7ef386ca73d0e0a0fc5d">OB_ATOM_NOT_H_DEFICIENT</a>);}
<a name="l00389"></a>00389 
<a name="l00391"></a>00391 
<a name="l00392"></a>00392 
<a name="l00393"></a>00393       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  CountFreeOxygens()      <span class="keyword">const</span>;
<a name="l00395"></a>00395       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ImplicitHydrogenCount() <span class="keyword">const</span>;
<a name="l00397"></a>00397       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  ExplicitHydrogenCount(<span class="keywordtype">bool</span> ExcludeIsotopes=<span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l00399"></a>00399       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  MemberOfRingCount()     <span class="keyword">const</span>;
<a name="l00401"></a>00401       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  MemberOfRingSize()    <span class="keyword">const</span>;
<a name="l00403"></a>00403       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  CountRingBonds() <span class="keyword">const</span>;
<a name="l00405"></a>00405       <span class="keywordtype">double</span>      SmallestBondAngle();
<a name="l00407"></a>00407       <span class="keywordtype">double</span>      AverageBondAngle();
<a name="l00409"></a>00409       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  BOSum()                 <span class="keyword">const</span>;
<a name="l00412"></a>00412       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  KBOSum()                <span class="keyword">const</span>;
<a name="l00414"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#5cae9da01027c61f4fe0cd68a29a89e0">00414</a>       <span class="keywordtype">bool</span> HasResidue()    { <span class="keywordflow">return</span>(_residue != NULL);    }
<a name="l00416"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#29741c13b0823433bb1a62f407a2f9ab">00416</a>       <span class="keywordtype">bool</span> IsHydrogen()    { <span class="keywordflow">return</span>(GetAtomicNum() == 1); }
<a name="l00418"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#65b20c40db2af6a4fef0e95098c06dc8">00418</a>       <span class="keywordtype">bool</span> IsCarbon()      { <span class="keywordflow">return</span>(GetAtomicNum() == 6); }
<a name="l00420"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#56a0d860382f89ce93a57f408a490508">00420</a>       <span class="keywordtype">bool</span> IsNitrogen()    { <span class="keywordflow">return</span>(GetAtomicNum() == 7); }
<a name="l00422"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f56ad71b0febc726c0ef01d8de9ab29f">00422</a>       <span class="keywordtype">bool</span> IsOxygen()      { <span class="keywordflow">return</span>(GetAtomicNum() == 8); }
<a name="l00424"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#9066d5b362020c51027bfd4dcc0cfac6">00424</a>       <span class="keywordtype">bool</span> IsSulfur()      { <span class="keywordflow">return</span>(GetAtomicNum() == 16);}
<a name="l00426"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#abd5be003cc086502186077b14eec748">00426</a>       <span class="keywordtype">bool</span> IsPhosphorus()  { <span class="keywordflow">return</span>(GetAtomicNum() == 15);}
<a name="l00428"></a>00428       <span class="keywordtype">bool</span> IsAromatic()      <span class="keyword">const</span>;
<a name="l00430"></a>00430       <span class="keywordtype">bool</span> IsInRing()        <span class="keyword">const</span>;
<a name="l00432"></a>00432       <span class="keywordtype">bool</span> IsInRingSize(<span class="keywordtype">int</span>) <span class="keyword">const</span>;
<a name="l00435"></a>00435       <span class="keywordtype">bool</span> IsHeteroatom();
<a name="l00437"></a>00437       <span class="keywordtype">bool</span> IsNotCorH();
<a name="l00439"></a>00439       <span class="keywordtype">bool</span> IsConnected(OBAtom*);
<a name="l00442"></a>00442       <span class="keywordtype">bool</span> IsOneThree(OBAtom*);
<a name="l00445"></a>00445       <span class="keywordtype">bool</span> IsOneFour(OBAtom*);
<a name="l00447"></a>00447       <span class="keywordtype">bool</span> IsCarboxylOxygen();
<a name="l00449"></a>00449       <span class="keywordtype">bool</span> IsPhosphateOxygen();
<a name="l00451"></a>00451       <span class="keywordtype">bool</span> IsSulfateOxygen();
<a name="l00453"></a>00453       <span class="keywordtype">bool</span> IsNitroOxygen();
<a name="l00455"></a>00455       <span class="keywordtype">bool</span> IsAmideNitrogen();
<a name="l00458"></a>00458       <span class="keywordtype">bool</span> IsPolarHydrogen();
<a name="l00461"></a>00461       <span class="keywordtype">bool</span> IsNonPolarHydrogen();
<a name="l00464"></a>00464       <span class="keywordtype">bool</span> IsAromaticNOxide();
<a name="l00466"></a>00466       <span class="keywordtype">bool</span> IsChiral();
<a name="l00468"></a>00468       <span class="keywordtype">bool</span> IsAxial();
<a name="l00470"></a>00470       <span class="comment">//bool IsClockwise()         { return(HasFlag(OB_CSTEREO_ATOM));  }</span>
<a name="l00472"></a>00472 <span class="comment"></span>      <span class="comment">//bool IsAntiClockwise()     { return(HasFlag(OB_ACSTEREO_ATOM)); }</span>
<a name="l00474"></a>00474 <span class="comment"></span>      <span class="comment">//bool IsPositiveStereo() { return(HasFlag(OB_POS_CHIRAL_ATOM)); }</span>
<a name="l00476"></a>00476 <span class="comment"></span>      <span class="comment">//bool IsNegativeStereo() { return(HasFlag(OB_NEG_CHIRAL_ATOM)); }</span>
<a name="l00478"></a>00478 <span class="comment"></span>      <span class="comment">//bool HasChiralitySpecified()</span>
<a name="l00479"></a>00479       <span class="comment">//  { return(HasFlag(OB_CSTEREO_ATOM|OB_ACSTEREO_ATOM)); }</span>
<a name="l00481"></a>00481 <span class="comment"></span>      <span class="comment">//bool HasChiralVolume()</span>
<a name="l00482"></a>00482       <span class="comment">//  { return(HasFlag(OB_POS_CHIRAL_ATOM|OB_NEG_CHIRAL_ATOM)); }</span>
<a name="l00484"></a>00484 <span class="comment"></span>      <span class="keywordtype">bool</span> IsHbondAcceptor();
<a name="l00486"></a>00486       <span class="keywordtype">bool</span> IsHbondDonor();
<a name="l00488"></a>00488       <span class="keywordtype">bool</span> IsHbondDonorH();
<a name="l00493"></a>00493       <span class="keywordtype">bool</span> HasAlphaBetaUnsat(<span class="keywordtype">bool</span> includePandS=<span class="keyword">true</span>);
<a name="l00495"></a>00495       <span class="keywordtype">bool</span> HasBondOfOrder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bo);
<a name="l00497"></a>00497       <span class="keywordtype">int</span>  CountBondsOfOrder(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bo);
<a name="l00499"></a>00499       <span class="keywordtype">bool</span> HasNonSingleBond();
<a name="l00501"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#f97074daf8d097c7fa9a477bdc3fe072">00501</a>       <span class="keywordtype">bool</span> HasSingleBond()    {        <span class="keywordflow">return</span>(HasBondOfOrder(1));    }
<a name="l00503"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#c7a183e6a4ae4991463f7767d2af6f6f">00503</a>       <span class="keywordtype">bool</span> HasDoubleBond()    {        <span class="keywordflow">return</span>(HasBondOfOrder(2));    }
<a name="l00505"></a><a class="code" href="classOpenBabel_1_1OBAtom.shtml#29df4818968ab38043e5b0e900cf281f">00505</a>       <span class="keywordtype">bool</span> HasAromaticBond()  {        <span class="keywordflow">return</span>(HasBondOfOrder(5));    }
<a name="l00507"></a>00507       <span class="keywordtype">bool</span> MatchesSMARTS(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00509"></a>00509 
<a name="l00510"></a>00510     }; <span class="comment">// class OBAtom</span>
<a name="l00511"></a>00511 
<a name="l00512"></a>00512 }<span class="comment">// namespace OpenBabel</span>
<a name="l00513"></a>00513 
<a name="l00514"></a>00514 <span class="preprocessor">#endif   // OB_ATOM_H</span>
<a name="l00515"></a>00515 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
