<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: bond.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>bond.h</h1><a href="bond_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">bond.h - Handle OBBond class.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span>
<a name="l00007"></a>00007 <span class="comment">Some portions Copyright (C) 2008 by Tim Vandermeersch</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00010"></a>00010 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00011"></a>00011 <span class="comment"> </span>
<a name="l00012"></a>00012 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00013"></a>00013 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00014"></a>00014 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00015"></a>00015 <span class="comment"> </span>
<a name="l00016"></a>00016 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00017"></a>00017 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00018"></a>00018 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00019"></a>00019 <span class="comment">GNU General Public License for more details.</span>
<a name="l00020"></a>00020 <span class="comment">***********************************************************************/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef OB_BOND_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define OB_BOND_H</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;<a class="code" href="atom_8h.shtml">openbabel/atom.h</a>&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>OpenBabel
<a name="l00035"></a>00035 {
<a name="l00036"></a><a class="code" href="namespaceOpenBabel.shtml#bb72c6ed73ffccd4ebbccd8181a09b26">00036</a>   <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>;
<a name="l00037"></a>00037 
<a name="l00039"></a>00039   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBEdgeBase</a>;
<a name="l00040"></a>00040 
<a name="l00041"></a>00041   <span class="comment">//BOND Property Macros (flags)</span>
<a name="l00043"></a><a class="code" href="bond_8h.shtml#23a9917b63a6a899f4d6a0421cda6cc4">00043</a> <span class="comment"></span><span class="preprocessor">#define OB_AROMATIC_BOND  (1&lt;&lt;1)</span>
<a name="l00045"></a><a class="code" href="bond_8h.shtml#2d110c1364c268ed4e4afc19c840b8bb">00045</a> <span class="preprocessor">#define OB_WEDGE_BOND     (1&lt;&lt;2)</span>
<a name="l00047"></a><a class="code" href="bond_8h.shtml#0af313bd59f865a0a04e684c842301c4">00047</a> <span class="preprocessor">#define OB_HASH_BOND      (1&lt;&lt;3)</span>
<a name="l00049"></a><a class="code" href="bond_8h.shtml#d5c655997b49142ec40f0b2319f8829b">00049</a> <span class="preprocessor">#define OB_RING_BOND      (1&lt;&lt;4)</span>
<a name="l00051"></a><a class="code" href="bond_8h.shtml#c4cdbbcda6d5c186e790b865e968b0dd">00051</a> <span class="preprocessor">#define OB_TORUP_BOND     (1&lt;&lt;5)</span>
<a name="l00053"></a><a class="code" href="bond_8h.shtml#e9bf2879a55d011300b288ccf3601272">00053</a> <span class="preprocessor">#define OB_TORDOWN_BOND   (1&lt;&lt;6)</span>
<a name="l00055"></a><a class="code" href="bond_8h.shtml#a15eccd9e38095134d6e85c862dd1859">00055</a> <span class="preprocessor">#define OB_KSINGLE_BOND   (1&lt;&lt;7)</span>
<a name="l00057"></a><a class="code" href="bond_8h.shtml#fe146e7044f6f9c65c4d1b1877441be8">00057</a> <span class="preprocessor">#define OB_KDOUBLE_BOND   (1&lt;&lt;8)</span>
<a name="l00059"></a><a class="code" href="bond_8h.shtml#a72d5f49ac8eab79e17c99e54aa4556f">00059</a> <span class="preprocessor">#define OB_KTRIPLE_BOND   (1&lt;&lt;9)</span>
<a name="l00061"></a><a class="code" href="bond_8h.shtml#1bda0b64781348a345354a4daac3e5fc">00061</a> <span class="preprocessor">#define OB_CLOSURE_BOND   (1&lt;&lt;10)</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span>  <span class="comment">// 11-16 currently unused</span>
<a name="l00063"></a>00063 
<a name="l00064"></a><a class="code" href="bond_8h.shtml#4dfd4854bfde17c2fb261b338828d5aa">00064</a> <span class="preprocessor">#define OB_WEDGE_OR_HASH_BOND     (1&lt;&lt;11)</span>
<a name="l00065"></a><a class="code" href="bond_8h.shtml#b787d4fc887c98b9a27a34836f783569">00065</a> <span class="preprocessor"></span><span class="preprocessor">#define OB_CIS_OR_TRANS_BOND     (1&lt;&lt;12)</span>
<a name="l00067"></a>00067 <span class="preprocessor"></span>
<a name="l00068"></a>00068 <span class="preprocessor">  //class OBBondPrivate;</span>
<a name="l00069"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml">00069</a> <span class="preprocessor"></span>  <span class="keyword">class </span>OBAPI OBBond: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>
<a name="l00070"></a>00070   {
<a name="l00071"></a>00071     <span class="keyword">protected</span>:
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#4c93d1db1e8bdab78e96ca880b3ab603">00072</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                _idx;   
<a name="l00073"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#653caaea90b3449f100e4738a5ab8610">00073</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>                      *_parent;
<a name="l00074"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#9ea32fc840a4aa5290bc9ffb3c8f19c4">00074</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>                     *_bgn;   
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#49ba37e80d8c6e3fdf0d88e8baebff60">00075</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>                     *_end;   
<a name="l00076"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#5cf145371bc120763e4b15236dffcfde">00076</a>       <span class="keywordtype">char</span>                        _order; 
<a name="l00077"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#315ae7bc03a618f65620886bc8691463">00077</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>          _flags; 
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#15852dca7d07d669b408c722f892421c">00078</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>                 _id;        
<a name="l00079"></a>00079       <span class="comment">//OBBondPrivate * const d;</span>
<a name="l00080"></a>00080 
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#1934b9ef770b8655de7db5126d644596">00084</a>       <span class="keywordtype">bool</span> HasFlag(<span class="keywordtype">int</span> flag)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((_flags &amp; flag) != 0); }
<a name="l00088"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#063912ea063eb9a89e1d8012726af989">00088</a>       <span class="keywordtype">void</span> SetFlag(<span class="keywordtype">int</span> flag) { _flags |= flag; }
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#62403a93c4cd4fe95ab64922da4cf7b2">00092</a>       <span class="keywordtype">void</span> UnsetFlag(<span class="keywordtype">int</span> flag) { _flags &amp;= (~(flag)); }
<a name="l00093"></a>00093 
<a name="l00094"></a>00094     <span class="keyword">public</span>:
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#8f15dd58a849e530b15f06e669268ade">00095</a>       <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#8f15dd58a849e530b15f06e669268ade">Flag</a> {
<a name="l00096"></a>00096         Aromatic = (1&lt;&lt;1), 
<a name="l00097"></a>00097         Ring     = (1&lt;&lt;4), 
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#8f15dd58a849e530b15f06e669268ade6f037913e184001fcb0fcb340fb457b4">00098</a>         Closure  = (1&lt;&lt;10) 
<a name="l00099"></a>00099       };
<a name="l00100"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#9e01316142f951d25591407b66aaf8f9">00100</a>       <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml#9e01316142f951d25591407b66aaf8f9">StereoFlag</a> {
<a name="l00101"></a>00101         Wedge       = (1&lt;&lt;2),  
<a name="l00102"></a>00102         Hash        = (1&lt;&lt;3),  
<a name="l00103"></a>00103         WedgeOrHash = (1&lt;&lt;11), 
<a name="l00104"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#9e01316142f951d25591407b66aaf8f9ce8a1236555a2aa5bef81b9746adf4ae">00104</a>         CisOrTrans  = (1&lt;&lt;12)  
<a name="l00105"></a>00105       };
<a name="l00107"></a>00107 
<a name="l00108"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#5fc668e0360e1287869e3c90ceecf587">00108</a>       <span class="keywordtype">bool</span> Visit;
<a name="l00109"></a>00109 
<a name="l00111"></a>00111       OBBond();
<a name="l00113"></a>00113       <span class="keyword">virtual</span> ~OBBond();
<a name="l00114"></a>00114 
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#be09c2e27eb33a0945a832c46a979c3e">00120</a>       <span class="keywordtype">void</span> SetIdx(<span class="keywordtype">int</span> idx)        {          _idx = idx;        }
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#e0ae596dafe399dea3c19e894ab84606">00121</a>       <span class="keywordtype">void</span> SetId(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) { _id = id; }
<a name="l00123"></a>00123 
<a name="l00124"></a>00124       <span class="keywordtype">void</span> SetBO(<span class="keywordtype">int</span> order);
<a name="l00126"></a>00126       <span class="keywordtype">void</span> SetBondOrder(<span class="keywordtype">int</span> order);
<a name="l00128"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#163ad66a854b8542ee08a143b8e7c0bc">00128</a>       <span class="keywordtype">void</span> SetBegin(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *begin){          _bgn = begin;      }
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#e6f2a5691f8024a5150a0c5187c2c710">00130</a>       <span class="keywordtype">void</span> SetEnd(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *end)    {          _end = end;        }
<a name="l00132"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#699e858285444f3497084dddbdb7d898">00132</a>       <span class="keywordtype">void</span> SetParent(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *ptr)  {        _parent= ptr;        }
<a name="l00134"></a>00134       <span class="keywordtype">void</span> SetLength(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *fixed,<span class="keywordtype">double</span> length);
<a name="l00137"></a>00137       <span class="keywordtype">void</span> SetLength(<span class="keywordtype">double</span> length);
<a name="l00139"></a>00139       <span class="keywordtype">void</span> Set(<span class="keywordtype">int</span> index, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* begin,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* end,<span class="keywordtype">int</span> order,<span class="keywordtype">int</span> flags);
<a name="l00141"></a>00141       <span class="keywordtype">void</span> SetKSingle();
<a name="l00143"></a>00143       <span class="keywordtype">void</span> SetKDouble();
<a name="l00145"></a>00145       <span class="keywordtype">void</span> SetKTriple();
<a name="l00147"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ea3580ff7343be0e4daec917db63618f">00147</a>       <span class="keywordtype">void</span> SetAromatic()    { SetFlag(<a class="code" href="bond_8h.shtml#23a9917b63a6a899f4d6a0421cda6cc4">OB_AROMATIC_BOND</a>); }
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#88354e27567a08d6d7158a23245c95a3">00152</a>       <span class="keywordtype">void</span> SetWedge() { SetFlag(Wedge); }
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#e7c792dd2a0062c54624586e8fb6eff5">00157</a>       <span class="keywordtype">void</span> SetHash() { SetFlag(Hash); }
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#9d44e7734fcf5deca5875bd8166fd450">00162</a>       <span class="keywordtype">void</span> SetWedgeOrHash() { SetFlag(WedgeOrHash); }
<a name="l00164"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#c7b43f5c3d415ead15619c7ab0451884">00164</a>       <span class="keywordtype">void</span> SetUp()          { SetFlag(<a class="code" href="bond_8h.shtml#c4cdbbcda6d5c186e790b865e968b0dd">OB_TORUP_BOND</a>); UnsetFlag(<a class="code" href="bond_8h.shtml#e9bf2879a55d011300b288ccf3601272">OB_TORDOWN_BOND</a>); }
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#1178cf4455719132bf001b5d7688badc">00166</a>       <span class="keywordtype">void</span> SetDown()        { SetFlag(<a class="code" href="bond_8h.shtml#e9bf2879a55d011300b288ccf3601272">OB_TORDOWN_BOND</a>); UnsetFlag(<a class="code" href="bond_8h.shtml#c4cdbbcda6d5c186e790b865e968b0dd">OB_TORUP_BOND</a>);   }
<a name="l00168"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#f5917b6120b32f45ec5b323dd67accc8">00168</a>       <span class="keywordtype">void</span> SetInRing(<span class="keywordtype">bool</span> set=<span class="keyword">true</span>) { <span class="keywordflow">if</span>(set)SetFlag(<a class="code" href="bond_8h.shtml#d5c655997b49142ec40f0b2319f8829b">OB_RING_BOND</a>); <span class="keywordflow">else</span> UnsetFlag(OB_RING_BOND);}
<a name="l00170"></a>00170 
<a name="l00173"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#d1f859a5c7a51dfc266725a96ba6413d">00173</a>       <span class="keywordtype">void</span> SetClosure()     { SetFlag(<a class="code" href="bond_8h.shtml#1bda0b64781348a345354a4daac3e5fc">OB_CLOSURE_BOND</a>);  }
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#865487cab7e575c8fa68c5fb111b6a73">00175</a>       <span class="keywordtype">void</span> UnsetHash()      { UnsetFlag(<a class="code" href="bond_8h.shtml#0af313bd59f865a0a04e684c842301c4">OB_HASH_BOND</a>);    }
<a name="l00177"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#058e78d34a03cbe2c01f03a4efbc935b">00177</a>       <span class="keywordtype">void</span> UnsetWedge()     { UnsetFlag(<a class="code" href="bond_8h.shtml#2d110c1364c268ed4e4afc19c840b8bb">OB_WEDGE_BOND</a>);   }
<a name="l00179"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#9290fa41d2702b7917e229275dabdfe0">00179</a>       <span class="keywordtype">void</span> UnsetUp()        { UnsetFlag(<a class="code" href="bond_8h.shtml#c4cdbbcda6d5c186e790b865e968b0dd">OB_TORUP_BOND</a>);   }
<a name="l00181"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#38db823da79fd795df16dc4e15296ee6">00181</a>       <span class="keywordtype">void</span> UnsetDown()      { UnsetFlag(<a class="code" href="bond_8h.shtml#e9bf2879a55d011300b288ccf3601272">OB_TORDOWN_BOND</a>); }
<a name="l00183"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#e0a25424667561b0cd547ffd11b4fdb4">00183</a>       <span class="keywordtype">void</span> UnsetAromatic()  { UnsetFlag(<a class="code" href="bond_8h.shtml#23a9917b63a6a899f4d6a0421cda6cc4">OB_AROMATIC_BOND</a>);}
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#6738f4db8614fab081d9f48479a790fc">00185</a>       <span class="keywordtype">void</span> UnsetKekule()
<a name="l00186"></a>00186         {
<a name="l00187"></a>00187           _flags &amp;= (~(<a class="code" href="bond_8h.shtml#a15eccd9e38095134d6e85c862dd1859">OB_KSINGLE_BOND</a>|<a class="code" href="bond_8h.shtml#fe146e7044f6f9c65c4d1b1877441be8">OB_KDOUBLE_BOND</a>|<a class="code" href="bond_8h.shtml#a72d5f49ac8eab79e17c99e54aa4556f">OB_KTRIPLE_BOND</a>));
<a name="l00188"></a>00188         }
<a name="l00190"></a>00190 
<a name="l00192"></a>00192 
<a name="l00193"></a>00193 
<a name="l00194"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#05e11dc0b0a8c1d5c4ebc987f488f45f">00194</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetIdx()<span class="keyword">           const </span>{ <span class="keywordflow">return</span>(_idx);  }
<a name="l00195"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a48d0d18446ed8d56732070292b3d7b9">00195</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> GetId()<span class="keyword">           const </span>{ <span class="keywordflow">return</span> _id; }
<a name="l00197"></a>00197 
<a name="l00198"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#d4dadee4a400b6ac838ff5954b36bd0d">00198</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetBO()<span class="keyword">            const </span>{ <span class="keywordflow">return</span>(_order); }
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#8bcd767f306365a9e68c207baefcddfd">00200</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetBondOrder()<span class="keyword">     const </span>{ <span class="keywordflow">return</span>(_order); }
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#5d925833d5979ee36d818cce233324c8">00202</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetFlags()<span class="keyword">         const </span>{ <span class="keywordflow">return</span>(_flags);      }
<a name="l00204"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#fa357312fceb6c4e71dd9a1744b75ab3">00204</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetBeginAtomIdx()<span class="keyword">  const </span>
<a name="l00205"></a>00205 <span class="keyword">        </span>{ <span class="keywordflow">return</span> (_bgn ? _bgn-&gt;GetIdx() : 0); }
<a name="l00207"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#fde1f340016346344981d54dd8355bc5">00207</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetEndAtomIdx()<span class="keyword">    const </span>
<a name="l00208"></a>00208 <span class="keyword">        </span>{ <span class="keywordflow">return</span> (_end ? _end-&gt;GetIdx() : 0); }
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#0cbc003be530509409cb4da56b6ae521">00210</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *GetBeginAtom()    { <span class="keywordflow">return</span>(_bgn);    }
<a name="l00211"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#3dd442dc6de8b0677b6171934045ef44">00211</a>       <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *GetBeginAtom()<span class="keyword"> const </span>
<a name="l00212"></a>00212 <span class="keyword">        </span>{ <span class="keywordflow">return</span>(_bgn);    }
<a name="l00214"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#9587fffb426597a788ccec56856dace2">00214</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *GetEndAtom()      { <span class="keywordflow">return</span>(_end);    }
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#4f21dfb90f59701689c70be0ebc727a0">00215</a>       <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *GetEndAtom()<span class="keyword"> const</span>
<a name="l00216"></a>00216 <span class="keyword">        </span>{ <span class="keywordflow">return</span>(_end);    }
<a name="l00218"></a>00218 
<a name="l00220"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#5dee8427733d71f04d66a65febdb1f77">00220</a>       <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *GetNbrAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *ptr)
<a name="l00221"></a>00221         {
<a name="l00222"></a>00222           <span class="keywordflow">return</span>((ptr != _bgn)? _bgn : _end);
<a name="l00223"></a>00223         }
<a name="l00225"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#591186a9911abecee7ad2c92ea2fc949">00225</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>  *GetParent()                 {<span class="keywordflow">return</span>(_parent);}
<a name="l00227"></a>00227 
<a name="l00228"></a>00228       <span class="keywordtype">double</span>  GetEquibLength() <span class="keyword">const</span>;
<a name="l00230"></a>00230       <span class="keywordtype">double</span>  GetLength() <span class="keyword">const</span>;
<a name="l00232"></a>00232 
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#cbe7e4ee209ebd3745f930758698d16e">00234</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>     GetNbrAtomIdx(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *ptr)
<a name="l00235"></a>00235         {
<a name="l00236"></a>00236           <span class="keywordflow">if</span> (ptr!=_bgn)
<a name="l00237"></a>00237             <span class="keywordflow">return</span> (_bgn ? _bgn-&gt;GetIdx() : 0); 
<a name="l00238"></a>00238           <span class="keywordflow">else</span>
<a name="l00239"></a>00239             <span class="keywordflow">return</span> (_end ? _end-&gt;GetIdx() : 0); 
<a name="l00240"></a>00240         }
<a name="l00242"></a>00242 
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 
<a name="l00248"></a>00248       <span class="keywordtype">bool</span> IsAromatic() <span class="keyword">const</span>;
<a name="l00250"></a>00250       <span class="keywordtype">bool</span> IsInRing() <span class="keyword">const</span>;
<a name="l00252"></a>00252 
<a name="l00257"></a>00257       <span class="keywordtype">bool</span> IsRotor();
<a name="l00259"></a>00259       <span class="keywordtype">bool</span> IsAmide();
<a name="l00261"></a>00261       <span class="keywordtype">bool</span> IsPrimaryAmide();
<a name="l00263"></a>00263       <span class="keywordtype">bool</span> IsSecondaryAmide();
<a name="l00265"></a>00265       <span class="keywordtype">bool</span> IsEster();
<a name="l00267"></a>00267       <span class="keywordtype">bool</span> IsCarbonyl();
<a name="l00269"></a>00269       <span class="keywordtype">bool</span> IsSingle();
<a name="l00271"></a>00271       <span class="keywordtype">bool</span> IsDouble();
<a name="l00273"></a>00273       <span class="keywordtype">bool</span> IsTriple();
<a name="l00275"></a>00275       <span class="keywordtype">bool</span> IsKSingle();
<a name="l00277"></a>00277       <span class="keywordtype">bool</span> IsKDouble();
<a name="l00279"></a>00279       <span class="keywordtype">bool</span> IsKTriple();
<a name="l00281"></a>00281       <span class="keywordtype">bool</span> IsClosure();
<a name="l00284"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#7987f330c955a6807afc97392fcd2fb6">00284</a>       <span class="keywordtype">bool</span> IsUp()    {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#c4cdbbcda6d5c186e790b865e968b0dd">OB_TORUP_BOND</a>));    }
<a name="l00287"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#a78f894ace4e615da8ae1a9890949450">00287</a>       <span class="keywordtype">bool</span> IsDown()  {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#e9bf2879a55d011300b288ccf3601272">OB_TORDOWN_BOND</a>));  }
<a name="l00290"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#99463bc15f9222819bc2a82d9b6f9868">00290</a>       <span class="keywordtype">bool</span> IsWedge() {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#2d110c1364c268ed4e4afc19c840b8bb">OB_WEDGE_BOND</a>));    }
<a name="l00293"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#8a87a8adad284bacfbe84156d2b80115">00293</a>       <span class="keywordtype">bool</span> IsHash()  {    <span class="keywordflow">return</span>(HasFlag(<a class="code" href="bond_8h.shtml#0af313bd59f865a0a04e684c842301c4">OB_HASH_BOND</a>));     }
<a name="l00299"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#ff0e4faffe08da5f828ecc0dae349947">00299</a>       <span class="keywordtype">bool</span> IsWedgeOrHash()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(HasFlag(WedgeOrHash)); }
<a name="l00304"></a><a class="code" href="classOpenBabel_1_1OBBond.shtml#607ab0bef97c26ad69221558e1629dd7">00304</a>       <span class="keywordtype">bool</span> IsCisOrTrans()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>(HasFlag(CisOrTrans)); }
<a name="l00305"></a>00305  
<a name="l00307"></a>00307       <span class="keywordtype">bool</span> IsDoubleBondGeometry();
<a name="l00309"></a>00309 
<a name="l00310"></a>00310     }; <span class="comment">// class OBBond</span>
<a name="l00311"></a>00311   
<a name="l00313"></a>00313 
<a name="l00315"></a><a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">00315</a>   <span class="keyword">typedef</span> std::vector&lt;OBBond*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a>;
<a name="l00316"></a>00316 
<a name="l00317"></a>00317 }<span class="comment">// namespace OpenBabel</span>
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 <span class="preprocessor">#endif   // OB_BOND_H</span>
<a name="l00320"></a>00320 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
