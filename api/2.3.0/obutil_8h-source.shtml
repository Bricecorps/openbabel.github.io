<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: obutil.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>obutil.h</h1><a href="obutil_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obutil.h - Various utility methods.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_UTIL_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_UTIL_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;iosfwd&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#if TIME_WITH_SYS_TIME</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#include &lt;sys/time.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#else</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#if HAVE_SYS_TIME_H</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span><span class="preprocessor">#include &lt;sys/time.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#else</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#endif</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="preprocessor">#ifndef M_PI</span>
<a name="l00042"></a><a class="code" href="obutil_8h.shtml#67948348285a3f0099d7eab1d0c468ef">00042</a> <span class="preprocessor"></span><span class="preprocessor">#define M_PI 3.14159265358979323846</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>
<a name="l00045"></a>00045 <span class="comment">// For backwards compatibility. Will be removed in the future</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;<a class="code" href="rand_8h.shtml">openbabel/rand.h</a>&gt;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="keyword">namespace </span>OpenBabel
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050 
<a name="l00051"></a>00051   <span class="comment">// class introduction in obutil.cpp</span>
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBStopwatch.shtml">00052</a>   <span class="keyword">class </span>OBAPI OBStopwatch
<a name="l00053"></a>00053   {
<a name="l00054"></a>00054 <span class="preprocessor">#if HAVE_CLOCK_T</span>
<a name="l00055"></a>00055 <span class="preprocessor"></span>    clock_t start; 
<a name="l00056"></a>00056     clock_t stop;  
<a name="l00057"></a>00057 <span class="preprocessor">#else</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span>    timeval start; 
<a name="l00059"></a>00059     timeval stop;  
<a name="l00060"></a>00060 <span class="preprocessor">#endif</span>
<a name="l00061"></a>00061 <span class="preprocessor"></span>
<a name="l00062"></a>00062   <span class="keyword">public</span>:
<a name="l00063"></a>00063 <span class="preprocessor">#if HAVE_CLOCK_T</span>
<a name="l00064"></a>00064 <span class="preprocessor"></span>
<a name="l00066"></a>00066     <span class="keywordtype">void</span>  Start()
<a name="l00067"></a>00067     {
<a name="l00068"></a>00068       start= clock();
<a name="l00069"></a>00069     }
<a name="l00071"></a>00071     <span class="keywordtype">double</span> Lap()
<a name="l00072"></a>00072     {
<a name="l00073"></a>00073       stop= clock();
<a name="l00074"></a>00074       <span class="keywordflow">return</span>((stop - start) / CLOCKS_PER_SEC);
<a name="l00075"></a>00075     }
<a name="l00076"></a>00076 <span class="preprocessor">#else</span>
<a name="l00078"></a><a class="code" href="classOpenBabel_1_1OBStopwatch.shtml#17703c3b1d94b6dfe141bb9d2d113359">00078</a> <span class="preprocessor">    void Start()</span>
<a name="l00079"></a>00079 <span class="preprocessor"></span>    {
<a name="l00080"></a>00080       gettimeofday(&amp;start, NULL);
<a name="l00081"></a>00081     }
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBStopwatch.shtml#9737f865d62e8e42cd7629051d5ee50c">00083</a>     <span class="keywordtype">double</span> Lap()
<a name="l00084"></a>00084     {
<a name="l00085"></a>00085       gettimeofday(&amp;stop, NULL);
<a name="l00086"></a>00086       <span class="keywordflow">return</span>((stop.tv_sec - start.tv_sec)
<a name="l00087"></a>00087              + (stop.tv_usec - start.tv_usec)/1000000.0);
<a name="l00088"></a>00088     }
<a name="l00089"></a>00089 <span class="preprocessor">#endif</span>
<a name="l00090"></a>00090 <span class="preprocessor"></span>
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBStopwatch.shtml#e75884fe6c456b6603de662f5bc266a7">00092</a>     <span class="keywordtype">double</span> Elapsed()
<a name="l00093"></a>00093     {
<a name="l00094"></a>00094       <span class="keywordflow">return</span>(Lap());
<a name="l00095"></a>00095     }
<a name="l00096"></a>00096   };
<a name="l00097"></a>00097 
<a name="l00098"></a>00098 
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml">00101</a>   <span class="keyword">class </span>OBAPI OBSqrtTbl
<a name="l00102"></a>00102   {
<a name="l00103"></a>00103     <span class="keywordtype">double</span> _max,_incr,*_tbl;
<a name="l00104"></a>00104   <span class="keyword">public</span>:
<a name="l00105"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#6c13b401e28dd990959158abd70c1825">00105</a>   OBSqrtTbl():
<a name="l00106"></a>00106     _max(0.0), _incr(0.0),  _tbl(NULL)
<a name="l00107"></a>00107       { }
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#520e1a688d9ebcc669854b70b3340701">00112</a>   OBSqrtTbl(<span class="keyword">const</span> <span class="keywordtype">double</span> max, <span class="keyword">const</span> <span class="keywordtype">double</span> incr):
<a name="l00113"></a>00113     _max(max*max), _incr(incr), _tbl(NULL)
<a name="l00114"></a>00114       {
<a name="l00115"></a>00115         Init(max,incr);
<a name="l00116"></a>00116       }
<a name="l00117"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#a422c433678f69a6a25fb55fc9502d57">00117</a>     ~OBSqrtTbl()
<a name="l00118"></a>00118       {
<a name="l00119"></a>00119         <span class="keywordflow">if</span> (_tbl)
<a name="l00120"></a>00120           {
<a name="l00121"></a>00121             <span class="keyword">delete</span> [] _tbl;
<a name="l00122"></a>00122             _tbl = NULL;
<a name="l00123"></a>00123           }
<a name="l00124"></a>00124       }
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#52aa76fdfaff6d318c486b0f1d3a2397">00127</a>     <span class="keywordtype">double</span> Sqrt(<span class="keywordtype">double</span> d2)<span class="keyword"> const</span>
<a name="l00128"></a>00128 <span class="keyword">    </span>{
<a name="l00129"></a>00129       <span class="keywordflow">if</span> (_tbl)
<a name="l00130"></a>00130         <span class="keywordflow">return</span>((d2 &lt; _max) ? _tbl[static_cast&lt;int&gt;(d2*_incr)]:sqrt(d2));
<a name="l00131"></a>00131       <span class="keywordflow">else</span>
<a name="l00132"></a>00132         <span class="keywordflow">return</span> 0.0;
<a name="l00133"></a>00133     }
<a name="l00137"></a><a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#d866c0f89c5ce89ed795d594da876521">00137</a>     <span class="keywordtype">void</span> Init(<span class="keywordtype">double</span> max,<span class="keywordtype">double</span> incr)
<a name="l00138"></a>00138     {
<a name="l00139"></a>00139       <span class="comment">// parameters are potentially unneeded, but let's do this until we can </span>
<a name="l00140"></a>00140       <span class="comment">// deprecate them</span>
<a name="l00141"></a>00141       _max = max * max;
<a name="l00142"></a>00142       _incr = incr;
<a name="l00143"></a>00143 
<a name="l00144"></a>00144       <span class="comment">//array size needs to be large enough to account for fp error</span>
<a name="l00145"></a>00145       <span class="keywordtype">int</span> i;
<a name="l00146"></a>00146       <span class="keywordtype">double</span> r;
<a name="l00147"></a>00147       _tbl = <span class="keyword">new</span> <span class="keywordtype">double</span> [static_cast&lt;int&gt;((_max/_incr)+10)];
<a name="l00148"></a>00148       <span class="keywordflow">for</span> (r = (_incr/2.0),i=0;r &lt;= _max;r += _incr,++i)
<a name="l00149"></a>00149         _tbl[i] = sqrt(r);
<a name="l00150"></a>00150 
<a name="l00151"></a>00151       _incr = 1/_incr;
<a name="l00152"></a>00152     }
<a name="l00153"></a>00153   };
<a name="l00154"></a>00154 
<a name="l00155"></a>00155   <span class="comment">//***RMS helper methods***/</span>
<a name="l00156"></a>00156 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>  OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#bc2f6b068b3ae9421777bb5e1b8f3de8">rotate_coords</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span> m[3][3],<span class="keywordtype">int</span>);
<a name="l00158"></a>00158   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#9749f8c1b334b0607159c14ebcf5cb2b">calc_rms</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
<a name="l00159"></a>00159 
<a name="l00161"></a>00161 
<a name="l00162"></a>00162   <span class="comment">// Documentation in obutil.cpp</span>
<a name="l00163"></a>00163   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#f75d6b25f25054d96d115fc2f68b574a">ToUpper</a>(std::string&amp;);
<a name="l00164"></a>00164   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#f75d6b25f25054d96d115fc2f68b574a">ToUpper</a>(<span class="keywordtype">char</span>*);
<a name="l00165"></a>00165   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#b094a3fd4f370994e606f764b073901e">ToLower</a>(std::string&amp;);
<a name="l00166"></a>00166   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#b094a3fd4f370994e606f764b073901e">ToLower</a>(<span class="keywordtype">char</span> *);
<a name="l00167"></a>00167   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#e5f67047e4b20ae5b6f165164b2576b3">InvertCase</a>(std::string&amp;, <span class="keywordtype">int</span>);
<a name="l00168"></a>00168   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#e5f67047e4b20ae5b6f165164b2576b3">InvertCase</a>(<span class="keywordtype">char</span> *);
<a name="l00170"></a>00170   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#28965e3308623f74477cc33e22bf3bf7">CleanAtomType</a>(<span class="keywordtype">char</span>*);
<a name="l00172"></a>00172 
<a name="l00175"></a>00175   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#d2567a478dadf99d922784cffc759cec">OBCompareInt</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;a,<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;b);
<a name="l00178"></a>00178   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#15039204e610657b3e6fb46aaf464089">OBCompareUnsigned</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;a,<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;b);
<a name="l00185"></a>00185   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#9f1ab2a4c5a20a79d719f1aab6371f27">IsNear</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> epsilon=2e-6);
<a name="l00192"></a>00192   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#cd75e24369b77c37e4a9de6cb0c06447">IsNearZero</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> epsilon=2e-6);
<a name="l00193"></a>00193   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#cd3d4c5cb20c899f3d9c916c6d2d09aa">IsNan</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;);
<a name="l00200"></a><a class="code" href="namespaceOpenBabel.shtml#e40947052894fb0cb29a9cd11e7051ff">00200</a>   OBAPI <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#e40947052894fb0cb29a9cd11e7051ff">IsNegligible</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp; a, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; b,
<a name="l00201"></a>00201                                  <span class="keyword">const</span> <span class="keywordtype">double</span> precision = 1e-11)
<a name="l00202"></a>00202   {
<a name="l00203"></a>00203     <span class="keywordflow">return</span>( fabs(a) &lt;= precision * fabs(b) );
<a name="l00204"></a>00204   }
<a name="l00222"></a><a class="code" href="namespaceOpenBabel.shtml#2ecc52e83dd2ad2b07c61f80e19ffd40">00222</a>   OBAPI <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#2ecc52e83dd2ad2b07c61f80e19ffd40">IsApprox</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp; a, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; b,
<a name="l00223"></a>00223                              <span class="keyword">const</span> <span class="keywordtype">double</span> precision = 1e-11)
<a name="l00224"></a>00224   {
<a name="l00225"></a>00225     <span class="keywordflow">return</span>( fabs(a - b) &lt;= precision * std::min&lt;const double&gt;( fabs(a), fabs(b) ) );
<a name="l00226"></a>00226   }
<a name="l00228"></a><a class="code" href="namespaceOpenBabel.shtml#9f2f9331fccdcc85a749523bdb41ce55">00228</a>   OBAPI <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#9f2f9331fccdcc85a749523bdb41ce55">IsApprox_pos</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;a, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;b,
<a name="l00229"></a>00229                                  <span class="keyword">const</span> <span class="keywordtype">double</span> precision = 1e-11)
<a name="l00230"></a>00230   {
<a name="l00231"></a>00231     <span class="keywordflow">return</span>( fabs(a - b) &lt;= precision * std::min&lt;const double&gt;( a, b ) );
<a name="l00232"></a>00232   }
<a name="l00236"></a>00236   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#7a5a1aae1ced09a8088700c5e146e546">CanBeSquared</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;);
<a name="l00237"></a>00237 
<a name="l00238"></a>00238   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#3e3a2d1befcb93c4e36398791d95587a">SafeOpen</a>(std::ifstream &amp;fs, <span class="keyword">const</span> <span class="keywordtype">char</span> *filename);
<a name="l00239"></a>00239   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#3e3a2d1befcb93c4e36398791d95587a">SafeOpen</a>(std::ofstream &amp;fs, <span class="keyword">const</span> <span class="keywordtype">char</span> *filename);
<a name="l00240"></a>00240 <span class="preprocessor">#endif</span>
<a name="l00241"></a>00241 <span class="preprocessor"></span>  <span class="comment">// (end part to be skipped by SWIG)</span>
<a name="l00242"></a>00242 
<a name="l00243"></a>00243   <span class="comment">//******************triple template*************************</span>
<a name="l00246"></a>00246 <span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2, <span class="keyword">class</span> T3&gt;
<a name="l00247"></a><a class="code" href="structOpenBabel_1_1triple.shtml">00247</a>     <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1triple.shtml">triple</a>
<a name="l00248"></a>00248     {
<a name="l00249"></a>00249       <span class="comment">//type names for the values</span>
<a name="l00250"></a><a class="code" href="structOpenBabel_1_1triple.shtml#df5ae6b9ecd7d0ea820739bea28ad05e">00250</a>       <span class="keyword">typedef</span> T1 <a class="code" href="classOpenBabel_1_1OBAtom.shtml">first_type</a>;
<a name="l00251"></a><a class="code" href="structOpenBabel_1_1triple.shtml#b5c1f1a4e44903c7aa4606b1bcec964d">00251</a>       <span class="keyword">typedef</span> T2 <a class="code" href="classOpenBabel_1_1OBAtom.shtml">second_type</a>;
<a name="l00252"></a><a class="code" href="structOpenBabel_1_1triple.shtml#6faf5d6f0dbfa6e274f0204ee9d1e2e7">00252</a>       <span class="keyword">typedef</span> T3 <a class="code" href="structOpenBabel_1_1triple.shtml#6faf5d6f0dbfa6e274f0204ee9d1e2e7">third_type</a>;
<a name="l00253"></a>00253 
<a name="l00254"></a>00254       <span class="comment">//member</span>
<a name="l00255"></a><a class="code" href="structOpenBabel_1_1triple.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">00255</a>       T1 <a class="code" href="structOpenBabel_1_1triple.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">first</a>;
<a name="l00256"></a><a class="code" href="structOpenBabel_1_1triple.shtml#1820792408938163c64eb0900bee45cd">00256</a>       T2 <a class="code" href="structOpenBabel_1_1triple.shtml#1820792408938163c64eb0900bee45cd">second</a>;
<a name="l00257"></a><a class="code" href="structOpenBabel_1_1triple.shtml#6ab41332010557f229b5471f199c00db">00257</a>       T3 <a class="code" href="structOpenBabel_1_1triple.shtml#6ab41332010557f229b5471f199c00db">third</a>;
<a name="l00258"></a>00258   
<a name="l00262"></a><a class="code" href="structOpenBabel_1_1triple.shtml#bdbb49f73e95b572c4f4b920dbdf32a0">00262</a>     <a class="code" href="structOpenBabel_1_1triple.shtml#bdbb49f73e95b572c4f4b920dbdf32a0">triple</a>():
<a name="l00263"></a>00263       <a class="code" href="structOpenBabel_1_1triple.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">first</a>(T1()),<a class="code" href="structOpenBabel_1_1triple.shtml#1820792408938163c64eb0900bee45cd">second</a>(T2()),<a class="code" href="structOpenBabel_1_1triple.shtml#6ab41332010557f229b5471f199c00db">third</a>(T3())
<a name="l00264"></a>00264       {}
<a name="l00265"></a>00265 
<a name="l00267"></a><a class="code" href="structOpenBabel_1_1triple.shtml#939f87dad83fb9bada1bbc87fef2337f">00267</a>     <a class="code" href="structOpenBabel_1_1triple.shtml#bdbb49f73e95b572c4f4b920dbdf32a0">triple</a>(<span class="keyword">const</span> T1 &amp;a, <span class="keyword">const</span> T2 &amp;b, <span class="keyword">const</span> T3 &amp;c):
<a name="l00268"></a>00268       <a class="code" href="structOpenBabel_1_1triple.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">first</a>(a), <a class="code" href="structOpenBabel_1_1triple.shtml#1820792408938163c64eb0900bee45cd">second</a>(b), <a class="code" href="structOpenBabel_1_1triple.shtml#6ab41332010557f229b5471f199c00db">third</a>(c)
<a name="l00269"></a>00269       {}
<a name="l00270"></a>00270 
<a name="l00272"></a>00272       <span class="keyword">template</span>&lt;<span class="keyword">class</span> U, <span class="keyword">class</span> V, <span class="keyword">class</span> W&gt;
<a name="l00273"></a><a class="code" href="structOpenBabel_1_1triple.shtml#c74579230a8101fbaa810eb0ab7240a8">00273</a>         <a class="code" href="structOpenBabel_1_1triple.shtml#bdbb49f73e95b572c4f4b920dbdf32a0">triple</a>(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1triple.shtml">triple&lt;U,V,W&gt;</a> &amp;t):
<a name="l00274"></a>00274         <a class="code" href="structOpenBabel_1_1triple.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">first</a>(t.<a class="code" href="structOpenBabel_1_1triple.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">first</a>), <a class="code" href="structOpenBabel_1_1triple.shtml#1820792408938163c64eb0900bee45cd">second</a>(t.<a class="code" href="structOpenBabel_1_1triple.shtml#1820792408938163c64eb0900bee45cd">second</a>), <a class="code" href="structOpenBabel_1_1triple.shtml#6ab41332010557f229b5471f199c00db">third</a>(t.<a class="code" href="structOpenBabel_1_1triple.shtml#6ab41332010557f229b5471f199c00db">third</a>)
<a name="l00275"></a>00275       {}
<a name="l00276"></a>00276 
<a name="l00277"></a>00277     };
<a name="l00278"></a>00278 
<a name="l00279"></a>00279   <span class="comment">//**************quad template********************</span>
<a name="l00282"></a>00282 <span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2, <span class="keyword">class</span> T3, <span class="keyword">class</span> T4&gt;
<a name="l00283"></a><a class="code" href="structOpenBabel_1_1quad.shtml">00283</a>     <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1quad.shtml">quad</a>
<a name="l00284"></a>00284     {
<a name="l00285"></a>00285       <span class="comment">//type names for the values</span>
<a name="l00286"></a><a class="code" href="structOpenBabel_1_1quad.shtml#df5ae6b9ecd7d0ea820739bea28ad05e">00286</a>       <span class="keyword">typedef</span> T1 <a class="code" href="structOpenBabel_1_1quad.shtml#df5ae6b9ecd7d0ea820739bea28ad05e">first_type</a>;
<a name="l00287"></a><a class="code" href="structOpenBabel_1_1quad.shtml#b5c1f1a4e44903c7aa4606b1bcec964d">00287</a>       <span class="keyword">typedef</span> T2 <a class="code" href="structOpenBabel_1_1quad.shtml#b5c1f1a4e44903c7aa4606b1bcec964d">second_type</a>;
<a name="l00288"></a><a class="code" href="structOpenBabel_1_1quad.shtml#6faf5d6f0dbfa6e274f0204ee9d1e2e7">00288</a>       <span class="keyword">typedef</span> T3 <a class="code" href="structOpenBabel_1_1quad.shtml#6faf5d6f0dbfa6e274f0204ee9d1e2e7">third_type</a>;
<a name="l00289"></a><a class="code" href="structOpenBabel_1_1quad.shtml#4a21744eb59bb329fe53c3d3e3363bf3">00289</a>       <span class="keyword">typedef</span> T4 <a class="code" href="structOpenBabel_1_1quad.shtml#4a21744eb59bb329fe53c3d3e3363bf3">fourth_type</a>;
<a name="l00290"></a>00290 
<a name="l00291"></a>00291       <span class="comment">//member</span>
<a name="l00292"></a><a class="code" href="structOpenBabel_1_1quad.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">00292</a>       T1 <a class="code" href="structOpenBabel_1_1quad.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">first</a>;
<a name="l00293"></a><a class="code" href="structOpenBabel_1_1quad.shtml#1820792408938163c64eb0900bee45cd">00293</a>       T2 <a class="code" href="structOpenBabel_1_1quad.shtml#1820792408938163c64eb0900bee45cd">second</a>;
<a name="l00294"></a><a class="code" href="structOpenBabel_1_1quad.shtml#6ab41332010557f229b5471f199c00db">00294</a>       T3 <a class="code" href="structOpenBabel_1_1quad.shtml#6ab41332010557f229b5471f199c00db">third</a>;
<a name="l00295"></a><a class="code" href="structOpenBabel_1_1quad.shtml#39203595b531cae3fcb8d794a5ac202d">00295</a>       T4 <a class="code" href="structOpenBabel_1_1quad.shtml#39203595b531cae3fcb8d794a5ac202d">fourth</a>;
<a name="l00296"></a>00296 
<a name="l00300"></a><a class="code" href="structOpenBabel_1_1quad.shtml#c2098ccc08f7fdb19716085bc4a63fd4">00300</a>     <a class="code" href="structOpenBabel_1_1quad.shtml#c2098ccc08f7fdb19716085bc4a63fd4">quad</a>():
<a name="l00301"></a>00301       <a class="code" href="structOpenBabel_1_1quad.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">first</a>(T1()),<a class="code" href="structOpenBabel_1_1quad.shtml#1820792408938163c64eb0900bee45cd">second</a>(T2()),<a class="code" href="structOpenBabel_1_1quad.shtml#6ab41332010557f229b5471f199c00db">third</a>(T3()),<a class="code" href="structOpenBabel_1_1quad.shtml#39203595b531cae3fcb8d794a5ac202d">fourth</a>(T4())
<a name="l00302"></a>00302       {}
<a name="l00303"></a>00303 
<a name="l00305"></a><a class="code" href="structOpenBabel_1_1quad.shtml#ce60964ccdfd947832f8ac74e71f6749">00305</a>     <a class="code" href="structOpenBabel_1_1quad.shtml#c2098ccc08f7fdb19716085bc4a63fd4">quad</a>(<span class="keyword">const</span> T1 &amp;a, <span class="keyword">const</span> T2 &amp;b, <span class="keyword">const</span> T3 &amp;c, <span class="keyword">const</span> T4 &amp;d):
<a name="l00306"></a>00306       <a class="code" href="structOpenBabel_1_1quad.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">first</a>(a), <a class="code" href="structOpenBabel_1_1quad.shtml#1820792408938163c64eb0900bee45cd">second</a>(b), <a class="code" href="structOpenBabel_1_1quad.shtml#6ab41332010557f229b5471f199c00db">third</a>(c), <a class="code" href="structOpenBabel_1_1quad.shtml#39203595b531cae3fcb8d794a5ac202d">fourth</a>(d)
<a name="l00307"></a>00307       {}
<a name="l00308"></a>00308 
<a name="l00310"></a>00310       <span class="keyword">template</span>&lt;<span class="keyword">class</span> U, <span class="keyword">class</span> V, <span class="keyword">class</span> W, <span class="keyword">class</span> X&gt;
<a name="l00311"></a><a class="code" href="structOpenBabel_1_1quad.shtml#7ef246766ef59e763b21b026030228af">00311</a>         <a class="code" href="structOpenBabel_1_1quad.shtml#c2098ccc08f7fdb19716085bc4a63fd4">quad</a>(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1quad.shtml">quad&lt;U,V,W,X&gt;</a> &amp;q):
<a name="l00312"></a>00312         <a class="code" href="structOpenBabel_1_1quad.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">first</a>(q.<a class="code" href="structOpenBabel_1_1quad.shtml#d5b34c3c5f1c3fd8afab3681bea1358d">first</a>), <a class="code" href="structOpenBabel_1_1quad.shtml#1820792408938163c64eb0900bee45cd">second</a>(q.<a class="code" href="structOpenBabel_1_1quad.shtml#1820792408938163c64eb0900bee45cd">second</a>), <a class="code" href="structOpenBabel_1_1quad.shtml#6ab41332010557f229b5471f199c00db">third</a>(q.<a class="code" href="structOpenBabel_1_1quad.shtml#6ab41332010557f229b5471f199c00db">third</a>), <a class="code" href="structOpenBabel_1_1quad.shtml#39203595b531cae3fcb8d794a5ac202d">fourth</a>(q.<a class="code" href="structOpenBabel_1_1quad.shtml#39203595b531cae3fcb8d794a5ac202d">fourth</a>)
<a name="l00313"></a>00313       {}
<a name="l00314"></a>00314 
<a name="l00315"></a>00315     };
<a name="l00316"></a>00316 
<a name="l00317"></a>00317 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00318"></a>00318 
<a name="l00319"></a>00319 <span class="preprocessor">#endif // OBUTIL_H</span>
<a name="l00320"></a>00320 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
