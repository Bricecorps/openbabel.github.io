<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: pluginiter.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.5.2 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li class="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
  </ul>
</div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul>
</div>
<h1>pluginiter.h</h1><a href="pluginiter_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">pluginiter.h - facilitates construction of plugin classes</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2006 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_PLUGINITER_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_PLUGINITER_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="keyword">namespace </span>OpenBabel
<a name="l00025"></a>00025 {
<a name="l00026"></a>00026 
<a name="l00030"></a>00030 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00031"></a><a class="code" href="classOpenBabel_1_1PluginIter.shtml">00031</a> <span class="keyword">class </span>OBAPI PluginIter
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033 <span class="keyword">private</span>:
<a name="l00034"></a>00034   <span class="keyword">typedef</span> std::map&lt;const std::string, T*&gt; Maptype;
<a name="l00035"></a>00035   Maptype _map;
<a name="l00036"></a>00036   <span class="keyword">typename</span> Maptype::iterator _itr;
<a name="l00037"></a>00037   <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#385c44f6fb256e5716a2302a5b94038821f40778b7db9343a6ca75ec2c41ccce">T</a>* _default;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="keyword">public</span>:
<a name="l00043"></a><a class="code" href="classOpenBabel_1_1PluginIter.shtml#59e8c96382cd3f9504f222579df2c513">00043</a>   <span class="keywordtype">void</span> Register(<a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#385c44f6fb256e5716a2302a5b94038821f40778b7db9343a6ca75ec2c41ccce">T</a>* pType, <span class="keyword">const</span> std::string ID, <span class="keywordtype">bool</span> IsDefault)
<a name="l00044"></a>00044   {
<a name="l00045"></a>00045     _map[ID] = pType;
<a name="l00046"></a>00046     <span class="keywordflow">if</span>(IsDefault || _map.empty())
<a name="l00047"></a>00047       _default=pType;
<a name="l00048"></a>00048   }
<a name="l00049"></a>00049 
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1PluginIter.shtml#a134edc111ceb41bb59b2e5a5d89a389">00052</a>   <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#385c44f6fb256e5716a2302a5b94038821f40778b7db9343a6ca75ec2c41ccce">T</a>* FindType(<span class="keyword">const</span> std::string&amp; ID)
<a name="l00053"></a>00053   {
<a name="l00054"></a>00054     <span class="keywordflow">if</span>(ID.empty())
<a name="l00055"></a>00055       <span class="keywordflow">return</span> _default;
<a name="l00056"></a>00056     _itr = _map.find(ID);
<a name="l00057"></a>00057     <span class="keywordflow">if</span>(_itr==_map.end())
<a name="l00058"></a>00058       <span class="keywordflow">return</span> NULL;
<a name="l00059"></a>00059     <span class="keywordflow">else</span>
<a name="l00060"></a>00060       <span class="keywordflow">return</span> _itr-&gt;second;
<a name="l00061"></a>00061   }
<a name="l00062"></a>00062 
<a name="l00064"></a><a class="code" href="classOpenBabel_1_1PluginIter.shtml#13482abcd6e8c7fb44f554827d83ff98">00064</a>   <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#385c44f6fb256e5716a2302a5b94038821f40778b7db9343a6ca75ec2c41ccce">T</a>* FindDefaultType()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _default; }
<a name="l00065"></a>00065 
<a name="l00067"></a><a class="code" href="classOpenBabel_1_1PluginIter.shtml#616e5ec5383953189628ddf0dd018453">00067</a>   std::string ID()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _itr-&gt;first; }
<a name="l00068"></a>00068   
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 <span class="comment">//The following function and operator* cause an linking error with SWIG,</span>
<a name="l00071"></a>00071 <span class="comment">//perhaps because they are not used in the C++ code and, being templated,</span>
<a name="l00072"></a>00072 <span class="comment">//are consequently not generated by the compiler. Temporarily they have been</span>
<a name="l00073"></a>00073 <span class="comment">//commented out.</span>
<a name="l00074"></a>00074 
<a name="l00076"></a>00076 <span class="comment">//  std::string Description() const { return _itr-&gt;second-&gt;Description(); }</span>
<a name="l00077"></a>00077 
<a name="l00079"></a>00079 
<a name="l00080"></a>00080 
<a name="l00082"></a><a class="code" href="classOpenBabel_1_1PluginIter.shtml#a0a167fcdf5ecca5a00c497cd68cc35a">00082</a>   <span class="keywordtype">void</span> ToStart() { _itr = _map.begin(); }
<a name="l00083"></a>00083   
<a name="l00086"></a><a class="code" href="classOpenBabel_1_1PluginIter.shtml#cb6505d5b92d6b4a023ff7e7173cd7b9">00086</a>   PluginIter&amp; operator++()
<a name="l00087"></a>00087   {
<a name="l00088"></a>00088     ++_itr;
<a name="l00089"></a>00089     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00090"></a>00090   }
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1PluginIter.shtml#67b76affb3b5d35fa419ac234144038b">00092</a>   operator bool()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _itr != _map.end(); }
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1PluginIter.shtml#5c1735ebb61cb9b40f6d0ed30be8a288">00094</a>   <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#385c44f6fb256e5716a2302a5b94038821f40778b7db9343a6ca75ec2c41ccce">T</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _itr-&gt;second;  }
<a name="l00096"></a>00096 <span class="comment">//  T&amp; operator*() const    { return *(_itr-&gt;second); }</span>
<a name="l00098"></a>00098 <span class="comment"></span>};
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 <span class="comment">//Macro to iterate over all sub-types</span>
<a name="l00101"></a><a class="code" href="pluginiter_8h.shtml#e6da8d8a99e4b8364e0e951f01a87db0">00101</a> <span class="preprocessor">#define FOR_EACH(plugintype, f)  for(PluginIter&lt;plugintype&gt;&amp; f=plugintype::Iter(); f; ++f )</span>
<a name="l00102"></a>00102 <span class="preprocessor"></span>
<a name="l00103"></a>00103 <span class="comment">//Macro to be added to definition of the base class</span>
<a name="l00104"></a><a class="code" href="pluginiter_8h.shtml#dd740e2a386b7db3e1f0e271cbe8a3f1">00104</a> <span class="preprocessor">#define MAKE_PLUGIN(BaseClass)\</span>
<a name="l00105"></a>00105 <span class="preprocessor">public:\</span>
<a name="l00106"></a>00106 <span class="preprocessor">BaseClass(std::string ID, bool IsDefault=false)\</span>
<a name="l00107"></a>00107 <span class="preprocessor">{Iter().Register(this, ID, IsDefault);}\</span>
<a name="l00108"></a>00108 <span class="preprocessor">static PluginIter&lt;BaseClass&gt;&amp; Iter()\</span>
<a name="l00109"></a>00109 <span class="preprocessor">{static PluginIter&lt;BaseClass&gt;* p = NULL;\</span>
<a name="l00110"></a>00110 <span class="preprocessor">if(!p) p = new PluginIter&lt;BaseClass&gt;;\</span>
<a name="l00111"></a>00111 <span class="preprocessor">p-&gt;ToStart();\</span>
<a name="l00112"></a>00112 <span class="preprocessor">return *p;}\</span>
<a name="l00113"></a>00113 <span class="preprocessor">static BaseClass* FindDefaultType(){ return Iter().FindDefaultType();}\</span>
<a name="l00114"></a>00114 <span class="preprocessor">  static BaseClass* FindType(const std::string&amp; ID){ return Iter().FindType(ID);}</span>
<a name="l00115"></a>00115 <span class="preprocessor"></span>
<a name="l00116"></a>00116 } <span class="comment">//namespace</span>
<a name="l00117"></a>00117 <span class="preprocessor">#endif //OB_PLUGINITER_H</span>
<a name="l00118"></a>00118 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.sourceforge.net/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.sourceforge.net/wiki/">Open Babel</a>, version 2.1.0.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.sourceforge.net/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Sat Apr 7 10:32:11 2007 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.2.
</div>

</body>
</html>
