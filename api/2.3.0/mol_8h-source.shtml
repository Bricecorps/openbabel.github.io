<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: mol.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>mol.h</h1><a href="mol_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">mol.h - Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue.</span>
<a name="l00003"></a>00003 <span class="comment">        (the main header for Open Babel)</span>
<a name="l00004"></a>00004 <span class="comment"> </span>
<a name="l00005"></a>00005 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00006"></a>00006 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00007"></a>00007 <span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00010"></a>00010 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00011"></a>00011 <span class="comment"> </span>
<a name="l00012"></a>00012 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00013"></a>00013 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00014"></a>00014 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00015"></a>00015 <span class="comment"> </span>
<a name="l00016"></a>00016 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00017"></a>00017 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00018"></a>00018 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00019"></a>00019 <span class="comment">GNU General Public License for more details.</span>
<a name="l00020"></a>00020 <span class="comment">***********************************************************************/</span>
<a name="l00021"></a>00021 
<a name="l00022"></a>00022 <span class="preprocessor">#ifndef OB_MOL_H</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span><span class="preprocessor">#define OB_MOL_H</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef EXTERN</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#  define EXTERN extern</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00030"></a>00030 <span class="preprocessor"></span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;math.h&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;float.h&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="comment">// Currently includes many headers for 2.x backwards compatibility</span>
<a name="l00039"></a>00039 <span class="comment">// \deprecated -- this will be cleaned up in 3.0 efforts </span>
<a name="l00040"></a>00040 <span class="comment">//      to improve compile time significantly. </span>
<a name="l00041"></a>00041 <span class="comment">// Only include necessary headers and class declaration stubs.</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;<a class="code" href="atom_8h.shtml">openbabel/atom.h</a>&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;<a class="code" href="bond_8h.shtml">openbabel/bond.h</a>&gt;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &lt;<a class="code" href="data_8h.shtml">openbabel/data.h</a>&gt;</span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &lt;<a class="code" href="chains_8h.shtml">openbabel/chains.h</a>&gt;</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &lt;<a class="code" href="vector3_8h.shtml">openbabel/math/vector3.h</a>&gt;</span>
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml">openbabel/bitvec.h</a>&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;<a class="code" href="residue_8h.shtml">openbabel/residue.h</a>&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;<a class="code" href="ring_8h.shtml">openbabel/ring.h</a>&gt;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;<a class="code" href="generic_8h.shtml">openbabel/generic.h</a>&gt;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &lt;<a class="code" href="typer_8h.shtml">openbabel/typer.h</a>&gt;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &lt;<a class="code" href="oberror_8h.shtml">openbabel/oberror.h</a>&gt;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &lt;<a class="code" href="obiter_8h.shtml">openbabel/obiter.h</a>&gt;</span>
<a name="l00055"></a>00055 <span class="preprocessor">#include &lt;<a class="code" href="internalcoord_8h.shtml">openbabel/internalcoord.h</a>&gt;</span>
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="keyword">namespace </span>OpenBabel
<a name="l00058"></a>00058 {
<a name="l00059"></a>00059 
<a name="l00060"></a>00060   <span class="keyword">class </span>OBAtom;
<a name="l00061"></a>00061   <span class="keyword">class </span>OBBond;
<a name="l00062"></a>00062   <span class="keyword">class </span>OBInternalCoord;
<a name="l00063"></a>00063   <span class="keyword">class </span>OBConversion; <span class="comment">//used only as a pointer</span>
<a name="l00064"></a>00064 
<a name="l00065"></a>00065   <span class="comment">// Class OBMol</span>
<a name="l00066"></a>00066   <span class="comment">//MOL Property Macros (flags) -- 32+ bits</span>
<a name="l00068"></a><a class="code" href="mol_8h.shtml#ab6750e3cc64dc00304abe7c44173c88">00068</a> <span class="comment"></span><span class="preprocessor">#define OB_SSSR_MOL              (1&lt;&lt;1)</span>
<a name="l00070"></a><a class="code" href="mol_8h.shtml#4a977b9b908042757ae037209e9e3340">00070</a> <span class="preprocessor">#define OB_RINGFLAGS_MOL         (1&lt;&lt;2)</span>
<a name="l00072"></a><a class="code" href="mol_8h.shtml#e8bd693c4ca36c72bfd0b22bf98d3ee5">00072</a> <span class="preprocessor">#define OB_AROMATIC_MOL          (1&lt;&lt;3)</span>
<a name="l00074"></a><a class="code" href="mol_8h.shtml#d74722e7bf17bfc2bfecac6ffcd8cc27">00074</a> <span class="preprocessor">#define OB_ATOMTYPES_MOL         (1&lt;&lt;4)</span>
<a name="l00076"></a><a class="code" href="mol_8h.shtml#3bf922342dcaa8c7d7bea59225240e14">00076</a> <span class="preprocessor">#define OB_CHIRALITY_MOL         (1&lt;&lt;5)</span>
<a name="l00078"></a><a class="code" href="mol_8h.shtml#5ee8413cb4c11d400cf09469c2c90ce5">00078</a> <span class="preprocessor">#define OB_PCHARGE_MOL           (1&lt;&lt;6)</span>
<a name="l00080"></a><a class="code" href="mol_8h.shtml#8cd0a6811e5fd9b5b3dd84a0b9f8852a">00080</a> <span class="preprocessor">#define OB_HYBRID_MOL            (1&lt;&lt;8)</span>
<a name="l00082"></a><a class="code" href="mol_8h.shtml#59eb520e0d3f7ed0722e8d7adce90eb7">00082</a> <span class="preprocessor">#define OB_IMPVAL_MOL            (1&lt;&lt;9)</span>
<a name="l00084"></a><a class="code" href="mol_8h.shtml#3a3a6250bca7e7a23584f75c43694fd7">00084</a> <span class="preprocessor">#define OB_KEKULE_MOL            (1&lt;&lt;10)</span>
<a name="l00086"></a><a class="code" href="mol_8h.shtml#10ac40766f3a5e65d99b8b667f54631e">00086</a> <span class="preprocessor">#define OB_CLOSURE_MOL           (1&lt;&lt;11)</span>
<a name="l00088"></a><a class="code" href="mol_8h.shtml#f5cefdad541a0b0d90e086b668bfc836">00088</a> <span class="preprocessor">#define OB_H_ADDED_MOL           (1&lt;&lt;12)</span>
<a name="l00090"></a><a class="code" href="mol_8h.shtml#2ce63b25c7f9529e54a39c4ddd3b261d">00090</a> <span class="preprocessor">#define OB_PH_CORRECTED_MOL      (1&lt;&lt;13)</span>
<a name="l00092"></a><a class="code" href="mol_8h.shtml#7db78b11be0bc0023626e7f068c7607a">00092</a> <span class="preprocessor">#define OB_AROM_CORRECTED_MOL    (1&lt;&lt;14)</span>
<a name="l00094"></a><a class="code" href="mol_8h.shtml#895ac4494f81f3c6fb827878773378f0">00094</a> <span class="preprocessor">#define OB_CHAINS_MOL            (1&lt;&lt;15)</span>
<a name="l00096"></a><a class="code" href="mol_8h.shtml#e93feaf961665778dde1c422668e53a2">00096</a> <span class="preprocessor">#define OB_TCHARGE_MOL                 (1&lt;&lt;16)</span>
<a name="l00098"></a><a class="code" href="mol_8h.shtml#934dc8c97c1a305e28a2371a9e6cb132">00098</a> <span class="preprocessor">#define OB_TSPIN_MOL             (1&lt;&lt;17)</span>
<a name="l00100"></a><a class="code" href="mol_8h.shtml#536ad7a9990f9fac477e9555831a907e">00100</a> <span class="preprocessor">#define OB_RINGTYPES_MOL         (1&lt;&lt;18)</span>
<a name="l00102"></a><a class="code" href="mol_8h.shtml#0cb96f287cad4a3a9f0e432767a5bc30">00102</a> <span class="preprocessor">#define OB_PATTERN_STRUCTURE     (1&lt;&lt;19)</span>
<a name="l00103"></a>00103 <span class="preprocessor"></span>  <span class="comment">// flags 19-32 unspecified</span>
<a name="l00104"></a><a class="code" href="mol_8h.shtml#2dc6ee7697eeda0cde37405629e6d90d">00104</a> <span class="preprocessor">#define OB_CURRENT_CONFORMER     -1</span>
<a name="l00105"></a>00105 <span class="preprocessor"></span>
<a name="l00106"></a>00106   <span class="comment">// class introduction in mol.cpp</span>
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml">00107</a>  <span class="keyword">class </span>OBAPI OBMol: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>
<a name="l00108"></a>00108   {
<a name="l00109"></a>00109   <span class="keyword">protected</span>:
<a name="l00110"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a2c4bbad74c75b049e689fb118f52034">00110</a>     <span class="keywordtype">int</span>                           _flags;       
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#36baafd69d9d5eb6f5475cef50e9597f">00111</a>     <span class="keywordtype">bool</span>                          _autoPartialCharge;
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7549d13932451e390b8f5e326479b6ca">00112</a>     <span class="keywordtype">bool</span>                          _autoFormalCharge;
<a name="l00113"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#36e5dd5347737d8b9c7ca97ce70e31f4">00113</a>     std::string                   _title;       
<a name="l00114"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#9b6bbb84faa017038d5917b1085b9728">00114</a>     std::vector&lt;OBAtom*&gt;          _vatom;       
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#4fd53614c20c28192ac445b39fb2112b">00115</a>     std::vector&lt;OBAtom*&gt;          _atomIds;     
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#595db55da6c1ece37bc3208d8a8ea004">00116</a>     std::vector&lt;OBBond*&gt;          _vbond;       
<a name="l00117"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#9931095fac19ddd28216961006c3e1ed">00117</a>     std::vector&lt;OBBond*&gt;          _bondIds;     
<a name="l00118"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#73732d19474a857fe519822902f819a2">00118</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            _dimension;   
<a name="l00119"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#e7cea01bb9dd562535310df25fbc8999">00119</a>     <span class="keywordtype">int</span>                           _totalCharge; 
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#1870ed9f2b0a32b62f152c71e84da648">00120</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _totalSpin;   
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#639c3078be983f6453452e8f19cd1919">00121</a>     <span class="keywordtype">double</span>                        *_c;          
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f079dd8cc47bcbcc8466eb897b277233">00122</a>     std::vector&lt;double*&gt;          _vconf;       
<a name="l00123"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#d158ac9712bf78e48121bedda6b845d7">00123</a>     <span class="keywordtype">double</span>                        _energy;      
<a name="l00124"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#5838686512311a384a89ab4323653517">00124</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _natoms;      
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7c2812c42f2ab5430ab3b3f079573b6c">00125</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  _nbonds;      
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#10918a3481b2f062dba876508cc16fbc">00126</a>     std::vector&lt;OBResidue*&gt;       _residue;     
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#0bfd0f62a5fd61b516f55d6037add8fa">00127</a>     std::vector&lt;OBInternalCoord*&gt; _internals;   
<a name="l00128"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#fabb1b108c9b3218b2bb2bc12c4a07b9">00128</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            _mod;         
<a name="l00129"></a>00129 
<a name="l00130"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#944bef92a47e48ea43a258a87578d820">00130</a>     <span class="keywordtype">bool</span>  HasFlag(<span class="keywordtype">int</span> flag)    { <span class="keywordflow">return</span>((_flags &amp; flag) ? <span class="keyword">true</span> : <span class="keyword">false</span>); }
<a name="l00131"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#063912ea063eb9a89e1d8012726af989">00131</a>     <span class="keywordtype">void</span>  SetFlag(<span class="keywordtype">int</span> flag)    { _flags |= flag; }
<a name="l00132"></a>00132 
<a name="l00134"></a>00134 
<a name="l00135"></a>00135     <span class="keywordtype">void</span> start_kekulize(std::vector &lt;OBAtom*&gt; &amp;cycle, std::vector&lt;int&gt; &amp;electron);
<a name="l00136"></a>00136     <span class="keywordtype">bool</span> expand_kekulize(<span class="keywordtype">int</span> bond_idx, std::vector&lt;int&gt; &amp;atomState, std::vector&lt;int&gt; &amp;bondState);
<a name="l00137"></a>00137     <span class="keywordtype">bool</span> has_no_leftover_electrons(std::vector&lt;int&gt; &amp;atomState);
<a name="l00138"></a>00138     <span class="keywordtype">int</span> getorden(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom);
<a name="l00139"></a>00139     <span class="keywordtype">bool</span> expandcycle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;avisit, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *first = NULL, <span class="keywordtype">int</span> depth = 0);
<a name="l00141"></a>00141 
<a name="l00142"></a>00142   <span class="keyword">public</span>:
<a name="l00143"></a>00143 
<a name="l00145"></a>00145 
<a name="l00146"></a>00146 
<a name="l00147"></a>00147     OBMol();
<a name="l00149"></a>00149     OBMol(<span class="keyword">const</span> OBMol &amp;);
<a name="l00151"></a>00151     <span class="keyword">virtual</span> ~OBMol();
<a name="l00153"></a>00153     OBMol &amp;operator=(<span class="keyword">const</span> OBMol &amp;mol);      
<a name="l00155"></a>00155     OBMol &amp;operator+=(<span class="keyword">const</span> OBMol &amp;mol);
<a name="l00156"></a>00156 
<a name="l00159"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#8ddb506839676da29384805dda0938f9">00159</a>     <span class="keywordtype">void</span> ReserveAtoms(<span class="keywordtype">int</span> natoms)
<a name="l00160"></a>00160     {
<a name="l00161"></a>00161       <span class="keywordflow">if</span> (natoms &gt; 0 &amp;&amp; _mod) {
<a name="l00162"></a>00162         _vatom.reserve(natoms);
<a name="l00163"></a>00163         _atomIds.reserve(natoms);
<a name="l00164"></a>00164       }
<a name="l00165"></a>00165     }
<a name="l00166"></a>00166     
<a name="l00169"></a>00169     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *<a class="code" href="namespaceOpenBabel.shtml#ef620992851373bda99f8ca6914d549e">CreateAtom</a>(<span class="keywordtype">void</span>);
<a name="l00172"></a>00172     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *<a class="code" href="namespaceOpenBabel.shtml#1f6fada74993954995f913520a58541d">CreateBond</a>(<span class="keywordtype">void</span>);
<a name="l00175"></a>00175     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *CreateResidue(<span class="keywordtype">void</span>);
<a name="l00178"></a>00178     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*);
<a name="l00181"></a>00181     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*);
<a name="l00184"></a>00184     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>*);
<a name="l00185"></a>00185 
<a name="l00188"></a>00188     <span class="keywordtype">bool</span> AddAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp;);
<a name="l00191"></a>00191     <span class="keywordtype">bool</span> InsertAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;);
<a name="l00199"></a>00199     <span class="keywordtype">bool</span> AddBond(<span class="keywordtype">int</span> beginIdx, <span class="keywordtype">int</span> endIdx, <span class="keywordtype">int</span> order, 
<a name="l00200"></a>00200                  <span class="keywordtype">int</span> flags=0,<span class="keywordtype">int</span> insertpos=-1);
<a name="l00203"></a>00203     <span class="keywordtype">bool</span> AddBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&amp;);
<a name="l00206"></a>00206     <span class="keywordtype">bool</span> AddResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>&amp;);
<a name="l00207"></a>00207 
<a name="l00211"></a>00211     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>    *NewAtom();
<a name="l00215"></a>00215     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>    *NewAtom(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>);
<a name="l00219"></a>00219     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>    *NewBond();
<a name="l00223"></a>00223     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>    *NewBond(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>);
<a name="l00225"></a>00225     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *NewResidue();
<a name="l00230"></a>00230     <span class="keywordtype">bool</span> DeleteAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*, <span class="keywordtype">bool</span> destroyAtom = <span class="keyword">true</span>);
<a name="l00233"></a>00233     <span class="keywordtype">bool</span> DeleteBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*, <span class="keywordtype">bool</span> destroyBond = <span class="keyword">true</span>);
<a name="l00236"></a>00236     <span class="keywordtype">bool</span> DeleteResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>*, <span class="keywordtype">bool</span> destroyResidue = <span class="keyword">true</span>);
<a name="l00238"></a>00238 
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 
<a name="l00244"></a>00244     <span class="keyword">virtual</span> <span class="keywordtype">void</span> BeginModify(<span class="keywordtype">void</span>);
<a name="l00248"></a>00248     <span class="keyword">virtual</span> <span class="keywordtype">void</span> EndModify(<span class="keywordtype">bool</span> nukePerceivedData=<span class="keyword">true</span>);
<a name="l00250"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#9eeb9f90c03e8b8ddcf9a8709d7c70e9">00250</a>     <span class="keywordtype">int</span> GetMod()           {      <span class="keywordflow">return</span>(_mod);    }
<a name="l00253"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#15f1b0a201947a607958760bcd0efec2">00253</a>     <span class="keywordtype">void</span> IncrementMod()    {      _mod++;          }
<a name="l00256"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#553db349ede18353a0782527cc651ef2">00256</a>     <span class="keywordtype">void</span> DecrementMod()    {      _mod--;          }
<a name="l00258"></a>00258 
<a name="l00260"></a>00260 
<a name="l00261"></a>00261 
<a name="l00262"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#69c3270d23157db3d1c0347e359cf085">00262</a>     <span class="keywordtype">int</span>          GetFlags()               { <span class="keywordflow">return</span>(_flags); }
<a name="l00265"></a>00265     <span class="keyword">const</span> <span class="keywordtype">char</span>  *GetTitle(<span class="keywordtype">bool</span> replaceNewlines = <span class="keyword">true</span>) <span class="keyword">const</span>;
<a name="l00267"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#b0959888c92257aedf7f05580193ff30">00267</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumAtoms()<span class="keyword"> const         </span>{  <span class="keywordflow">return</span>(_natoms); }
<a name="l00269"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#489459e39cf9b0d9e706a183b1b4445b">00269</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumBonds()<span class="keyword"> const         </span>{  <span class="keywordflow">return</span>(_nbonds); }
<a name="l00271"></a>00271     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumHvyAtoms();
<a name="l00273"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#35629e93058d8df115d8ce3c4d036b34">00273</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumResidues()<span class="keyword"> const      </span>{ <span class="keywordflow">return</span>(static_cast&lt;unsigned int&gt; (_residue.size())); }
<a name="l00275"></a>00275     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumRotors();
<a name="l00276"></a>00276     
<a name="l00279"></a>00279     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>      *GetAtom(<span class="keywordtype">int</span> idx) <span class="keyword">const</span>;
<a name="l00281"></a>00281     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>      *GetAtomById(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;
<a name="l00284"></a>00284     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>      *GetFirstAtom() <span class="keyword">const</span>;
<a name="l00287"></a>00287     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>      *GetBond(<span class="keywordtype">int</span> idx) <span class="keyword">const</span>;
<a name="l00289"></a>00289     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>      *GetBondById(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;
<a name="l00292"></a>00292     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>      *GetBond(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b) <span class="keyword">const</span>;
<a name="l00293"></a>00293     <span class="comment">// The safer version of the above method</span>
<a name="l00295"></a>00295 <span class="comment"></span>    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>      *GetBond(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* bgn, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* end) <span class="keyword">const</span>;
<a name="l00298"></a>00298     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>   *GetResidue(<span class="keywordtype">int</span> idx) <span class="keyword">const</span>;
<a name="l00299"></a>00299     std::vector&lt;OBInternalCoord*&gt; GetInternalCoord();
<a name="l00304"></a>00304     <span class="keywordtype">double</span>       GetTorsion(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>);
<a name="l00309"></a>00309     <span class="keywordtype">double</span>       GetTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* b,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* c,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* d);
<a name="l00312"></a>00312     <span class="keywordtype">double</span> GetAngle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* a, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* b, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* c);
<a name="l00314"></a>00314     std::string  GetFormula();
<a name="l00316"></a>00316     std::string  GetSpacedFormula(<span class="keywordtype">int</span> ones=0, <span class="keyword">const</span> <span class="keywordtype">char</span>* sp=<span class="stringliteral">" "</span>, <span class="keywordtype">bool</span> implicitH = <span class="keyword">true</span>);
<a name="l00318"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#00db2b6e3ad5082b183901964bdbe05f">00318</a>     <span class="keywordtype">double</span>       GetEnergy()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _energy; }
<a name="l00320"></a>00320     <span class="keywordtype">double</span>       GetMolWt(<span class="keywordtype">bool</span> implicitH = <span class="keyword">true</span>);
<a name="l00322"></a>00322     <span class="keywordtype">double</span>       GetExactMass(<span class="keywordtype">bool</span> implicitH = <span class="keyword">true</span>);
<a name="l00324"></a>00324     <span class="keywordtype">int</span>          GetTotalCharge();
<a name="l00326"></a>00326     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetTotalSpinMultiplicity();
<a name="l00328"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6cd473f0396760600de61f1f30e1d796">00328</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> GetDimension()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _dimension; }
<a name="l00330"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#cec683fc565abdc10de9eff429b8677f">00330</a>     <span class="keywordtype">double</span>      *GetCoordinates() { <span class="keywordflow">return</span>(_c); }
<a name="l00332"></a>00332     std::vector&lt;OBRing*&gt; &amp;GetSSSR();
<a name="l00334"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ac10d67e135e3bae6b233a57e939b327">00334</a>     <span class="keywordtype">bool</span> AutomaticFormalCharge()   { <span class="keywordflow">return</span>(_autoFormalCharge);  }
<a name="l00336"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f861cff0f9e9dcab23d51a56e7789391">00336</a>     <span class="keywordtype">bool</span> AutomaticPartialCharge()  { <span class="keywordflow">return</span>(_autoPartialCharge); }
<a name="l00338"></a>00338 
<a name="l00339"></a>00339 
<a name="l00341"></a>00341 
<a name="l00342"></a>00342 
<a name="l00343"></a>00343     <span class="keywordtype">void</span>   SetTitle(<span class="keyword">const</span> <span class="keywordtype">char</span> *title);
<a name="l00345"></a>00345     <span class="keywordtype">void</span>   SetTitle(std::string &amp;title);
<a name="l00347"></a>00347     <span class="keywordtype">void</span>   SetFormula(std::string molFormula);
<a name="l00349"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#e8bc9a976257190cfbb81eb90b87a61f">00349</a>     <span class="keywordtype">void</span>   SetEnergy(<span class="keywordtype">double</span> energy) { _energy = energy; }
<a name="l00351"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#5f7e725b4d05183a31ac5e27b16fbfff">00351</a>     <span class="keywordtype">void</span>   SetDimension(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> d) { _dimension = d; }
<a name="l00353"></a>00353     <span class="keywordtype">void</span>   SetTotalCharge(<span class="keywordtype">int</span> charge);
<a name="l00356"></a>00356     <span class="keywordtype">void</span>   SetTotalSpinMultiplicity(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> spinMultiplicity);
<a name="l00359"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#3957fa5a22bd734e219c78421fad3403">00359</a>     <span class="keywordtype">void</span>   SetInternalCoord(std::vector&lt;OBInternalCoord*&gt; int_coord)
<a name="l00360"></a>00360     { _internals = int_coord; }
<a name="l00362"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#7de75c5c2d6eca2be8ca113827ae1db9">00362</a>     <span class="keywordtype">void</span> SetAutomaticFormalCharge(<span class="keywordtype">bool</span> val)
<a name="l00363"></a>00363     { _autoFormalCharge=val;  }
<a name="l00365"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#5ebf56f93e76437a92d6521422578349">00365</a>     <span class="keywordtype">void</span> SetAutomaticPartialCharge(<span class="keywordtype">bool</span> val)
<a name="l00366"></a>00366     { _autoPartialCharge=val; }
<a name="l00367"></a>00367 
<a name="l00369"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#44797149270de102963b1cb4aabfd56d">00369</a>     <span class="keywordtype">void</span>   SetAromaticPerceived()    { SetFlag(<a class="code" href="mol_8h.shtml#e8bd693c4ca36c72bfd0b22bf98d3ee5">OB_AROMATIC_MOL</a>);    }
<a name="l00371"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#1b434863357e80cd2da378820d6284fb">00371</a>     <span class="keywordtype">void</span>   SetSSSRPerceived()        { SetFlag(<a class="code" href="mol_8h.shtml#ab6750e3cc64dc00304abe7c44173c88">OB_SSSR_MOL</a>);        }
<a name="l00373"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f9f74fcc2d9187b74d06d8107b8fdc6b">00373</a>     <span class="keywordtype">void</span>   SetRingAtomsAndBondsPerceived(){SetFlag(<a class="code" href="mol_8h.shtml#4a977b9b908042757ae037209e9e3340">OB_RINGFLAGS_MOL</a>);}
<a name="l00375"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#153e0591de03e403d0165641aabcdd38">00375</a>     <span class="keywordtype">void</span>   SetAtomTypesPerceived()   { SetFlag(<a class="code" href="mol_8h.shtml#d74722e7bf17bfc2bfecac6ffcd8cc27">OB_ATOMTYPES_MOL</a>);   }
<a name="l00377"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#146f30957e9f4526bf0146ff15a0dd3c">00377</a>     <span class="keywordtype">void</span>   SetRingTypesPerceived()   { SetFlag(<a class="code" href="mol_8h.shtml#536ad7a9990f9fac477e9555831a907e">OB_RINGTYPES_MOL</a>);   }
<a name="l00379"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c572356782948f5a356752345713d2ab">00379</a>     <span class="keywordtype">void</span>   SetChainsPerceived()      { SetFlag(<a class="code" href="mol_8h.shtml#895ac4494f81f3c6fb827878773378f0">OB_CHAINS_MOL</a>);      }
<a name="l00381"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c349368596915579fb7b982a8c6ac223">00381</a>     <span class="keywordtype">void</span>   SetChiralityPerceived()   { SetFlag(<a class="code" href="mol_8h.shtml#3bf922342dcaa8c7d7bea59225240e14">OB_CHIRALITY_MOL</a>);   }
<a name="l00383"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#115b1b31d4a0c9dfed39886d3b1f6631">00383</a>     <span class="keywordtype">void</span>   SetPartialChargesPerceived(){ SetFlag(<a class="code" href="mol_8h.shtml#5ee8413cb4c11d400cf09469c2c90ce5">OB_PCHARGE_MOL</a>);   }
<a name="l00385"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#28ee2f220e93dbffaa5e74cd2fbc73b6">00385</a>     <span class="keywordtype">void</span>   SetHybridizationPerceived() { SetFlag(<a class="code" href="mol_8h.shtml#8cd0a6811e5fd9b5b3dd84a0b9f8852a">OB_HYBRID_MOL</a>);    }
<a name="l00387"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#29331656104fc60b267d5ee9e6ced8f0">00387</a>     <span class="keywordtype">void</span>   SetImplicitValencePerceived(){ SetFlag(<a class="code" href="mol_8h.shtml#59eb520e0d3f7ed0722e8d7adce90eb7">OB_IMPVAL_MOL</a>);   }
<a name="l00389"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#9913bde5726a30d48bf51d9d87e19934">00389</a>     <span class="keywordtype">void</span>   SetKekulePerceived()      { SetFlag(<a class="code" href="mol_8h.shtml#3a3a6250bca7e7a23584f75c43694fd7">OB_KEKULE_MOL</a>);      }
<a name="l00391"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#77b980ad9711cf254944bed661e93d55">00391</a>     <span class="keywordtype">void</span>   SetClosureBondsPerceived(){ SetFlag(<a class="code" href="mol_8h.shtml#10ac40766f3a5e65d99b8b667f54631e">OB_CLOSURE_MOL</a>);     }
<a name="l00393"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#043f974e59dfd8ca717ce34395627be3">00393</a>     <span class="keywordtype">void</span>   SetHydrogensAdded()       { SetFlag(<a class="code" href="mol_8h.shtml#f5cefdad541a0b0d90e086b668bfc836">OB_H_ADDED_MOL</a>);     }
<a name="l00394"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#b701602eefb0396c6071491988ebc446">00394</a>     <span class="keywordtype">void</span>   SetCorrectedForPH()       { SetFlag(<a class="code" href="mol_8h.shtml#2ce63b25c7f9529e54a39c4ddd3b261d">OB_PH_CORRECTED_MOL</a>);}
<a name="l00395"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#13c7cbe1fa001654e95e9401f6f35881">00395</a>     <span class="keywordtype">void</span>   SetAromaticCorrected()    { SetFlag(<a class="code" href="mol_8h.shtml#7db78b11be0bc0023626e7f068c7607a">OB_AROM_CORRECTED_MOL</a>);}
<a name="l00396"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#269c7397c3d49dd3c07b0089fdc68c15">00396</a>     <span class="keywordtype">void</span>   SetSpinMultiplicityAssigned(){ SetFlag(<a class="code" href="mol_8h.shtml#934dc8c97c1a305e28a2371a9e6cb132">OB_TSPIN_MOL</a>);    }
<a name="l00397"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#1f17f40ee9f780ca8dc5f7c5e9a68783">00397</a>     <span class="keywordtype">void</span>   SetFlags(<span class="keywordtype">int</span> flags)       { _flags = flags;              }
<a name="l00398"></a>00398 
<a name="l00399"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#73d8a9b73a03a06871e8c991a0f866c9">00399</a>     <span class="keywordtype">void</span>   UnsetAromaticPerceived()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#e8bd693c4ca36c72bfd0b22bf98d3ee5">OB_AROMATIC_MOL</a>));   }
<a name="l00400"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#a813bff54b0d76bd71118e66b0c2395e">00400</a>     <span class="keywordtype">void</span>   UnsetSSSRPerceived()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#ab6750e3cc64dc00304abe7c44173c88">OB_SSSR_MOL</a>));   }
<a name="l00401"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#9242207e3e3537ccc03d807906ea04f2">00401</a>     <span class="keywordtype">void</span>   UnsetRingTypesPerceived()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#536ad7a9990f9fac477e9555831a907e">OB_RINGTYPES_MOL</a>));   }
<a name="l00402"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#4480be636051892cad3fc225813e5200">00402</a>     <span class="keywordtype">void</span>   UnsetPartialChargesPerceived(){ _flags &amp;= (~(<a class="code" href="mol_8h.shtml#5ee8413cb4c11d400cf09469c2c90ce5">OB_PCHARGE_MOL</a>));}
<a name="l00403"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#4356187b122c2e083014c186f5f4588d">00403</a>     <span class="keywordtype">void</span>   UnsetImplicitValencePerceived(){_flags &amp;= (~(<a class="code" href="mol_8h.shtml#59eb520e0d3f7ed0722e8d7adce90eb7">OB_IMPVAL_MOL</a>)); }
<a name="l00404"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#e05d3ae96654c760b2e1490a4f7ee18d">00404</a>     <span class="keywordtype">void</span>   UnsetHydrogensAdded()       { UnsetFlag(<a class="code" href="mol_8h.shtml#f5cefdad541a0b0d90e086b668bfc836">OB_H_ADDED_MOL</a>);     }
<a name="l00405"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#62403a93c4cd4fe95ab64922da4cf7b2">00405</a>     <span class="keywordtype">void</span>   UnsetFlag(<span class="keywordtype">int</span> flag)       { _flags &amp;= (~(flag));              }
<a name="l00407"></a>00407 
<a name="l00409"></a>00409 
<a name="l00410"></a>00410     <span class="comment">// Description in transform.cpp (command-line transformations to this molecule)</span>
<a name="l00411"></a>00411     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*    DoTransformations(<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* pOptions,<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv);
<a name="l00412"></a>00412     <span class="comment">// Ditto (documentation on transformation options)</span>
<a name="l00413"></a>00413     <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ClassDescription();
<a name="l00415"></a>00415     <span class="keywordtype">bool</span> Clear();
<a name="l00417"></a>00417     <span class="keywordtype">void</span> RenumberAtoms(std::vector&lt;OBAtom*&gt;&amp;);
<a name="l00419"></a>00419     <span class="keywordtype">void</span> RenumberAtoms(std::vector&lt;int&gt;);
<a name="l00422"></a>00422     <span class="keywordtype">void</span> SetCoordinates(<span class="keywordtype">double</span> *c);
<a name="l00424"></a>00424     <span class="keywordtype">void</span> ToInertialFrame(<span class="keywordtype">int</span> conf, <span class="keywordtype">double</span> *rmat);
<a name="l00426"></a>00426     <span class="keywordtype">void</span> ToInertialFrame();
<a name="l00428"></a>00428     <span class="keywordtype">void</span> Translate(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v);
<a name="l00430"></a>00430     <span class="keywordtype">void</span> Translate(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, <span class="keywordtype">int</span> conf);
<a name="l00432"></a>00432     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> u[3][3]);
<a name="l00434"></a>00434     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> m[9]);
<a name="l00436"></a>00436     <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> m[9],<span class="keywordtype">int</span> nconf);
<a name="l00438"></a>00438     <span class="keywordtype">void</span> Center();
<a name="l00440"></a>00440     
<a name="l00441"></a>00441     <span class="keywordtype">bool</span> Kekulize();
<a name="l00442"></a>00442     <span class="keywordtype">bool</span> PerceiveKekuleBonds();
<a name="l00443"></a>00443 
<a name="l00444"></a>00444     <span class="keywordtype">void</span> NewPerceiveKekuleBonds();
<a name="l00445"></a>00445 
<a name="l00448"></a>00448     <span class="keywordtype">bool</span> DeleteHydrogens();
<a name="l00451"></a>00451     <span class="keywordtype">bool</span> DeleteHydrogens(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*);
<a name="l00454"></a>00454     <span class="keywordtype">bool</span> DeleteNonPolarHydrogens();
<a name="l00457"></a>00457     <span class="keywordtype">bool</span> DeleteHydrogen(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*);
<a name="l00464"></a>00464     <span class="keywordtype">bool</span> AddHydrogens(<span class="keywordtype">bool</span> polaronly=<span class="keyword">false</span>,<span class="keywordtype">bool</span> correctForPH=<span class="keyword">false</span>, <span class="keywordtype">double</span> pH=7.4);
<a name="l00466"></a>00466     <span class="keywordtype">bool</span> AddHydrogens(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*);
<a name="l00468"></a>00468     <span class="keywordtype">bool</span> AddPolarHydrogens();
<a name="l00469"></a>00469 
<a name="l00473"></a>00473     <span class="keywordtype">bool</span> StripSalts(<span class="keywordtype">int</span> threshold=0);
<a name="l00475"></a>00475     std::vector&lt;OBMol&gt; Separate(<span class="keywordtype">int</span> StartIndex=1);
<a name="l00477"></a>00477     <span class="keywordtype">bool</span> GetNextFragment( <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OpenBabel::OBMolAtomDFSIter</a>&amp; iter, OBMol&amp; newMol );
<a name="l00479"></a>00479     <span class="keywordtype">bool</span> ConvertDativeBonds();
<a name="l00480"></a>00480 
<a name="l00482"></a>00482     <span class="keywordtype">bool</span> CorrectForPH(<span class="keywordtype">double</span> pH=7.4);
<a name="l00483"></a>00483     <span class="comment">// docs in mol.cpp</span>
<a name="l00484"></a>00484     <span class="keywordtype">bool</span> AssignSpinMultiplicity(<span class="keywordtype">bool</span> NoImplicitH=<span class="keyword">false</span>);
<a name="l00486"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#344f77f14c08ea6a261ee91f6938629a">00486</a>     <span class="keywordtype">void</span>   SetIsPatternStructure()       { SetFlag(<a class="code" href="mol_8h.shtml#0cb96f287cad4a3a9f0e432767a5bc30">OB_PATTERN_STRUCTURE</a>);}
<a name="l00487"></a>00487 
<a name="l00490"></a>00490     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> Center(<span class="keywordtype">int</span> nconf);
<a name="l00496"></a>00496     <span class="keywordtype">void</span> SetTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<span class="keywordtype">double</span> ang);
<a name="l00498"></a>00498 
<a name="l00500"></a>00500 
<a name="l00501"></a>00501 
<a name="l00502"></a>00502     <span class="keywordtype">void</span> FindSSSR();
<a name="l00504"></a>00504     <span class="keywordtype">void</span> FindRingAtomsAndBonds();
<a name="l00506"></a>00506     <span class="comment">//void FindChiralCenters();</span>
<a name="l00507"></a>00507     <span class="comment">// documented in mol.cpp -- locates all atom indexes which can reach 'end'</span>
<a name="l00508"></a>00508     <span class="keywordtype">void</span> FindChildren(std::vector&lt;int&gt; &amp; children,<span class="keywordtype">int</span> bgnIdx,<span class="keywordtype">int</span> endIdx);
<a name="l00509"></a>00509     <span class="comment">// documented in mol.cpp -- locates all atoms which can reach 'end'</span>
<a name="l00510"></a>00510     <span class="keywordtype">void</span> FindChildren(std::vector&lt;OBAtom*&gt;&amp; children,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* bgn,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* end);
<a name="l00515"></a>00515     <span class="keywordtype">void</span> FindLargestFragment(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;frag);
<a name="l00518"></a>00518     <span class="keywordtype">void</span> ContigFragList(std::vector&lt;std::vector&lt;int&gt; &gt;&amp;);
<a name="l00520"></a>00520     <span class="keywordtype">void</span> Align(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp;,<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp;);
<a name="l00522"></a>00522     <span class="keywordtype">void</span> ConnectTheDots();
<a name="l00524"></a>00524     <span class="keywordtype">void</span> PerceiveBondOrders();
<a name="l00526"></a>00526     <span class="keywordtype">void</span> FindAngles();
<a name="l00528"></a>00528     <span class="keywordtype">void</span> FindTorsions();
<a name="l00529"></a>00529     <span class="comment">// documented in mol.cpp: graph-theoretical distance for each atom</span>
<a name="l00530"></a>00530     <span class="keywordtype">bool</span>         <a class="code" href="namespaceOpenBabel.shtml#43b39b18f63070fcb45c3bfb78ccbeaa">GetGTDVector</a>(std::vector&lt;int&gt; &amp;);
<a name="l00531"></a>00531     <span class="comment">// documented in mol.cpp: graph-invariant index for each atom</span>
<a name="l00532"></a>00532     <span class="keywordtype">void</span>         <a class="code" href="namespaceOpenBabel.shtml#1375b3dff08f980737b81db89188ba84">GetGIVector</a>(std::vector&lt;unsigned int&gt; &amp;);
<a name="l00533"></a>00533     <span class="comment">// documented in mol.cpp: calculate symmetry-unique identifiers</span>
<a name="l00534"></a>00534     <span class="keywordtype">void</span>         GetGIDVector(std::vector&lt;unsigned int&gt; &amp;);
<a name="l00536"></a>00536 
<a name="l00538"></a>00538 
<a name="l00539"></a>00539 
<a name="l00540"></a>00540     <span class="keywordtype">bool</span> Has2D(<span class="keywordtype">bool</span> Not3D=<span class="keyword">false</span>);
<a name="l00542"></a>00542     <span class="keywordtype">bool</span> Has3D();
<a name="l00544"></a>00544     <span class="keywordtype">bool</span> HasNonZeroCoords();
<a name="l00546"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6a11c29bce75ae52f3bd9e3ce9801ac4">00546</a>     <span class="keywordtype">bool</span> HasAromaticPerceived()     { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#e8bd693c4ca36c72bfd0b22bf98d3ee5">OB_AROMATIC_MOL</a>)); }
<a name="l00548"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#1b0921edb25ed90462c6650ba464458b">00548</a>     <span class="keywordtype">bool</span> HasSSSRPerceived()         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#ab6750e3cc64dc00304abe7c44173c88">OB_SSSR_MOL</a>));     }
<a name="l00550"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#cc4bfdc8f284733aa459636984a895e5">00550</a>     <span class="keywordtype">bool</span> HasRingAtomsAndBondsPerceived(){<span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#4a977b9b908042757ae037209e9e3340">OB_RINGFLAGS_MOL</a>));}
<a name="l00552"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#e897abef0eb12e727701321c78857795">00552</a>     <span class="keywordtype">bool</span> HasAtomTypesPerceived()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#d74722e7bf17bfc2bfecac6ffcd8cc27">OB_ATOMTYPES_MOL</a>));}
<a name="l00554"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6dfac61e9987a0f2faaa6da2432a2e3e">00554</a>     <span class="keywordtype">bool</span> HasRingTypesPerceived()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#536ad7a9990f9fac477e9555831a907e">OB_RINGTYPES_MOL</a>));}
<a name="l00556"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#bc92302f386e20ddd006939ef7c11116">00556</a>     <span class="keywordtype">bool</span> HasChiralityPerceived()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#3bf922342dcaa8c7d7bea59225240e14">OB_CHIRALITY_MOL</a>));}
<a name="l00558"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#b64b60e136fc39f8cf9b8fb91538154d">00558</a>     <span class="keywordtype">bool</span> HasPartialChargesPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#5ee8413cb4c11d400cf09469c2c90ce5">OB_PCHARGE_MOL</a>));}
<a name="l00560"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#427285ed1ceb6413a6e2dc04053fde54">00560</a>     <span class="keywordtype">bool</span> HasHybridizationPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#8cd0a6811e5fd9b5b3dd84a0b9f8852a">OB_HYBRID_MOL</a>));  }
<a name="l00562"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#e57ca2022cfd4ac30823e7ba5bac4fe7">00562</a>     <span class="keywordtype">bool</span> HasImplicitValencePerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#59eb520e0d3f7ed0722e8d7adce90eb7">OB_IMPVAL_MOL</a>));}
<a name="l00564"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#fa859d42e4d3a0a577c9d97a4ca469a3">00564</a>     <span class="keywordtype">bool</span> HasKekulePerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#3a3a6250bca7e7a23584f75c43694fd7">OB_KEKULE_MOL</a>));         }
<a name="l00566"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#1bd3b395e825ddd9931ad182b496503e">00566</a>     <span class="keywordtype">bool</span> HasClosureBondsPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#10ac40766f3a5e65d99b8b667f54631e">OB_CLOSURE_MOL</a>));  }
<a name="l00568"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#110839fff7a853cb6f53527d9315d837">00568</a>     <span class="keywordtype">bool</span> HasChainsPerceived() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#895ac4494f81f3c6fb827878773378f0">OB_CHAINS_MOL</a>));         }
<a name="l00570"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#1e58c64b12b07f9908cb6d5866897254">00570</a>     <span class="keywordtype">bool</span> HasHydrogensAdded() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#f5cefdad541a0b0d90e086b668bfc836">OB_H_ADDED_MOL</a>));         }
<a name="l00572"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#12754d15ff50670d391bbbb67e9d3233">00572</a>     <span class="keywordtype">bool</span> HasAromaticCorrected() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#7db78b11be0bc0023626e7f068c7607a">OB_AROM_CORRECTED_MOL</a>));}
<a name="l00574"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#b10e261aeaf65e03201c25ff4bdce97e">00574</a>     <span class="keywordtype">bool</span> IsCorrectedForPH() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#2ce63b25c7f9529e54a39c4ddd3b261d">OB_PH_CORRECTED_MOL</a>));     }
<a name="l00576"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#d403c3e6c943414e43f83580f596c486">00576</a>     <span class="keywordtype">bool</span> HasSpinMultiplicityAssigned() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#934dc8c97c1a305e28a2371a9e6cb132">OB_TSPIN_MOL</a>)); }
<a name="l00578"></a>00578     <span class="keywordtype">bool</span> IsChiral();
<a name="l00580"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ea621a6ef267f1db0d3c4e859371670d">00580</a>     <span class="keywordtype">bool</span> Empty()                       { <span class="keywordflow">return</span>(_natoms == 0);          }
<a name="l00582"></a>00582 
<a name="l00584"></a>00584 
<a name="l00585"></a>00585 
<a name="l00586"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#2c334a4262cdb99a43ec2d507ad1356a">00586</a>     <span class="keywordtype">int</span>     NumConformers()    { <span class="keywordflow">return</span>((_vconf.empty())?0:static_cast&lt;int&gt; (_vconf.size())); }
<a name="l00588"></a>00588     <span class="keywordtype">void</span>    SetConformers(std::vector&lt;double*&gt; &amp;v);
<a name="l00590"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c8c28072c529f06a2843e22553f3e35a">00590</a>     <span class="keywordtype">void</span>    AddConformer(<span class="keywordtype">double</span> *f)    {  _vconf.push_back(f);    }
<a name="l00593"></a>00593     <span class="keywordtype">void</span>    SetConformer(<span class="keywordtype">int</span> i);
<a name="l00596"></a>00596     <span class="keywordtype">void</span>    CopyConformer(<span class="keywordtype">double</span>* c,<span class="keywordtype">int</span> nconf);
<a name="l00598"></a>00598     <span class="keywordtype">void</span>    DeleteConformer(<span class="keywordtype">int</span> nconf);
<a name="l00600"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#07b6e26a4010f7dfd52ffeb81cdd8e72">00600</a>     <span class="keywordtype">double</span>  *GetConformer(<span class="keywordtype">int</span> i)       {  <span class="keywordflow">return</span>(_vconf[i]);      }
<a name="l00602"></a>00602     <span class="keywordtype">void</span>    SetEnergies(std::vector&lt;double&gt; &amp;energies);
<a name="l00604"></a>00604     std::vector&lt;double&gt; GetEnergies();
<a name="l00607"></a>00607     <span class="keywordtype">double</span>  GetEnergy(<span class="keywordtype">int</span> ci);
<a name="l00610"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6c477534c1471e8d28d63832c90edeca">00610</a>     <span class="keywordtype">double</span>  *BeginConformer(std::vector&lt;double*&gt;::iterator&amp;i)
<a name="l00611"></a>00611     { i = _vconf.begin();
<a name="l00612"></a>00612       <span class="keywordflow">return</span>((i == _vconf.end()) ? NULL:*i); }
<a name="l00615"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#c37ba5e1b706237c2e0a9a3f204d947b">00615</a>     <span class="keywordtype">double</span>  *NextConformer(std::vector&lt;double*&gt;::iterator&amp;i)
<a name="l00616"></a>00616     { ++i;
<a name="l00617"></a>00617       <span class="keywordflow">return</span>((i == _vconf.end()) ? NULL:*i); }
<a name="l00619"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#ef97f39f360545d051d643b97291e048">00619</a>     std::vector&lt;double*&gt; &amp;GetConformers() {   <span class="keywordflow">return</span>(_vconf);     }
<a name="l00621"></a>00621 
<a name="l00623"></a>00623 
<a name="l00624"></a>00624 
<a name="l00625"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#004e12ea0b4787921b9485528b3afd0a">00625</a>     <a class="code" href="namespaceOpenBabel.shtml#b9b3180238e83c2c9930c11d91406e24">OBAtomIterator</a> BeginAtoms()   { <span class="keywordflow">return</span> _vatom.begin(); }
<a name="l00627"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#691d46304ef7ff4ba7c3f5369aaab1d6">00627</a>      <a class="code" href="namespaceOpenBabel.shtml#b9b3180238e83c2c9930c11d91406e24">OBAtomIterator</a> EndAtoms()    { <span class="keywordflow">return</span> _vatom.begin() + NumAtoms() ; }
<a name="l00629"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#6218f741fe73ed5241941b2cb01e96a5">00629</a>     <a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a> BeginBonds()   { <span class="keywordflow">return</span> _vbond.begin(); }
<a name="l00631"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#f920c97445642093b6a7224624c9a5dd">00631</a>     <a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a> EndBonds()     { <span class="keywordflow">return</span> _vbond.begin() + NumBonds() ; }
<a name="l00633"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#0928d180bcf9b5069b31ae6901e5a5e1">00633</a>     <a class="code" href="namespaceOpenBabel.shtml#e086b38a41337372420586668dcb17d2">OBResidueIterator</a> BeginResidues() { <span class="keywordflow">return</span> _residue.begin(); }
<a name="l00635"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#53797583f66de53e23ffa6f25c2a612a">00635</a>     <a class="code" href="namespaceOpenBabel.shtml#e086b38a41337372420586668dcb17d2">OBResidueIterator</a> EndResidues()   { <span class="keywordflow">return</span> _residue.end();   }
<a name="l00636"></a>00636 
<a name="l00639"></a>00639     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *BeginAtom(<a class="code" href="namespaceOpenBabel.shtml#b9b3180238e83c2c9930c11d91406e24">OBAtomIterator</a> &amp;i);
<a name="l00642"></a>00642     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *NextAtom(<a class="code" href="namespaceOpenBabel.shtml#b9b3180238e83c2c9930c11d91406e24">OBAtomIterator</a> &amp;i);
<a name="l00645"></a>00645     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *BeginBond(<a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a> &amp;i);
<a name="l00648"></a>00648     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *NextBond(<a class="code" href="namespaceOpenBabel.shtml#d9937aab563e9dc1bf938ed4b30564f5">OBBondIterator</a> &amp;i);
<a name="l00651"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#40c9451e8c2a278bd3cf62a4dbf7786c">00651</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *BeginResidue(<a class="code" href="namespaceOpenBabel.shtml#e086b38a41337372420586668dcb17d2">OBResidueIterator</a> &amp;i)
<a name="l00652"></a>00652     {
<a name="l00653"></a>00653       i = _residue.begin();
<a name="l00654"></a>00654       <span class="keywordflow">return</span>((i == _residue.end()) ? NULL:*i);
<a name="l00655"></a>00655     }
<a name="l00658"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#bd72696d4a7f9060a28c94098c4e550a">00658</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *NextResidue(<a class="code" href="namespaceOpenBabel.shtml#e086b38a41337372420586668dcb17d2">OBResidueIterator</a> &amp;i)
<a name="l00659"></a>00659     {
<a name="l00660"></a>00660       ++i;
<a name="l00661"></a>00661       <span class="keywordflow">return</span>((i == _residue.end()) ? NULL:*i);
<a name="l00662"></a>00662     }
<a name="l00666"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#554482adad1a1ea075bfe9b39ea17853">00666</a>     <a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *BeginInternalCoord(std::vector&lt;OBInternalCoord*&gt;::iterator &amp;i)
<a name="l00667"></a>00667     {
<a name="l00668"></a>00668       i = _internals.begin();
<a name="l00669"></a>00669       <span class="keywordflow">return</span>((i == _internals.end()) ? NULL:*i);
<a name="l00670"></a>00670     }
<a name="l00674"></a><a class="code" href="classOpenBabel_1_1OBMol.shtml#866067c59fecaf63e462ee5dc04f0bce">00674</a>     <a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *NextInternalCoord(std::vector&lt;OBInternalCoord*&gt;::iterator &amp;i)
<a name="l00675"></a>00675     {
<a name="l00676"></a>00676       ++i;
<a name="l00677"></a>00677       <span class="keywordflow">return</span>((i == _internals.end()) ? NULL:*i);
<a name="l00678"></a>00678     }
<a name="l00680"></a>00680 
<a name="l00681"></a>00681   };
<a name="l00682"></a>00682 
<a name="l00683"></a>00683   <span class="comment">// Utility function prototypes</span>
<a name="l00684"></a>00684   <span class="comment">//tokenize and Trim declarations moved to base.h</span>
<a name="l00685"></a>00685   <span class="comment">// Deprecated -- use OBMessageHandler class instead (docs in obutil.cpp)</span>
<a name="l00686"></a>00686   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#435c2f79e044a2e02c2caed9294b56f5">ThrowError</a>(<span class="keywordtype">char</span> *str);
<a name="l00687"></a>00687   <span class="comment">// Deprecated -- use OBMessageHandler class instead (docs in obutil.cpp)</span>
<a name="l00688"></a>00688   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#435c2f79e044a2e02c2caed9294b56f5">ThrowError</a>(std::string &amp;str);
<a name="l00690"></a>00690   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a9bd613601f51f7862ef1991a91b69b2">CartesianToInternal</a>(std::vector&lt;OBInternalCoord*&gt;&amp;,OBMol&amp;);
<a name="l00692"></a>00692   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#875dc86bef42776872011663b9549e0e">InternalToCartesian</a>(std::vector&lt;OBInternalCoord*&gt;&amp;,OBMol&amp;);
<a name="l00693"></a>00693   <span class="comment">// Replace the last extension in str with a new one (docs in obutil.cpp)</span>
<a name="l00694"></a>00694   OBAPI std::string <a class="code" href="namespaceOpenBabel.shtml#eb15be1d0e474af40419dfa61ec5a6a6">NewExtension</a>(std::string&amp;,<span class="keywordtype">char</span>*);
<a name="l00695"></a>00695 
<a name="l00696"></a>00696   <span class="comment">//global definitions</span>
<a name="l00698"></a><a class="code" href="namespaceOpenBabel.shtml#76be13a3ae92d87d4e1121a9d4af9c28">00698</a> <span class="comment"></span>  EXTERN  <a class="code" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a>   <a class="code" href="namespaceOpenBabel.shtml#76be13a3ae92d87d4e1121a9d4af9c28">etab</a>;
<a name="l00701"></a><a class="code" href="namespaceOpenBabel.shtml#813dcd0755b088245897762ee96e2eb0">00701</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a>      <a class="code" href="namespaceOpenBabel.shtml#813dcd0755b088245897762ee96e2eb0">ttab</a>;
<a name="l00703"></a><a class="code" href="namespaceOpenBabel.shtml#b1ffc4800d8abd445eb2b9ed99a03185">00703</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a>   <a class="code" href="namespaceOpenBabel.shtml#b1ffc4800d8abd445eb2b9ed99a03185">isotab</a>;
<a name="l00705"></a><a class="code" href="namespaceOpenBabel.shtml#05f24d7670890b62534c062312e38d9a">00705</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>  <a class="code" href="namespaceOpenBabel.shtml#05f24d7670890b62534c062312e38d9a">aromtyper</a>;
<a name="l00708"></a><a class="code" href="namespaceOpenBabel.shtml#5bb1855216aaeb691101d940e79e52bb">00708</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a>      <a class="code" href="namespaceOpenBabel.shtml#5bb1855216aaeb691101d940e79e52bb">atomtyper</a>;
<a name="l00710"></a><a class="code" href="namespaceOpenBabel.shtml#7be624706cb8945b06f51507b7d61117">00710</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a>   <a class="code" href="namespaceOpenBabel.shtml#7be624706cb8945b06f51507b7d61117">chainsparser</a>;
<a name="l00712"></a>00712   OBERROR <span class="keyword">extern</span>  <a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> <a class="code" href="namespaceOpenBabel.shtml#24ee5eebf9449658bd038e0bf3e807c3">obErrorLog</a>;
<a name="l00714"></a><a class="code" href="namespaceOpenBabel.shtml#d030ecc73c27f8e0b5a94d937a53c50e">00714</a>   EXTERN  <a class="code" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a>    <a class="code" href="namespaceOpenBabel.shtml#d030ecc73c27f8e0b5a94d937a53c50e">resdat</a>;
<a name="l00715"></a>00715 
<a name="l00716"></a>00716   <span class="comment">//Utility Macros</span>
<a name="l00717"></a>00717 
<a name="l00718"></a>00718 <span class="preprocessor">#ifndef BUFF_SIZE</span>
<a name="l00719"></a><a class="code" href="mol_8h.shtml#f5a993b6f41e0d9c2fc3a45dc6a61c55">00719</a> <span class="preprocessor"></span><span class="preprocessor">#define BUFF_SIZE 32768</span>
<a name="l00720"></a>00720 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00721"></a>00721 <span class="preprocessor"></span>
<a name="l00722"></a>00722 <span class="preprocessor">#ifndef EQ</span>
<a name="l00723"></a><a class="code" href="mol_8h.shtml#0d516fe1dfb4aa25238ca66e0d7f52e6">00723</a> <span class="preprocessor"></span><span class="preprocessor">#define EQ(a,b) (!strcmp((a), (b)))</span>
<a name="l00724"></a>00724 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00725"></a>00725 <span class="preprocessor"></span>
<a name="l00726"></a>00726 <span class="preprocessor">#ifndef EQn</span>
<a name="l00727"></a><a class="code" href="mol_8h.shtml#5ce1f73d8b06a8097a30c9f8c31263e2">00727</a> <span class="preprocessor"></span><span class="preprocessor">#define EQn(a,b,n) (!strncmp((a), (b), (n)))</span>
<a name="l00728"></a>00728 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00729"></a>00729 <span class="preprocessor"></span>
<a name="l00730"></a>00730 <span class="preprocessor">#ifndef SQUARE</span>
<a name="l00731"></a><a class="code" href="mol_8h.shtml#f95306c0eee8d7de5c1cef2807e2e7e5">00731</a> <span class="preprocessor"></span><span class="preprocessor">#define SQUARE(x) ((x)*(x))</span>
<a name="l00732"></a>00732 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00733"></a>00733 <span class="preprocessor"></span>
<a name="l00734"></a>00734 <span class="preprocessor">#ifndef IsUnsatType</span>
<a name="l00735"></a><a class="code" href="mol_8h.shtml#c1dbf2d970fa9e124a40dfbf20c20638">00735</a> <span class="preprocessor"></span><span class="preprocessor">#define IsUnsatType(x)  (EQ(x,"Car") || EQ(x,"C2") || EQ(x,"Sox") || EQ(x,"Sac") || EQ(x,"Pac") || EQ(x,"So2"))</span>
<a name="l00736"></a>00736 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00737"></a>00737 <span class="preprocessor"></span>
<a name="l00738"></a>00738 <span class="preprocessor">#ifndef __KCC</span>
<a name="l00739"></a>00739 <span class="preprocessor"></span>  <span class="keyword">extern</span> <span class="stringliteral">"C"</span>
<a name="l00740"></a>00740   {
<a name="l00741"></a>00741     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#3e4b1ab90c110abca9b467f74c93fa8b">get_rmat</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00742"></a>00742     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#94993dbb68424b62c148618c3b90d951">ob_make_rmat</a>(<span class="keywordtype">double</span> mat[3][3],<span class="keywordtype">double</span> rmat[9]);
<a name="l00743"></a>00743     OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#97afc57313dd2f8d0320b6c4982fdfd6">qtrfit</a> (<span class="keywordtype">double</span> *r,<span class="keywordtype">double</span> *f,<span class="keywordtype">int</span> size,<span class="keywordtype">double</span> u[3][3]);
<a name="l00744"></a>00744     OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#d722702a361d87f1fca8c9aab82a4dcb">superimpose</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00745"></a>00745   }
<a name="l00746"></a>00746 <span class="preprocessor">#else</span>
<a name="l00747"></a>00747 <span class="preprocessor"></span>  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#3e4b1ab90c110abca9b467f74c93fa8b">get_rmat</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00748"></a>00748   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#94993dbb68424b62c148618c3b90d951">ob_make_rmat</a>(<span class="keywordtype">double</span> mat[3][3],<span class="keywordtype">double</span> rmat[9]);
<a name="l00749"></a>00749   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#97afc57313dd2f8d0320b6c4982fdfd6">qtrfit</a> (<span class="keywordtype">double</span> *r,<span class="keywordtype">double</span> *f,<span class="keywordtype">int</span> size,<span class="keywordtype">double</span> u[3][3]);
<a name="l00750"></a>00750   OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#d722702a361d87f1fca8c9aab82a4dcb">superimpose</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);
<a name="l00751"></a>00751 <span class="preprocessor">#endif // __KCC</span>
<a name="l00752"></a>00752 <span class="preprocessor"></span>
<a name="l00753"></a>00753 <span class="comment">//  extern OBMol* (*CreateMolecule) (void);</span>
<a name="l00754"></a>00754 
<a name="l00755"></a>00755 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00756"></a>00756 
<a name="l00757"></a>00757 <span class="preprocessor">#endif // OB_MOL_H</span>
<a name="l00758"></a>00758 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
