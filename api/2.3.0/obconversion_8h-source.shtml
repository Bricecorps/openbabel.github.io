<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: obconversion.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>obconversion.h</h1><a href="obconversion_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obconversion.h - Handle file conversions. Declaration of OBFormat, OBConversion</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2004-2009 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"></span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_CONV_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_CONV_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#ifdef HAVE_STRINGS_H</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#include &lt;strings.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#endif</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;<a class="code" href="dlhandler_8h.shtml">openbabel/dlhandler.h</a>&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;<a class="code" href="oberror_8h.shtml">openbabel/oberror.h</a>&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;<a class="code" href="format_8h.shtml">openbabel/format.h</a>&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;<a class="code" href="lineend_8h.shtml">openbabel/lineend.h</a>&gt;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">// These macros are used in DLL builds. If they have not</span>
<a name="l00041"></a>00041 <span class="comment">// been set in babelconfig.h, define them as nothing.</span>
<a name="l00042"></a>00042 <span class="preprocessor">#ifndef OBCONV</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">        #define OBCONV</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span><span class="preprocessor">#ifndef OBDLL</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span><span class="preprocessor">        #define OBDLL</span>
<a name="l00047"></a>00047 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="comment">//using namespace std;</span>
<a name="l00050"></a>00050 <span class="keyword">namespace </span>OpenBabel {
<a name="l00051"></a>00051 
<a name="l00052"></a>00052   <span class="comment">// Needed to preserve deprecated API</span>
<a name="l00053"></a><a class="code" href="namespaceOpenBabel.shtml#a9b3cd223a36c0b434bcc08a55c27a03">00053</a>   <span class="keyword">typedef</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#0cb8ca530cc677bb6bc8dd6831d68e52">OBPlugin::PluginIterator</a> <a class="code" href="namespaceOpenBabel.shtml#a9b3cd223a36c0b434bcc08a55c27a03">Formatpos</a>;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055   OBERROR <span class="keyword">extern</span>  <a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> <a class="code" href="namespaceOpenBabel.shtml#24ee5eebf9449658bd038e0bf3e807c3">obErrorLog</a>;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057   <span class="comment">//*************************************************</span>
<a name="l00059"></a>00059 <span class="comment"></span>  <span class="comment">// Class introduction in obconversion.cpp</span>
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml">00060</a>   <span class="keyword">class </span>OBCONV OBConversion
<a name="l00061"></a>00061     {
<a name="l00063"></a>00063     <span class="keyword">public</span>:
<a name="l00065"></a>00065 
<a name="l00066"></a>00066       OBConversion(std::istream* is=NULL, std::ostream* os=NULL);
<a name="l00068"></a>00068       OBConversion(<span class="keyword">const</span> OBConversion&amp; o);
<a name="l00069"></a>00069       <span class="keyword">virtual</span>     ~OBConversion(); 
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00074"></a>00074       <span class="keyword">static</span> <span class="keywordtype">int</span>                                RegisterFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pFormat, <span class="keyword">const</span> <span class="keywordtype">char</span>* MIME = NULL);
<a name="l00076"></a>00076       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*  FindFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID);
<a name="l00078"></a>00078       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*  FormatFromExt(<span class="keyword">const</span> <span class="keywordtype">char</span>* filename);
<a name="l00080"></a>00080       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*        FormatFromMIME(<span class="keyword">const</span> <span class="keywordtype">char</span>* MIME);
<a name="l00081"></a>00081 
<a name="l00083"></a>00083       <span class="keyword">static</span> <span class="keywordtype">bool</span>               GetNextFormat(<a class="code" href="namespaceOpenBabel.shtml#a9b3cd223a36c0b434bcc08a55c27a03">Formatpos</a>&amp; itr, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; str,<a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*&amp; pFormat);
<a name="l00085"></a>00085                 
<a name="l00087"></a>00087 
<a name="l00088"></a>00088       <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description(); <span class="comment">//generic conversion options</span>
<a name="l00090"></a>00090 <span class="comment"></span>
<a name="l00092"></a>00092 
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#d17b79cd360e220f6de05ad8588a5476">00093</a>       std::istream* GetInStream()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pInStream;};
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#26e07b86a79421c602fc507f5aef68df">00094</a>       std::ostream* GetOutStream()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pOutStream;};
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#c7cb7998a754cf8865d1c695cbf75e0d">00095</a>       <span class="keywordtype">void</span>          SetInStream(std::istream* pIn)
<a name="l00096"></a>00096         { 
<a name="l00097"></a>00097           <span class="keywordflow">if</span> (pInStream &amp;&amp; NeedToFreeInStream) {
<a name="l00098"></a>00098             <span class="keyword">delete</span> pInStream; NeedToFreeInStream = <span class="keyword">false</span>;
<a name="l00099"></a>00099           }
<a name="l00100"></a>00100           pInStream=pIn;
<a name="l00101"></a>00101           CheckedForGzip = <span class="keyword">false</span>; <span class="comment">// haven't tried to gzip decode this stream</span>
<a name="l00102"></a>00102         };
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#1e101dedb9b8140abdb741bedae70096">00103</a>       <span class="keywordtype">void</span>          SetOutStream(std::ostream* pOut)
<a name="l00104"></a>00104         {
<a name="l00105"></a>00105           <span class="keywordflow">if</span> (pOutStream &amp;&amp; NeedToFreeOutStream) {
<a name="l00106"></a>00106             <span class="keyword">delete</span> pOutStream; NeedToFreeOutStream = <span class="keyword">false</span>;
<a name="l00107"></a>00107           }
<a name="l00108"></a>00108           pOutStream=pOut;
<a name="l00109"></a>00109         };
<a name="l00111"></a>00111       <span class="keywordtype">bool</span>        SetInAndOutFormats(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID, <span class="keyword">const</span> <span class="keywordtype">char</span>* outID);
<a name="l00112"></a>00112       <span class="keywordtype">bool</span>        SetInAndOutFormats(<a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pIn, <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pOut);
<a name="l00114"></a>00114       <span class="keywordtype">bool</span>            SetInFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID);
<a name="l00115"></a>00115       <span class="keywordtype">bool</span>            SetInFormat(<a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pIn);
<a name="l00117"></a>00117       <span class="keywordtype">bool</span>            SetOutFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* outID);
<a name="l00118"></a>00118       <span class="keywordtype">bool</span>            SetOutFormat(<a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pOut);
<a name="l00119"></a>00119 
<a name="l00120"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ba5729bd46e8e58e6ffde53f1e7946d5">00120</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*   GetInFormat()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pInFormat;};
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#92f856c2b5122fc911a620827d269a5a">00121</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*   GetOutFormat()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pOutFormat;};
<a name="l00122"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#56738209bef0b97e4f0eb727f8896e28">00122</a>       std::string GetInFilename()<span class="keyword"> const</span>{<span class="keywordflow">return</span> InFilename;};
<a name="l00123"></a>00123         
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#db4f57df09f88c0eb2a1c4bfc5863d78">00125</a>       std::streampos GetInPos()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInpos;}; 
<a name="l00126"></a>00126 
<a name="l00128"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#d1255bb59ebfb58ba3d682780745fd51">00128</a>       size_t GetInLen()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInlen;}; 
<a name="l00129"></a>00129 
<a name="l00131"></a>00131       <span class="keyword">const</span> <span class="keywordtype">char</span>* GetTitle() <span class="keyword">const</span>;
<a name="l00132"></a>00132 
<a name="l00134"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#2e51806cdf2b71bfc3678588c7df460c">00134</a>       OBConversion* GetAuxConv()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pAuxConv;};
<a name="l00135"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#4aa68c871f3bba7be0962838d7d67977">00135</a>       <span class="keywordtype">void</span>          SetAuxConv(OBConversion* pConv) {pAuxConv=pConv;};
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 
<a name="l00140"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#1527a0a12210467a9dbd6d53f856750b">00140</a>       <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#1527a0a12210467a9dbd6d53f856750b">Option_type</a> { INOPTIONS, OUTOPTIONS, GENOPTIONS, ALL };
<a name="l00141"></a>00141 
<a name="l00143"></a>00143       <span class="keyword">const</span> <span class="keywordtype">char</span>* IsOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt,Option_type opttyp=OUTOPTIONS);
<a name="l00144"></a>00144         
<a name="l00146"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#81edcbbc339c36e6dcfe80d368f32893">00146</a>       <span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* GetOptions(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#1527a0a12210467a9dbd6d53f856750b">Option_type</a> opttyp)
<a name="l00147"></a>00147         { <span class="keywordflow">return</span> &amp;OptionsArray[opttyp];};
<a name="l00148"></a>00148 
<a name="l00150"></a>00150       <span class="keywordtype">void</span> AddOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, Option_type opttyp=OUTOPTIONS, <span class="keyword">const</span> <span class="keywordtype">char</span>* txt=NULL);
<a name="l00151"></a>00151         
<a name="l00152"></a>00152       <span class="keywordtype">bool</span> RemoveOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, Option_type optype);
<a name="l00153"></a>00153 
<a name="l00155"></a>00155       <span class="keywordtype">void</span> SetOptions(<span class="keyword">const</span> <span class="keywordtype">char</span>* options, Option_type opttyp);
<a name="l00156"></a>00156 
<a name="l00158"></a>00158       <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterOptionParam(std::string name, <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pFormat,
<a name="l00159"></a>00159                                       <span class="keywordtype">int</span> numberParams=0, Option_type typ=OUTOPTIONS);
<a name="l00160"></a>00160 
<a name="l00162"></a>00162       <span class="keyword">static</span> <span class="keywordtype">int</span> GetOptionParams(std::string name, Option_type typ);
<a name="l00164"></a>00164 
<a name="l00166"></a>00166       <span class="keywordtype">void</span> CopyOptions(OBConversion* pSourceConv, Option_type typ=ALL);
<a name="l00167"></a>00167 
<a name="l00169"></a>00169 
<a name="l00170"></a>00170       <span class="comment">// @brief Set and return the list of supported input format</span>
<a name="l00171"></a>00171       std::vector&lt;std::string&gt; GetSupportedInputFormat();
<a name="l00172"></a>00172       <span class="comment">// @brief Set and return the list of supported output format</span>
<a name="l00173"></a>00173       std::vector&lt;std::string&gt; GetSupportedOutputFormat();
<a name="l00175"></a>00175 
<a name="l00177"></a>00177 
<a name="l00178"></a>00178 
<a name="l00179"></a>00179       <span class="keywordtype">int</span>         Convert(std::istream* is, std::ostream* os);
<a name="l00180"></a>00180 
<a name="l00182"></a>00182       <span class="keywordtype">int</span>         Convert();
<a name="l00183"></a>00183 
<a name="l00186"></a>00186       <span class="keywordtype">int</span>                                       FullConvert(std::vector&lt;std::string&gt;&amp; FileList,
<a name="l00187"></a>00187                               std::string&amp; OutputFileName, std::vector&lt;std::string&gt;&amp; OutputFileList);
<a name="l00189"></a>00189 
<a name="l00191"></a>00191 
<a name="l00192"></a>00192       <span class="keywordtype">int</span>     AddChemObject(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb);
<a name="l00193"></a>00193       <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*  GetChemObject(); 
<a name="l00194"></a>00194       <span class="keywordtype">bool</span>     IsLast();
<a name="l00195"></a>00195       <span class="keywordtype">bool</span>     IsFirstInput();
<a name="l00196"></a>00196       <span class="keywordtype">void</span>     SetFirstInput(<span class="keywordtype">bool</span> b=<span class="keyword">true</span>);
<a name="l00197"></a>00197       <span class="keywordtype">int</span>      GetOutputIndex() <span class="keyword">const </span>;
<a name="l00198"></a>00198       <span class="keywordtype">void</span>     SetOutputIndex(<span class="keywordtype">int</span> indx);
<a name="l00199"></a>00199       <span class="keywordtype">void</span>     SetMoreFilesToCome();
<a name="l00200"></a>00200       <span class="keywordtype">void</span>     SetOneObjectOnly(<span class="keywordtype">bool</span> b=<span class="keyword">true</span>);
<a name="l00201"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3cf9baaa3ac0a370b044ab599f2a2313">00201</a>       <span class="keywordtype">void</span>     SetLast(<span class="keywordtype">bool</span> b){SetOneObjectOnly(b);}
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#3e7864f3dabf97cfd70ef2bc2f87f178">00202</a>       <span class="keywordtype">bool</span>     IsLastFile(){ <span class="keywordflow">return</span> !MoreFilesToCome;}
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 
<a name="l00206"></a>00206 
<a name="l00207"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#da7511cdd4225a3d9468d6e70d14ee6b">00207</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* GetDefaultFormat(){<span class="keywordflow">return</span> OBFormat::FindType(NULL);};
<a name="l00208"></a>00208 
<a name="l00210"></a>00210         
<a name="l00213"></a>00213       <span class="keywordtype">bool</span>                              Write(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::ostream* pout=NULL);
<a name="l00214"></a>00214 
<a name="l00216"></a>00216         
<a name="l00222"></a>00222       std::string                     WriteString(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <span class="keywordtype">bool</span> trimWhitespace = <span class="keyword">false</span>);
<a name="l00223"></a>00223 
<a name="l00225"></a>00225         
<a name="l00230"></a>00230       <span class="keywordtype">bool</span>                            WriteFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string filePath);
<a name="l00231"></a>00231 
<a name="l00236"></a>00236       <span class="keywordtype">void</span> CloseOutFile();
<a name="l00237"></a>00237 
<a name="l00239"></a>00239         
<a name="l00243"></a>00243       <span class="keywordtype">bool</span>      Read(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::istream* pin=NULL);
<a name="l00244"></a>00244         
<a name="l00248"></a>00248 <span class="comment">//      OBBase* ReadObject(std::istream* pin=NULL);</span>
<a name="l00249"></a>00249 
<a name="l00251"></a>00251         
<a name="l00255"></a>00255       <span class="keywordtype">bool</span>      ReadString(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string <a class="code" href="namespaceOpenBabel.shtml#89f04d109688f08bf8c4978f420d1a90585462b5ad33a0118d52d2ba232d4e5a">input</a>);
<a name="l00256"></a>00256 
<a name="l00258"></a>00258         
<a name="l00264"></a>00264       <span class="keywordtype">bool</span>      ReadFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string filePath);
<a name="l00265"></a>00265 
<a name="l00271"></a>00271       <span class="keywordtype">bool</span> OpenInAndOutFiles(std::string infilepath, std::string outfilepath);
<a name="l00272"></a>00272 
<a name="l00277"></a>00277       <span class="keywordtype">void</span> ReportNumberConverted(<span class="keywordtype">int</span> count, <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pFormat=NULL);
<a name="l00278"></a>00278 
<a name="l00282"></a>00282       <span class="keywordtype">int</span> NumInputObjects();
<a name="l00283"></a>00283 
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 <span class="keyword">protected</span>:
<a name="l00287"></a>00287       <span class="keyword">static</span> std::string BatchFileName(std::string&amp; BaseName, std::string&amp; InFile);
<a name="l00289"></a>00289       <span class="keyword">static</span> std::string IncrementedFileName(std::string&amp; BaseName, <span class="keyword">const</span> <span class="keywordtype">int</span> Count);
<a name="l00291"></a>00291       <span class="keyword">static</span> <span class="keywordtype">bool</span> CheckForUnintendedBatch(<span class="keyword">const</span> std::string&amp; infile, <span class="keyword">const</span> std::string&amp; outfile);
<a name="l00293"></a>00293       <span class="keywordtype">void</span> InstallStreamFilter();
<a name="l00294"></a>00294 
<a name="l00296"></a>00296 
<a name="l00297"></a>00297     <span class="keyword">protected</span>:
<a name="l00298"></a>00298       <span class="keywordtype">bool</span>             SetStartAndEnd();
<a name="l00299"></a>00299 <span class="comment">//      static FMapType&amp; FormatsMap();///&lt;contains ID and pointer to all OBFormat classes</span>
<a name="l00300"></a>00300 <span class="comment">//      static FMapType&amp; FormatsMIMEMap();///&lt;contains MIME and pointer to all OBFormat classes</span>
<a name="l00301"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#c1851604f28808685ee053bf885ddb5f">00301</a>       <span class="keyword">typedef</span> std::map&lt;std::string,int&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#c1851604f28808685ee053bf885ddb5f">OPAMapType</a>;
<a name="l00302"></a>00302       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#c1851604f28808685ee053bf885ddb5f">OPAMapType</a>&amp; OptionParamArray(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#1527a0a12210467a9dbd6d53f856750b">Option_type</a> typ);
<a name="l00303"></a>00303       <span class="keyword">static</span> <span class="keywordtype">int</span>       LoadFormatFiles();
<a name="l00304"></a>00304       <span class="keywordtype">bool</span>             OpenAndSetFormat(<span class="keywordtype">bool</span> SetFormat, std::ifstream* is);
<a name="l00305"></a>00305 
<a name="l00306"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a6c9a4f53b12ccd12f26e69b85b66079">00306</a>       std::string         InFilename;
<a name="l00307"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#5bc2c997ee63bfdeb1d5b4b209fa843c">00307</a>       std::istream*     pInStream;
<a name="l00308"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#824dd622634f9903999ca5c1a85da141">00308</a>       std::ostream*     pOutStream;
<a name="l00309"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#d41af84985c9e521c949da4c9a28e4e8">00309</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*  pDefaultFormat;
<a name="l00310"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#e83796ec2080902b8aca25f93859e370">00310</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*           pInFormat;
<a name="l00311"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#ae9f38ce61fa0c9131a60db874c82557">00311</a>       <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*   pOutFormat;
<a name="l00312"></a>00312 
<a name="l00313"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#f8ffd48fae1275bdd8f0994a750aafe2">00313</a>       std::map&lt;std::string,std::string&gt; OptionsArray[3];
<a name="l00314"></a>00314 
<a name="l00315"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#81996871f8391b10550156f9adaecd98">00315</a>       <span class="keywordtype">int</span>                 Index;
<a name="l00316"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#0ca255ac24d7303d94d12266d98e25eb">00316</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        StartNumber;
<a name="l00317"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#eb82490f281116f616bd3da45c94b537">00317</a>       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        EndNumber;
<a name="l00318"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#c1433c304d66da16e820d1e079126990">00318</a>       <span class="keywordtype">int</span>                 Count;
<a name="l00319"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#4950192d62b9a88ef46bb05a921dae22">00319</a>       <span class="keywordtype">bool</span>                      m_IsFirstInput;
<a name="l00320"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#20c6dd7917d3f28a9b334380cdf6ba18">00320</a>       <span class="keywordtype">bool</span>                m_IsLast;
<a name="l00321"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#f6a239c77932f2b80f54efaf3cd1eecb">00321</a>       <span class="keywordtype">bool</span>                MoreFilesToCome;
<a name="l00322"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#60e2bacb778eb40f7a83743abf0e4cb2">00322</a>       <span class="keywordtype">bool</span>                OneObjectOnly;
<a name="l00323"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#b05084d109399ad59aaef73e847d717a">00323</a>       <span class="keywordtype">bool</span>                ReadyToInput;
<a name="l00324"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#789f17317f6aa027a37a9de1b6f97fd9">00324</a>       <span class="keywordtype">bool</span>      CheckedForGzip;      
<a name="l00325"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#92818a5eac7475f06be775fa95a83787">00325</a>       <span class="keywordtype">bool</span>      NeedToFreeInStream;
<a name="l00326"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#278c442f100e7b9c257d714ef11bf1cd">00326</a>       <span class="keywordtype">bool</span>      NeedToFreeOutStream;
<a name="l00327"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#a5b5f679b658a363877f489215267fde">00327</a>       <span class="keyword">typedef</span>   <a class="code" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">FilteringInputStreambuf&lt; LineEndingExtractor &gt;</a> <a class="code" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">LErdbuf</a>;
<a name="l00328"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7cb509be9e1845bf9562bd682db87d66">00328</a>       <a class="code" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">LErdbuf</a>*  pLineEndBuf;
<a name="l00329"></a>00329 
<a name="l00330"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#0f720e4700d4ef402b79eaeb0250e3e3">00330</a>       <span class="keyword">static</span> <span class="keywordtype">int</span> FormatFilesLoaded;
<a name="l00331"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#909ac6f8d157e23ce31fee31d1caaf81">00331</a>       <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*             pOb1;
<a name="l00332"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#6b82cd3e38ef474c4dca3a1749b03aa1">00332</a>       std::streampos wInpos; 
<a name="l00333"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#7a200d915b59b26c7cd66c36a58ee8bf">00333</a>       std::streampos rInpos; 
<a name="l00334"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#dbefa4bde67d6d3ae5ec79e335911161">00334</a>       size_t wInlen; 
<a name="l00335"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#f5b79ea1b69ae48d5c1be4b688c56bf2">00335</a>       size_t rInlen; 
<a name="l00336"></a>00336         
<a name="l00337"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#379cd6daeb25ceded4ac0f9a12737f63">00337</a>       OBConversion* pAuxConv;
<a name="l00338"></a>00338 
<a name="l00339"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#2262049f07295a06806a9221de0e6325">00339</a>       std::vector&lt;std::string&gt; SupportedInputFormat; 
<a name="l00340"></a><a class="code" href="classOpenBabel_1_1OBConversion.shtml#5ab1245358d9309063e0c951c3190b7a">00340</a>       std::vector&lt;std::string&gt; SupportedOutputFormat; 
<a name="l00341"></a>00341 
<a name="l00342"></a>00342     };
<a name="l00343"></a>00343 
<a name="l00344"></a>00344 } <span class="comment">//namespace OpenBabel</span>
<a name="l00345"></a>00345 <span class="preprocessor">#endif //OB_CONV_H</span>
<a name="l00346"></a>00346 <span class="preprocessor"></span>
<a name="l00349"></a>00349 
<a name="l00350"></a>00350  
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
