<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: base.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>base.h</h1><a href="base_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">base.h - Base class for OpenBabel objects</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_BASE_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_BASE_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="tokenst_8h.shtml">openbabel/tokenst.h</a>&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="preprocessor">#ifndef UNUSED</span>
<a name="l00032"></a><a class="code" href="base_8h.shtml#c3f9d68b777d1614a06319bd8e1aa134">00032</a> <span class="preprocessor"></span><span class="preprocessor">#define UNUSED(expr) { (void)(expr); }</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>
<a name="l00035"></a>00035 <span class="keyword">namespace </span>OpenBabel
<a name="l00036"></a>00036 {
<a name="l00037"></a>00037 
<a name="l00038"></a>00038   <span class="comment">//Forward declaration of the base class for OBMol OBReaction, OBAtom, etc.</span>
<a name="l00039"></a>00039   <span class="comment">//Declaration later in this file.</span>
<a name="l00040"></a>00040 <span class="keyword">class </span>OBBase;
<a name="l00041"></a>00041 <span class="keyword">class </span>OBConversion; <span class="comment">//used only as pointer</span>
<a name="l00042"></a>00042 
<a name="l00054"></a><a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml">00054</a>   <span class="keyword">namespace </span>OBGenericDataType
<a name="l00055"></a>00055   {
<a name="l00056"></a>00056     <span class="keyword">enum</span>
<a name="l00057"></a>00057     {
<a name="l00059"></a>00059       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f48c9f3737776e5971eb150557176e01c">UndefinedData</a> =      0,
<a name="l00060"></a>00060 
<a name="l00062"></a>00062       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f9432288522c338fb92c2b6ac97b14e2c">PairData</a>      =      1,
<a name="l00063"></a>00063 
<a name="l00065"></a>00065       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f34ccda9485bdd3d9e826c38269fb7b3b">EnergyData</a>    =      2,
<a name="l00066"></a>00066 
<a name="l00068"></a>00068       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f284ec06c1bdafe4191b709768c5d85ef">CommentData</a>   =      3,
<a name="l00069"></a>00069 
<a name="l00071"></a>00071       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f199ed6d35f950334154c3fdde5cbbbd4">ConformerData</a> =      4,
<a name="l00072"></a>00072 
<a name="l00074"></a>00074       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fdaa37e2d4acbd5aed003969939ed1855">ExternalBondData</a> =   5,
<a name="l00075"></a>00075 
<a name="l00077"></a>00077       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fd78bbce29d9508b6ccb014875394dc02">RotamerList</a> =        6,
<a name="l00078"></a>00078 
<a name="l00080"></a>00080       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f5168001c00b948540f79a5233cf9dcac">VirtualBondData</a> =    7,
<a name="l00081"></a>00081 
<a name="l00083"></a>00083       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f1d555742f3036de7748f77904aba3bea">RingData</a> =           8,
<a name="l00084"></a>00084 
<a name="l00086"></a>00086       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f6c284c622db61f23f15331fea9f830f9">TorsionData</a> =        9,
<a name="l00087"></a>00087 
<a name="l00089"></a>00089       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f5ca924671737d3dc9416d1911091f10f">AngleData</a> =         10,
<a name="l00090"></a>00090 
<a name="l00092"></a>00092       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f7bb172a27399e4d31e46d38d66dd4d49">SerialNums</a> =        11,
<a name="l00093"></a>00093 
<a name="l00095"></a>00095       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fa5adff442f97b41fc75dd71a4adb7a9c">UnitCell</a> =          12,
<a name="l00096"></a>00096 
<a name="l00098"></a>00098       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fa4b57b178d32617666666d30c9e466aa">SpinData</a> =          13,
<a name="l00099"></a>00099 
<a name="l00101"></a>00101       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f3ed0b72af34bc5e78cc5c8d227f580d0">ChargeData</a> =        14,
<a name="l00102"></a>00102 
<a name="l00104"></a>00104       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f79fc3964efd75c1fb725876d741a0305">SymmetryData</a> =      15,
<a name="l00105"></a>00105 
<a name="l00107"></a>00107       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f5eaebbce1b1530a2ad7c9f5d51145fd6">ChiralData</a> =        16,
<a name="l00108"></a>00108 
<a name="l00110"></a>00110       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f8c6281a519677655561e668e18c42046">OccupationData</a> =    17,
<a name="l00111"></a>00111 
<a name="l00113"></a>00113       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fc88b72228e33129bf7b6ff449559cfca">DensityData</a> =       18,
<a name="l00114"></a>00114 
<a name="l00116"></a>00116       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f4a9337d124b6b8a50966ec4ff201e4e9">ElectronicData</a> =    19,
<a name="l00117"></a>00117 
<a name="l00119"></a>00119       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fb0f129098bd55fa099d892b2d6be0aac">VibrationData</a> =     20,
<a name="l00120"></a>00120 
<a name="l00122"></a>00122       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f9bde8dedca5dc16dfe60c61cfb0d5396">RotationData</a> =      21,
<a name="l00123"></a>00123 
<a name="l00125"></a>00125       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fb8de7f1bc1bc6e146ce35d6d1d6fddf1">NuclearData</a> =       22,
<a name="l00126"></a>00126 
<a name="l00128"></a>00128       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a> =           23,
<a name="l00129"></a>00129 
<a name="l00131"></a>00131       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f0746885b4f8c9807a08b41c1e4762d5b">GridData</a> =          24,
<a name="l00132"></a>00132 
<a name="l00134"></a>00134       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f3e2938595c3e04bfbfc1d3687cb39ce1">VectorData</a> =        25,
<a name="l00135"></a>00135       
<a name="l00137"></a>00137       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f33b4bfebc81e8591e40892e061e4992a">MatrixData</a> =        26,
<a name="l00138"></a>00138 
<a name="l00140"></a>00140       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f0e61da080ed7ceab058b5355fb61e78c">StereoData</a> =        27,
<a name="l00141"></a>00141 
<a name="l00143"></a>00143       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f1c3700a2d25f9f1941cd5dcba364ed4a">DOSData</a> =           28,
<a name="l00144"></a>00144 
<a name="l00146"></a>00146       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fb5b4bd0b7d821c53bf920dbcaf7a86b3">ElectronicTransitionData</a> =
<a name="l00147"></a>00147                           29,
<a name="l00148"></a>00148 
<a name="l00149"></a>00149       <span class="comment">// space for up to 2^14 more entries...</span>
<a name="l00150"></a>00150 
<a name="l00152"></a>00152       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f267e5c835a82a754ab64ba0526583796">CustomData0</a> = 16384,
<a name="l00153"></a>00153       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f95c15186d7ed74d52ac5818e5ff1fc2d">CustomData1</a> = 16385,
<a name="l00154"></a>00154       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fc8f06dfdf1e470613165be0a7b074584">CustomData2</a> = 16386,
<a name="l00155"></a>00155       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684febdcb9c5f10ae651f74bf5c60bce6e46">CustomData3</a> = 16387,
<a name="l00156"></a>00156       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684ffcd2a3e6236c2c231ddae0cd77787a73">CustomData4</a> = 16388,
<a name="l00157"></a>00157       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f414f7c9e58bd8fc27cb1919b497e6937">CustomData5</a> = 16389,
<a name="l00158"></a>00158       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fb27f3a59483c3b13e50206dd6588c57c">CustomData6</a> = 16390,
<a name="l00159"></a>00159       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f7b6e2124829f9b4d0183e28afb61fe8a">CustomData7</a> = 16391,
<a name="l00160"></a>00160       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f55a7868c735f4c0dddff63b666aff334">CustomData8</a> = 16392,
<a name="l00161"></a>00161       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684ff58df1a487b0e0c7699ee11b68095abf">CustomData9</a> = 16393,
<a name="l00162"></a>00162       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684feb04fd1be7b9a3d163e9aa09936ee784">CustomData10</a> = 16394,
<a name="l00163"></a>00163       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fc93419c4441bbc1d570b61ca114a6456">CustomData11</a> = 16395,
<a name="l00164"></a>00164       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f4c6efdcb1a9c92b90bc4179a0049ca32">CustomData12</a> = 16396,
<a name="l00165"></a>00165       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684ff7ed7da849dd80dfb088cc50914b6a50">CustomData13</a> = 16397,
<a name="l00166"></a>00166       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe0ffaea37457f10caa621cb6782d9a4b">CustomData14</a> = 16398,
<a name="l00167"></a>00167       <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fb87c893a7bccf69e7a1c164a3cad06e3">CustomData15</a> = 16399
<a name="l00168"></a>00168     };
<a name="l00169"></a>00169   } <span class="comment">// end namespace</span>
<a name="l00170"></a><a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262">00170</a>   <span class="keyword">enum</span> <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262">DataOrigin</a> {
<a name="l00171"></a>00171     <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262d1140b1a682392171254b6e06f3e3699">any</a>,                 
<a name="l00172"></a>00172     <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a4862726260af83c05ea035258323bcce949ebc26">fileformatInput</a>,     
<a name="l00173"></a>00173     <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a4862726239eda83215e034b69846226345dee9da">userInput</a>,           
<a name="l00174"></a>00174     <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262ad0ee05f7c3bd0848f36c05d69bf47d5">perceived</a>,           
<a name="l00175"></a>00175     <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262a351bee7daaf1c28592d3215dfd2aa8e">external</a>,            
<a name="l00176"></a><a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262788f9266660de88d69e263371e8defce">00176</a>     <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262788f9266660de88d69e263371e8defce">local</a>                
<a name="l00177"></a>00177   };
<a name="l00178"></a>00178 
<a name="l00180"></a>00180   <span class="comment">// Class introduction in generic.cpp</span>
<a name="l00181"></a>00181   <span class="comment">// This base class declaration  has no dependence on mol.h</span>
<a name="l00182"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml">00182</a>   <span class="keyword">class </span>OBAPI OBGenericData
<a name="l00183"></a>00183   {
<a name="l00184"></a>00184   <span class="keyword">protected</span>:
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#24f58bae462c6a01cf5a75cac4217745">00185</a>     std::string  _attr;  
<a name="l00186"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#5ebb5c4043d0b2e7c590f6a0905a8522">00186</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _type;  
<a name="l00187"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#b5e34e92cc38f680b1d9bf2aff733723">00187</a>     <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262">DataOrigin</a>   _source;
<a name="l00188"></a>00188   <span class="keyword">public</span>:
<a name="l00189"></a>00189     OBGenericData(<span class="keyword">const</span> std::string attr = <span class="stringliteral">"undefined"</span>,
<a name="l00190"></a>00190                   <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type =  <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684f48c9f3737776e5971eb150557176e01c">OBGenericDataType::UndefinedData</a>,
<a name="l00191"></a>00191                   <span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262">DataOrigin</a> source = <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262d1140b1a682392171254b6e06f3e3699">any</a>);
<a name="l00192"></a>00192     <span class="comment">//Use default copy constructor and assignment operators</span>
<a name="l00193"></a>00193     <span class="comment">//OBGenericData(const OBGenericData&amp;);</span>
<a name="l00194"></a>00194                 
<a name="l00195"></a>00195     <span class="comment">/* Virtual constructors added. see </span>
<a name="l00196"></a>00196 <span class="comment">       http://www.parashift.com/c++-faq-lite/abcs.html#faq-22.5</span>
<a name="l00197"></a>00197 <span class="comment">       to allow copying given only a base class OBGenericData pointer.</span>
<a name="l00198"></a>00198 <span class="comment">       It may be necessary to cast the return pointer to the derived class</span>
<a name="l00199"></a>00199 <span class="comment">       type, since we are doing without Covariant Return Types </span>
<a name="l00200"></a>00200 <span class="comment">       http://www.parashift.com/c++-faq-lite/virtual-functions.html#faq-20.8</span>
<a name="l00201"></a>00201 <span class="comment">    </span>
<a name="l00202"></a>00202 <span class="comment">       A derived class may return NULL if copying is inappropriate */</span>
<a name="l00203"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00203</a>     <span class="keyword">virtual</span> OBGenericData* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>
<a name="l00204"></a>00204 <span class="keyword">    </span>{ <span class="keywordflow">return</span> NULL; } 
<a name="l00205"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#974178a0844c19b027e82861350ea518">00205</a>     <span class="keyword">virtual</span> ~OBGenericData()    {}
<a name="l00206"></a>00206     <span class="comment">//Use default copy constructor and assignment operators</span>
<a name="l00207"></a>00207     <span class="comment">//OBGenericData&amp; operator=(const OBGenericData &amp;src);</span>
<a name="l00208"></a>00208 
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#e27a36597d8af40b01ece5b447a26fac">00210</a>     <span class="keywordtype">void</span>                      SetAttribute(<span class="keyword">const</span> std::string &amp;v)
<a name="l00211"></a>00211     {        _attr = v;        }
<a name="l00213"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#8a4db470b7aa59888c93c739823b5fb5">00213</a>     <span class="keywordtype">void</span> SetOrigin(<span class="keyword">const</span> <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262">DataOrigin</a> s) { _source = s; }
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#f6db4f0c858777aedb4e7597443a3085">00215</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetAttribute()<span class="keyword">  const</span>
<a name="l00216"></a>00216 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_attr);    }
<a name="l00218"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#8bcb528c776fa4c08119aea9c3983f25">00218</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                GetDataType()<span class="keyword">    const</span>
<a name="l00219"></a>00219 <span class="keyword">    </span>{        <span class="keywordflow">return</span>(_type);    }
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#53b106aeffbab94c992178b754e1f336">00222</a>     <span class="keyword">virtual</span> <span class="keyword">const</span> std::string &amp;GetValue()<span class="keyword">  const</span>
<a name="l00223"></a>00223 <span class="keyword">    </span>{                   <span class="keywordflow">return</span> _attr; }
<a name="l00224"></a><a class="code" href="classOpenBabel_1_1OBGenericData.shtml#1082f621f237779995146a8333f0e17d">00224</a>     <span class="keyword">virtual</span> <a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262">DataOrigin</a> GetOrigin()<span class="keyword"> const</span>
<a name="l00225"></a>00225 <span class="keyword">    </span>{     <span class="keywordflow">return</span> _source; }
<a name="l00226"></a>00226   };
<a name="l00227"></a>00227 
<a name="l00229"></a><a class="code" href="namespaceOpenBabel.shtml#59b304fb983820cf38d2a2ca387560a3">00229</a>   <span class="keyword">typedef</span> std::vector&lt;OBGenericData*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#59b304fb983820cf38d2a2ca387560a3">OBDataIterator</a>;
<a name="l00230"></a>00230   
<a name="l00232"></a>00232   <span class="comment">// introduction in base.cpp</span>
<a name="l00233"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml">00233</a>   <span class="keyword">class </span>OBAPI OBBase
<a name="l00234"></a>00234     {
<a name="l00235"></a>00235     <span class="keyword">public</span>:
<a name="l00236"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#2481817703ada46c13e9ad1ae0a146dc">00236</a>       <span class="keyword">virtual</span> ~OBBase()
<a name="l00237"></a>00237         {
<a name="l00238"></a>00238           <span class="keywordflow">if</span> (!_vdata.empty())
<a name="l00239"></a>00239             {
<a name="l00240"></a>00240               std::vector&lt;OBGenericData*&gt;::iterator m;
<a name="l00241"></a>00241               <span class="keywordflow">for</span> (m = _vdata.begin();m != _vdata.end();m++)
<a name="l00242"></a>00242                 <span class="keyword">delete</span> *m;
<a name="l00243"></a>00243               _vdata.clear();
<a name="l00244"></a>00244             }
<a name="l00245"></a>00245         }
<a name="l00246"></a>00246 
<a name="l00248"></a>00248       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Clear();
<a name="l00249"></a>00249 
<a name="l00255"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#2abbbccb6f16e8fbdc50ecad8f8b05ae">00255</a>       <span class="keyword">virtual</span> OBBase* DoTransformations(<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* <span class="comment">/*pOptions*/</span>,
<a name="l00256"></a>00256                                         <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)
<a name="l00257"></a>00257         {
<a name="l00258"></a>00258           <span class="keywordflow">return</span> <span class="keyword">this</span>;
<a name="l00259"></a>00259         }
<a name="l00260"></a>00260 
<a name="l00262"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#49b2feff74b90e6b89e1c624868a8b9c">00262</a>       <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ClassDescription()
<a name="l00263"></a>00263         {
<a name="l00264"></a>00264           <span class="keywordflow">return</span> <span class="stringliteral">""</span>;
<a name="l00265"></a>00265         } 
<a name="l00266"></a>00266 
<a name="l00268"></a>00268       <span class="keyword">template</span>&lt; <span class="keyword">class</span> T &gt;
<a name="l00269"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#9bfed6d1f36b99b2874fb95fa8e938d8">00269</a>       <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#1459d0a7e375155f21e29c969d32154edb13501df95a4173ed43412ebcc3b8a5">T</a>* CastAndClear(<span class="keywordtype">bool</span> clear=<span class="keyword">true</span>)
<a name="l00270"></a>00270         {
<a name="l00271"></a>00271           <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#1459d0a7e375155f21e29c969d32154edb13501df95a4173ed43412ebcc3b8a5">T</a>* pOb = dynamic_cast&lt;T*&gt;(<span class="keyword">this</span>);
<a name="l00272"></a>00272           <span class="keywordflow">if</span>(pOb &amp;&amp; clear)<span class="comment">// Clear only if this is of target class</span>
<a name="l00273"></a>00273             Clear();
<a name="l00274"></a>00274           <span class="keywordflow">return</span> pOb;
<a name="l00275"></a>00275         }
<a name="l00276"></a>00276 
<a name="l00279"></a>00279       <span class="comment">//Currently no title data member in base class.</span>
<a name="l00280"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#cd8aeb5f252cfd44a18428583062c405">00280</a>       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>  *GetTitle(<span class="keywordtype">bool</span> replaceNewlines = <span class="keyword">true</span>)<span class="keyword"> const </span>{ <a class="code" href="base_8h.shtml#c3f9d68b777d1614a06319bd8e1aa134">UNUSED</a>(replaceNewlines); <span class="keywordflow">return</span> <span class="stringliteral">""</span>;}
<a name="l00281"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#21efe3fa97ad3e00e6ce57695b4010e3">00281</a>       <span class="keyword">virtual</span> <span class="keywordtype">void</span>  SetTitle(<span class="keyword">const</span> <span class="keywordtype">char</span> *) {}
<a name="l00282"></a>00282 
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 
<a name="l00286"></a>00286       <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> std::string &amp;);
<a name="l00288"></a>00288       <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00290"></a>00290       <span class="keywordtype">bool</span>                              HasData(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00292"></a>00292       <span class="keywordtype">void</span>                              DeleteData(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00294"></a>00294       <span class="keywordtype">void</span>                              DeleteData(OBGenericData*);
<a name="l00296"></a>00296       <span class="keywordtype">void</span>                              DeleteData(std::vector&lt;OBGenericData*&gt;&amp;);
<a name="l00298"></a>00298       <span class="keywordtype">bool</span>                              DeleteData(<span class="keyword">const</span> std::string&amp; s);
<a name="l00300"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#1df4657e240691dde0da8d8690a229fe">00300</a>       <span class="keywordtype">void</span>                              <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#2e520baeab5e72a8cd84e00dce61684fe1f9ad3171f594acff6ed2871c2a8fcf">SetData</a>(OBGenericData *d)
<a name="l00301"></a>00301         {
<a name="l00302"></a>00302           <span class="keywordflow">if</span>(d) _vdata.push_back(d);
<a name="l00303"></a>00303         }
<a name="l00306"></a>00306       <span class="keywordtype">void</span>                              CloneData(OBGenericData *d);
<a name="l00308"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#b248b8fbbe8fb3c2bf3df36c3fb67224">00308</a>       size_t                      DataSize()<span class="keyword"> const </span>
<a name="l00309"></a>00309 <span class="keyword">        </span>{ <span class="keywordflow">return</span>(_vdata.size()); }
<a name="l00312"></a>00312       OBGenericData                    *GetData(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00314"></a>00314       OBGenericData                    *GetData(<span class="keyword">const</span> std::string&amp;);
<a name="l00316"></a>00316       OBGenericData                    *GetData(<span class="keyword">const</span> <span class="keywordtype">char</span> *);
<a name="l00320"></a>00320       std::vector&lt;OBGenericData*&gt;       GetAllData(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> type);
<a name="l00322"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#b161ea56646ebff9735fb7759c4ed26d">00322</a>       std::vector&lt;OBGenericData*&gt;      &amp;GetData() { <span class="keywordflow">return</span>(_vdata); }
<a name="l00324"></a>00324       std::vector&lt;OBGenericData*&gt;      GetData(<a class="code" href="namespaceOpenBabel.shtml#0f35c941bb69ea918e66e14a48627262">DataOrigin</a> source);
<a name="l00326"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#7b81cb40759a1c739ea3131d7d489fe8">00326</a>       <a class="code" href="namespaceOpenBabel.shtml#59b304fb983820cf38d2a2ca387560a3">OBDataIterator</a>  BeginData()
<a name="l00327"></a>00327         { <span class="keywordflow">return</span>(_vdata.begin());        }
<a name="l00329"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#6ca6637fed3e5574eb5ca330ccf64f28">00329</a>       <a class="code" href="namespaceOpenBabel.shtml#59b304fb983820cf38d2a2ca387560a3">OBDataIterator</a>  EndData()
<a name="l00330"></a>00330         { <span class="keywordflow">return</span>(_vdata.end());          }
<a name="l00332"></a>00332     <span class="keyword">protected</span>:
<a name="l00333"></a><a class="code" href="classOpenBabel_1_1OBBase.shtml#209abfc106bd9af01a65149eb3399c16">00333</a>       std::vector&lt;OBGenericData*&gt; _vdata; 
<a name="l00334"></a>00334 
<a name="l00335"></a>00335     };
<a name="l00336"></a>00336 
<a name="l00337"></a>00337 } <span class="comment">//namespace OpenBabel</span>
<a name="l00338"></a>00338 
<a name="l00339"></a>00339 <span class="preprocessor">#endif // OB_BASE_H</span>
<a name="l00340"></a>00340 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
