<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: op.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>op.h</h1><a href="op_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">op.h - plugin options or operations</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2007 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_OP_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_OP_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml">openbabel/plugin.h</a>&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="keyword">namespace </span>OpenBabel
<a name="l00029"></a>00029 {
<a name="l00030"></a>00030   <span class="keyword">class </span>OBConversion; <span class="comment">//used only as a pointer</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="comment">// Class introduction below</span>
<a name="l00033"></a><a class="code" href="classOpenBabel_1_1OBOp.shtml">00033</a> <span class="keyword">class </span>OBAPI OBOp : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035   <a class="code" href="plugin_8h.shtml#e7d38c51c2ef93a98ee7cc6e33fb64f2">MAKE_PLUGIN</a>(OBOp);
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">public</span>:
<a name="l00038"></a><a class="code" href="classOpenBabel_1_1OBOp.shtml#90a589b07c389ca46c02d092af4cc72b">00038</a>   <span class="keyword">typedef</span> <span class="keyword">const</span> std::map&lt;std::string, std::string&gt; <a class="code" href="classOpenBabel_1_1OBOp.shtml#90a589b07c389ca46c02d092af4cc72b">OpMap</a> ;
<a name="l00039"></a>00039 
<a name="l00041"></a><a class="code" href="classOpenBabel_1_1OBOp.shtml#f8910015aaead503bcc4d5b00990cdaa">00041</a>   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* TypeID(){ <span class="keywordflow">return</span> <span class="stringliteral">"ops"</span>; }
<a name="l00042"></a>00042 
<a name="l00044"></a>00044   <span class="comment">//NOTE: the parameters were changed in r3532</span>
<a name="l00045"></a>00045   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Do(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <span class="keyword">const</span> <span class="keywordtype">char</span>* OptionText=NULL, OpMap* pOptions=NULL, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv=NULL)=0;
<a name="l00046"></a>00046 
<a name="l00048"></a>00048   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WorksWith(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb)<span class="keyword">const</span>=0;
<a name="l00049"></a>00049 
<a name="l00051"></a><a class="code" href="classOpenBabel_1_1OBOp.shtml#ee3f12c4a275faa4a745d2e60d1e686b">00051</a>   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ProcessVec(std::vector&lt;OBBase*&gt;&amp; vec){ <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00052"></a>00052 
<a name="l00054"></a><a class="code" href="classOpenBabel_1_1OBOp.shtml#ae75a6236feddf89cd2e1950dabbb0c9">00054</a>   <span class="keyword">static</span> std::string OpOptions(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb)
<a name="l00055"></a>00055   {
<a name="l00056"></a>00056     std::string s;
<a name="l00057"></a>00057     <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#0cb8ca530cc677bb6bc8dd6831d68e52">OBPlugin::PluginIterator</a> itr;
<a name="l00058"></a>00058     <span class="keywordflow">for</span>(itr=<a class="code" href="classOpenBabel_1_1OBPlugin.shtml#61f56413b478eb7de76ff47e0e1cb2f9">OBPlugin::Begin</a>(<span class="stringliteral">"ops"</span>);itr!=<a class="code" href="classOpenBabel_1_1OBPlugin.shtml#e893d1a3b6cf1458707d1dc500d69dfc">OBPlugin::End</a>(<span class="stringliteral">"ops"</span>);++itr)
<a name="l00059"></a>00059     {
<a name="l00060"></a>00060       <span class="keywordflow">if</span>(*(itr-&gt;first)==<span class="charliteral">'_'</span>)<span class="comment">//ignore ops with IDs that begin with '_'</span>
<a name="l00061"></a>00061         <span class="keywordflow">continue</span>;
<a name="l00062"></a>00062       OBOp* pOp = dynamic_cast&lt;OBOp*&gt;(itr-&gt;second);
<a name="l00063"></a>00063       <span class="keywordflow">if</span>(pOp &amp;&amp; pOp-&gt;<a class="code" href="classOpenBabel_1_1OBOp.shtml#139ca90987e162240ec6587e49a8fe0d">WorksWith</a>(pOb))
<a name="l00064"></a>00064       {
<a name="l00065"></a>00065         s += <span class="stringliteral">"--"</span>;
<a name="l00066"></a>00066         s += itr-&gt;first; <span class="comment">//ID</span>
<a name="l00067"></a>00067         s += <span class="charliteral">' '</span>;
<a name="l00068"></a>00068         s += <a class="code" href="classOpenBabel_1_1OBPlugin.shtml#f4f0445648d86db4e6e1776ff618327f">OBPlugin::FirstLine</a>(pOp-&gt;<a class="code" href="classOpenBabel_1_1OBPlugin.shtml#1e366f9470579795588b8ec40b5fa33c">Description</a>()) + <span class="charliteral">'\n'</span>;
<a name="l00069"></a>00069       }
<a name="l00070"></a>00070     }
<a name="l00071"></a>00071     s += <span class="charliteral">'\n'</span>;
<a name="l00072"></a>00072     <span class="keywordflow">return</span> s;
<a name="l00073"></a>00073   }
<a name="l00074"></a>00074 
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1OBOp.shtml#e68874728dd39b9268b4a3f7522b3e1a">00080</a>   <span class="keyword">static</span> <span class="keywordtype">bool</span> DoOps(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <a class="code" href="classOpenBabel_1_1OBOp.shtml#90a589b07c389ca46c02d092af4cc72b">OpMap</a>* pOptions, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv)
<a name="l00081"></a>00081   {
<a name="l00082"></a>00082     OpMap::const_iterator itr;
<a name="l00083"></a>00083     <span class="keywordflow">for</span>(itr=pOptions-&gt;begin();itr!=pOptions-&gt;end();++itr)
<a name="l00084"></a>00084     {
<a name="l00085"></a>00085       OBOp* pOp = FindType(itr-&gt;first.c_str());
<a name="l00086"></a>00086       <span class="keywordflow">if</span>(pOp)
<a name="l00087"></a>00087         <span class="keywordflow">if</span>(!pOp-&gt;Do(pOb, itr-&gt;second.c_str(), pOptions, pConv))
<a name="l00088"></a>00088           <span class="keywordflow">return</span> <span class="keyword">false</span>; <span class="comment">//Op has decided molecule should not be output</span>
<a name="l00089"></a>00089     }
<a name="l00090"></a>00090     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00091"></a>00091   }
<a name="l00092"></a>00092 };
<a name="l00093"></a>00093 
<a name="l00136"></a>00136 }<span class="comment">//namespace</span>
<a name="l00137"></a>00137 
<a name="l00138"></a>00138 <span class="preprocessor">#endif</span>
<a name="l00139"></a>00139 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
