<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: obiter.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>obiter.h</h1><a href="obiter_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">obiter.h - STL-style iterators for Open Babel.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_OBITER_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_OBITER_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml">openbabel/bitvec.h</a>&gt;</span>
<a name="l00026"></a>00026 
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;stack&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;queue&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">namespace </span>OpenBabel
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033 
<a name="l00034"></a>00034   <span class="keyword">class </span>OBMol;
<a name="l00035"></a>00035   <span class="keyword">class </span>OBAtom;
<a name="l00036"></a>00036   <span class="keyword">class </span>OBBond;
<a name="l00037"></a>00037   <span class="keyword">class </span>OBResidue;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039   <span class="comment">// more detailed descriptions and documentation in obiter.cpp</span>
<a name="l00040"></a>00040 
<a name="l00042"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">00042</a>   <span class="keyword">class </span>OBAPI OBMolAtomIter {
<a name="l00043"></a>00043     std::vector&lt;OBAtom*&gt;::iterator _i;
<a name="l00044"></a>00044     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;
<a name="l00045"></a>00045     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_ptr;
<a name="l00046"></a>00046   <span class="keyword">public</span>:
<a name="l00047"></a>00047 
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#0616e89427542ed85a7239a5bf26d33d">00048</a>     OBMolAtomIter() :_parent(NULL), _ptr(NULL) { }
<a name="l00049"></a>00049     OBMolAtomIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00050"></a>00050     OBMolAtomIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00051"></a>00051     OBMolAtomIter(<span class="keyword">const</span> OBMolAtomIter &amp;ai);
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#423dae27a84a739a88c47f489c5e9700">00052</a>     ~OBMolAtomIter() { }
<a name="l00053"></a>00053 
<a name="l00054"></a>00054     OBMolAtomIter&amp; operator=(<span class="keyword">const</span> OBMolAtomIter &amp;ai);
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00056</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00058"></a>00058     OBMolAtomIter&amp; operator++();
<a name="l00060"></a>00060     OBMolAtomIter  operator++(<span class="keywordtype">int</span>);
<a name="l00062"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#70d4ad91aa2b6651a99c1d01f2029aba">00062</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00064"></a><a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#17dd57f02b28e3ba26e6af07efc7b387">00064</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00065"></a>00065   };
<a name="l00066"></a>00066 
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">00068</a>   <span class="keyword">class </span>OBAPI OBMolAtomDFSIter {
<a name="l00069"></a>00069     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>               *_parent;
<a name="l00070"></a>00070     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>              *_ptr;
<a name="l00071"></a>00071     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>             _notVisited;
<a name="l00072"></a>00072     std::stack&lt;OBAtom *&gt; _stack;
<a name="l00073"></a>00073   <span class="keyword">public</span>:
<a name="l00074"></a>00074 
<a name="l00075"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#e13f9de2c1b0c05dec36c0907cef4789">00075</a>     OBMolAtomDFSIter() : _parent(NULL), _ptr(NULL) { }
<a name="l00076"></a>00076     OBMolAtomDFSIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <span class="keywordtype">int</span> StartIndex=1);
<a name="l00077"></a>00077     OBMolAtomDFSIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">int</span> StartIndex=1);
<a name="l00078"></a>00078     OBMolAtomDFSIter(<span class="keyword">const</span> OBMolAtomDFSIter &amp;ai);
<a name="l00079"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#369f7868df124b0ee29f63bb264dddb6">00079</a>     ~OBMolAtomDFSIter() { }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081     OBMolAtomDFSIter&amp; operator=(<span class="keyword">const</span> OBMolAtomDFSIter &amp;ai);
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00083</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00085"></a>00085     OBMolAtomDFSIter&amp; operator++();
<a name="l00087"></a>00087     OBMolAtomDFSIter  operator++(<span class="keywordtype">int</span>);
<a name="l00089"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#70d4ad91aa2b6651a99c1d01f2029aba">00089</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00091"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#17dd57f02b28e3ba26e6af07efc7b387">00091</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#96e8b7ff640354dc7c436dc79cf50487">00093</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* next()
<a name="l00094"></a>00094     { 
<a name="l00095"></a>00095       <span class="keywordflow">if</span>(_stack.empty())
<a name="l00096"></a>00096         <span class="keywordflow">return</span> NULL; <span class="comment">//end of a disconnected fragment</span>
<a name="l00097"></a>00097       <span class="keywordflow">else</span>
<a name="l00098"></a>00098         <span class="keywordflow">return</span> _stack.top(); <span class="comment">//the next atom</span>
<a name="l00099"></a>00099     }
<a name="l00100"></a>00100   };
<a name="l00101"></a>00101 
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">00103</a>   <span class="keyword">class </span>OBAPI OBMolAtomBFSIter {
<a name="l00104"></a>00104     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>               *_parent;
<a name="l00105"></a>00105     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>              *_ptr;
<a name="l00106"></a>00106     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>             _notVisited;
<a name="l00107"></a>00107     std::queue&lt;OBAtom *&gt; _queue;
<a name="l00108"></a>00108     std::vector&lt;int&gt;     _depth;
<a name="l00109"></a>00109   <span class="keyword">public</span>:
<a name="l00110"></a>00110 
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#65b1f00990b3cd1ff9a3f5ee9a60dd66">00111</a>     OBMolAtomBFSIter(): _parent(NULL), _ptr(NULL) { }
<a name="l00112"></a>00112     OBMolAtomBFSIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <span class="keywordtype">int</span> StartIndex = 1);
<a name="l00113"></a>00113     OBMolAtomBFSIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">int</span> StartIndex = 1);
<a name="l00114"></a>00114     OBMolAtomBFSIter(<span class="keyword">const</span> OBMolAtomBFSIter &amp;ai);
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#784d98262201d09635a2be3f2f7d79bf">00115</a>     ~OBMolAtomBFSIter() { }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117     OBMolAtomBFSIter&amp; operator=(<span class="keyword">const</span> OBMolAtomBFSIter &amp;ai);
<a name="l00119"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00119</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00121"></a>00121     OBMolAtomBFSIter&amp; operator++();
<a name="l00123"></a>00123     OBMolAtomBFSIter  operator++(<span class="keywordtype">int</span>);
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#70d4ad91aa2b6651a99c1d01f2029aba">00125</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00127"></a><a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#17dd57f02b28e3ba26e6af07efc7b387">00127</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00130"></a>00130     <span class="keywordtype">int</span> CurrentDepth() <span class="keyword">const</span>;
<a name="l00131"></a>00131   };
<a name="l00132"></a>00132 
<a name="l00134"></a><a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">00134</a>   <span class="keyword">class </span>OBAPI OBMolBondBFSIter {
<a name="l00135"></a>00135     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>               *_parent;
<a name="l00136"></a>00136     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>              *_ptr;
<a name="l00137"></a>00137     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>             _notVisited;
<a name="l00138"></a>00138     std::queue&lt;OBBond *&gt; _queue;
<a name="l00139"></a>00139     std::vector&lt;int&gt;     _depth;
<a name="l00140"></a>00140   <span class="keyword">public</span>:
<a name="l00141"></a>00141 
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#80dfd7dcb0e7ad5461d8b80520ca4385">00142</a>     OBMolBondBFSIter(): _parent(NULL), _ptr(NULL) { }
<a name="l00143"></a>00143     OBMolBondBFSIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <span class="keywordtype">int</span> StartIndex = 0);
<a name="l00144"></a>00144     OBMolBondBFSIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">int</span> StartIndex = 0);
<a name="l00145"></a>00145     OBMolBondBFSIter(<span class="keyword">const</span> OBMolBondBFSIter &amp;ai);
<a name="l00146"></a><a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#9cf95a80fc54985f6f679a0816f42600">00146</a>     ~OBMolBondBFSIter() { }
<a name="l00147"></a>00147 
<a name="l00148"></a>00148     OBMolBondBFSIter&amp; operator=(<span class="keyword">const</span> OBMolBondBFSIter &amp;ai);
<a name="l00150"></a><a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00150</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00152"></a>00152     OBMolBondBFSIter&amp; operator++();
<a name="l00154"></a>00154     OBMolBondBFSIter  operator++(<span class="keywordtype">int</span>);
<a name="l00156"></a><a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#2177cf7a12d2d648d1c8fe2957603677">00156</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00158"></a><a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#52685467c10daee3c0b9f052cf3f93e8">00158</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00161"></a>00161     <span class="keywordtype">int</span> CurrentDepth() <span class="keyword">const</span>;
<a name="l00162"></a>00162   };
<a name="l00163"></a>00163 
<a name="l00165"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">00165</a>   <span class="keyword">class </span>OBAPI OBMolBondIter {
<a name="l00166"></a>00166     std::vector&lt;OBBond*&gt;::iterator _i;
<a name="l00167"></a>00167     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;
<a name="l00168"></a>00168     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *_ptr;
<a name="l00169"></a>00169   <span class="keyword">public</span>:
<a name="l00170"></a>00170 
<a name="l00171"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#6d9a8894d83a05f565fb8cae1d40153a">00171</a>     OBMolBondIter() : _parent(NULL), _ptr(NULL) {}
<a name="l00172"></a>00172     OBMolBondIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00173"></a>00173     OBMolBondIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00174"></a>00174     OBMolBondIter(<span class="keyword">const</span> OBMolBondIter &amp;bi);
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#212fd7a836bdde5c7641e5650bd5710f">00175</a>     ~OBMolBondIter() { }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177     OBMolBondIter&amp; operator=(<span class="keyword">const</span> OBMolBondIter &amp;bi);
<a name="l00179"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00179</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00181"></a>00181     OBMolBondIter&amp; operator++();
<a name="l00183"></a>00183     OBMolBondIter  operator++(<span class="keywordtype">int</span>);
<a name="l00185"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#2177cf7a12d2d648d1c8fe2957603677">00185</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00187"></a><a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#52685467c10daee3c0b9f052cf3f93e8">00187</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00188"></a>00188   };
<a name="l00189"></a>00189 
<a name="l00191"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">00191</a>   <span class="keyword">class </span>OBAPI OBAtomAtomIter {
<a name="l00192"></a>00192     std::vector&lt;OBBond*&gt;::iterator _i;
<a name="l00193"></a>00193     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_parent;
<a name="l00194"></a>00194     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_ptr;
<a name="l00195"></a>00195   <span class="keyword">public</span>:
<a name="l00196"></a>00196 
<a name="l00197"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#7bc15d97fb491e2d72f111d8466989ef">00197</a>     OBAtomAtomIter() : _parent(NULL), _ptr(NULL) { }
<a name="l00198"></a>00198     OBAtomAtomIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atm);
<a name="l00199"></a>00199     OBAtomAtomIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;atm);
<a name="l00200"></a>00200     OBAtomAtomIter(<span class="keyword">const</span> OBAtomAtomIter &amp;ai);
<a name="l00201"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#cbe1e09ef024457d41c7c82e92ba8dc7">00201</a>     ~OBAtomAtomIter() { }
<a name="l00202"></a>00202 
<a name="l00203"></a>00203     OBAtomAtomIter&amp; operator=(<span class="keyword">const</span> OBAtomAtomIter &amp;ai);
<a name="l00205"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00205</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00207"></a>00207     OBAtomAtomIter&amp; operator++();
<a name="l00209"></a>00209     OBAtomAtomIter  operator++(<span class="keywordtype">int</span>);
<a name="l00211"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#70d4ad91aa2b6651a99c1d01f2029aba">00211</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }
<a name="l00213"></a><a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#17dd57f02b28e3ba26e6af07efc7b387">00213</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }
<a name="l00214"></a>00214   };
<a name="l00215"></a>00215 
<a name="l00217"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">00217</a>   <span class="keyword">class </span>OBAPI OBAtomBondIter {
<a name="l00218"></a>00218     std::vector&lt;OBBond*&gt;::iterator _i;
<a name="l00219"></a>00219     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_parent;
<a name="l00220"></a>00220     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *_ptr;
<a name="l00221"></a>00221   <span class="keyword">public</span>:
<a name="l00222"></a>00222 
<a name="l00223"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#0c0c6497d58a63ce200493c701bc0c3f">00223</a>     OBAtomBondIter(): _parent(NULL), _ptr(NULL) { }
<a name="l00224"></a>00224     OBAtomBondIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atm);
<a name="l00225"></a>00225     OBAtomBondIter(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;atm);
<a name="l00226"></a>00226     OBAtomBondIter(<span class="keyword">const</span> OBAtomBondIter &amp;bi);
<a name="l00227"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#c4861f2411a1a7b066a9f47975748cbb">00227</a>     ~OBAtomBondIter() { }
<a name="l00228"></a>00228 
<a name="l00229"></a>00229     OBAtomBondIter&amp; operator=(<span class="keyword">const</span> OBAtomBondIter &amp;bi);
<a name="l00231"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00231</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00233"></a>00233     OBAtomBondIter&amp; operator++();
<a name="l00235"></a>00235     OBAtomBondIter  operator++(<span class="keywordtype">int</span>);
<a name="l00237"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#2177cf7a12d2d648d1c8fe2957603677">00237</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00239"></a><a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#52685467c10daee3c0b9f052cf3f93e8">00239</a>     <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00240"></a>00240   };
<a name="l00241"></a>00241 
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">00243</a>   <span class="keyword">class </span>OBAPI OBResidueIter {
<a name="l00244"></a>00244     std::vector&lt;OBResidue*&gt;::iterator _i;
<a name="l00245"></a>00245     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *_ptr;
<a name="l00246"></a>00246     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;
<a name="l00247"></a>00247   <span class="keyword">public</span>:
<a name="l00248"></a>00248 
<a name="l00249"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#cb73514ae98757feb6e292b74a6a3e73">00249</a>     OBResidueIter() : _ptr(NULL), _parent(NULL) { }
<a name="l00250"></a>00250     OBResidueIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00251"></a>00251     OBResidueIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00252"></a>00252     OBResidueIter(<span class="keyword">const</span> OBResidueIter &amp;ri);
<a name="l00253"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#005219dd578d9204a4afd2c51958555d">00253</a>     ~OBResidueIter() { }
<a name="l00254"></a>00254 
<a name="l00255"></a>00255     OBResidueIter&amp; operator=(<span class="keyword">const</span> OBResidueIter &amp;ri);
<a name="l00257"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00257</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00259"></a>00259     OBResidueIter&amp; operator++();
<a name="l00261"></a>00261     OBResidueIter  operator++(<span class="keywordtype">int</span>);
<a name="l00263"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#762045c56f82920b709ce5cc5a381d8d">00263</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>* operator-&gt;()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00265"></a><a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#b1e2be06bf7259f8f10f9cb0c5ec1e68">00265</a>     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00266"></a>00266   };
<a name="l00267"></a>00267 
<a name="l00269"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">00269</a>   <span class="keyword">class </span>OBAPI OBResidueAtomIter {
<a name="l00270"></a>00270     std::vector&lt;OBAtom*&gt;::iterator _i;
<a name="l00271"></a>00271     <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *_parent;
<a name="l00272"></a>00272     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>    *_ptr;
<a name="l00273"></a>00273   <span class="keyword">public</span>:
<a name="l00274"></a>00274 
<a name="l00275"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#7fe52173712d422cfed7ba7699c93e76">00275</a>     OBResidueAtomIter() : _parent(NULL), _ptr(NULL) { }
<a name="l00276"></a>00276     OBResidueAtomIter(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *res);
<a name="l00277"></a>00277     OBResidueAtomIter(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> &amp;res);
<a name="l00278"></a>00278     OBResidueAtomIter(<span class="keyword">const</span> OBResidueAtomIter &amp;ri);
<a name="l00279"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#1a5680091008b518d84ca4d6794d2df1">00279</a>     ~OBResidueAtomIter() { }
<a name="l00280"></a>00280 
<a name="l00281"></a>00281     OBResidueAtomIter &amp;operator = (<span class="keyword">const</span> OBResidueAtomIter &amp;ri);
<a name="l00283"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00283</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00285"></a>00285     OBResidueAtomIter&amp; operator++ ();
<a name="l00287"></a>00287     OBResidueAtomIter  operator++ (<span class="keywordtype">int</span>);
<a name="l00289"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#70d4ad91aa2b6651a99c1d01f2029aba">00289</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *operator-&gt;()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00291"></a><a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#17dd57f02b28e3ba26e6af07efc7b387">00291</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;<a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00292"></a>00292   };
<a name="l00293"></a>00293   
<a name="l00295"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml">00295</a>   <span class="keyword">class </span>OBAPI OBMolAngleIter {
<a name="l00296"></a>00296     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>     *_parent;
<a name="l00297"></a>00297     std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vangle;
<a name="l00298"></a>00298     std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;
<a name="l00299"></a>00299     std::vector&lt;unsigned int&gt; _angle;
<a name="l00300"></a>00300   <span class="keyword">public</span>:
<a name="l00301"></a>00301 
<a name="l00302"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#0fa36e7663eda75406fdb37ddb994b09">00302</a>     OBMolAngleIter() :_parent(NULL) { }
<a name="l00303"></a>00303     OBMolAngleIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00304"></a>00304     OBMolAngleIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00305"></a>00305     OBMolAngleIter(<span class="keyword">const</span> OBMolAngleIter &amp;ai);
<a name="l00306"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#dae91539a44c66633ade64bd18b95e99">00306</a>     ~OBMolAngleIter() { }
<a name="l00307"></a>00307 
<a name="l00308"></a>00308     OBMolAngleIter&amp; operator=(<span class="keyword">const</span> OBMolAngleIter &amp;ai);
<a name="l00310"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00310</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> (_i != _vangle.end()); }
<a name="l00312"></a>00312     OBMolAngleIter&amp; operator++();
<a name="l00315"></a><a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#920efb29d358d59778c4dd40f53f65d0">00315</a>     std::vector&lt;unsigned int&gt; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _angle;     }
<a name="l00316"></a>00316   };
<a name="l00317"></a>00317 
<a name="l00319"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml">00319</a>   <span class="keyword">class </span>OBAPI OBMolTorsionIter {
<a name="l00320"></a>00320     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;
<a name="l00321"></a>00321     std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vtorsion;
<a name="l00322"></a>00322     std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;
<a name="l00323"></a>00323     std::vector&lt;unsigned int&gt; _torsion;
<a name="l00324"></a>00324   <span class="keyword">public</span>:
<a name="l00325"></a>00325 
<a name="l00326"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#0b16737f45fe04ecdc7f75ddf71bed16">00326</a>     OBMolTorsionIter() :_parent(NULL) { }
<a name="l00327"></a>00327     OBMolTorsionIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00328"></a>00328     OBMolTorsionIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00329"></a>00329     OBMolTorsionIter(<span class="keyword">const</span> OBMolTorsionIter &amp;ai);
<a name="l00330"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#25b07572aed20311f9fb38d8bee0d0d8">00330</a>     ~OBMolTorsionIter() { }
<a name="l00331"></a>00331 
<a name="l00332"></a>00332     OBMolTorsionIter&amp; operator=(<span class="keyword">const</span> OBMolTorsionIter &amp;ai);
<a name="l00334"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00334</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> (_i != _vtorsion.end()); }
<a name="l00336"></a>00336     OBMolTorsionIter&amp; operator++();
<a name="l00339"></a><a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#920efb29d358d59778c4dd40f53f65d0">00339</a>     std::vector&lt;unsigned int&gt; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _torsion;     }
<a name="l00340"></a>00340   };
<a name="l00341"></a>00341   
<a name="l00343"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml">00343</a>   <span class="keyword">class </span>OBAPI OBMolPairIter {
<a name="l00344"></a>00344     std::vector&lt;OBAtom*&gt;::iterator _i;
<a name="l00345"></a>00345     std::vector&lt;OBAtom*&gt;::iterator _j;
<a name="l00346"></a>00346     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;
<a name="l00347"></a>00347     <span class="comment">//std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vpair;</span>
<a name="l00348"></a>00348     <span class="comment">//std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;</span>
<a name="l00349"></a>00349     std::vector&lt;unsigned int&gt; _pair;
<a name="l00350"></a>00350  
<a name="l00351"></a>00351   <span class="keyword">public</span>:
<a name="l00352"></a>00352 
<a name="l00353"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#02c25820b148825eabd6390abdf0d183">00353</a>     OBMolPairIter() :_parent(NULL) { }
<a name="l00354"></a>00354     OBMolPairIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00355"></a>00355     OBMolPairIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00356"></a>00356     OBMolPairIter(<span class="keyword">const</span> OBMolPairIter &amp;ai);
<a name="l00357"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#d64d5c2ed25f01ac3eb48755305c1fd7">00357</a>     ~OBMolPairIter() { }
<a name="l00358"></a>00358 
<a name="l00359"></a>00359     OBMolPairIter&amp; operator=(<span class="keyword">const</span> OBMolPairIter &amp;ai);
<a name="l00361"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00361</a>     operator bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _pair.size()&gt;0; }
<a name="l00363"></a>00363     OBMolPairIter&amp; operator++();
<a name="l00366"></a><a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#920efb29d358d59778c4dd40f53f65d0">00366</a>     std::vector&lt;unsigned int&gt; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _pair;     }
<a name="l00367"></a>00367   };
<a name="l00368"></a>00368 
<a name="l00369"></a>00369   <span class="keyword">class </span>OBRing;
<a name="l00370"></a>00370   <span class="keyword">class </span>OBRingData;
<a name="l00371"></a>00371 
<a name="l00373"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">00373</a>   <span class="keyword">class </span>OBAPI OBMolRingIter {
<a name="l00374"></a>00374     std::vector&lt;OBRing*&gt;::iterator _i;
<a name="l00375"></a>00375     <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *_ptr;
<a name="l00376"></a>00376     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;
<a name="l00377"></a>00377     <a class="code" href="classOpenBabel_1_1OBRingData.shtml">OBRingData</a> *_rings;
<a name="l00378"></a>00378   <span class="keyword">public</span>:
<a name="l00379"></a>00379 
<a name="l00380"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#78722bf56cbe89ea4e65059c7119ef9d">00380</a>     OBMolRingIter() : _ptr(NULL), _parent(NULL), _rings(NULL) { }
<a name="l00381"></a>00381     OBMolRingIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);
<a name="l00382"></a>00382     OBMolRingIter(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00383"></a>00383     OBMolRingIter(<span class="keyword">const</span> OBMolRingIter &amp;ri);
<a name="l00384"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#e05abe984fc5e6c8696eef81240c8ffd">00384</a>     ~OBMolRingIter() { }
<a name="l00385"></a>00385 
<a name="l00386"></a>00386     OBMolRingIter&amp; operator=(<span class="keyword">const</span> OBMolRingIter &amp;ri);
<a name="l00388"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#d2e3869b29f7cb2028f586f03b93613e">00388</a>     operator bool()<span class="keyword">      const </span>{ <span class="keywordflow">return</span> _ptr != NULL; }
<a name="l00390"></a>00390     OBMolRingIter&amp; operator++();
<a name="l00392"></a>00392     OBMolRingIter  operator++(<span class="keywordtype">int</span>);
<a name="l00394"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#5f6bcecfbd0a1a6394b29320f79b0bb8">00394</a>     <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a>* operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _ptr; }
<a name="l00396"></a><a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#9dace0aff18c03d3860dc88001d63fd8">00396</a>     <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a>&amp; <a class="code" href="namespaceOpenBabel.shtml#807573f5c5c1186e385ec131b3cd24bc">operator*</a>()<span class="keyword">  const </span>{ <span class="keywordflow">return</span> *_ptr;}
<a name="l00397"></a>00397   };
<a name="l00398"></a>00398 
<a name="l00399"></a><a class="code" href="obiter_8h.shtml#8f0c064090b9369219482bcf7a3cb366">00399</a> <span class="preprocessor">#define FOR_ATOMS_OF_MOL(a,m)     for( OBMolAtomIter     a(m); a; ++a )</span>
<a name="l00400"></a><a class="code" href="obiter_8h.shtml#75a2570abc9cc07cf1fcc32705c03fa3">00400</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BONDS_OF_MOL(b,m)     for( OBMolBondIter     b(m); b; ++b )</span>
<a name="l00401"></a><a class="code" href="obiter_8h.shtml#bed4e863f7210ecafe08337d03b5cdfa">00401</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_NBORS_OF_ATOM(a,p)    for( OBAtomAtomIter    a(p); a; ++a )</span>
<a name="l00402"></a><a class="code" href="obiter_8h.shtml#869769f72782e634d17625e2158855fe">00402</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BONDS_OF_ATOM(b,p)    for( OBAtomBondIter    b(p); b; ++b )</span>
<a name="l00403"></a><a class="code" href="obiter_8h.shtml#914e5fb92ff7e8d3533de27c70088c20">00403</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_RESIDUES_OF_MOL(r,m)  for( OBResidueIter     r(m); r; ++r )</span>
<a name="l00404"></a><a class="code" href="obiter_8h.shtml#9f06f2c9992161091cf0c3b22bf63c32">00404</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_ATOMS_OF_RESIDUE(a,r) for( OBResidueAtomIter a(r); a; ++a )</span>
<a name="l00405"></a><a class="code" href="obiter_8h.shtml#637a7c48c4a0577cf0d9c82ded9a505d">00405</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_DFS_OF_MOL(a,m)       for( OBMolAtomDFSIter  a(m); a; ++a )</span>
<a name="l00406"></a><a class="code" href="obiter_8h.shtml#95c3a74a6306218ff5c0dc1a90d21413">00406</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BFS_OF_MOL(a,m)       for( OBMolAtomBFSIter  a(m); a; ++a )</span>
<a name="l00407"></a><a class="code" href="obiter_8h.shtml#8b71e47cb8f29b15bc1750d4e85950c4">00407</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_BONDBFS_OF_MOL(b,m)   for( OBMolBondBFSIter  b(m); b; ++b )</span>
<a name="l00408"></a><a class="code" href="obiter_8h.shtml#2b33a3a5a87859f5b16b8586975d8b0e">00408</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_RINGS_OF_MOL(r,m)     for( OBMolRingIter     r(m); r; ++r )</span>
<a name="l00409"></a><a class="code" href="obiter_8h.shtml#ecd90256591e3e8f27cd5748efe7e3dc">00409</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_ANGLES_OF_MOL(a,m)    for( OBMolAngleIter    a(m); a; ++a )</span>
<a name="l00410"></a><a class="code" href="obiter_8h.shtml#95a64965021c4c956647584b6e0d21cd">00410</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_TORSIONS_OF_MOL(t,m)  for( OBMolTorsionIter  t(m); t; ++t )</span>
<a name="l00411"></a><a class="code" href="obiter_8h.shtml#cbeb713e5ff4dc8fab25d34b4b155de3">00411</a> <span class="preprocessor"></span><span class="preprocessor">#define FOR_PAIRS_OF_MOL(p,m)     for( OBMolPairIter     p(m); p; ++p )</span>
<a name="l00412"></a>00412 <span class="preprocessor"></span>
<a name="l00413"></a>00413 } <span class="comment">// namespace OpenBabel</span>
<a name="l00414"></a>00414 <span class="preprocessor">#endif // OB_OBITER_H</span>
<a name="l00415"></a>00415 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
