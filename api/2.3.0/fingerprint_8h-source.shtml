<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: fingerprint.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>fingerprint.h</h1><a href="fingerprint_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">fingerprint.h - Base class for fingerprints and fast searching </span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2005 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_FINGERPRINT_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_FINGERPRINT_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml">openbabel/plugin.h</a>&gt;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#ifndef OBFPRT</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">#define OBFPRT</span>
<a name="l00032"></a>00032 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="keyword">namespace </span>OpenBabel
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036   <span class="keyword">class </span>OBBase; <span class="comment">//Forward declaration; used only as pointer.</span>
<a name="l00037"></a>00037 
<a name="l00039"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml">00039</a> <span class="keyword">class </span>OBFPRT OBFingerprint : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>
<a name="l00040"></a>00040 {
<a name="l00041"></a>00041 <span class="comment">//see end of cpp file for detailed documentation</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <a class="code" href="plugin_8h.shtml#e7d38c51c2ef93a98ee7cc6e33fb64f2">MAKE_PLUGIN</a>(OBFingerprint)
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="keyword">const</span> <span class="keywordtype">char</span>* TypeID()
<a name="l00046"></a>00046         {
<a name="l00047"></a>00047                 <span class="keywordflow">return</span> <span class="stringliteral">"fingerprints"</span>;
<a name="l00048"></a>00048         }
<a name="l00049"></a>00049         
<a name="l00050"></a>00050         <span class="comment">//Rest of OBFingerprints declarations</span>
<a name="l00051"></a>00051 <span class="keyword">public</span>:
<a name="l00052"></a>00052 
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#3d30d55685d98af0ce8b8631c51e02c9">00053</a>   <span class="keyword">virtual</span> ~OBFingerprint(){}
<a name="l00054"></a>00054 
<a name="l00056"></a>00056   <span class="keywordtype">void</span> SetBit(std::vector&lt;unsigned int&gt;&amp; vec, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n);
<a name="l00057"></a>00057 
<a name="l00059"></a>00059   <span class="keywordtype">bool</span> GetBit(<span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n);
<a name="l00060"></a>00060 
<a name="l00062"></a>00062   <span class="keywordtype">void</span> Fold(std::vector&lt;unsigned int&gt;&amp; vec, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbits); 
<a name="l00063"></a>00063 
<a name="l00065"></a>00065   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> GetFingerprint(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::vector&lt;unsigned int&gt;&amp; fp, <span class="keywordtype">int</span> nbits=0)=0;
<a name="l00066"></a>00066 
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#6838fbe60405cfe6c3c20f183f08a82f">00068</a>   <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#6838fbe60405cfe6c3c20f183f08a82f">FptFlag</a>{FPT_UNIQUEBITS=1};
<a name="l00069"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#c7b28cf29732802948c393d3b3e0417b">00069</a>   <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Flags() { <span class="keywordflow">return</span> 0;}; 
<a name="l00070"></a>00070 
<a name="l00073"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#f1fd5fe3443e3b4711d243f4ff954670">00073</a>   <span class="keyword">virtual</span> std::string DescribeBits(<span class="keyword">const</span> std::  vector&lt;unsigned int&gt; fp, <span class="keywordtype">bool</span> bSet=<span class="keyword">true</span>)
<a name="l00074"></a>00074   {
<a name="l00075"></a>00075     std::string txt(<span class="stringliteral">""</span>);
<a name="l00076"></a>00076     <span class="keywordflow">return</span> txt;
<a name="l00077"></a>00077   }
<a name="l00078"></a>00078 
<a name="l00080"></a>00080   <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#31223bb78aa7a23c4816a3a523a18163">Tanimoto</a>(<span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec1, <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec2);
<a name="l00081"></a>00081   
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#fef23609c5573c423419d4940a69ff21">00083</a>   <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#31223bb78aa7a23c4816a3a523a18163">Tanimoto</a>(<span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec1, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* p2) 
<a name="l00084"></a>00084   {
<a name="l00086"></a>00086     <span class="keywordtype">int</span> andbits=0, orbits=0;
<a name="l00087"></a>00087     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;
<a name="l00088"></a>00088     <span class="keywordflow">for</span> (i=0;i&lt;vec1.size();++i)
<a name="l00089"></a>00089     {
<a name="l00090"></a>00090       <span class="keywordtype">int</span> andfp = vec1[i] &amp; p2[i];
<a name="l00091"></a>00091       <span class="keywordtype">int</span> orfp = vec1[i] | p2[i];
<a name="l00092"></a>00092       <span class="comment">// Count bits</span>
<a name="l00093"></a>00093       <span class="comment">/* GCC 3.4 supports a "population count" builtin, which on many targets is</span>
<a name="l00094"></a>00094 <span class="comment">         implemented with a single instruction.  There is a fallback definition</span>
<a name="l00095"></a>00095 <span class="comment">         in libgcc in case a target does not have one, which should be just as</span>
<a name="l00096"></a>00096 <span class="comment">         good as the static function below.  */</span>
<a name="l00097"></a>00097 <span class="preprocessor">#if __GNUC__ &gt; 3 || (__GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ &gt;= 4)</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span>      andbits += __builtin_popcount(andfp);
<a name="l00099"></a>00099       orbits += __builtin_popcount(orfp);
<a name="l00100"></a>00100 <span class="preprocessor">#else</span>
<a name="l00101"></a>00101 <span class="preprocessor"></span>      <span class="keywordflow">for</span>(;andfp;andfp=andfp&lt;&lt;1)
<a name="l00102"></a>00102         <span class="keywordflow">if</span>(andfp&lt;0) ++andbits;
<a name="l00103"></a>00103       <span class="keywordflow">for</span>(;orfp;orfp=orfp&lt;&lt;1)
<a name="l00104"></a>00104         <span class="keywordflow">if</span>(orfp&lt;0) ++orbits;
<a name="l00105"></a>00105 <span class="preprocessor">#endif</span>
<a name="l00106"></a>00106 <span class="preprocessor"></span>    }
<a name="l00107"></a>00107       <span class="keywordflow">return</span>((<span class="keywordtype">double</span>)andbits/(<span class="keywordtype">double</span>)orbits);
<a name="l00108"></a>00108   };
<a name="l00109"></a>00109   
<a name="l00110"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#7cfc0262b4252d4798fa264e85a2a3c5">00110</a>   <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Getbitsperint(){ <span class="keywordflow">return</span> bitsperint; }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <span class="keyword">private</span>:
<a name="l00114"></a>00114   <span class="keyword">struct </span>bit_or
<a name="l00115"></a>00115   {
<a name="l00116"></a>00116     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> operator()(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> a, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> b)
<a name="l00117"></a>00117     {
<a name="l00118"></a>00118       <span class="keywordflow">return</span> a | b;     
<a name="l00119"></a>00119     }
<a name="l00120"></a>00120   };
<a name="l00121"></a>00121   
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 <span class="keyword">public</span>:
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#ebaab37ef23d3680da459f9c34588cc7">00126</a> <span class="keyword">static</span> OBFingerprint* FindFingerprint(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID){ <span class="keywordflow">return</span> FindType(ID);}
<a name="l00127"></a>00127 
<a name="l00128"></a>00128 <span class="keyword">private</span>:
<a name="l00129"></a>00129   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bitsperint;<span class="comment">// = 8 * sizeof(unsigned int);</span>
<a name="l00130"></a>00130 };
<a name="l00131"></a>00131 
<a name="l00132"></a>00132 <span class="comment">//Fast search routines</span>
<a name="l00135"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml">00135</a> <span class="comment"></span><span class="keyword">struct </span>OBFPRT FptIndexHeader
<a name="l00136"></a>00136 {
<a name="l00137"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#75dde30d9dd47eabbf283197a70ec12e">00137</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> headerlength;
<a name="l00138"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#280fae965b8fe4cad1e1137414728bae">00138</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nEntries;    
<a name="l00139"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#47ba62c3380a681b8fdad7e43560cfe0">00139</a>   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> words;                           
<a name="l00140"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#43c2d15a328e6590f8596d7d0eeb1dfd">00140</a>   <span class="keywordtype">char</span> fpid[16];            
<a name="l00141"></a><a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#ecf6680fe95574cad586bef47e1c56ae">00141</a>   <span class="keywordtype">char</span> datafilename[256];   
<a name="l00142"></a>00142 };
<a name="l00143"></a>00143 
<a name="l00146"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml">00146</a> <span class="keyword">struct </span>OBFPRT FptIndex
<a name="l00147"></a>00147 {
<a name="l00148"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml#45e809808bb4c7351364dcdeae9375a8">00148</a>   FptIndexHeader header;
<a name="l00149"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml#25419c08709d9137809c99e2da2b499e">00149</a>   std::vector&lt;unsigned int&gt; fptdata;
<a name="l00150"></a><a class="code" href="structOpenBabel_1_1FptIndex.shtml#7971d8aabc18a07335f215acc684c567">00150</a>   std::vector&lt;unsigned int&gt; seekdata;
<a name="l00151"></a>00151   <span class="keywordtype">bool</span> Read(std::istream* pIndexstream);
<a name="l00152"></a>00152   <span class="keywordtype">bool</span> ReadIndex(std::istream* pIndexstream);
<a name="l00153"></a>00153   <span class="keywordtype">bool</span> ReadHeader(std::istream* pIndexstream);
<a name="l00154"></a>00154     
<a name="l00156"></a>00156   OBFingerprint* CheckFP();
<a name="l00157"></a>00157 };
<a name="l00158"></a>00158 
<a name="l00161"></a><a class="code" href="classOpenBabel_1_1FastSearch.shtml">00161</a> <span class="keyword">class </span>OBFPRT FastSearch
<a name="l00162"></a>00162 {
<a name="l00163"></a>00163 <span class="comment">//see end of cpp file for detailed documentation</span>
<a name="l00164"></a>00164 <span class="keyword">public</span>:
<a name="l00166"></a>00166   std::string ReadIndexFile(std::string IndexFilename);
<a name="l00167"></a>00167   std::string ReadIndex(std::istream* pIndexstream);
<a name="l00168"></a>00168 
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1FastSearch.shtml#715b8981f9cbf26aaf5bac1a3e65f6a2">00169</a>   <span class="keyword">virtual</span> ~FastSearch(){};
<a name="l00170"></a>00170 
<a name="l00172"></a>00172   <span class="keywordtype">bool</span>    Find(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::vector&lt;unsigned int&gt;&amp; SeekPositions, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> MaxCandidates);
<a name="l00173"></a>00173 
<a name="l00176"></a>00176   <span class="keywordtype">bool</span>    FindMatch(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::vector&lt;unsigned int&gt;&amp; SeekPositions,
<a name="l00177"></a>00177                             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> MaxCandidates);
<a name="l00178"></a>00178 
<a name="l00181"></a>00181   <span class="keywordtype">bool</span>    FindSimilar(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::multimap&lt;double, unsigned int&gt;&amp; SeekposMap,
<a name="l00182"></a>00182     <span class="keywordtype">double</span> MinTani, <span class="keywordtype">double</span> MaxTani = 1.1 );
<a name="l00183"></a>00183 
<a name="l00186"></a>00186   <span class="keywordtype">bool</span>    FindSimilar(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::multimap&lt;double, unsigned int&gt;&amp; SeekposMap,
<a name="l00187"></a>00187     <span class="keywordtype">int</span> nCandidates=0);
<a name="l00188"></a>00188 
<a name="l00190"></a><a class="code" href="classOpenBabel_1_1FastSearch.shtml#10fa93c5a1537e27a0e786d13413416a">00190</a>   OBFingerprint* GetFingerprint()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _pFP;};
<a name="l00191"></a>00191 
<a name="l00193"></a><a class="code" href="classOpenBabel_1_1FastSearch.shtml#0d2ea636429c507a7e6de24007da6a9c">00193</a>   <span class="keyword">const</span> FptIndexHeader&amp; GetIndexHeader()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _index.header;};
<a name="l00194"></a>00194 
<a name="l00195"></a>00195 <span class="keyword">private</span>:
<a name="l00196"></a>00196   FptIndex   _index;
<a name="l00197"></a>00197   OBFingerprint* _pFP;
<a name="l00198"></a>00198 };
<a name="l00199"></a>00199 
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1FastSearchIndexer.shtml">00202</a> <span class="keyword">class </span>OBFPRT FastSearchIndexer
<a name="l00203"></a>00203 {
<a name="l00204"></a>00204 <span class="comment">//see end of cpp file for detailed documentation</span>
<a name="l00205"></a>00205 <span class="keyword">public</span>:
<a name="l00207"></a>00207   FastSearchIndexer(std::string&amp; datafilename, std::ostream* os, std::string&amp; fpid,
<a name="l00208"></a>00208       <span class="keywordtype">int</span> FptBits=0, <span class="keywordtype">int</span> nmols=0);
<a name="l00209"></a>00209 
<a name="l00211"></a>00211   FastSearchIndexer(FptIndex* pindex, std::ostream* os, <span class="keywordtype">int</span> nmols=0);
<a name="l00212"></a>00212   
<a name="l00213"></a>00213   ~FastSearchIndexer();
<a name="l00214"></a>00214 
<a name="l00216"></a>00216   <span class="keywordtype">bool</span> Add(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::streampos seekpos);
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 <span class="keyword">private</span>:
<a name="l00219"></a>00219   std::ostream* _indexstream;
<a name="l00220"></a>00220   FptIndex*             _pindex;
<a name="l00221"></a>00221   OBFingerprint* _pFP;
<a name="l00222"></a>00222   <span class="keywordtype">int</span> _nbits;
<a name="l00223"></a>00223 };
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 } <span class="comment">//namespace OpenBabel</span>
<a name="l00226"></a>00226 <span class="preprocessor">#endif</span>
<a name="l00227"></a>00227 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
