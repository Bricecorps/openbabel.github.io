<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: ring.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>ring.h</h1><a href="ring_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">ring.h - Deal with rings, find smallest set of smallest rings (SSSR).</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_RING_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_RING_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;deque&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="comment">// TODO: Make this work as a free-standing header</span>
<a name="l00027"></a>00027 <span class="comment">// Currently only used in ring.cpp which imports mol.h beforehand</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml">openbabel/bitvec.h</a>&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="typer_8h.shtml">openbabel/typer.h</a>&gt;</span>
<a name="l00030"></a>00030 
<a name="l00031"></a>00031 <span class="keyword">namespace </span>OpenBabel
<a name="l00032"></a>00032 {
<a name="l00033"></a>00033 
<a name="l00034"></a>00034   <span class="keyword">class </span>OBMol;
<a name="l00035"></a>00035   <span class="keyword">class </span>OBAtom;
<a name="l00036"></a>00036   <span class="keyword">class </span>OBBond;
<a name="l00037"></a>00037 
<a name="l00038"></a>00038   <span class="comment">// class introduction in ring.cpp</span>
<a name="l00039"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml">00039</a>   <span class="keyword">class </span>OBAPI OBRing
<a name="l00040"></a>00040   {
<a name="l00041"></a>00041     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent; 
<a name="l00042"></a>00042   <span class="keyword">public</span>:
<a name="l00043"></a>00043     <span class="comment">//public data members</span>
<a name="l00044"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#fc868fe160545365ab98030ffb979c87">00044</a>     std::vector&lt;int&gt; _path; 
<a name="l00045"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#97e999aa642af249c85af3b397e78237">00045</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> _pathset;      
<a name="l00046"></a>00046 
<a name="l00048"></a>00048 
<a name="l00049"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#9c8f667cfbd98fa620dad96a4e7fd124">00049</a>     OBRing()    {}
<a name="l00051"></a>00051     OBRing(std::vector&lt;int&gt;&amp; path, <span class="keywordtype">int</span> size);
<a name="l00052"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#ebbe2e6ea23c037604845623f46cd3c6">00052</a>     OBRing(std::vector&lt;int&gt;&amp; path, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> set) : _path(path), _pathset(set) {}
<a name="l00053"></a>00053     OBRing(<span class="keyword">const</span> OBRing &amp;src);
<a name="l00054"></a>00054     OBRing&amp; operator=(<span class="keyword">const</span> OBRing &amp;src);
<a name="l00056"></a>00056     
<a name="l00057"></a>00057     <span class="comment">//member functions</span>
<a name="l00058"></a>00058 
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#1fb97a25bea530fa8793afe42c5d27d4">00060</a>     size_t    Size()<span class="keyword">     const  </span>{    <span class="keywordflow">return</span>(_path.size());  }
<a name="l00063"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#6cbfab0df585f7a5fbfce7ee6ade6076">00063</a>     size_t    PathSize()<span class="keyword"> const  </span>{    <span class="keywordflow">return</span>(_path.size());  }
<a name="l00064"></a>00064 
<a name="l00068"></a>00068     <span class="keywordtype">bool</span>   IsAromatic();
<a name="l00069"></a>00069 
<a name="l00071"></a>00071     <span class="keywordtype">void</span> SetType(<span class="keywordtype">char</span> *type);
<a name="l00073"></a>00073     <span class="keywordtype">void</span> SetType(std::string &amp;type);
<a name="l00075"></a>00075     <span class="keywordtype">char</span> *GetType();
<a name="l00079"></a>00079     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetRootAtom();
<a name="l00080"></a>00080 
<a name="l00082"></a>00082     <span class="keywordtype">bool</span>   IsMember(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a);
<a name="l00085"></a>00085     <span class="keywordtype">bool</span>         IsMember(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *b);
<a name="l00087"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#b0ac0b6dae1a174c5bbe20476ac518ed">00087</a>     <span class="keywordtype">bool</span>   IsInRing(<span class="keywordtype">int</span> i)
<a name="l00088"></a>00088     {
<a name="l00089"></a>00089       <span class="keywordflow">return</span>(_pathset.BitIsOn(i));
<a name="l00090"></a>00090     }
<a name="l00091"></a>00091 
<a name="l00093"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#2a3d137ffe49019d42fef9a7546c7e1f">00093</a>     <span class="keywordtype">void</span>   SetParent(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *m)  {    _parent = m;    }
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1OBRing.shtml#591186a9911abecee7ad2c92ea2fc949">00095</a>     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *GetParent()          {    <span class="keywordflow">return</span>(_parent);}
<a name="l00096"></a>00096 
<a name="l00103"></a>00103     <span class="keywordtype">bool</span> findCenterAndNormal(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp; center, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;norm1, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;norm2);
<a name="l00104"></a>00104   <span class="keyword">private</span>:
<a name="l00105"></a>00105     <span class="keywordtype">char</span> _type[30];   
<a name="l00106"></a>00106   };
<a name="l00107"></a>00107 
<a name="l00110"></a>00110   OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#3d008956166a0bcd25315741d8d449db">CompareRingSize</a>(<span class="keyword">const</span> OBRing *,<span class="keyword">const</span> OBRing *);
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 
<a name="l00116"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml">00116</a>   <span class="keyword">class </span>OBAPI OBRingSearch
<a name="l00117"></a>00117   {
<a name="l00118"></a>00118     std::vector&lt;OBBond*&gt; _bonds; 
<a name="l00119"></a>00119     std::vector&lt;OBRing*&gt; _rlist; 
<a name="l00120"></a>00120   <span class="keyword">public</span>:
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#18256544725dacbbc86bb96543f341dd">00121</a>     OBRingSearch()    {}
<a name="l00122"></a>00122     ~OBRingSearch();
<a name="l00123"></a>00123   
<a name="l00125"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#97f226a1d6e48c01e48088b66b201049">00125</a>     <span class="keywordtype">void</span>    SortRings()
<a name="l00126"></a>00126     {
<a name="l00127"></a>00127       std::sort(_rlist.begin(),_rlist.end(),<a class="code" href="namespaceOpenBabel.shtml#3d008956166a0bcd25315741d8d449db">CompareRingSize</a>);
<a name="l00128"></a>00128     }
<a name="l00130"></a>00130     <span class="keywordtype">void</span>    RemoveRedundant(<span class="keywordtype">int</span>);
<a name="l00132"></a>00132     <span class="keywordtype">void</span>    AddRingFromClosure(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;,<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *);
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     <span class="keywordtype">bool</span>    SaveUniqueRing(std::deque&lt;int&gt;&amp;,std::deque&lt;int&gt;&amp;);
<a name="l00135"></a>00135 
<a name="l00137"></a>00137     <span class="keywordtype">void</span>    WriteRings();
<a name="l00138"></a>00138 
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#6a146b5b943b2d6ba369777b9bc27737">00142</a>     std::vector&lt;OBRing*&gt;::iterator BeginRings()
<a name="l00143"></a>00143       {
<a name="l00144"></a>00144         <span class="keywordflow">return</span>(_rlist.begin());
<a name="l00145"></a>00145       }
<a name="l00147"></a><a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#31b5a03be41b2e97ef8fe74ba9d58bd4">00147</a>     std::vector&lt;OBRing*&gt;::iterator EndRings()
<a name="l00148"></a>00148       {
<a name="l00149"></a>00149         <span class="keywordflow">return</span>(_rlist.end());
<a name="l00150"></a>00150       }
<a name="l00152"></a>00152   };
<a name="l00153"></a>00153 
<a name="l00158"></a><a class="code" href="classOpenBabel_1_1OBRTree.shtml">00158</a>   <span class="keyword">class </span>OBAPI OBRTree
<a name="l00159"></a>00159   {
<a name="l00160"></a>00160     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>  *_atom; 
<a name="l00161"></a>00161     OBRTree *_prv;  
<a name="l00162"></a>00162   <span class="keyword">public</span>:
<a name="l00164"></a>00164     OBRTree(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,OBRTree*);
<a name="l00165"></a><a class="code" href="classOpenBabel_1_1OBRTree.shtml#dc6f5e9533a47b89c3b87e749950022d">00165</a>     ~OBRTree()    {}
<a name="l00166"></a>00166   
<a name="l00168"></a>00168     <span class="keywordtype">int</span>  GetAtomIdx();
<a name="l00170"></a>00170     <span class="keywordtype">void</span> PathToRoot(std::vector&lt;OBAtom*&gt;&amp;);
<a name="l00171"></a>00171   };
<a name="l00172"></a>00172 
<a name="l00173"></a>00173 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00174"></a>00174 
<a name="l00175"></a>00175 <span class="preprocessor">#endif // OB_RING_H</span>
<a name="l00176"></a>00176 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
