<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: OBGenericData Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.2 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.shtml"><span>Classes</span></a></li>
      <li><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.shtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.shtml"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.shtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.shtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath">
    <ul>
      <li><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a>      </li>
      <li><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<h1>OBGenericData Class Reference</h1>  </div>
</div>
<div class="contents">
<!-- doxytag: class="OpenBabel::OBGenericData" -->
<p>Base class for generic data.  
<a href="#_details">More...</a></p>

<p><code>#include &lt;<a class="el" href="base_8h_source.shtml">openbabel/generic.h</a>&gt;</code></p>
<!-- startSectionHeader --><div class="dynheader">
Inheritance diagram for OBGenericData:<!-- endSectionHeader --></div>
<!-- startSectionSummary --><!-- endSectionSummary --><!-- startSectionContent --><div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1OBGenericData.png" usemap="#OBGenericData_map" alt=""/>
  <map id="OBGenericData_map" name="OBGenericData_map">
<area href="classOpenBabel_1_1AliasData.shtml" alt="AliasData" shape="rect" coords="178,56,346,80"/>
<area href="classOpenBabel_1_1OBAngleData.shtml" alt="OBAngleData" shape="rect" coords="178,112,346,136"/>
<area href="classOpenBabel_1_1OBAtomClassData.shtml" alt="OBAtomClassData" shape="rect" coords="178,168,346,192"/>
<area href="classOpenBabel_1_1OBChiralData.shtml" alt="OBChiralData" shape="rect" coords="178,224,346,248"/>
<area href="classOpenBabel_1_1OBCommentData.shtml" alt="OBCommentData" shape="rect" coords="178,280,346,304"/>
<area href="classOpenBabel_1_1OBConformerData.shtml" alt="OBConformerData" shape="rect" coords="178,336,346,360"/>
<area href="classOpenBabel_1_1OBDOSData.shtml" alt="OBDOSData" shape="rect" coords="178,392,346,416"/>
<area href="classOpenBabel_1_1OBElectronicTransitionData.shtml" alt="OBElectronicTransitionData" shape="rect" coords="178,448,346,472"/>
<area href="classOpenBabel_1_1OBExternalBondData.shtml" alt="OBExternalBondData" shape="rect" coords="178,504,346,528"/>
<area href="classOpenBabel_1_1OBGridData.shtml" alt="OBGridData" shape="rect" coords="178,560,346,584"/>
<area href="classOpenBabel_1_1OBMatrixData.shtml" alt="OBMatrixData" shape="rect" coords="178,616,346,640"/>
<area href="classOpenBabel_1_1OBNasaThermoData.shtml" alt="OBNasaThermoData" shape="rect" coords="178,672,346,696"/>
<area href="classOpenBabel_1_1OBOrbitalData.shtml" alt="OBOrbitalData" shape="rect" coords="178,728,346,752"/>
<area href="classOpenBabel_1_1OBPairData.shtml" alt="OBPairData" shape="rect" coords="178,784,346,808"/>
<area href="classOpenBabel_1_1OBPairTemplate.shtml" alt="OBPairTemplate&lt; ValueT &gt;" shape="rect" coords="178,840,346,864"/>
<area href="classOpenBabel_1_1OBRateData.shtml" alt="OBRateData" shape="rect" coords="178,896,346,920"/>
<area href="classOpenBabel_1_1OBRingData.shtml" alt="OBRingData" shape="rect" coords="178,952,346,976"/>
<area href="classOpenBabel_1_1OBRotamerList.shtml" alt="OBRotamerList" shape="rect" coords="178,1008,346,1032"/>
<area href="classOpenBabel_1_1OBRotationData.shtml" alt="OBRotationData" shape="rect" coords="178,1064,346,1088"/>
<area href="classOpenBabel_1_1OBSerialNums.shtml" alt="OBSerialNums" shape="rect" coords="178,1120,346,1144"/>
<area href="classOpenBabel_1_1OBSetData.shtml" alt="OBSetData" shape="rect" coords="178,1176,346,1200"/>
<area href="classOpenBabel_1_1OBStereoBase.shtml" alt="OBStereoBase" shape="rect" coords="178,1232,346,1256"/>
<area href="classOpenBabel_1_1OBSymmetryData.shtml" alt="OBSymmetryData" shape="rect" coords="178,1288,346,1312"/>
<area href="classOpenBabel_1_1OBTorsionData.shtml" alt="OBTorsionData" shape="rect" coords="178,1344,346,1368"/>
<area href="classOpenBabel_1_1OBUnitCell.shtml" alt="OBUnitCell" shape="rect" coords="178,1400,346,1424"/>
<area href="classOpenBabel_1_1OBVectorData.shtml" alt="OBVectorData" shape="rect" coords="178,1456,346,1480"/>
<area href="classOpenBabel_1_1OBVibrationData.shtml" alt="OBVibrationData" shape="rect" coords="178,1512,346,1536"/>
<area href="classOpenBabel_1_1OBVirtualBond.shtml" alt="OBVirtualBond" shape="rect" coords="178,1568,346,1592"/>
</map>
 </div><!-- endSectionContent --></div>

<p><a href="classOpenBabel_1_1OBGenericData-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ac1d123c6ea761d25e7b4066501eb3652">OBGenericData</a> (const std::string attr=&quot;undefined&quot;, const unsigned int type=OBGenericDataType::UndefinedData, const <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source=any)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#acb834533508953a264ed93b74fddad8d">~OBGenericData</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#aae3d15983201a2a115701b2c538fef77">SetAttribute</a> (const std::string &amp;v)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a45613e34598a9584fb0120ef3fdab9e0">SetOrigin</a> (const <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> s)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ac72c28db8b5bb8911845ada56220a1e0">GetAttribute</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ac20b99b31895c99422fb1244def6e213">GetDataType</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ac9527475c246fadbbab63a35376fd5fe">GetValue</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ad080c58f230c474935ed3e27cb2ba906">GetOrigin</a> () const </td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#adceb77134f15418a66cf1124dcef1b51">_attr</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a31291823d487a4a47f24aae5870505ef">_type</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a239606b62a534e4df7626ea0cfdfb856">_source</a></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Base class for generic data. </p>
<p><a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> is an abstract base class which defines an interface for storage, retrieval, and indexing of arbitrary generic data. Subclasses of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> can be used to store custom data on a per-atom, per-bond, per-molecule, or per-residue basis. Open Babel currently supports a small subset of chemical functionality as <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> types, which will expand over time to support additional interconversion (e.g., spectroscopy, dynamics, surfaces...)</p>
<p>For more information on currently supported types, please see the developer wiki: <a href="http://openbabel.org/wiki/Generic_Data">http://openbabel.org/wiki/Generic_Data</a></p>
<p>For your own custom data, either define a custom subclass using an id from the <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55bad4a188d7201f00f99ec649edead73c1e" title="Custom (user-defined data)">OBGenericDataType::CustomData0</a> to <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba8051d4056f7d8a89233dfa0ebc949bc1">OBGenericDataType::CustomData15</a> slots, or store your data as a string and use <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships.">OBPairData</a> for key/value access. The latter is <b>highly</b> recommended for various text descriptors e.g., in QSAR, atom or bond labels, or other textual data.</p>
<p><b>New in Open Babel, version 2.1</b> is the template-based <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml" title="Used to store arbitrary attribute/value relationsips of any type.">OBPairTemplate</a>, which can be used to store arbitrary data types. There are predefined types OBPairInteger and OBPairFloatingPoint for storing integers and floating-point values without converting to a string representation.</p>
<p>Also <b>new</b> is the "source" or "origin" of a data entry, enumerated by DataOrigin. This can be accessed by <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a45613e34598a9584fb0120ef3fdab9e0" title="Set the origin of this data, which can be used to filter the data.">SetOrigin()</a> and <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ad080c58f230c474935ed3e27cb2ba906">GetOrigin()</a>, as well as via "filtering" methods in <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class.">OBBase</a>, allowing you to separate data read in from a file, added by a user, or assigned by Open Babel internally.</p>
<p>While the library and import routines will set DataOrigin correctly, you should try to annotate data added by your code. Typically this would either be userAdded or external. The former refers to something the user requested as an annotation, while the latter refers to annotations your code adds automatically.</p>
<p>Example code using <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>:</p>
<div class="fragment"><pre class="fragment">      <span class="keywordflow">if</span> (mol.HasData(<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba26d8504c2596c9ef59dab47c01a4dd1b" title="Crystallographic unit cell data, i.e., OBUnitCell.">OBGenericDataType::UnitCell</a>))
      {
         uc = (OBUnitCell*)mol.GetData(<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba26d8504c2596c9ef59dab47c01a4dd1b" title="Crystallographic unit cell data, i.e., OBUnitCell.">OBGenericDataType::UnitCell</a>);
         sprintf(buffer,
            <span class="stringliteral">&quot;%10.5f%10.5f%10.5f%10.5f%10.5f%10.5f&quot;</span>,
            uc-&gt;GetA(), uc-&gt;GetB(), uc-&gt;GetC(),
            uc-&gt;GetAlpha() , uc-&gt;GetBeta(), uc-&gt;GetGamma());
         ofs &lt;&lt; buffer &lt;&lt; endl;
      }

      ...

      vector&lt;OBGenericData*&gt;::iterator k;
      vector&lt;OBGenericData*&gt; vdata = mol.GetData();
      <span class="keywordflow">for</span> (k = vdata.begin();k != vdata.end();++k)
         <span class="keywordflow">if</span> ((*k)-&gt;GetDataType() == <a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55baf37b8c94a903cbf5fc45475c815c541a" title="Arbitrary key/value data, i.e., OBPairData.">OBGenericDataType::PairData</a>)
         {
            ofs &lt;&lt; <span class="stringliteral">&quot;&gt;  &lt;&quot;</span> &lt;&lt; (*k)-&gt;GetAttribute() &lt;&lt; <span class="stringliteral">&quot;&gt;&quot;</span> &lt;&lt; endl;
            ofs &lt;&lt; ((OBPairData*)(*k))-&gt;<a class="code" href="classOpenBabel_1_1OBGenericData.shtml#ac9527475c246fadbbab63a35376fd5fe" title="Base class returns a default value (the attribute type) but should never be called.">GetValue</a>() &lt;&lt; endl &lt;&lt; endl;
         }
</pre></div><p>Similar code also works for <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> stored in an <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class.">OBAtom</a> or <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class.">OBBond</a> or <a class="el" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information.">OBResidue</a>. These examples show use of DataOrigin outside of the Open Babel library.</p>
<div class="fragment"><pre class="fragment">      <span class="keywordtype">string</span> atomLabel; <span class="comment">// e.g., from the user adding annotation to an atom</span>
      <span class="keywordflow">if</span> (!atom.HasData(<span class="stringliteral">&quot;UserLabel&quot;</span>)) <span class="comment">// stored textual data as an OBPairData</span>
      {
         OBPairData *label = <span class="keyword">new</span> OBPairData;
         label-&gt;SetAttribute(<span class="stringliteral">&quot;UserLabel&quot;</span>);
         label-&gt;SetValue(atomLabel);
         label-&gt;SetOrigin(<a class="code" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14a928a3db32b4975c3d42d0ca5d8d9f44d" title="Added by the user.">userInput</a>); <span class="comment">// set by user, not by Open Babel</span>

         atom.SetData(label);
      }

      ...

      <span class="keywordflow">if</span> (bond.HasData(<span class="stringliteral">&quot;DisplayType&quot;</span>)) <span class="comment">// e.g. in a visualization tool</span>
      {
         OBPairData *display = <span class="keyword">dynamic_cast&lt;</span>OBPairData *<span class="keyword">&gt;</span> bond.GetData(<span class="stringliteral">&quot;DisplayType&quot;</span>);
         <span class="keywordflow">if</span> (display-&gt;GetValue() == <span class="stringliteral">&quot;wireframe&quot;</span>)
         {
            ... <span class="comment">// display a wireframe view</span>
         }
      }
</pre></div><p>When designing a class derived from <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> you must add a <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone()</a> function. For classes used with <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> this is used when an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> object is copied. If your class member variables contain pointers to atoms or bonds then it will be necessary to ensure that these are updated in <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone()</a> to refer to the new molecule. Without these and similar pointers it is more likely that the very simple clone function </p>
<div class="fragment"><pre class="fragment">      <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml#ac1d123c6ea761d25e7b4066501eb3652">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBGenericData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone</a>(OBBase* parent)<span class="keyword"> const</span>
<span class="keyword">         </span>{<span class="keywordflow">return</span> <span class="keyword">new</span> MyNewClass(*<span class="keyword">this</span>);}
</pre></div><p> and the compiler generated copy constructor would be sufficient.</p>
<p>It is recommended that, if possible, <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a> classes do not store atom and bond pointers. Using atom and bond indices instead would allow the simple version of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone()</a> above. See OBRotameterData::Clone for an example of a more complicated version. For classes which are not intended to support copying, <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone()</a> can return NULL </p>
<div class="fragment"><pre class="fragment">      <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml#ac1d123c6ea761d25e7b4066501eb3652">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1OBGenericData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone</a>(OBBase* parent)<span class="keyword"> const</span>
<span class="keyword">         </span>{<span class="keywordflow">return</span> NULL;}
</pre></div><p> <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a67bda850335747e7ac5d66629bda0a67">Clone()</a> is a pure virtual function so that you need to decide what kind of function you need and include it explicitly. </p>
<hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ac1d123c6ea761d25e7b4066501eb3652"></a><!-- doxytag: member="OpenBabel::OBGenericData::OBGenericData" ref="ac1d123c6ea761d25e7b4066501eb3652" args="(const std::string attr=&quot;undefined&quot;, const unsigned int type=OBGenericDataType::UndefinedData, const DataOrigin source=any)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"> <em>attr</em> = <code>&quot;undefined&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"> <em>type</em> = <code>OBGenericDataType::UndefinedData</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td>
          <td class="paramname"> <em>source</em> = <code>any</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="acb834533508953a264ed93b74fddad8d"></a><!-- doxytag: member="OpenBabel::OBGenericData::~OBGenericData" ref="acb834533508953a264ed93b74fddad8d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> </td>
          <td>(</td>
          <td class="paramname">&#160;)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a67bda850335747e7ac5d66629bda0a67"></a><!-- doxytag: member="OpenBabel::OBGenericData::Clone" ref="a67bda850335747e7ac5d66629bda0a67" args="(OBBase *) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname">&#160;)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1AliasData.shtml#a67bda850335747e7ac5d66629bda0a67">AliasData</a>, <a class="el" href="classOpenBabel_1_1OBAtomClassData.shtml#a67bda850335747e7ac5d66629bda0a67">OBAtomClassData</a>, <a class="el" href="classOpenBabel_1_1OBCommentData.shtml#a67bda850335747e7ac5d66629bda0a67">OBCommentData</a>, <a class="el" href="classOpenBabel_1_1OBExternalBondData.shtml#a67bda850335747e7ac5d66629bda0a67">OBExternalBondData</a>, <a class="el" href="classOpenBabel_1_1OBPairData.shtml#a67bda850335747e7ac5d66629bda0a67">OBPairData</a>, <a class="el" href="classOpenBabel_1_1OBSetData.shtml#a67bda850335747e7ac5d66629bda0a67">OBSetData</a>, <a class="el" href="classOpenBabel_1_1OBVirtualBond.shtml#a67bda850335747e7ac5d66629bda0a67">OBVirtualBond</a>, <a class="el" href="classOpenBabel_1_1OBRingData.shtml#a67bda850335747e7ac5d66629bda0a67">OBRingData</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a67bda850335747e7ac5d66629bda0a67">OBUnitCell</a>, <a class="el" href="classOpenBabel_1_1OBConformerData.shtml#a67bda850335747e7ac5d66629bda0a67">OBConformerData</a>, <a class="el" href="classOpenBabel_1_1OBSymmetryData.shtml#a67bda850335747e7ac5d66629bda0a67">OBSymmetryData</a>, <a class="el" href="classOpenBabel_1_1OBTorsionData.shtml#a67bda850335747e7ac5d66629bda0a67">OBTorsionData</a>, <a class="el" href="classOpenBabel_1_1OBAngleData.shtml#a67bda850335747e7ac5d66629bda0a67">OBAngleData</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#a67bda850335747e7ac5d66629bda0a67">OBChiralData</a>, <a class="el" href="classOpenBabel_1_1OBSerialNums.shtml#a67bda850335747e7ac5d66629bda0a67">OBSerialNums</a>, <a class="el" href="classOpenBabel_1_1OBVibrationData.shtml#a67bda850335747e7ac5d66629bda0a67">OBVibrationData</a>, <a class="el" href="classOpenBabel_1_1OBDOSData.shtml#a67bda850335747e7ac5d66629bda0a67">OBDOSData</a>, <a class="el" href="classOpenBabel_1_1OBOrbitalData.shtml#a67bda850335747e7ac5d66629bda0a67">OBOrbitalData</a>, <a class="el" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#a67bda850335747e7ac5d66629bda0a67">OBElectronicTransitionData</a>, <a class="el" href="classOpenBabel_1_1OBRotationData.shtml#a67bda850335747e7ac5d66629bda0a67">OBRotationData</a>, <a class="el" href="classOpenBabel_1_1OBVectorData.shtml#a67bda850335747e7ac5d66629bda0a67">OBVectorData</a>, <a class="el" href="classOpenBabel_1_1OBMatrixData.shtml#a67bda850335747e7ac5d66629bda0a67">OBMatrixData</a>, <a class="el" href="classOpenBabel_1_1OBRateData.shtml#af0b8e0b15297bc82b44b17c06f1e2020">OBRateData</a>, <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#af0b8e0b15297bc82b44b17c06f1e2020">OBNasaThermoData</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a5361d45ced4133323de80d61ae5ecf05">OBRotamerList</a>, <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml#a74dbdaf4c0f5f8532781027653d3de2b">OBCisTransStereo</a>, <a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a74dbdaf4c0f5f8532781027653d3de2b">OBSquarePlanarStereo</a>, and <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml#a74dbdaf4c0f5f8532781027653d3de2b">OBTetrahedralStereo</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBase.shtml#aa6f692332837387535e337413d0100de">OBBase::CloneData()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a class="anchor" id="aae3d15983201a2a115701b2c538fef77"></a><!-- doxytag: member="OpenBabel::OBGenericData::SetAttribute" ref="aae3d15983201a2a115701b2c538fef77" args="(const std::string &amp;v)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetAttribute </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"> <em>v</em>&#160;)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the attribute (key), which can be used to retrieve this data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">OBMol::GetFormula()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a762b79fd52bbaf0f4444f0308654dab1">OBMol::GetLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f6bce457ef6f963b8e4ba7c4be23775">OBMol::GetSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67">OBMol::SetFormula()</a>.</p>

</div>
</div>
<a class="anchor" id="a45613e34598a9584fb0120ef3fdab9e0"></a><!-- doxytag: member="OpenBabel::OBGenericData::SetOrigin" ref="a45613e34598a9584fb0120ef3fdab9e0" args="(const DataOrigin s)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetOrigin </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td>
          <td class="paramname"> <em>s</em>&#160;)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the origin of this data, which can be used to filter the data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abee51ea4be988357bb17c4e5fd3d7e12">OBMol::FindAngles()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1ce9b09fb625faffaae648d7beae9598">OBMol::FindTorsions()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">OBMol::GetFormula()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a762b79fd52bbaf0f4444f0308654dab1">OBMol::GetLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f6bce457ef6f963b8e4ba7c4be23775">OBMol::GetSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67">OBMol::SetFormula()</a>.</p>

</div>
</div>
<a class="anchor" id="ac72c28db8b5bb8911845ada56220a1e0"></a><!-- doxytag: member="OpenBabel::OBGenericData::GetAttribute" ref="ac72c28db8b5bb8911845ada56220a1e0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetAttribute </td>
          <td>(</td>
          <td class="paramname">&#160;)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>The attribute (key), which can be used to retrieve this data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>.</p>

</div>
</div>
<a class="anchor" id="ac20b99b31895c99422fb1244def6e213"></a><!-- doxytag: member="OpenBabel::OBGenericData::GetDataType" ref="ac20b99b31895c99422fb1244def6e213" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetDataType </td>
          <td>(</td>
          <td class="paramname">&#160;)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<dl class="return"><dt><b>Returns:</b></dt><dd>the data type for this object as defined in <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses.">OBGenericDataType</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac9527475c246fadbbab63a35376fd5fe"></a><!-- doxytag: member="OpenBabel::OBGenericData::GetValue" ref="ac9527475c246fadbbab63a35376fd5fe" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetValue </td>
          <td>(</td>
          <td class="paramname">&#160;)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Base class returns a default value (the attribute type) but should never be called. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBCommentData.shtml#ac9527475c246fadbbab63a35376fd5fe">OBCommentData</a>, and <a class="el" href="classOpenBabel_1_1OBPairData.shtml#ac9527475c246fadbbab63a35376fd5fe">OBPairData</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>.</p>

</div>
</div>
<a class="anchor" id="ad080c58f230c474935ed3e27cb2ba906"></a><!-- doxytag: member="OpenBabel::OBGenericData::GetOrigin" ref="ad080c58f230c474935ed3e27cb2ba906" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> GetOrigin </td>
          <td>(</td>
          <td class="paramname">&#160;)</td>
          <td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="adceb77134f15418a66cf1124dcef1b51"></a><!-- doxytag: member="OpenBabel::OBGenericData::_attr" ref="adceb77134f15418a66cf1124dcef1b51" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#adceb77134f15418a66cf1124dcef1b51">_attr</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>attribute tag (e.g., "UnitCell", "Comment" or "Author") </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a5361d45ced4133323de80d61ae5ecf05">OBRotamerList::Clone()</a>, and <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#a8391a502a623c62101d104739f96ed01">OBNasaThermoData::OBNasaThermoData()</a>.</p>

</div>
</div>
<a class="anchor" id="a31291823d487a4a47f24aae5870505ef"></a><!-- doxytag: member="OpenBabel::OBGenericData::_type" ref="a31291823d487a4a47f24aae5870505ef" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a31291823d487a4a47f24aae5870505ef">_type</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>attribute type -- declared for each subclass </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a5361d45ced4133323de80d61ae5ecf05">OBRotamerList::Clone()</a>, and <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#a8391a502a623c62101d104739f96ed01">OBNasaThermoData::OBNasaThermoData()</a>.</p>

</div>
</div>
<a class="anchor" id="a239606b62a534e4df7626ea0cfdfb856"></a><!-- doxytag: member="OpenBabel::OBGenericData::_source" ref="a239606b62a534e4df7626ea0cfdfb856" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a239606b62a534e4df7626ea0cfdfb856">_source</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>source of data for accounting </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#a2d8a571296610389b9427aef139b1d8d">OBChiralData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBTorsionData.shtml#ab526e7eddb908b711e19aa355d133241">OBTorsionData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBAngleData.shtml#af0af03b552fac05db59787be08a443eb">OBAngleData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBConformerData.shtml#a7c2db1828edcca7ff07c8591744ec3a4">OBConformerData::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBSymmetryData.shtml#ae1e415e9a406f4965be7352a3c66fa3a">OBSymmetryData::operator=()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="base_8h_source.shtml">base.h</a></li>
<li><a class="el" href="generic_8cpp.shtml">generic.cpp</a></li>
</ul>
</div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 25 2010 11:55:23 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.2.
</div>

</body>
</html>
