<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: reaction.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>reaction.h</h1><a href="reaction_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">reaction.h - Handle chemical reactions (i.e., lists of reagents and products).</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2005 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_REACT_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_REACT_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#ifdef USE_BOOST</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">  #include &lt;boost/shared_ptr.hpp&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">  #define shared_ptr boost::shared_ptr</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="preprocessor">  #include &lt;memory&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">  #if __GNUC__ == 4 &amp;&amp; __GNUC_MINOR__ &lt; 6</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="preprocessor">    #include &lt;tr1/memory&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">  #endif</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>  <span class="keyword">using</span> std::tr1::shared_ptr;
<a name="l00034"></a>00034 <span class="preprocessor">#endif</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span>
<a name="l00036"></a>00036 <span class="keyword">namespace </span>OpenBabel
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 
<a name="l00045"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml">00045</a> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBReaction.shtml">OBReaction</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>
<a name="l00046"></a>00046 {
<a name="l00047"></a>00047 <span class="keyword">private</span>:
<a name="l00048"></a>00048   std::vector&lt;shared_ptr&lt;OBMol&gt; &gt; _reactants;
<a name="l00049"></a>00049   std::vector&lt;shared_ptr&lt;OBMol&gt; &gt; _products;
<a name="l00050"></a>00050   shared_ptr&lt;OBMol&gt; _ts; 
<a name="l00051"></a>00051   shared_ptr&lt;OBMol&gt; _agent; 
<a name="l00052"></a>00052   std::string _title;
<a name="l00053"></a>00053   std::string _comment;
<a name="l00054"></a>00054   <span class="keywordtype">bool</span> _reversible;
<a name="l00055"></a>00055 <span class="keyword">public</span>:
<a name="l00056"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#b31ddc5a65e712dcef28133db0189301">00056</a>   <a class="code" href="classOpenBabel_1_1OBReaction.shtml#b31ddc5a65e712dcef28133db0189301">OBReaction</a>() : _reversible(false)
<a name="l00057"></a>00057   {}
<a name="l00058"></a>00058 
<a name="l00059"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#6b8d47a6b4674beac8ff8cb3db9c342b">00059</a>   <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBReaction.shtml#6b8d47a6b4674beac8ff8cb3db9c342b">NumReactants</a>()<span class="keyword"> const</span>
<a name="l00060"></a>00060 <span class="keyword">  </span>{ <span class="keywordflow">return</span> static_cast&lt;int&gt; (_reactants.size()); }
<a name="l00061"></a>00061 
<a name="l00062"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#da42bf75a50fa259f12dae8dfa11e80b">00062</a>   <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBReaction.shtml#da42bf75a50fa259f12dae8dfa11e80b">NumProducts</a>()<span class="keyword">const</span>
<a name="l00063"></a>00063 <span class="keyword">  </span>{ <span class="keywordflow">return</span> static_cast&lt;int&gt; (_products.size()); }
<a name="l00064"></a>00064   
<a name="l00065"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#f72b6aa560ccb5fff90085c2d0418f3c">00065</a>   <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBReaction.shtml#f72b6aa560ccb5fff90085c2d0418f3c">AddReactant</a>(<span class="keyword">const</span> shared_ptr&lt;OBMol&gt; sp)
<a name="l00066"></a>00066   { _reactants.push_back(sp); }
<a name="l00067"></a>00067   
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#7018b43738b32fb8cd55216994439960">00068</a>   <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBReaction.shtml#7018b43738b32fb8cd55216994439960">AddProduct</a>(<span class="keyword">const</span> shared_ptr&lt;OBMol&gt; sp)
<a name="l00069"></a>00069   { _products.push_back(sp); }
<a name="l00070"></a>00070 
<a name="l00071"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#47e47d97a8619ecf4017308eb263e1d7">00071</a>   <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBReaction.shtml#47e47d97a8619ecf4017308eb263e1d7">SetTransitionState</a>(<span class="keyword">const</span> shared_ptr&lt;OBMol&gt; sp)
<a name="l00072"></a>00072   { _ts = sp; }
<a name="l00073"></a>00073 
<a name="l00074"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#40e33224e18bc8a9c88cd4538e110dcc">00074</a>   <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBReaction.shtml#40e33224e18bc8a9c88cd4538e110dcc">AddAgent</a>(<span class="keyword">const</span> shared_ptr&lt;OBMol&gt; sp)
<a name="l00075"></a>00075   { _agent = sp; }
<a name="l00076"></a>00076   
<a name="l00077"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#674fdfa52b31aeab3db8f88956cb85b2">00077</a>   shared_ptr&lt;OBMol&gt; <a class="code" href="classOpenBabel_1_1OBReaction.shtml#674fdfa52b31aeab3db8f88956cb85b2">GetReactant</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> i)
<a name="l00078"></a>00078   {
<a name="l00079"></a>00079     shared_ptr&lt;OBMol&gt; sp;
<a name="l00080"></a>00080     <span class="keywordflow">if</span>(i&lt;_reactants.size())
<a name="l00081"></a>00081       sp = _reactants[i];
<a name="l00082"></a>00082     <span class="keywordflow">return</span> sp; <span class="comment">//returns empty if out of range</span>
<a name="l00083"></a>00083   }
<a name="l00084"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#e5e70a309d47a0538c12ac6e3d0e5247">00084</a>   shared_ptr&lt;OBMol&gt; <a class="code" href="classOpenBabel_1_1OBReaction.shtml#e5e70a309d47a0538c12ac6e3d0e5247">GetProduct</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> i)
<a name="l00085"></a>00085   {
<a name="l00086"></a>00086     shared_ptr&lt;OBMol&gt; sp;
<a name="l00087"></a>00087     <span class="keywordflow">if</span>(i&lt;_products.size())
<a name="l00088"></a>00088       sp = _products[i];
<a name="l00089"></a>00089     <span class="keywordflow">return</span> sp; <span class="comment">//returns empty if out of range</span>
<a name="l00090"></a>00090   }
<a name="l00091"></a>00091 
<a name="l00092"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#1e6f64ba7d6a6add82442199ab533a5a">00092</a>   shared_ptr&lt;OBMol&gt; <a class="code" href="classOpenBabel_1_1OBReaction.shtml#1e6f64ba7d6a6add82442199ab533a5a">GetTransitionState</a>()<span class="keyword">const</span>
<a name="l00093"></a>00093 <span class="keyword">  </span>{ <span class="keywordflow">return</span> _ts; }
<a name="l00094"></a>00094 
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#67aad3c942714693da0b658428a9fc6f">00095</a>   shared_ptr&lt;OBMol&gt; <a class="code" href="classOpenBabel_1_1OBReaction.shtml#67aad3c942714693da0b658428a9fc6f">GetAgent</a>()<span class="keyword">const</span>
<a name="l00096"></a>00096 <span class="keyword">  </span>{ <span class="keywordflow">return</span> _agent; }
<a name="l00097"></a>00097 
<a name="l00098"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#da65ba7acd0bdbe63295ffaccb6ba3dd">00098</a>   std::string <a class="code" href="classOpenBabel_1_1OBReaction.shtml#da65ba7acd0bdbe63295ffaccb6ba3dd">GetTitle</a>()<span class="keyword">        const </span>{ <span class="keywordflow">return</span> _title; }
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#cbb8a907b6a0ef91e10713db61e7d486">00099</a>   std::string <a class="code" href="classOpenBabel_1_1OBReaction.shtml#cbb8a907b6a0ef91e10713db61e7d486">GetComment</a>()<span class="keyword">      const </span>{ <span class="keywordflow">return</span> _comment; }
<a name="l00100"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#c81187fd83f8b8badae4c3a844284ca2">00100</a>   <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBReaction.shtml#c81187fd83f8b8badae4c3a844284ca2">SetTitle</a>(<span class="keyword">const</span> std::string&amp; title) { _title=title; }
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#6adaa1c7ea8c35cd2d4bb336d7d02c3e">00101</a>   <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBReaction.shtml#6adaa1c7ea8c35cd2d4bb336d7d02c3e">SetComment</a>(<span class="keyword">const</span> std::string&amp; comment) { _comment=comment; }
<a name="l00102"></a>00102 
<a name="l00103"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#9bddb7967e4c6001613118b0db249a39">00103</a>   <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBReaction.shtml#9bddb7967e4c6001613118b0db249a39">IsReversible</a>()<span class="keyword"> const       </span>{<span class="keywordflow">return</span> _reversible;}
<a name="l00104"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#75d8f229013b8e63b39ea13434b85fcc">00104</a>   <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBReaction.shtml#75d8f229013b8e63b39ea13434b85fcc">SetReversible</a>(<span class="keywordtype">bool</span> b=<span class="keyword">true</span>) {_reversible=b;}
<a name="l00105"></a>00105 
<a name="l00106"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#49b2feff74b90e6b89e1c624868a8b9c">00106</a>   <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1OBReaction.shtml#49b2feff74b90e6b89e1c624868a8b9c">ClassDescription</a>()
<a name="l00107"></a>00107   {
<a name="l00108"></a>00108     <span class="keywordflow">return</span> <span class="stringliteral">" reactions\n"</span>;
<a name="l00109"></a>00109   }
<a name="l00110"></a>00110 
<a name="l00111"></a><a class="code" href="classOpenBabel_1_1OBReaction.shtml#e33c4e184b3589fb3899138579429bbd">00111</a>   <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBReaction.shtml#e33c4e184b3589fb3899138579429bbd">Clear</a>()
<a name="l00112"></a>00112   {
<a name="l00113"></a>00113     _reactants.clear();
<a name="l00114"></a>00114     _products.clear();
<a name="l00115"></a>00115     _ts.reset();
<a name="l00116"></a>00116     _agent.reset();
<a name="l00117"></a>00117     _title.clear();
<a name="l00118"></a>00118     _comment.clear();
<a name="l00119"></a>00119     _reversible = <span class="keyword">false</span>;
<a name="l00120"></a>00120     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00121"></a>00121   }
<a name="l00122"></a>00122 };
<a name="l00123"></a>00123 
<a name="l00124"></a>00124 
<a name="l00125"></a>00125 } <span class="comment">//namespace OpenBabel</span>
<a name="l00126"></a>00126 <span class="preprocessor">#endif</span>
<a name="l00127"></a>00127 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
