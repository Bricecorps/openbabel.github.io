<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: stereo.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.7.2 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Search');
--></script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.shtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.shtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.shtml"><span>Modules</span></a></li>
      <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.shtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.shtml"><span>Files</span></a></li>
      <li><a href="examples.shtml"><span>Examples</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.shtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.shtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>stereo.h</h1>  </div>
</div>
<div class="contents">
<a href="stereo_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">  stereo.h - OBStereo &amp; OBStereoBase</span>
<a name="l00003"></a>00003 <span class="comment"></span>
<a name="l00004"></a>00004 <span class="comment">  Copyright (C) 2009-2010 by Tim Vandermeersch</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">  This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">  For more information, see &lt;http://openbabel.org/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">  This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">  it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">  the Free Software Foundation; either version 2 of the License, or</span>
<a name="l00012"></a>00012 <span class="comment">  (at your option) any later version.</span>
<a name="l00013"></a>00013 <span class="comment"></span>
<a name="l00014"></a>00014 <span class="comment">  This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">  GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment"></span>
<a name="l00019"></a>00019 <span class="comment">  You should have received a copy of the GNU General Public License</span>
<a name="l00020"></a>00020 <span class="comment">  along with this program; if not, write to the Free Software</span>
<a name="l00021"></a>00021 <span class="comment">  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span>
<a name="l00022"></a>00022 <span class="comment">  02110-1301, USA.</span>
<a name="l00023"></a>00023 <span class="comment"> **********************************************************************/</span>
<a name="l00024"></a>00024 <span class="preprocessor">#ifndef OB_STEREO_H</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span><span class="preprocessor">#define OB_STEREO_H</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml" title="Base classes to build a graph.">openbabel/base.h</a>&gt;</span> <span class="comment">// OBGenericData</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;<a class="code" href="isomorphism_8h.shtml" title="OBIsomorphismMapper class for finding isomorphisms.">openbabel/isomorphism.h</a>&gt;</span> <span class="comment">// Automorphisms</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;climits&gt;</span> <span class="comment">// UINT_MAX</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>OpenBabel {
<a name="l00035"></a>00035 
<a name="l00038"></a>00038 
<a name="l00075"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml">00075</a>   <span class="keyword">struct </span>OBAPI <a class="code" href="structOpenBabel_1_1OBStereo.shtml" title="Placeholder for enums &amp;amp; Ref/Refs related functions.">OBStereo</a>
<a name="l00076"></a>00076   {
<a name="l00080"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">00080</a>     <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">Type</a> {
<a name="l00081"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7abf2462b166f389c17adccf7a95941396">00081</a>       CisTrans            = (1&lt;&lt;0), 
<a name="l00082"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a3115cb247d1cb271c7157b4db2407932">00082</a>       ExtendedCisTrans    = (1&lt;&lt;1), 
<a name="l00083"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a793d15fd6e6d225fcddc0cf4b65259d3">00083</a>       SquarePlanar        = (1&lt;&lt;2), 
<a name="l00084"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a398755acaa38c780e5a4dc5db1c205be">00084</a>       Tetrahedral         = (1&lt;&lt;3), 
<a name="l00085"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a8c2578d01eef213503d0894e8be33ad3">00085</a>       ExtendedTetrahedral = (1&lt;&lt;4), 
<a name="l00086"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a7cadd5a7e8d25d88807992426f62a397">00086</a>       TrigonalBipyramidal = (1&lt;&lt;5), 
<a name="l00087"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a48563b1c184d9fab3497e3e519ce50af">00087</a>       Octahedral          = (1&lt;&lt;6)  
<a name="l00088"></a>00088     };
<a name="l00089"></a>00089 
<a name="l00094"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">00094</a>     <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">BondDirection</a> { <span class="comment">// Values taken from MDL format</span>
<a name="l00095"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97ad207f41315a26ce638464caf613b60a1">00095</a>       NotStereo =   0,
<a name="l00096"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97af4cfb1f053e0e8a980850336a1dcdab1">00096</a>       UpBond =      1,
<a name="l00097"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97a6b3b36219bd6afd10e935be8526cb4ea">00097</a>       DownBond =    6,
<a name="l00098"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97a3d121ce0cfdbe400c4a41e185030d262">00098</a>       UnknownDir =  4
<a name="l00099"></a>00099     };
<a name="l00100"></a>00100 
<a name="l00108"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">00108</a>     <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">Shape</a> {
<a name="l00109"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca">00109</a>       ShapeU = 1,
<a name="l00110"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37cacbf3a0dadf9e3e7a8dd4f0a81f8b010d">00110</a>       ShapeZ = 2,
<a name="l00111"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37cafb39b2d794a5fd22489031455416fa31">00111</a>       Shape4 = 3
<a name="l00112"></a>00112     };
<a name="l00113"></a>00113 
<a name="l00119"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7">00119</a>     <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7">View</a>
<a name="l00120"></a>00120     {
<a name="l00121"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7ad67cd67454910029af59ecf137366d0e">00121</a>       ViewFrom = 1, 
<a name="l00122"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7a82407be1a15d633a8bf5df6eaecad155">00122</a>       ViewTowards = 2 
<a name="l00123"></a>00123     };
<a name="l00124"></a>00124 
<a name="l00130"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31">00130</a>     <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31">Winding</a> {
<a name="l00131"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31adc82829d52b935bb1ba087f98f44dac7">00131</a>       Clockwise = 1,     
<a name="l00132"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31a6bf12c9b9fea555c370c5f75629cd609">00132</a>       AntiClockwise = 2  
<a name="l00133"></a>00133     };
<a name="l00134"></a>00134 
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 
<a name="l00144"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">00144</a>     <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a>;
<a name="l00148"></a>00148     <span class="keyword">enum</span> {
<a name="l00149"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#aba01db17f4a2bfbc3db60dc172972a25a7295d9aeb6e0e6f3a5b77aa0ce7ed0db">00149</a>       NoRef = UINT_MAX,       
<a name="l00150"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#aba01db17f4a2bfbc3db60dc172972a25a02b1798105615b9c057d777fd19f1015">00150</a>       ImplicitRef = UINT_MAX - 1  
<a name="l00151"></a>00151     };
<a name="l00155"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">00155</a>     <span class="keyword">typedef</span> std::vector&lt;Ref&gt; <a class="code" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a>;
<a name="l00159"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1380cd3ca593dd317be63064b47e14db">00159</a>     <span class="keyword">typedef</span> Refs::iterator <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1380cd3ca593dd317be63064b47e14db">RefIter</a>;
<a name="l00163"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a6f0021eb4868fb5540a2cedde823ada1">00163</a>     <span class="keyword">typedef</span> Refs::const_iterator <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a6f0021eb4868fb5540a2cedde823ada1">ConstRefIter</a>;
<a name="l00165"></a>00165 
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 
<a name="l00174"></a><a class="code" href="structOpenBabel_1_1OBStereo.shtml#a677b4acc48f3ee3d31f35e20b62ea534">00174</a>     <span class="keyword">static</span> Refs MakeRefs(Ref ref1, Ref ref2, Ref ref3, Ref ref4 = NoRef)
<a name="l00175"></a>00175     {
<a name="l00176"></a>00176       Refs refs(3);
<a name="l00177"></a>00177       refs[0] = ref1;
<a name="l00178"></a>00178       refs[1] = ref2;
<a name="l00179"></a>00179       refs[2] = ref3;
<a name="l00180"></a>00180       <span class="keywordflow">if</span> (ref4 != NoRef)
<a name="l00181"></a>00181         refs.push_back(ref4);
<a name="l00182"></a>00182       <span class="keywordflow">return</span> refs;
<a name="l00183"></a>00183     }
<a name="l00196"></a>00196     <span class="keyword">static</span> <span class="keywordtype">bool</span> ContainsSameRefs(<span class="keyword">const</span> Refs &amp;refs1, <span class="keyword">const</span> Refs &amp;refs2);
<a name="l00200"></a>00200     <span class="keyword">static</span> <span class="keywordtype">bool</span> ContainsRef(<span class="keyword">const</span> Refs &amp;refs, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> ref);
<a name="l00202"></a>00202 
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 
<a name="l00225"></a>00225     <span class="keyword">static</span> <span class="keywordtype">int</span> NumInversions(<span class="keyword">const</span> Refs &amp;refs);
<a name="l00235"></a>00235     <span class="keyword">static</span> <span class="keywordtype">void</span> Permutate(Refs &amp;refs, <span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j);
<a name="l00247"></a>00247     <span class="keyword">static</span> Refs Permutated(<span class="keyword">const</span> Refs &amp;refs, <span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j);
<a name="l00249"></a>00249 
<a name="l00250"></a>00250   };
<a name="l00251"></a>00251 
<a name="l00257"></a><a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml">00257</a>   <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml" title="Struct representing a single stereogenic unit.">OBStereoUnit</a>
<a name="l00258"></a>00258   {
<a name="l00263"></a><a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#ad200dcf5a41b516d592daf60cab1fd0e">00263</a>     <a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml" title="Struct representing a single stereogenic unit.">OBStereoUnit</a>() : type(static_cast&lt;<a class="code" href="structOpenBabel_1_1OBStereo.shtml" title="Placeholder for enums &amp;amp; Ref/Refs related functions.">OBStereo</a>::Type&gt;(0)), id(<a class="code" href="structOpenBabel_1_1OBStereo.shtml" title="Placeholder for enums &amp;amp; Ref/Refs related functions.">OBStereo</a>::NoRef), para(false)
<a name="l00264"></a>00264     {
<a name="l00265"></a>00265     }
<a name="l00266"></a>00266 
<a name="l00270"></a><a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#a65527f1c8d53729db66c6fdc5e43e46b">00270</a>     <a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml" title="Struct representing a single stereogenic unit.">OBStereoUnit</a>(<a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a> _type, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> _id, <span class="keywordtype">bool</span> _para = <span class="keyword">false</span>) :
<a name="l00271"></a>00271         type(_type), id(_id), para(_para)
<a name="l00272"></a>00272     {
<a name="l00273"></a>00273     }
<a name="l00274"></a>00274 
<a name="l00275"></a><a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#aeecb8f40f1a4fa558dbf6383d1b72771">00275</a>     <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a> <a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#aeecb8f40f1a4fa558dbf6383d1b72771" title="the type for this stereogenic unit">type</a>; 
<a name="l00276"></a><a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#af17b8bd946e0f93c6550050f9e8aa349">00276</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#af17b8bd946e0f93c6550050f9e8aa349">id</a>; 
<a name="l00277"></a><a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#a85967158ea10743b1e69bfe4edbcb6a1">00277</a>     <span class="keywordtype">bool</span> <a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#a85967158ea10743b1e69bfe4edbcb6a1" title="the atom/bond (depends on type) unique id">para</a>; 
<a name="l00278"></a>00278   };
<a name="l00286"></a><a class="code" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">00286</a>   <span class="keyword">typedef</span> std::vector&lt;OBStereoUnit&gt; <a class="code" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7" title="A single set of OBStereoUnit objects.">OBStereoUnitSet</a>;
<a name="l00293"></a><a class="code" href="group__stereo.shtml#ga75c7c66edf2555b974417a77968ebb57">00293</a>   <span class="keyword">typedef</span> std::vector&lt;OBStereoUnitSet&gt; <a class="code" href="group__stereo.shtml#ga75c7c66edf2555b974417a77968ebb57" title="A set of sets of OBStereoUnit objects.">OBStereoUnitSetOfSets</a>;
<a name="l00294"></a>00294 
<a name="l00295"></a>00295 
<a name="l00296"></a>00296   <span class="comment">// fwd decl</span>
<a name="l00297"></a>00297   <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>;
<a name="l00320"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml">00320</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml" title="Base class for all stereochemistry classes.">OBStereoBase</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>
<a name="l00321"></a>00321   {
<a name="l00322"></a>00322     <span class="keyword">public</span>:
<a name="l00329"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#a4e9716db658a2f725a214f4f23b6a68d">00329</a>       <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml" title="Base class for all stereochemistry classes.">OBStereoBase</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol) :
<a name="l00330"></a>00330         <a class="code" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data.">OBGenericData</a>(<span class="stringliteral">&quot;StereoData&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba3f9974bdbccde7c26064d7ec21d570ef" title="Stereochemistry data (see OBStereoBase)">StereoData</a>, <a class="code" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14ab1c8706dce6832c9ce173260ba2bf392" title="Perceived by Open Babel library methods.">perceived</a>),
<a name="l00331"></a>00331         m_mol(mol), m_specified(true)
<a name="l00332"></a>00332       {
<a name="l00333"></a>00333       }
<a name="l00337"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#af79f43b5cb6090d98dac9da71e083499">00337</a>       <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#af79f43b5cb6090d98dac9da71e083499">~OBStereoBase</a>() { m_mol = 0; }
<a name="l00338"></a>00338 
<a name="l00340"></a>00340 
<a name="l00341"></a>00341 
<a name="l00345"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#acd313cc12ec2b66926e4d0102042732a">00345</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a>* <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#acd313cc12ec2b66926e4d0102042732a">GetMolecule</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_mol; }
<a name="l00349"></a>00349       <span class="keyword">virtual</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a> GetType() <span class="keyword">const</span> = 0;
<a name="l00355"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#aa03f9b7e07be400ad77ba2306a2f1619">00355</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#aa03f9b7e07be400ad77ba2306a2f1619">SetSpecified</a>(<span class="keywordtype">bool</span> specified) { m_specified = specified; }
<a name="l00359"></a><a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#a1a34764224cb3e3c4f1f84a4a3366617">00359</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#a1a34764224cb3e3c4f1f84a4a3366617">IsSpecified</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_specified; }
<a name="l00361"></a>00361     <span class="keyword">private</span>:
<a name="l00362"></a>00362       <a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *m_mol; 
<a name="l00363"></a>00363       <span class="keywordtype">bool</span> m_specified; 
<a name="l00364"></a>00364   };
<a name="l00365"></a>00365 
<a name="l00366"></a>00366   <span class="comment">// fwd decl</span>
<a name="l00367"></a>00367   <span class="keyword">class </span>OBTetrahedralStereo;
<a name="l00368"></a>00368   <span class="keyword">class </span>OBCisTransStereo;
<a name="l00369"></a>00369   <span class="keyword">class </span>OBSquarePlanarStereo;
<a name="l00383"></a><a class="code" href="classOpenBabel_1_1OBStereoFacade.shtml">00383</a>   <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBStereoFacade.shtml" title="Facade to simplify retrieval of OBStereoBase derived objects.">OBStereoFacade</a>
<a name="l00384"></a>00384   {
<a name="l00385"></a>00385     <span class="keyword">public</span>:
<a name="l00393"></a><a class="code" href="classOpenBabel_1_1OBStereoFacade.shtml#af8355c7f4c1621336979f3bb83bc48c1">00393</a>       <a class="code" href="classOpenBabel_1_1OBStereoFacade.shtml" title="Facade to simplify retrieval of OBStereoBase derived objects.">OBStereoFacade</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class.">OBMol</a> *mol, <span class="keywordtype">bool</span> perceive = <span class="keyword">true</span>) :
<a name="l00394"></a>00394           m_mol(mol), m_init(false), m_perceive(perceive)
<a name="l00395"></a>00395       {
<a name="l00396"></a>00396       }
<a name="l00397"></a>00397 
<a name="l00400"></a>00400 
<a name="l00403"></a>00403       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumTetrahedralStereo();
<a name="l00408"></a>00408       <span class="keywordtype">bool</span> HasTetrahedralStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);
<a name="l00414"></a>00414       <a class="code" href="classOpenBabel_1_1OBTetrahedralStereo.shtml" title="Class for handling and storing tetrahedral atom stereochemistry.">OBTetrahedralStereo</a>* GetTetrahedralStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);
<a name="l00416"></a>00416 
<a name="l00419"></a>00419 
<a name="l00422"></a>00422       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumCisTransStereo();
<a name="l00427"></a>00427       <span class="keywordtype">bool</span> HasCisTransStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> bondId);
<a name="l00433"></a>00433       <a class="code" href="classOpenBabel_1_1OBCisTransStereo.shtml" title="Class for handling and storing cis/trans stereochemistry.">OBCisTransStereo</a>* GetCisTransStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> bondId);
<a name="l00435"></a>00435 
<a name="l00438"></a>00438 
<a name="l00441"></a>00441       <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumSquarePlanarStereo();
<a name="l00446"></a>00446       <span class="keywordtype">bool</span> HasSquarePlanarStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);
<a name="l00452"></a>00452       <a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml" title="Class for handling and storing square planar stereochemistry.">OBSquarePlanarStereo</a>* GetSquarePlanarStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);
<a name="l00454"></a>00454 
<a name="l00455"></a>00455       <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> StereoType&gt;
<a name="l00456"></a>00456       <span class="keywordtype">bool</span> HasStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>);
<a name="l00457"></a>00457       <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00458"></a>00458       <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#abc5c98fcc1211af2b80116dd6e0a035da21f40778b7db9343a6ca75ec2c41ccce">T</a>* GetStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>);
<a name="l00459"></a>00459 
<a name="l00460"></a>00460 
<a name="l00461"></a>00461     <span class="keyword">private</span>:
<a name="l00465"></a>00465       <span class="keyword">inline</span> <span class="keywordtype">void</span> EnsureInit() { <span class="keywordflow">if</span> (!m_init) InitMaps(); }
<a name="l00471"></a>00471       <span class="keywordtype">void</span> InitMaps();
<a name="l00472"></a>00472 
<a name="l00473"></a>00473       OBMol *m_mol;
<a name="l00474"></a>00474       <span class="keywordtype">bool</span> m_init;
<a name="l00475"></a>00475       <span class="keywordtype">bool</span> m_perceive;
<a name="l00476"></a>00476       std::map&lt;unsigned long, OBTetrahedralStereo*&gt; m_tetrahedralMap;
<a name="l00477"></a>00477       std::map&lt;unsigned long, OBCisTransStereo*&gt; m_cistransMap;
<a name="l00478"></a>00478       std::map&lt;unsigned long, OBSquarePlanarStereo*&gt; m_squarePlanarMap;
<a name="l00479"></a>00479   };
<a name="l00480"></a>00480 
<a name="l00481"></a>00481   <span class="comment">// fwd decl</span>
<a name="l00482"></a>00482   <span class="keyword">class </span>OBBond;
<a name="l00485"></a>00485 
<a name="l00493"></a>00493   OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#gae7aedffc6994cf26d16524389c56bdac">PerceiveStereo</a>(OBMol *mol, <span class="keywordtype">bool</span> force = <span class="keyword">false</span>);
<a name="l00525"></a>00525   OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#ga305c9600a3a336da16683baa395e20f4">StereoFrom2D</a>(OBMol *mol,
<a name="l00526"></a>00526     std::map&lt;OBBond*, enum OBStereo::BondDirection&gt; *updown = NULL, <span class="keywordtype">bool</span> force = <span class="keyword">false</span>);
<a name="l00543"></a>00543   OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#gaebcf38fd76c5d76fffbae808b8571f9b">StereoFrom3D</a>(OBMol *mol, <span class="keywordtype">bool</span> force = <span class="keyword">false</span>);
<a name="l00559"></a>00559   OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#ga419e494a34740f1f8003acabfa30a95b">StereoFrom0D</a>(OBMol *mol);
<a name="l00561"></a>00561 
<a name="l00564"></a>00564 
<a name="l00602"></a>00602   OBAPI std::vector&lt;OBTetrahedralStereo*&gt; <a class="code" href="group__stereo.shtml#ga35e07645a245db366b115f0dc20542fd">TetrahedralFrom3D</a>(OBMol *mol,
<a name="l00603"></a>00603       <span class="keyword">const</span> <a class="code" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7" title="A single set of OBStereoUnit objects.">OBStereoUnitSet</a> &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00648"></a>00648   OBAPI std::vector&lt;OBTetrahedralStereo*&gt; <a class="code" href="group__stereo.shtml#gab85c5ef4c9416ee7af02b21658fe9de2">TetrahedralFrom2D</a>(OBMol *mol,
<a name="l00649"></a>00649       <span class="keyword">const</span> <a class="code" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7" title="A single set of OBStereoUnit objects.">OBStereoUnitSet</a> &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00669"></a>00669   OBAPI std::vector&lt;OBTetrahedralStereo*&gt; <a class="code" href="group__stereo.shtml#gac3049b86debe9059b851825b29b1557c">TetrahedralFrom0D</a>(OBMol *mol,
<a name="l00670"></a>00670       <span class="keyword">const</span> <a class="code" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7" title="A single set of OBStereoUnit objects.">OBStereoUnitSet</a> &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00671"></a>00671 
<a name="l00708"></a>00708   OBAPI std::vector&lt;OBCisTransStereo*&gt; <a class="code" href="group__stereo.shtml#ga7e1ba3a4ac33b0c6404b0d960cc53d00">CisTransFrom3D</a>(OBMol *mol,
<a name="l00709"></a>00709       <span class="keyword">const</span> <a class="code" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7" title="A single set of OBStereoUnit objects.">OBStereoUnitSet</a> &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00740"></a>00740   OBAPI std::vector&lt;OBCisTransStereo*&gt; <a class="code" href="group__stereo.shtml#ga98528c3002ed718695ccfaf031ca3f04">CisTransFrom2D</a>(OBMol *mol,
<a name="l00741"></a>00741       <span class="keyword">const</span> <a class="code" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7" title="A single set of OBStereoUnit objects.">OBStereoUnitSet</a> &amp;stereoUnits,
<a name="l00742"></a>00742       <span class="keyword">const</span> std::map&lt;OBBond*, enum OBStereo::BondDirection&gt; *updown = NULL, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00769"></a>00769   OBAPI <span class="keywordtype">bool</span> <a class="code" href="group__stereo.shtml#ga182a53150e1793ac1ec14958afb05f17">TetStereoToWedgeHash</a>(OBMol &amp;mol,
<a name="l00770"></a>00770       std::map&lt;OBBond*, enum OBStereo::BondDirection&gt; &amp;updown,
<a name="l00771"></a>00771       std::map&lt;OBBond*, OBStereo::Ref&gt; &amp;from);
<a name="l00783"></a>00783   OBAPI std::set&lt;OBBond*&gt; <a class="code" href="group__stereo.shtml#ga63e739a42d88ac64ed77c07d73866a45">GetUnspecifiedCisTrans</a>(OBMol&amp; mol);
<a name="l00795"></a>00795   OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#ga9b44683d071146220a97390283944f70">StereoRefToImplicit</a>(OBMol&amp; mol, <a class="code" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a> atomId);
<a name="l00815"></a>00815   OBAPI std::vector&lt;OBCisTransStereo*&gt; <a class="code" href="group__stereo.shtml#gac74fff254a639ede4d92a59fa44318a6">CisTransFrom0D</a>(OBMol *mol,
<a name="l00816"></a>00816       <span class="keyword">const</span> <a class="code" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7" title="A single set of OBStereoUnit objects.">OBStereoUnitSet</a> &amp;stereoUnits,
<a name="l00817"></a>00817       <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);
<a name="l00819"></a>00819 
<a name="l00820"></a>00820 
<a name="l00823"></a>00823 
<a name="l00903"></a>00903   OBAPI <a class="code" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7" title="A single set of OBStereoUnit objects.">OBStereoUnitSet</a> <a class="code" href="group__stereo.shtml#gaebf264394d502844b99b1dbe031ea185">FindStereogenicUnits</a>(OBMol *mol,
<a name="l00904"></a>00904       <span class="keyword">const</span> std::vector&lt;unsigned int&gt; &amp;symClasses);
<a name="l00981"></a>00981   OBAPI <a class="code" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7" title="A single set of OBStereoUnit objects.">OBStereoUnitSet</a> <a class="code" href="group__stereo.shtml#gaebf264394d502844b99b1dbe031ea185">FindStereogenicUnits</a>(OBMol *mol,
<a name="l00982"></a>00982       <span class="keyword">const</span> std::vector&lt;unsigned int&gt; &amp;symClasses,
<a name="l00983"></a>00983       <span class="keyword">const</span> <a class="code" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8" title="A group of automorphic permutations.">Automorphisms</a> &amp;automorphisms);
<a name="l00985"></a>00985 
<a name="l01135"></a>01135 
<a name="l01136"></a>01136 }
<a name="l01137"></a>01137 
<a name="l01138"></a>01138 <span class="preprocessor">#endif</span>
<a name="l01139"></a>01139 <span class="preprocessor"></span>
</pre></div></div>
</div>
<!--- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Defines</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.3.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 25 2010 11:55:12 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.7.2.
</div>

</body>
</html>
