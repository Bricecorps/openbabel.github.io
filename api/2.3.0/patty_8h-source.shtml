<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: patty.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>patty.h</h1><a href="patty_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">patty.h - Programmable atom typer.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_PATTY_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_PATTY_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="keyword">namespace </span>OpenBabel
<a name="l00024"></a>00024 {
<a name="l00025"></a><a class="code" href="patty_8h.shtml#94a83397c40043119729c6c16d57be3d">00025</a> <span class="preprocessor">#define PT_CATION      1</span>
<a name="l00026"></a><a class="code" href="patty_8h.shtml#40a4b2e0100f11387a4a08917ed33909">00026</a> <span class="preprocessor"></span><span class="preprocessor">#define PT_ANION       2</span>
<a name="l00027"></a><a class="code" href="patty_8h.shtml#ef9e996e3ded97a5397fbe4eab223e06">00027</a> <span class="preprocessor"></span><span class="preprocessor">#define PT_ACCEPTOR    3</span>
<a name="l00028"></a><a class="code" href="patty_8h.shtml#2ae20b54f70da1cb04ba18b772a0d8a0">00028</a> <span class="preprocessor"></span><span class="preprocessor">#define PT_POLAR       4</span>
<a name="l00029"></a><a class="code" href="patty_8h.shtml#a7dc114b83d61cc2dc860f74430b872b">00029</a> <span class="preprocessor"></span><span class="preprocessor">#define PT_DONOR       5</span>
<a name="l00030"></a><a class="code" href="patty_8h.shtml#fa735c5c5d36f5801b383544f2e447e4">00030</a> <span class="preprocessor"></span><span class="preprocessor">#define PT_HYDROPHOBIC 6</span>
<a name="l00031"></a><a class="code" href="patty_8h.shtml#736984129ae6531f92a2ef5df2976d37">00031</a> <span class="preprocessor"></span><span class="preprocessor">#define PT_OTHER       7</span>
<a name="l00032"></a><a class="code" href="patty_8h.shtml#7f13c6966878919d37869e6669b326f4">00032</a> <span class="preprocessor"></span><span class="preprocessor">#define PT_METAL           8</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span>
<a name="l00034"></a>00034 <span class="comment">// class introduction in patty.cpp</span>
<a name="l00035"></a><a class="code" href="classOpenBabel_1_1patty.shtml">00035</a> <span class="keyword">class </span>OBAPI patty
<a name="l00036"></a>00036 {
<a name="l00037"></a>00037     std::vector&lt;OBSmartsPattern*&gt; _sp;
<a name="l00038"></a>00038     std::vector&lt;std::string&gt; smarts;
<a name="l00039"></a>00039     std::vector&lt;std::string&gt; typ;
<a name="l00040"></a>00040     <span class="keywordtype">bool</span> debug;
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">public</span> :
<a name="l00043"></a>00043 
<a name="l00044"></a><a class="code" href="classOpenBabel_1_1patty.shtml#e8f0539fe08c4054ab1c388d06d2bc85">00044</a>     patty()
<a name="l00045"></a>00045     {
<a name="l00046"></a>00046         debug = <span class="keyword">false</span>;
<a name="l00047"></a>00047     }
<a name="l00048"></a><a class="code" href="classOpenBabel_1_1patty.shtml#cef8332ec6ab02abf1879754878910c5">00048</a>     patty(<span class="keywordtype">char</span> *s)
<a name="l00049"></a>00049     {
<a name="l00050"></a>00050         debug = <span class="keyword">false</span>;
<a name="l00051"></a>00051         read_rules(std::string(s));
<a name="l00052"></a>00052     }
<a name="l00053"></a>00053 
<a name="l00054"></a><a class="code" href="classOpenBabel_1_1patty.shtml#6103c38578b81294c70f167d6334af16">00054</a>     patty(<span class="keyword">const</span> std::string &amp;s)
<a name="l00055"></a>00055     {
<a name="l00056"></a>00056         debug = <span class="keyword">false</span>;
<a name="l00057"></a>00057         read_rules(s);
<a name="l00058"></a>00058     }
<a name="l00059"></a>00059 
<a name="l00060"></a><a class="code" href="classOpenBabel_1_1patty.shtml#1211d6021038db062a56f2cfeb417caa">00060</a>     ~patty()
<a name="l00061"></a>00061     {
<a name="l00062"></a>00062         std::vector&lt;OBSmartsPattern*&gt;::iterator i;
<a name="l00063"></a>00063         <span class="keywordflow">for</span> (i = _sp.begin();i != _sp.end();++i)
<a name="l00064"></a>00064             <span class="keyword">delete</span> *i;
<a name="l00065"></a>00065     }
<a name="l00066"></a><a class="code" href="classOpenBabel_1_1patty.shtml#42bc2ee3b7fe3b3e9390780b8423f00a">00066</a>     <span class="keywordtype">void</span> debug_on()
<a name="l00067"></a>00067     {
<a name="l00068"></a>00068         debug = <span class="keyword">true</span>;
<a name="l00069"></a>00069     }
<a name="l00070"></a><a class="code" href="classOpenBabel_1_1patty.shtml#c7ee08580523710be7d16dc45d99e540">00070</a>     <span class="keywordtype">void</span> debug_off()
<a name="l00071"></a>00071     {
<a name="l00072"></a>00072         debug = <span class="keyword">false</span>;
<a name="l00073"></a>00073     }
<a name="l00074"></a>00074     <span class="keywordtype">void</span> read_rules(<span class="keyword">const</span> std::string &amp;infile);
<a name="l00075"></a>00075     <span class="keywordtype">void</span> assign_rules(std::vector&lt;std::string&gt; &amp;rules);
<a name="l00076"></a>00076     <span class="keywordtype">void</span> assign_types(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol,std::vector&lt;std::string&gt; &amp;atm_typ);
<a name="l00077"></a>00077     <span class="keywordtype">void</span> assign_types(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol,std::vector&lt;int&gt; &amp;atm_typ);
<a name="l00078"></a>00078     <span class="keywordtype">int</span> type_to_int(<span class="keyword">const</span> std::string &amp;type, <span class="keywordtype">bool</span> failOnUndefined= <span class="keyword">false</span>);
<a name="l00079"></a>00079     <span class="keywordtype">int</span> Istype(<span class="keyword">const</span> std::string &amp;type);
<a name="l00080"></a>00080 };
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="preprocessor">#endif // OB_PATTY_H</span>
<a name="l00085"></a>00085 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
