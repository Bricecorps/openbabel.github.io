<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: forcefield.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>forcefield.h</h1><a href="forcefield_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">forcefield.h - Handle OBForceField class.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2006-2007 by Tim Vandermeersch &lt;tim.vandermeersch@gmail.com&gt;</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00007"></a>00007 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00010"></a>00010 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00011"></a>00011 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00012"></a>00012 <span class="comment"> </span>
<a name="l00013"></a>00013 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00014"></a>00014 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00016"></a>00016 <span class="comment">GNU General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">***********************************************************************/</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef OB_FORCEFIELD_H</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define OB_FORCEFIELD_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;list&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml">openbabel/plugin.h</a>&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;<a class="code" href="grid_8h.shtml">openbabel/grid.h</a>&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;<a class="code" href="griddata_8h.shtml">openbabel/griddata.h</a>&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;float.h&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">namespace </span>OpenBabel
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038   <span class="comment">// log levels</span>
<a name="l00039"></a><a class="code" href="forcefield_8h.shtml#b2fe5e4b9bb6091640f61aca1f8fabc1">00039</a> <span class="preprocessor">#define OBFF_LOGLVL_NONE        0   </span>
<a name="l00040"></a><a class="code" href="forcefield_8h.shtml#c5678a26733f7e2541987c95538e7e4e">00040</a> <span class="preprocessor">#define OBFF_LOGLVL_LOW         1   </span>
<a name="l00041"></a><a class="code" href="forcefield_8h.shtml#9cd01f8c82ec15b5a903116a497f0834">00041</a> <span class="preprocessor">#define OBFF_LOGLVL_MEDIUM      2   </span>
<a name="l00042"></a><a class="code" href="forcefield_8h.shtml#dd1301ce9bd9fe108bbe07da34752753">00042</a> <span class="preprocessor">#define OBFF_LOGLVL_HIGH        3   </span>
<a name="l00043"></a>00043 <span class="preprocessor"></span>
<a name="l00044"></a>00044 <span class="preprocessor"></span>  <span class="comment">// terms</span>
<a name="l00045"></a><a class="code" href="forcefield_8h.shtml#f74352438fc4a63a9df7f6f385b4d6ab">00045</a> <span class="preprocessor">#define OBFF_ENERGY             (1 &lt;&lt; 0)   </span>
<a name="l00046"></a><a class="code" href="forcefield_8h.shtml#05a134eff47f23a70402141056c70f90">00046</a> <span class="preprocessor">#define OBFF_EBOND              (1 &lt;&lt; 1)   </span>
<a name="l00047"></a><a class="code" href="forcefield_8h.shtml#421f08eae95dbb447234cb2f91d062d7">00047</a> <span class="preprocessor">#define OBFF_EANGLE             (1 &lt;&lt; 2)   </span>
<a name="l00048"></a><a class="code" href="forcefield_8h.shtml#d50b7ecf821f887eca238d3fc73a0538">00048</a> <span class="preprocessor">#define OBFF_ESTRBND            (1 &lt;&lt; 3)   </span>
<a name="l00049"></a><a class="code" href="forcefield_8h.shtml#993b2348c9dfae67ee0b283581eadbbc">00049</a> <span class="preprocessor">#define OBFF_ETORSION           (1 &lt;&lt; 4)   </span>
<a name="l00050"></a><a class="code" href="forcefield_8h.shtml#5f7d91c3811e63907ac41a5a5d6baaeb">00050</a> <span class="preprocessor">#define OBFF_EOOP               (1 &lt;&lt; 5)   </span>
<a name="l00051"></a><a class="code" href="forcefield_8h.shtml#e1e685b7a2f50b5e9939f9a68d177120">00051</a> <span class="preprocessor">#define OBFF_EVDW               (1 &lt;&lt; 6)   </span>
<a name="l00052"></a><a class="code" href="forcefield_8h.shtml#6957179cb6ce119cc06b57cddd070445">00052</a> <span class="preprocessor">#define OBFF_EELECTROSTATIC     (1 &lt;&lt; 7)   </span>
<a name="l00053"></a>00053 <span class="preprocessor"></span>
<a name="l00054"></a>00054 <span class="preprocessor"></span>  <span class="comment">// constraint types</span>
<a name="l00055"></a><a class="code" href="forcefield_8h.shtml#403cce0aac588c074edba9b6e9693333">00055</a> <span class="preprocessor">#define OBFF_CONST_IGNORE       (1 &lt;&lt; 0)   </span>
<a name="l00056"></a><a class="code" href="forcefield_8h.shtml#2ed83985488d07e784070ab060e7152d">00056</a> <span class="preprocessor">#define OBFF_CONST_ATOM         (1 &lt;&lt; 1)   </span>
<a name="l00057"></a><a class="code" href="forcefield_8h.shtml#382d8598ac3f3ab0f18c359b475b293c">00057</a> <span class="preprocessor">#define OBFF_CONST_ATOM_X       (1 &lt;&lt; 2)   </span>
<a name="l00058"></a><a class="code" href="forcefield_8h.shtml#4469fdba2f1a60bd449b8d48c08255d1">00058</a> <span class="preprocessor">#define OBFF_CONST_ATOM_Y       (1 &lt;&lt; 3)   </span>
<a name="l00059"></a><a class="code" href="forcefield_8h.shtml#7613446f76a2f7c1178339abf63a1147">00059</a> <span class="preprocessor">#define OBFF_CONST_ATOM_Z       (1 &lt;&lt; 4)   </span>
<a name="l00060"></a><a class="code" href="forcefield_8h.shtml#ba8cc10d376900ad74002e974967a6f6">00060</a> <span class="preprocessor">#define OBFF_CONST_DISTANCE     (1 &lt;&lt; 5)   </span>
<a name="l00061"></a><a class="code" href="forcefield_8h.shtml#6bf5723541d15030db3107e1a424907a">00061</a> <span class="preprocessor">#define OBFF_CONST_ANGLE        (1 &lt;&lt; 6)   </span>
<a name="l00062"></a><a class="code" href="forcefield_8h.shtml#b18fc5363d7ac06c65c7b52fb6806fb8">00062</a> <span class="preprocessor">#define OBFF_CONST_TORSION      (1 &lt;&lt; 7)   </span>
<a name="l00063"></a><a class="code" href="forcefield_8h.shtml#a6bd63ac1b5e5407e128d9d8bade3055">00063</a> <span class="preprocessor">#define OBFF_CONST_CHIRAL       (1 &lt;&lt; 8)   </span>
<a name="l00064"></a>00064 <span class="preprocessor"></span>
<a name="l00065"></a>00065 <span class="preprocessor"></span>  <span class="comment">// mode arguments for SteepestDescent, ConjugateGradients, ...</span>
<a name="l00066"></a><a class="code" href="forcefield_8h.shtml#fc8a177649a5dbeef13ea8d8b4754094">00066</a> <span class="preprocessor">#define OBFF_NUMERICAL_GRADIENT         (1 &lt;&lt; 0)  </span>
<a name="l00067"></a><a class="code" href="forcefield_8h.shtml#6a5193ad50a06668ee4b9ba4d81cc78d">00067</a> <span class="preprocessor">#define OBFF_ANALYTICAL_GRADIENT        (1 &lt;&lt; 1)  </span>
<a name="l00068"></a>00068 <span class="preprocessor"></span>
<a name="l00069"></a><a class="code" href="forcefield_8h.shtml#b6dc040e34a3f442b732eef53a0078af">00069</a> <span class="preprocessor"></span><span class="preprocessor">#define KCAL_TO_KJ      4.1868</span>
<a name="l00070"></a>00070 <span class="preprocessor"></span>
<a name="l00071"></a>00071   <span class="comment">// inline if statements for logging.</span>
<a name="l00072"></a><a class="code" href="forcefield_8h.shtml#f8598fbeced9d87c6b9244a6817f52e7">00072</a> <span class="preprocessor">#define IF_OBFF_LOGLVL_LOW    if(_loglvl &gt;= OBFF_LOGLVL_LOW)</span>
<a name="l00073"></a><a class="code" href="forcefield_8h.shtml#991d954bb72e78b90839a26601cc3aee">00073</a> <span class="preprocessor"></span><span class="preprocessor">#define IF_OBFF_LOGLVL_MEDIUM if(_loglvl &gt;= OBFF_LOGLVL_MEDIUM)</span>
<a name="l00074"></a><a class="code" href="forcefield_8h.shtml#739ca1fd8d27919153ba913a7aaa6cd2">00074</a> <span class="preprocessor"></span><span class="preprocessor">#define IF_OBFF_LOGLVL_HIGH   if(_loglvl &gt;= OBFF_LOGLVL_HIGH)</span>
<a name="l00075"></a>00075 <span class="preprocessor"></span>
<a name="l00077"></a><a class="code" href="structOpenBabel_1_1LineSearchType.shtml">00077</a>   <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1LineSearchType.shtml">LineSearchType</a> 
<a name="l00078"></a>00078   {
<a name="l00079"></a>00079     <span class="keyword">enum</span> {
<a name="l00080"></a>00080       <a class="code" href="structOpenBabel_1_1LineSearchType.shtml#39b3af0f22dc1b8cb10e193d9fc491b40e5deaa3c71481eb11be6e24fa242f9c">Simple</a>, <a class="code" href="structOpenBabel_1_1LineSearchType.shtml#39b3af0f22dc1b8cb10e193d9fc491b40fe6925b6aa8210ab6c722dfcc12bf5f">Newton2Num</a> 
<a name="l00081"></a>00081     };
<a name="l00082"></a>00082   };
<a name="l00083"></a>00083   <span class="comment">/*</span>
<a name="l00084"></a>00084 <span class="comment">  struct ConstraintType</span>
<a name="l00085"></a>00085 <span class="comment">  {</span>
<a name="l00086"></a>00086 <span class="comment">    enum { </span>
<a name="l00087"></a>00087 <span class="comment">      Ignore, Atom, AtomX, AtomY, AtomZ, Distance, Angle, Torsion, Chiral</span>
<a name="l00088"></a>00088 <span class="comment">    };</span>
<a name="l00089"></a>00089 <span class="comment">  };</span>
<a name="l00090"></a>00090 <span class="comment">  */</span>
<a name="l00091"></a>00091  
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml">00094</a>   <span class="keyword">class </span>OBFPRT OBFFParameter {
<a name="l00095"></a>00095   <span class="keyword">public</span>:
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#337190adb85d207a45e3b1a3b1a17d21">00097</a>     <span class="keywordtype">int</span>         a, b, c, d;
<a name="l00099"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#f09e5cddd004a9d96e4b96025b5b9e84">00099</a>     std::string _a, _b, _c, _d; 
<a name="l00100"></a>00100 
<a name="l00102"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#f955e29543ff9ff43cc816bbd586e739">00102</a>     std::vector&lt;int&gt;    _ipar;
<a name="l00104"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#5df5e2b09e12dbb415b81622dec2c119">00104</a>     std::vector&lt;double&gt; _dpar;
<a name="l00105"></a>00105 
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#297018d30aeb0d84529e1466c5241165">00107</a>     OBFFParameter&amp; operator=(<span class="keyword">const</span> OBFFParameter &amp;ai) 
<a name="l00108"></a>00108       {
<a name="l00109"></a>00109         <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;ai) {
<a name="l00110"></a>00110           a = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#0e5520538cf79a15f211fec6700066f9">a</a>;
<a name="l00111"></a>00111           b = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#26e944d514e65bcc9880a18aba171c4e">b</a>;
<a name="l00112"></a>00112           c = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#c72ee265bc910bcca3ed2285c05fbf3e">c</a>;
<a name="l00113"></a>00113           d = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#337190adb85d207a45e3b1a3b1a17d21">d</a>;
<a name="l00114"></a>00114           _a = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#f5c6a04958480385a144fc6e6eed856e">_a</a>;
<a name="l00115"></a>00115           _b = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#96a4233594e74395c11c4a4084e205da">_b</a>;
<a name="l00116"></a>00116           _c = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#b1eb0b276cecee679f3af0302cac787b">_c</a>;
<a name="l00117"></a>00117           _d = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#f09e5cddd004a9d96e4b96025b5b9e84">_d</a>;
<a name="l00118"></a>00118           _ipar = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#f955e29543ff9ff43cc816bbd586e739">_ipar</a>;
<a name="l00119"></a>00119           _dpar = ai.<a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#5df5e2b09e12dbb415b81622dec2c119">_dpar</a>;
<a name="l00120"></a>00120         }
<a name="l00121"></a>00121         
<a name="l00122"></a>00122         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00123"></a>00123       }
<a name="l00124"></a>00124 
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBFFParameter.shtml#9bcd5733c01a38c230663fcf5849d7d3">00126</a>     <span class="keywordtype">void</span> clear () 
<a name="l00127"></a>00127     {
<a name="l00128"></a>00128       a = b = c = d = 0;
<a name="l00129"></a>00129       _ipar.clear();
<a name="l00130"></a>00130       _dpar.clear();
<a name="l00131"></a>00131     }
<a name="l00132"></a>00132   }; <span class="comment">// class OBFFParameter</span>
<a name="l00133"></a>00133   
<a name="l00134"></a>00134   <span class="comment">// specific class introductions in forcefieldYYYY.cpp (for YYYY calculations)</span>
<a name="l00135"></a>00135 
<a name="l00138"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml">00138</a>   <span class="keyword">class </span>OBFPRT OBFFCalculation2
<a name="l00139"></a>00139   {
<a name="l00140"></a>00140   <span class="keyword">public</span>:
<a name="l00142"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#af20d88e22aa08bf80f00416670985a6">00142</a>     <span class="keywordtype">double</span> energy;
<a name="l00144"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#9c0a839883dd348c60a0acb95d303031">00144</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, *b;
<a name="l00146"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#f8b322ef0c0d875274a07aff4fe5f677">00146</a>     <span class="keywordtype">int</span> idx_a, idx_b;
<a name="l00148"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#9c8629ec99a9566d12c2939ae0ad0d94">00148</a>     <span class="keywordtype">double</span> *pos_a, *pos_b;
<a name="l00150"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#0fde839d1862e9192131b1c756e1f083">00150</a>     <span class="keywordtype">double</span> force_a[3], force_b[3];
<a name="l00152"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#1aa328dda2682e389a619cebf34b1463">00152</a>     <span class="keyword">virtual</span> ~OBFFCalculation2() 
<a name="l00153"></a>00153     {
<a name="l00154"></a>00154     }    
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation2.shtml#5f9d980ee016563ac21e8b0777cc838b">00157</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetupPointers() 
<a name="l00158"></a>00158     {
<a name="l00159"></a>00159       <span class="keywordflow">if</span> (!a || !b) <span class="keywordflow">return</span>;
<a name="l00160"></a>00160       pos_a = a-&gt;GetCoordinate();
<a name="l00161"></a>00161       idx_a = a-&gt;GetIdx();
<a name="l00162"></a>00162       pos_b = b-&gt;GetCoordinate();
<a name="l00163"></a>00163       idx_b = b-&gt;GetIdx();
<a name="l00164"></a>00164     }
<a name="l00165"></a>00165   };
<a name="l00166"></a>00166  
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml">00169</a>   <span class="keyword">class </span>OBFPRT OBFFCalculation3: <span class="keyword">public</span> OBFFCalculation2
<a name="l00170"></a>00170   {
<a name="l00171"></a>00171   <span class="keyword">public</span>:
<a name="l00173"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#b322d4cf1ba31199218194d648320e52">00173</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *c;
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#db65db11b84acc78d96f5726681080b8">00175</a>     <span class="keywordtype">int</span> idx_c;
<a name="l00177"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#09eb1b65c88b833a43ad7a85b36bf98c">00177</a>     <span class="keywordtype">double</span> *pos_c;
<a name="l00179"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#6cf2e328c3d99974075b092f50e988d0">00179</a>     <span class="keywordtype">double</span> force_c[3];
<a name="l00181"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#f3bca0d479f0ecc7f32fc07169dd40ed">00181</a>     <span class="keyword">virtual</span> ~OBFFCalculation3() 
<a name="l00182"></a>00182     {
<a name="l00183"></a>00183     }    
<a name="l00186"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation3.shtml#5f9d980ee016563ac21e8b0777cc838b">00186</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetupPointers() 
<a name="l00187"></a>00187     {
<a name="l00188"></a>00188       <span class="keywordflow">if</span> (!a || !b || !c) <span class="keywordflow">return</span>;
<a name="l00189"></a>00189       pos_a = a-&gt;GetCoordinate();
<a name="l00190"></a>00190       idx_a = a-&gt;GetIdx();
<a name="l00191"></a>00191       pos_b = b-&gt;GetCoordinate();
<a name="l00192"></a>00192       idx_b = b-&gt;GetIdx();
<a name="l00193"></a>00193       pos_c = c-&gt;GetCoordinate();
<a name="l00194"></a>00194       idx_c = c-&gt;GetIdx();
<a name="l00195"></a>00195     }
<a name="l00196"></a>00196   };
<a name="l00197"></a>00197 
<a name="l00200"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml">00200</a>   <span class="keyword">class </span>OBFPRT OBFFCalculation4: <span class="keyword">public</span> OBFFCalculation3
<a name="l00201"></a>00201   {
<a name="l00202"></a>00202   <span class="keyword">public</span>:
<a name="l00204"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#3a88c23f3e5d9406d372044c428eafc7">00204</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *d;
<a name="l00206"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#633e44417a35746e54ab709b261a1367">00206</a>     <span class="keywordtype">int</span> idx_d;
<a name="l00208"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#4920e3806577b8e22c5f4294344dca41">00208</a>     <span class="keywordtype">double</span> *pos_d;
<a name="l00210"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#5fae4054ba61be2d26d1dddea0acd56c">00210</a>     <span class="keywordtype">double</span> force_d[3];
<a name="l00212"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#326ef14bd83ffe40bb118bead29c1eeb">00212</a>     <span class="keyword">virtual</span> ~OBFFCalculation4() 
<a name="l00213"></a>00213     {
<a name="l00214"></a>00214     }    
<a name="l00217"></a><a class="code" href="classOpenBabel_1_1OBFFCalculation4.shtml#6ab0e946fa529daf2a9e20b7339bcfcf">00217</a>     <span class="keywordtype">void</span> SetupPointers() 
<a name="l00218"></a>00218     {
<a name="l00219"></a>00219       <span class="keywordflow">if</span> (!a || !b || !c || !d) <span class="keywordflow">return</span>;
<a name="l00220"></a>00220       pos_a = a-&gt;GetCoordinate();
<a name="l00221"></a>00221       idx_a = a-&gt;GetIdx();
<a name="l00222"></a>00222       pos_b = b-&gt;GetCoordinate();
<a name="l00223"></a>00223       idx_b = b-&gt;GetIdx();
<a name="l00224"></a>00224       pos_c = c-&gt;GetCoordinate();
<a name="l00225"></a>00225       idx_c = c-&gt;GetIdx();
<a name="l00226"></a>00226       pos_d = d-&gt;GetCoordinate();
<a name="l00227"></a>00227       idx_d = d-&gt;GetIdx();
<a name="l00228"></a>00228     }
<a name="l00229"></a>00229   };
<a name="l00230"></a>00230 
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml">00234</a>   <span class="keyword">class </span>OBFPRT OBFFConstraint
<a name="l00235"></a>00235   {
<a name="l00236"></a>00236   <span class="keyword">public</span>:
<a name="l00238"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#2c8298e2692e499aa4ca3983e4a07343">00238</a>     <span class="keywordtype">double</span> factor, constraint_value;
<a name="l00239"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#0c4ebfe30b343764556c4414f47c3c8c">00239</a>     <span class="keywordtype">double</span> rab0, rbc0;
<a name="l00241"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#d01840ec39b188dae6668c9b87360c23">00241</a>     <span class="keywordtype">int</span> type, ia, ib, ic, id;
<a name="l00243"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#ebe082c443414982c6f9e73c820ba044">00243</a>     <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, *b, *c, *d;
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#6fdf9e3349d801d7c0f979a4ef8f03dc">00245</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> grada, gradb, gradc, gradd;
<a name="l00246"></a>00246 
<a name="l00248"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#03bb91a69e3577dd5ba466aaff68de21">00248</a>     OBFFConstraint() 
<a name="l00249"></a>00249       {
<a name="l00250"></a>00250         a = b = c = d = NULL;
<a name="l00251"></a>00251         ia = ib = ic = <span class="keywordtype">id</span> = 0;
<a name="l00252"></a>00252         constraint_value = 0.0;
<a name="l00253"></a>00253         factor = 0.0;
<a name="l00254"></a>00254       }
<a name="l00256"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#2e098102ed4dc9a61f71cb5f90d5ed5a">00256</a>     ~OBFFConstraint()
<a name="l00257"></a>00257       {
<a name="l00258"></a>00258       }
<a name="l00259"></a>00259       
<a name="l00260"></a><a class="code" href="classOpenBabel_1_1OBFFConstraint.shtml#7dbfc4054bfa4d8f6537a469dce61ced">00260</a>     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> GetGradient(<span class="keywordtype">int</span> a) 
<a name="l00261"></a>00261     {
<a name="l00262"></a>00262       <span class="keywordflow">if</span> (a == ia)
<a name="l00263"></a>00263         <span class="keywordflow">return</span> grada;
<a name="l00264"></a>00264       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (a == ib)
<a name="l00265"></a>00265         <span class="keywordflow">return</span> gradb;
<a name="l00266"></a>00266       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (a == ic)
<a name="l00267"></a>00267         <span class="keywordflow">return</span> gradc;
<a name="l00268"></a>00268       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (a == <span class="keywordtype">id</span>)
<a name="l00269"></a>00269         <span class="keywordflow">return</span> gradd;
<a name="l00270"></a>00270       <span class="keywordflow">else</span> 
<a name="l00271"></a>00271         <span class="keywordflow">return</span>  <a class="code" href="namespaceOpenBabel.shtml#85b14d39485b68c0521267a973e13241">VZero</a>;
<a name="l00272"></a>00272     }
<a name="l00273"></a>00273   };
<a name="l00274"></a>00274 
<a name="l00278"></a><a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml">00278</a>   <span class="keyword">class </span>OBFPRT OBFFConstraints
<a name="l00279"></a>00279   {
<a name="l00280"></a>00280   <span class="keyword">public</span>:
<a name="l00282"></a>00282     OBFFConstraints();
<a name="l00284"></a><a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#2e27c2b1af3ff6d1b765fc7a890f1f08">00284</a>     ~OBFFConstraints()
<a name="l00285"></a>00285       {
<a name="l00286"></a>00286         _constraints.clear();
<a name="l00287"></a>00287         _ignored.Clear();
<a name="l00288"></a>00288         _fixed.Clear();
<a name="l00289"></a>00289         _Xfixed.Clear();
<a name="l00290"></a>00290         _Yfixed.Clear();
<a name="l00291"></a>00291         _Zfixed.Clear();
<a name="l00292"></a>00292       }
<a name="l00294"></a>00294     <span class="keywordtype">void</span> Clear();
<a name="l00296"></a>00296     <span class="keywordtype">double</span> GetConstraintEnergy();
<a name="l00298"></a>00298     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> GetGradient(<span class="keywordtype">int</span> a);
<a name="l00300"></a><a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#e9c86935e608f4b1f8ffb11d9c5e349d">00300</a>     OBFFConstraints&amp; operator=(<span class="keyword">const</span> OBFFConstraints &amp;ai) 
<a name="l00301"></a>00301       {
<a name="l00302"></a>00302         <span class="keywordflow">if</span> (<span class="keyword">this</span> != &amp;ai) {
<a name="l00303"></a>00303           _constraints = ai.<a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#af30f3f95d0204ec25fd0315027fdd1a">_constraints</a>;
<a name="l00304"></a>00304           _ignored = ai.<a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#4120955321b520e8a5b2d7c3184176bb">_ignored</a>;
<a name="l00305"></a>00305           _fixed = ai.<a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#efcb14fc20776703dee961c426f9dea0">_fixed</a>;
<a name="l00306"></a>00306           _Xfixed = ai.<a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#c7b96ed40abf9dd0613292d9e8d88a59">_Xfixed</a>;
<a name="l00307"></a>00307           _Yfixed = ai.<a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#13a16881e13f9639ff5a8de3c10c0925">_Yfixed</a>;
<a name="l00308"></a>00308           _Zfixed = ai.<a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#9c9a23b26443e8a267fd8554cac008d2">_Zfixed</a>;
<a name="l00309"></a>00309         }
<a name="l00310"></a>00310         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00311"></a>00311       }
<a name="l00312"></a>00312 
<a name="l00316"></a>00316     <span class="keywordtype">void</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00317"></a>00317 
<a name="l00319"></a>00319     <span class="comment">// Set Constraints                                                     //</span>
<a name="l00322"></a>00322 <span class="comment"></span>
<a name="l00323"></a>00323 
<a name="l00324"></a>00324     <span class="keywordtype">void</span> SetFactor(<span class="keywordtype">double</span> factor);
<a name="l00326"></a>00326     <span class="keywordtype">void</span> AddIgnore(<span class="keywordtype">int</span> a);
<a name="l00328"></a>00328     <span class="keywordtype">void</span> AddAtomConstraint(<span class="keywordtype">int</span> a);
<a name="l00330"></a>00330     <span class="keywordtype">void</span> AddAtomXConstraint(<span class="keywordtype">int</span> a);
<a name="l00332"></a>00332     <span class="keywordtype">void</span> AddAtomYConstraint(<span class="keywordtype">int</span> a);
<a name="l00334"></a>00334     <span class="keywordtype">void</span> AddAtomZConstraint(<span class="keywordtype">int</span> a);
<a name="l00336"></a>00336     <span class="keywordtype">void</span> AddDistanceConstraint(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">double</span> length);
<a name="l00338"></a>00338     <span class="keywordtype">void</span> AddAngleConstraint(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c, <span class="keywordtype">double</span> angle);
<a name="l00340"></a>00340     <span class="keywordtype">void</span> AddTorsionConstraint(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c, <span class="keywordtype">int</span> d, <span class="keywordtype">double</span> torsion);
<a name="l00343"></a>00343     <span class="keywordtype">void</span> DeleteConstraint(<span class="keywordtype">int</span> index);
<a name="l00345"></a>00345 
<a name="l00346"></a>00346     <span class="comment">// Get Constraints                                                     //</span>
<a name="l00349"></a>00349 <span class="comment"></span>
<a name="l00350"></a>00350 
<a name="l00351"></a>00351     <span class="keywordtype">double</span> GetFactor();
<a name="l00353"></a>00353     <span class="keywordtype">int</span> Size() <span class="keyword">const</span>;
<a name="l00363"></a>00363     <span class="keywordtype">int</span> GetConstraintType(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00367"></a>00367     <span class="keywordtype">double</span> GetConstraintValue(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00370"></a>00370     <span class="keywordtype">int</span> GetConstraintAtomA(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00373"></a>00373     <span class="keywordtype">int</span> GetConstraintAtomB(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00376"></a>00376     <span class="keywordtype">int</span> GetConstraintAtomC(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00379"></a>00379     <span class="keywordtype">int</span> GetConstraintAtomD(<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00382"></a>00382     <span class="keywordtype">bool</span> IsIgnored(<span class="keywordtype">int</span> a);
<a name="l00385"></a>00385     <span class="keywordtype">bool</span> IsFixed(<span class="keywordtype">int</span> a);
<a name="l00388"></a>00388     <span class="keywordtype">bool</span> IsXFixed(<span class="keywordtype">int</span> a);
<a name="l00391"></a>00391     <span class="keywordtype">bool</span> IsYFixed(<span class="keywordtype">int</span> a);
<a name="l00394"></a>00394     <span class="keywordtype">bool</span> IsZFixed(<span class="keywordtype">int</span> a);
<a name="l00398"></a><a class="code" href="classOpenBabel_1_1OBFFConstraints.shtml#88ddce8c4d6f5526ddd40399b27ebb31">00398</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> GetIgnoredBitVec() { <span class="keywordflow">return</span> _ignored; }
<a name="l00400"></a>00400  
<a name="l00401"></a>00401   <span class="keyword">private</span>:
<a name="l00402"></a>00402     std::vector&lt;OBFFConstraint&gt; _constraints;
<a name="l00403"></a>00403     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>    _ignored;
<a name="l00404"></a>00404     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>    _fixed;
<a name="l00405"></a>00405     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>    _Xfixed;
<a name="l00406"></a>00406     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>    _Yfixed;
<a name="l00407"></a>00407     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>    _Zfixed;
<a name="l00408"></a>00408     <span class="keywordtype">double</span> _factor;
<a name="l00409"></a>00409   };
<a name="l00410"></a>00410  
<a name="l00411"></a>00411   <span class="comment">// Class OBForceField</span>
<a name="l00412"></a>00412   <span class="comment">// class introduction in forcefield.cpp</span>
<a name="l00413"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml">00413</a>   <span class="keyword">class </span>OBFPRT OBForceField : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>
<a name="l00414"></a>00414   {
<a name="l00415"></a>00415     <a class="code" href="plugin_8h.shtml#e7d38c51c2ef93a98ee7cc6e33fb64f2">MAKE_PLUGIN</a>(OBForceField)
<a name="l00416"></a>00416   
<a name="l00417"></a>00417     <span class="keyword">protected</span>:
<a name="l00418"></a>00418 
<a name="l00460"></a>00460     OBFFParameter* GetParameter(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c, <span class="keywordtype">int</span> d, std::vector&lt;OBFFParameter&gt; &amp;parameter);
<a name="l00462"></a>00462     OBFFParameter* GetParameter(<span class="keyword">const</span> <span class="keywordtype">char</span>* a, <span class="keyword">const</span> <span class="keywordtype">char</span>* b, <span class="keyword">const</span> <span class="keywordtype">char</span>* c, <span class="keyword">const</span> <span class="keywordtype">char</span>* d, 
<a name="l00463"></a>00463         std::vector&lt;OBFFParameter&gt; &amp;parameter);
<a name="l00465"></a>00465     <span class="keywordtype">int</span> GetParameterIdx(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c, <span class="keywordtype">int</span> d, std::vector&lt;OBFFParameter&gt; &amp;parameter);
<a name="l00466"></a>00466            
<a name="l00475"></a>00475     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> NumericalDerivative(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, <span class="keywordtype">int</span> terms = <a class="code" href="forcefield_8h.shtml#f74352438fc4a63a9df7f6f385b4d6ab">OBFF_ENERGY</a>);
<a name="l00477"></a>00477     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> NumericalSecondDerivative(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, <span class="keywordtype">int</span> terms = <a class="code" href="forcefield_8h.shtml#f74352438fc4a63a9df7f6f385b4d6ab">OBFF_ENERGY</a>);
<a name="l00478"></a>00478     
<a name="l00479"></a>00479     <span class="comment">/* </span>
<a name="l00480"></a>00480 <span class="comment">     *   NEW gradients functions</span>
<a name="l00481"></a>00481 <span class="comment">     */</span> 
<a name="l00482"></a>00482     
<a name="l00485"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#3a1c535cd0f758c71a66901a764b9e78">00485</a>     <span class="keywordtype">void</span> SetGradient(<span class="keywordtype">double</span> *grad, <span class="keywordtype">int</span> idx) 
<a name="l00486"></a>00486     { 
<a name="l00487"></a>00487       <span class="keyword">const</span> <span class="keywordtype">int</span> coordIdx = (idx - 1) * 3;
<a name="l00488"></a>00488       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; 3; ++i) {
<a name="l00489"></a>00489         _gradientPtr[coordIdx + i] = grad[i]; 
<a name="l00490"></a>00490       }
<a name="l00491"></a>00491     }
<a name="l00492"></a>00492     
<a name="l00495"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#f059ddc5c416ce336f2a4b6dc072c34c">00495</a>     <span class="keywordtype">void</span> AddGradient(<span class="keywordtype">double</span> *grad, <span class="keywordtype">int</span> idx) 
<a name="l00496"></a>00496     { 
<a name="l00497"></a>00497       <span class="keyword">const</span> <span class="keywordtype">int</span> coordIdx = (idx - 1) * 3;
<a name="l00498"></a>00498       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; 3; ++i) {
<a name="l00499"></a>00499         _gradientPtr[coordIdx + i] += grad[i];
<a name="l00500"></a>00500       }
<a name="l00501"></a>00501     }
<a name="l00502"></a>00502     
<a name="l00505"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#5faf9f4fbe59274585da7f34a3ed1bf4">00505</a>     <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> GetGradient(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, <span class="keywordtype">int</span> <span class="comment">/*terms*/</span> = <a class="code" href="forcefield_8h.shtml#f74352438fc4a63a9df7f6f385b4d6ab">OBFF_ENERGY</a>) 
<a name="l00506"></a>00506     { 
<a name="l00507"></a>00507       <span class="keyword">const</span> <span class="keywordtype">int</span> coordIdx = (a-&gt;<a class="code" href="classOpenBabel_1_1OBAtom.shtml#05e11dc0b0a8c1d5c4ebc987f488f45f">GetIdx</a>() - 1) * 3;
<a name="l00508"></a>00508       <span class="keywordflow">return</span> _gradientPtr + coordIdx;
<a name="l00509"></a>00509     }
<a name="l00510"></a>00510     
<a name="l00513"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#f8150b3fc69e78fc1c176dfc1327f5c6">00513</a>     <span class="keywordtype">double</span>* GetGradientPtr() 
<a name="l00514"></a>00514     { 
<a name="l00515"></a>00515       <span class="keywordflow">return</span> _gradientPtr;
<a name="l00516"></a>00516     }
<a name="l00517"></a>00517     
<a name="l00520"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#fb94f2c06dec29df5a07e6a1d4c5dd34">00520</a>     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ClearGradients() 
<a name="l00521"></a>00521     { 
<a name="l00522"></a>00522       <span class="comment">// We cannot use memset because IEEE floating point representations</span>
<a name="l00523"></a>00523       <span class="comment">// are not guaranteed by C/C++ standard, but this loop can be</span>
<a name="l00524"></a>00524       <span class="comment">// unrolled or vectorized by compilers</span>
<a name="l00525"></a>00525       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; _ncoords; ++i)
<a name="l00526"></a>00526         _gradientPtr[i] = 0.0;
<a name="l00527"></a>00527       <span class="comment">//      memset(_gradientPtr, '\0', sizeof(double)*_ncoords);</span>
<a name="l00528"></a>00528     }
<a name="l00529"></a>00529 
<a name="l00537"></a>00537     <span class="keywordtype">bool</span> IsInSameRing(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* a, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* b);
<a name="l00538"></a>00538  
<a name="l00539"></a>00539     <span class="comment">// general variables</span>
<a name="l00540"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#7d4d215b52bc24be3d51b48b3db80d04">00540</a>     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>       _mol; 
<a name="l00541"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#43ae2d23322c22c8b3aa417aee4cba33">00541</a>     <span class="keywordtype">bool</span>        _init; 
<a name="l00542"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#e0fed046fe70376f187935ac23f0bd2f">00542</a>     std::string _parFile; 
<a name="l00543"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#87ad7b24e3216ffcc1ed6a0aa6cde8a1">00543</a>     <span class="keywordtype">bool</span>        _validSetup; 
<a name="l00544"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#88fa19b9130676dc608e01894b17fd41">00544</a>     <span class="keywordtype">double</span>      *_gradientPtr; 
<a name="l00545"></a>00545     <span class="comment">// logging variables</span>
<a name="l00546"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a145a686b7eacdb7a2bef68cec747f27">00546</a>     std::ostream* _logos; 
<a name="l00547"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#bec9283ea38dc5f76d7774222c7af59f">00547</a>     <span class="keywordtype">char</span>        _logbuf[<a class="code" href="mol_8h.shtml#f5a993b6f41e0d9c2fc3a45dc6a61c55">BUFF_SIZE</a>+1]; 
<a name="l00548"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#8001f867c26ef71e3f3502d0f5be8ce8">00548</a>     <span class="keywordtype">int</span>         _loglvl; 
<a name="l00549"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#df8bc0c8f57908b3a4c78788c2fc3330">00549</a>     <span class="keywordtype">int</span>         _origLogLevel;
<a name="l00550"></a>00550     <span class="comment">// conformer genereation (rotor search) variables</span>
<a name="l00551"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#33a1ed154977f6b309d61d65847ca90f">00551</a>     <span class="keywordtype">int</span>         _current_conformer; 
<a name="l00552"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#befafa647ab5a5474b1d5235d3c30dad">00552</a>     std::vector&lt;double&gt; _energies; 
<a name="l00553"></a>00553     <span class="comment">// minimization variables</span>
<a name="l00554"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#c20dfc0b5f58b89fc857e5b857325fb4">00554</a>     <span class="keywordtype">double</span>      _econv, _e_n1; 
<a name="l00555"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#3ed5d341690f9ce3522ecdcc2206615c">00555</a>     <span class="keywordtype">int</span>         _cstep, _nsteps; 
<a name="l00556"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#73ad671c5201ca69c0c2c81af99c4214">00556</a>     <span class="keywordtype">double</span>      *_grad1; 
<a name="l00557"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#996a653e34e649b9c4b050eaf86b12a6">00557</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _ncoords; 
<a name="l00558"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#cd7d999338e5ecb03efdea99089c869c">00558</a>     <span class="keywordtype">int</span>         _linesearch; 
<a name="l00559"></a>00559     <span class="comment">// molecular dynamics variables</span>
<a name="l00560"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#c4b0e6e340822bccbb061b1565b5958c">00560</a>     <span class="keywordtype">double</span>      _timestep; 
<a name="l00561"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#424e7f2dac19a88602e51696e66ceccd">00561</a>     <span class="keywordtype">double</span>      _temp; 
<a name="l00562"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#1c6ec11da0c784366a207df2c29e2efa">00562</a>     <span class="keywordtype">double</span>      *_velocityPtr; 
<a name="l00563"></a>00563     <span class="comment">// contraint varibles</span>
<a name="l00564"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#e59ed4dab9cfd6ae1a702370c1d4c0ff">00564</a>     <span class="keyword">static</span> OBFFConstraints _constraints; 
<a name="l00565"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#b2a4fd7a98763063aeb4648cefcde693">00565</a>     <span class="keyword">static</span> <span class="keywordtype">int</span> _fixAtom; 
<a name="l00566"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#cb9755f71fff5b34e8a2753df887edbf">00566</a>     <span class="keyword">static</span> <span class="keywordtype">int</span> _ignoreAtom; 
<a name="l00567"></a>00567     <span class="comment">// cut-off variables</span>
<a name="l00568"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#f86a9242b36c3b1e358743dfe2193be7">00568</a>     <span class="keywordtype">bool</span>        _cutoff; 
<a name="l00569"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#774db318b05ad82cd9cedff8af9a0571">00569</a>     <span class="keywordtype">double</span>      _rvdw; 
<a name="l00570"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#5532ec3a06ae9c1cd852217c123b997b">00570</a>     <span class="keywordtype">double</span>      _rele; 
<a name="l00571"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#6de627a8912990fef0dd9757108e13d1">00571</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>    _vdwpairs; 
<a name="l00572"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#3f81075e1baee5f672ca7c34acabf4f6">00572</a>     <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>    _elepairs; 
<a name="l00573"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#1326f04ea7da3c29fa866198693b0ca2">00573</a>     <span class="keywordtype">int</span>         _pairfreq; 
<a name="l00574"></a>00574     <span class="comment">// group variables</span>
<a name="l00575"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#b632bda889892a23b1c91ecc36c2a8c7">00575</a>     std::vector&lt;OBBitVec&gt; _intraGroup; 
<a name="l00576"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#357a7904b5a4248f99309aa9b0a25b29">00576</a>     std::vector&lt;OBBitVec&gt; _interGroup; 
<a name="l00577"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#0cacf85dbcf67df1425adf632c59a3f5">00577</a>     std::vector&lt;std::pair&lt;OBBitVec, OBBitVec&gt; &gt; _interGroups; 
<a name="l00578"></a>00578 
<a name="l00579"></a>00579   <span class="keyword">public</span>:
<a name="l00583"></a>00583     <span class="keyword">virtual</span> OBForceField* MakeNewInstance()=0;
<a name="l00584"></a>00584 
<a name="l00586"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#0873303d47808dc281941c6e569194e5">00586</a>     <span class="keyword">virtual</span> ~OBForceField()
<a name="l00587"></a>00587     {
<a name="l00588"></a>00588       <span class="keywordflow">if</span> (_grad1 != NULL) {
<a name="l00589"></a>00589         <span class="keyword">delete</span> [] _grad1;
<a name="l00590"></a>00590         _grad1 = NULL;
<a name="l00591"></a>00591       }
<a name="l00592"></a>00592     }
<a name="l00593"></a>00593 
<a name="l00595"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#83fe34b548277e7942398d42602d09da">00595</a>     <span class="keyword">const</span> <span class="keywordtype">char</span>* TypeID()
<a name="l00596"></a>00596     {
<a name="l00597"></a>00597       <span class="keywordflow">return</span> <span class="stringliteral">"forcefields"</span>;
<a name="l00598"></a>00598     }
<a name="l00599"></a>00599 
<a name="l00603"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#e937c7f2658011d8807d11c5489ca150">00603</a>     <span class="keyword">static</span> OBForceField* FindForceField(<span class="keyword">const</span> std::string&amp; ID)
<a name="l00604"></a>00604     { 
<a name="l00605"></a>00605       <span class="keywordflow">return</span> FindType(ID.c_str());
<a name="l00606"></a>00606     } 
<a name="l00610"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#2a2a2035eb22fe74296a332b493e054e">00610</a>     <span class="keyword">static</span> OBForceField* FindForceField(<span class="keyword">const</span> <span class="keywordtype">char</span> *ID)
<a name="l00611"></a>00611     {
<a name="l00612"></a>00612       <span class="keywordflow">return</span> FindType(ID);
<a name="l00613"></a>00613     }
<a name="l00614"></a>00614     <span class="comment">/*</span>
<a name="l00615"></a>00615 <span class="comment">     *</span>
<a name="l00616"></a>00616 <span class="comment">     */</span>
<a name="l00617"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#b1f8d3dd7f37e221003f261a0079e672">00617</a>     <span class="keywordtype">void</span> SetParameterFile(<span class="keyword">const</span> std::string &amp;filename)
<a name="l00618"></a>00618     {
<a name="l00619"></a>00619       _parFile = filename;
<a name="l00620"></a>00620       _init = <span class="keyword">false</span>;
<a name="l00621"></a>00621     }
<a name="l00624"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#fb243456fec224bf718c6b9a755523ca">00624</a>     <span class="keyword">virtual</span> std::string GetUnit() { <span class="keywordflow">return</span> std::string(<span class="stringliteral">"au"</span>); }
<a name="l00625"></a>00625     <span class="comment">/* Does this force field have analytical gradients defined for all</span>
<a name="l00626"></a>00626 <span class="comment">     * calculation components (bonds, angles, non-bonded, etc.)</span>
<a name="l00627"></a>00627 <span class="comment">     * If this is true, code should default to using OBFF_ANALYTICAL_GRADIENT</span>
<a name="l00628"></a>00628 <span class="comment">     * for SteepestDescent() or ConjugateGradients().</span>
<a name="l00629"></a>00629 <span class="comment">     * \return True if all analytical gradients are implemented.</span>
<a name="l00630"></a>00630 <span class="comment">     */</span>
<a name="l00631"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#1562780b80f8f695290f177dd7822945">00631</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> HasAnalyticalGradients() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00636"></a>00636     <span class="keywordtype">bool</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol); 
<a name="l00642"></a>00642     <span class="keywordtype">bool</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, OBFFConstraints &amp;constraints);
<a name="l00646"></a>00646     <span class="comment">// move to protected in future version</span>
<a name="l00647"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#e575e548e5cb3581dec58148d29b52e0">00647</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ParseParamFile() { <span class="keywordflow">return</span> <span class="keyword">false</span>; } 
<a name="l00651"></a>00651     <span class="comment">// move to protected in future version</span>
<a name="l00652"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#b2ff00a9602a3943af163114169cc493">00652</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetTypes() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00656"></a>00656     <span class="comment">// move to protected in future version</span>
<a name="l00657"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#68b1eb8d59a91d04037d3ab4fc0ebd2d">00657</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFormalCharges() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00661"></a>00661     <span class="comment">// move to protected in future version</span>
<a name="l00662"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#695314de7d7b2c2c3686368f7c71f806">00662</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetPartialCharges() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00666"></a>00666     <span class="comment">// move to protected in future version</span>
<a name="l00667"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#001f62d747d30d1fe4c79151dbde0af0">00667</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetupCalculations() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00672"></a>00672     <span class="comment">// move to protected in future version</span>
<a name="l00673"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#e65e730b610fd2bcc678cc1ee16f58b2">00673</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetupPointers() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l00679"></a>00679     <span class="keywordtype">bool</span> IsSetupNeeded(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00695"></a>00695     <span class="keywordtype">bool</span> GetAtomTypes(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00711"></a>00711     <span class="keywordtype">bool</span> GetPartialCharges(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00712"></a>00712 
<a name="l00713"></a>00713 
<a name="l00714"></a>00714 
<a name="l00719"></a>00719     <span class="keywordtype">bool</span> GetCoordinates(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00721"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a2de0558a3b2b42533062f691eadbf60">00721</a>     <span class="keywordtype">bool</span> UpdateCoordinates(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol) {<span class="keywordflow">return</span> GetCoordinates(mol); } 
<a name="l00726"></a>00726     <span class="keywordtype">bool</span> GetConformers(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00728"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#66fa17fd4f3a46d9fedd720c2fa66ba4">00728</a>     <span class="keywordtype">bool</span> UpdateConformers(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol) { <span class="keywordflow">return</span> GetConformers(mol); } 
<a name="l00733"></a>00733     <span class="keywordtype">bool</span> SetCoordinates(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00738"></a>00738     <span class="keywordtype">bool</span> SetConformers(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);
<a name="l00748"></a>00748     <a class="code" href="classOpenBabel_1_1OBGridData.shtml">OBGridData</a> *GetGrid(<span class="keywordtype">double</span> step, <span class="keywordtype">double</span> padding, <span class="keyword">const</span> <span class="keywordtype">char</span> *type, <span class="keywordtype">double</span> pchg);
<a name="l00749"></a>00749 
<a name="l00751"></a>00751     <span class="comment">// Interacting groups                                                  //</span>
<a name="l00753"></a>00753 <span class="comment"></span>      
<a name="l00755"></a>00755 
<a name="l00756"></a>00756 
<a name="l00760"></a>00760     <span class="keywordtype">void</span> AddIntraGroup(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;group);
<a name="l00765"></a>00765     <span class="keywordtype">void</span> AddInterGroup(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;group);
<a name="l00773"></a>00773     <span class="keywordtype">void</span> AddInterGroups(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;group1, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;group2);
<a name="l00776"></a>00776     <span class="keywordtype">void</span> ClearGroups(); 
<a name="l00779"></a>00779     <span class="keywordtype">bool</span> HasGroups(); 
<a name="l00781"></a>00781  
<a name="l00783"></a>00783     <span class="comment">// Cut-off                                                             //</span>
<a name="l00785"></a>00785 <span class="comment"></span>      
<a name="l00787"></a>00787 
<a name="l00788"></a>00788 
<a name="l00791"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#9e9a76866201a44974c5cbf6ee88436f">00791</a>     <span class="keywordtype">void</span> EnableCutOff(<span class="keywordtype">bool</span> enable)
<a name="l00792"></a>00792     {
<a name="l00793"></a>00793       _cutoff = enable;
<a name="l00794"></a>00794     }
<a name="l00797"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#21736aa833b4933917d9986eee8e9f2c">00797</a>     <span class="keywordtype">bool</span> IsCutOffEnabled()
<a name="l00798"></a>00798     {
<a name="l00799"></a>00799       <span class="keywordflow">return</span> _cutoff;
<a name="l00800"></a>00800     }
<a name="l00804"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#f92ad46828ab10e3ea1545c48f19c10f">00804</a>     <span class="keywordtype">void</span> SetVDWCutOff(<span class="keywordtype">double</span> r)
<a name="l00805"></a>00805     {
<a name="l00806"></a>00806       _rvdw = r;
<a name="l00807"></a>00807     }
<a name="l00811"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#1525624cb170c1586a75d9328a4af7b2">00811</a>     <span class="keywordtype">double</span> GetVDWCutOff()
<a name="l00812"></a>00812     {
<a name="l00813"></a>00813       <span class="keywordflow">return</span> _rvdw;
<a name="l00814"></a>00814     }
<a name="l00819"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#e9b8d2fedc2cede42b57a4cef5733522">00819</a>     <span class="keywordtype">void</span> SetElectrostaticCutOff(<span class="keywordtype">double</span> r)
<a name="l00820"></a>00820     {
<a name="l00821"></a>00821       _rele = r;
<a name="l00822"></a>00822     }
<a name="l00826"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#173f2dcd284a4c94ac55414500f0f9d4">00826</a>     <span class="keywordtype">double</span> GetElectrostaticCutOff()
<a name="l00827"></a>00827     {
<a name="l00828"></a>00828       <span class="keywordflow">return</span> _rele;
<a name="l00829"></a>00829     }
<a name="l00835"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#649091ed46f102cd6a5806767ce07d15">00835</a>     <span class="keywordtype">void</span> SetUpdateFrequency(<span class="keywordtype">int</span> f)
<a name="l00836"></a>00836     {
<a name="l00837"></a>00837       _pairfreq = f;
<a name="l00838"></a>00838     }
<a name="l00842"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#383f61fb9dd3691811081408c6d84c84">00842</a>     <span class="keywordtype">int</span> GetUpdateFrequency()
<a name="l00843"></a>00843     {
<a name="l00844"></a>00844       <span class="keywordflow">return</span> _pairfreq;
<a name="l00845"></a>00845     } 
<a name="l00850"></a>00850     <span class="keywordtype">void</span> UpdatePairsSimple();
<a name="l00851"></a>00851 
<a name="l00852"></a>00852     <span class="comment">//void UpdatePairsGroup(); TODO</span>
<a name="l00853"></a>00853 
<a name="l00857"></a>00857     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetNumPairs();
<a name="l00861"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#41185ffd9f9c02f3265c17a6403be7a1">00861</a>     <span class="keywordtype">void</span> EnableAllPairs()
<a name="l00862"></a>00862     {
<a name="l00863"></a>00863       <span class="comment">// TODO: OBBitVec doesn't seem to be allocating it's memory correctly</span>
<a name="l00864"></a>00864       <span class="comment">//_vdwpairs.SetRangeOn(0, _numpairs-1);</span>
<a name="l00865"></a>00865       <span class="comment">//_elepairs.SetRangeOn(0, _numpairs-1);</span>
<a name="l00866"></a>00866     }
<a name="l00868"></a>00868  
<a name="l00870"></a>00870     <span class="comment">// Energy Evaluation                                                   //</span>
<a name="l00872"></a>00872 <span class="comment"></span>      
<a name="l00874"></a>00874 
<a name="l00875"></a>00875 
<a name="l00884"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad91c400a880105d8dcf056615bc7fe9">00884</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> Energy(<span class="keywordtype">bool</span> = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00891"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#37e73fba5fea5f02b0eb8fe5d67f205d">00891</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_Bond(<span class="keywordtype">bool</span> = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00898"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#c94507af709dec90d1b6e97a16a361f6">00898</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_Angle(<span class="keywordtype">bool</span> = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00905"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#7190cd4ee9539aaf90e4185a418196d1">00905</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_StrBnd(<span class="keywordtype">bool</span> = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00912"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ded928764beef0b3e2b031659088a9de">00912</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_Torsion(<span class="keywordtype">bool</span> = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00919"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#bf06588ced51e566e031201121ee37ab">00919</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_OOP(<span class="keywordtype">bool</span> = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00926"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#513fd85c2d9e2fcbc1291d8680409805">00926</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_VDW(<span class="keywordtype">bool</span> = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00933"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#c9c09bd2773501bf6ff128ca42b50817">00933</a>     <span class="keyword">virtual</span> <span class="keywordtype">double</span> E_Electrostatic(<span class="keywordtype">bool</span> = <span class="keyword">true</span>) { <span class="keywordflow">return</span> 0.0f; }
<a name="l00935"></a>00935      
<a name="l00937"></a>00937     <span class="comment">// Logging                                                             //</span>
<a name="l00939"></a>00939 <span class="comment"></span>      
<a name="l00941"></a>00941 
<a name="l00942"></a>00942 
<a name="l00944"></a>00944     <span class="keywordtype">void</span> PrintTypes();
<a name="l00948"></a>00948     <span class="keywordtype">void</span> PrintFormalCharges();
<a name="l00951"></a>00951     <span class="keywordtype">void</span> PrintPartialCharges();
<a name="l00954"></a>00954     <span class="keywordtype">void</span> PrintVelocities();
<a name="l00959"></a>00959     <span class="keywordtype">bool</span> SetLogFile(std::ostream *pos);
<a name="l00984"></a>00984     <span class="keywordtype">bool</span> SetLogLevel(<span class="keywordtype">int</span> level);
<a name="l00987"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#2eef1e3eec077aa2f9a589a425000c1c">00987</a>     <span class="keywordtype">int</span> GetLogLevel() { <span class="keywordflow">return</span> _loglvl; }
<a name="l00991"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#c1d934bde29e10f8706990e2ff07205a">00991</a>     <span class="keywordtype">void</span> OBFFLog(std::string msg)
<a name="l00992"></a>00992     {
<a name="l00993"></a>00993       <span class="keywordflow">if</span> (!_logos)
<a name="l00994"></a>00994         <span class="keywordflow">return</span>;
<a name="l00995"></a>00995       
<a name="l00996"></a>00996       *_logos &lt;&lt; msg;
<a name="l00997"></a>00997     }
<a name="l01001"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#7562e395dad0d981005314846cec8b1d">01001</a>     <span class="keywordtype">void</span> OBFFLog(<span class="keyword">const</span> <span class="keywordtype">char</span> *msg)
<a name="l01002"></a>01002     {
<a name="l01003"></a>01003       <span class="keywordflow">if</span> (!_logos)
<a name="l01004"></a>01004         <span class="keywordflow">return</span>;
<a name="l01005"></a>01005       
<a name="l01006"></a>01006       *_logos &lt;&lt; msg;
<a name="l01007"></a>01007     }
<a name="l01009"></a>01009      
<a name="l01011"></a>01011     <span class="comment">// Structure Generation                                                //</span>
<a name="l01013"></a>01013 <span class="comment"></span>      
<a name="l01015"></a>01015 
<a name="l01016"></a>01016 
<a name="l01017"></a>01017     <span class="keywordtype">void</span> DistanceGeometry();
<a name="l01037"></a>01037     <span class="keywordtype">void</span> SystematicRotorSearch(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01055"></a>01055     <span class="keywordtype">int</span> SystematicRotorSearchInitialize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01060"></a>01060     <span class="keywordtype">bool</span> SystematicRotorSearchNextConformer(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01081"></a>01081     <span class="keywordtype">void</span> RandomRotorSearch(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conformers, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01099"></a>01099     <span class="keywordtype">void</span> RandomRotorSearchInitialize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conformers, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01104"></a>01104     <span class="keywordtype">bool</span> RandomRotorSearchNextConformer(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps = 2500);
<a name="l01126"></a>01126     <span class="keywordtype">void</span> WeightedRotorSearch(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> conformers, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> geomSteps);
<a name="l01127"></a>01127 
<a name="l01129"></a>01129     <span class="comment">// Energy Minimization                                                 //</span>
<a name="l01131"></a>01131 <span class="comment"></span>      
<a name="l01133"></a>01133 
<a name="l01134"></a>01134 
<a name="l01137"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#dfc2dd70878761c7274eea78b930a213">01137</a>     <span class="keywordtype">void</span> SetLineSearchType(<span class="keywordtype">int</span> type)
<a name="l01138"></a>01138     {
<a name="l01139"></a>01139       _linesearch = type;
<a name="l01140"></a>01140     }
<a name="l01144"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#7b5b5fcdc268bd7242665b21285223f5">01144</a>     <span class="keywordtype">int</span> GetLineSearchType()
<a name="l01145"></a>01145     {
<a name="l01146"></a>01146       <span class="keywordflow">return</span> _linesearch;
<a name="l01147"></a>01147     }
<a name="l01151"></a>01151     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> LineSearch(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;direction);
<a name="l01165"></a>01165     <span class="keywordtype">double</span> LineSearch(<span class="keywordtype">double</span> *currentCoords, <span class="keywordtype">double</span> *direction);
<a name="l01178"></a>01178     <span class="keywordtype">double</span> Newton2NumLineSearch(<span class="keywordtype">double</span> *direction);
<a name="l01184"></a>01184     <span class="keywordtype">void</span>   LineSearchTakeStep(<span class="keywordtype">double</span> *origCoords, <span class="keywordtype">double</span> *direction, <span class="keywordtype">double</span> step);
<a name="l01200"></a>01200     <span class="keywordtype">void</span> SteepestDescent(<span class="keywordtype">int</span> steps, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#6a5193ad50a06668ee4b9ba4d81cc78d">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l01227"></a>01227     <span class="keywordtype">void</span> SteepestDescentInitialize(<span class="keywordtype">int</span> steps = 1000, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#6a5193ad50a06668ee4b9ba4d81cc78d">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l01242"></a>01242     <span class="keywordtype">bool</span> SteepestDescentTakeNSteps(<span class="keywordtype">int</span> n);
<a name="l01258"></a>01258     <span class="keywordtype">void</span> ConjugateGradients(<span class="keywordtype">int</span> steps, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#6a5193ad50a06668ee4b9ba4d81cc78d">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l01286"></a>01286     <span class="keywordtype">void</span> ConjugateGradientsInitialize(<span class="keywordtype">int</span> steps = 1000, <span class="keywordtype">double</span> econv = 1e-6f, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#6a5193ad50a06668ee4b9ba4d81cc78d">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l01302"></a>01302     <span class="keywordtype">bool</span> ConjugateGradientsTakeNSteps(<span class="keywordtype">int</span> n);
<a name="l01304"></a>01304     
<a name="l01306"></a>01306     <span class="comment">// Molecular Dynamics                                                  //</span>
<a name="l01308"></a>01308 <span class="comment"></span>      
<a name="l01310"></a>01310 
<a name="l01311"></a>01311 
<a name="l01313"></a>01313     <span class="keywordtype">void</span> GenerateVelocities();
<a name="l01333"></a>01333     <span class="keywordtype">void</span> CorrectVelocities();
<a name="l01349"></a>01349     <span class="keywordtype">void</span> MolecularDynamicsTakeNSteps(<span class="keywordtype">int</span> n, <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#1459d0a7e375155f21e29c969d32154edb13501df95a4173ed43412ebcc3b8a5">T</a>, <span class="keywordtype">double</span> timestep = 0.001, <span class="keywordtype">int</span> method = <a class="code" href="forcefield_8h.shtml#6a5193ad50a06668ee4b9ba4d81cc78d">OBFF_ANALYTICAL_GRADIENT</a>);
<a name="l01351"></a>01351 
<a name="l01353"></a>01353     <span class="comment">// Constraints                                                         //</span>
<a name="l01355"></a>01355 <span class="comment"></span>      
<a name="l01357"></a>01357 
<a name="l01358"></a>01358 
<a name="l01361"></a>01361     OBFFConstraints&amp; GetConstraints();
<a name="l01365"></a>01365     <span class="keywordtype">void</span> SetConstraints(OBFFConstraints&amp; constraints);
<a name="l01373"></a>01373     <span class="keywordtype">void</span> SetFixAtom(<span class="keywordtype">int</span> index);
<a name="l01377"></a>01377     <span class="keywordtype">void</span> UnsetFixAtom();
<a name="l01386"></a>01386     <span class="keywordtype">void</span> SetIgnoreAtom(<span class="keywordtype">int</span> index);
<a name="l01390"></a>01390     <span class="keywordtype">void</span> UnsetIgnoreAtom();
<a name="l01391"></a>01391    
<a name="l01393"></a>01393     <span class="keyword">static</span> <span class="keywordtype">bool</span> IgnoreCalculation(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b);
<a name="l01395"></a>01395     <span class="keyword">static</span> <span class="keywordtype">bool</span> IgnoreCalculation(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c);
<a name="l01397"></a>01397     <span class="keyword">static</span> <span class="keywordtype">bool</span> IgnoreCalculation(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b, <span class="keywordtype">int</span> c, <span class="keywordtype">int</span> d);
<a name="l01399"></a>01399 
<a name="l01400"></a>01400  
<a name="l01402"></a>01402     <span class="comment">// Validation                                                          //</span>
<a name="l01404"></a>01404 <span class="comment"></span>      
<a name="l01406"></a>01406 
<a name="l01407"></a>01407 
<a name="l01408"></a>01408     <span class="keywordtype">bool</span> DetectExplosion();
<a name="l01410"></a>01410     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> ValidateLineSearch(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;direction);
<a name="l01412"></a>01412     <span class="keywordtype">void</span> ValidateSteepestDescent(<span class="keywordtype">int</span> steps);
<a name="l01414"></a>01414     <span class="keywordtype">void</span> ValidateConjugateGradients(<span class="keywordtype">int</span> steps);
<a name="l01416"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#ad1ce70d98ab0996c03ff93ec44d73b6">01416</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l01421"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#01afd0f560b601b7d4b5f381a6db7b9d">01421</a>     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ValidateGradients() { <span class="keywordflow">return</span> <span class="keyword">false</span>; }
<a name="l01426"></a>01426     <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> ValidateGradientError(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;numgrad, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;anagrad);
<a name="l01428"></a>01428      
<a name="l01430"></a>01430     <span class="comment">// Vector Analysis                                                     //</span>
<a name="l01432"></a>01432 <span class="comment"></span>      
<a name="l01434"></a>01434 
<a name="l01435"></a>01435 
<a name="l01443"></a>01443     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorBondDerivative(<span class="keywordtype">double</span> *pos_a, <span class="keywordtype">double</span> *pos_b, 
<a name="l01444"></a>01444                                        <span class="keywordtype">double</span> *force_a, <span class="keywordtype">double</span> *force_b);
<a name="l01448"></a>01448     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorDistanceDerivative(<span class="keyword">const</span> <span class="keywordtype">double</span>* <span class="keyword">const</span> pos_i, <span class="keyword">const</span> <span class="keywordtype">double</span>* <span class="keyword">const</span> pos_j, 
<a name="l01449"></a>01449                                            <span class="keywordtype">double</span> *force_i, <span class="keywordtype">double</span> *force_j);
<a name="l01451"></a>01451     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorLengthDerivative(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b);
<a name="l01452"></a>01452  
<a name="l01463"></a>01463     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorAngleDerivative(<span class="keywordtype">double</span> *pos_a, <span class="keywordtype">double</span> *pos_b, <span class="keywordtype">double</span> *pos_c,
<a name="l01464"></a>01464                                         <span class="keywordtype">double</span> *force_a, <span class="keywordtype">double</span> *force_b, <span class="keywordtype">double</span> *force_c);
<a name="l01466"></a>01466     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorAngleDerivative(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c);
<a name="l01479"></a>01479     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorOOPDerivative(<span class="keywordtype">double</span> *pos_a, <span class="keywordtype">double</span> *pos_b, <span class="keywordtype">double</span> *pos_c, <span class="keywordtype">double</span> *pos_d,
<a name="l01480"></a>01480                                       <span class="keywordtype">double</span> *force_a, <span class="keywordtype">double</span> *force_b, <span class="keywordtype">double</span> *force_c, <span class="keywordtype">double</span> *force_d);
<a name="l01482"></a>01482     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorOOPDerivative(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d);
<a name="l01494"></a>01494     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorTorsionDerivative(<span class="keywordtype">double</span> *pos_a, <span class="keywordtype">double</span> *pos_b, <span class="keywordtype">double</span> *pos_c, <span class="keywordtype">double</span> *pos_d,
<a name="l01495"></a>01495                                           <span class="keywordtype">double</span> *force_a, <span class="keywordtype">double</span> *force_b, <span class="keywordtype">double</span> *force_c, <span class="keywordtype">double</span> *force_d);
<a name="l01497"></a>01497     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorTorsionDerivative(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d);
<a name="l01498"></a>01498 
<a name="l01504"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#f659c45bed78415620eaf3476194e451">01504</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorSubtract(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *result)
<a name="l01505"></a>01505     {
<a name="l01506"></a>01506       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01507"></a>01507         result[c] = i[c] - j[c];
<a name="l01508"></a>01508     }
<a name="l01509"></a>01509     
<a name="l01510"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#f7a07667b01da8fa3bd3362e687ccea7">01510</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorSubtract(<span class="keyword">const</span> <span class="keywordtype">double</span>* <span class="keyword">const</span> i, <span class="keyword">const</span> <span class="keywordtype">double</span>* <span class="keyword">const</span> j, <span class="keywordtype">double</span> *result)
<a name="l01511"></a>01511     {
<a name="l01512"></a>01512       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01513"></a>01513         result[c] = i[c] - j[c];
<a name="l01514"></a>01514     }
<a name="l01515"></a>01515     
<a name="l01521"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#a1f2790b8dcc19535440937cee7507f6">01521</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorAdd(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *result)
<a name="l01522"></a>01522     {
<a name="l01523"></a>01523       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01524"></a>01524         result[c] = i[c] + j[c];
<a name="l01525"></a>01525     }
<a name="l01526"></a>01526     
<a name="l01532"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#75d7836733b18cd3184e84ce8f849586">01532</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorDivide(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> n, <span class="keywordtype">double</span> *result)
<a name="l01533"></a>01533     {
<a name="l01534"></a>01534       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01535"></a>01535         result[c] = i[c] / n;
<a name="l01536"></a>01536     }
<a name="l01537"></a>01537     
<a name="l01543"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#c8782532298c13413de420edf474b797">01543</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorMultiply(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> n, <span class="keywordtype">double</span> *result)
<a name="l01544"></a>01544     {
<a name="l01545"></a>01545       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01546"></a>01546         result[c] = i[c] * n;
<a name="l01547"></a>01547     }
<a name="l01548"></a>01548     
<a name="l01549"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#51753f3cd35750d1cbe0d2fb77de7bb3">01549</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorMultiply(<span class="keyword">const</span> <span class="keywordtype">double</span>* <span class="keyword">const</span> i, <span class="keyword">const</span> <span class="keywordtype">double</span> n, <span class="keywordtype">double</span> *result)
<a name="l01550"></a>01550     {
<a name="l01551"></a>01551       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01552"></a>01552         result[c] = i[c] * n;
<a name="l01553"></a>01553     }
<a name="l01554"></a>01554     
<a name="l01559"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#b7b790264e765135a1a0a045e8e629f3">01559</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorSelfMultiply(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> n)
<a name="l01560"></a>01560     {
<a name="l01561"></a>01561       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01562"></a>01562         i[c] *= n;
<a name="l01563"></a>01563     }
<a name="l01564"></a>01564     
<a name="l01568"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#94dcb6a7b7056aa5c387f3ceb2098348">01568</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorNormalize(<span class="keywordtype">double</span> *i)
<a name="l01569"></a>01569     {  
<a name="l01570"></a>01570       <span class="keywordtype">double</span> length = VectorLength(i);
<a name="l01571"></a>01571       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01572"></a>01572         i[c] /= length;
<a name="l01573"></a>01573     }
<a name="l01574"></a>01574     
<a name="l01579"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#b44d3fef8880be3dff51e871f872095f">01579</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorCopy(<span class="keywordtype">double</span> *from, <span class="keywordtype">double</span> *to)
<a name="l01580"></a>01580     {  
<a name="l01581"></a>01581       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01582"></a>01582         to[c] = from[c];
<a name="l01583"></a>01583     }
<a name="l01584"></a>01584     
<a name="l01589"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#00069287eaf9fae9e32207a33a367f20">01589</a>     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorLength(<span class="keywordtype">double</span> *i) 
<a name="l01590"></a>01590     {
<a name="l01591"></a>01591       <span class="keywordflow">return</span> sqrt( i[0]*i[0] + i[1]*i[1] + i[2]*i[2] );
<a name="l01592"></a>01592     }
<a name="l01593"></a>01593     
<a name="l01594"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#e2f73bb5d2be701a483c3214df822cf6">01594</a>     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorDistance(<span class="keywordtype">double</span> *pos_i, <span class="keywordtype">double</span> *pos_j)
<a name="l01595"></a>01595     {
<a name="l01596"></a>01596       <span class="keywordtype">double</span> ij[3];
<a name="l01597"></a>01597       VectorSubtract(pos_i, pos_j, ij);
<a name="l01598"></a>01598       <span class="keyword">const</span> <span class="keywordtype">double</span> rij = VectorLength(ij);
<a name="l01599"></a>01599       <span class="keywordflow">return</span> rij;
<a name="l01600"></a>01600     }
<a name="l01601"></a>01601     
<a name="l01608"></a>01608     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorAngle(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *k);
<a name="l01609"></a>01609  
<a name="l01617"></a>01617     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorTorsion(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *k, <span class="keywordtype">double</span> *l);
<a name="l01618"></a>01618     
<a name="l01626"></a>01626     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorOOP(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *k, <span class="keywordtype">double</span> *l);
<a name="l01627"></a>01627 
<a name="l01631"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#12f0d779df14721f3641f5e474012d20">01631</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorClear(<span class="keywordtype">double</span> *i) 
<a name="l01632"></a>01632     {
<a name="l01633"></a>01633       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01634"></a>01634         i[c] = 0.0;
<a name="l01635"></a>01635     }
<a name="l01636"></a>01636    
<a name="l01642"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#7fe9eee0690e364ecd82c0fff0087887">01642</a>     <span class="keyword">static</span> <span class="keywordtype">double</span> VectorDot(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j)
<a name="l01643"></a>01643     {
<a name="l01644"></a>01644       <span class="keywordtype">double</span> result = 0.0;
<a name="l01645"></a>01645       <span class="comment">// Written as a loop for vectorization</span>
<a name="l01646"></a>01646       <span class="comment">// Loop will be unrolled by compiler otherwise</span>
<a name="l01647"></a>01647       <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> c = 0; c &lt; 3; ++c)
<a name="l01648"></a>01648         result += i[c]*j[c];
<a name="l01649"></a>01649       <span class="keywordflow">return</span> result;
<a name="l01650"></a>01650     }
<a name="l01651"></a>01651     
<a name="l01657"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#0a9f5fd2563d65772012d16196ca117a">01657</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> VectorCross(<span class="keywordtype">double</span> *i, <span class="keywordtype">double</span> *j, <span class="keywordtype">double</span> *result)
<a name="l01658"></a>01658     {
<a name="l01659"></a>01659       result[0] =   i[1]*j[2] - i[2]*j[1];
<a name="l01660"></a>01660       result[1] = - i[0]*j[2] + i[2]*j[0];
<a name="l01661"></a>01661       result[2] =   i[0]*j[1] - i[1]*j[0];
<a name="l01662"></a>01662     }
<a name="l01663"></a>01663     
<a name="l01664"></a><a class="code" href="classOpenBabel_1_1OBForceField.shtml#c0d04a098dc225d7d10ca60004402690">01664</a>     <span class="keyword">static</span> <span class="keywordtype">void</span> PrintVector(<span class="keywordtype">double</span> *i)
<a name="l01665"></a>01665     {
<a name="l01666"></a>01666       std::cout &lt;&lt; <span class="stringliteral">"&lt;"</span> &lt;&lt; i[0] &lt;&lt; <span class="stringliteral">", "</span> &lt;&lt; i[1] &lt;&lt; <span class="stringliteral">", "</span> &lt;&lt; i[2] &lt;&lt; <span class="stringliteral">"&gt;"</span> &lt;&lt; std::endl;
<a name="l01667"></a>01667     }
<a name="l01669"></a>01669 
<a name="l01670"></a>01670   }; <span class="comment">// class OBForceField</span>
<a name="l01671"></a>01671 
<a name="l01672"></a>01672 }<span class="comment">// namespace OpenBabel</span>
<a name="l01673"></a>01673 
<a name="l01674"></a>01674 <span class="preprocessor">#endif   // OB_FORCEFIELD_H</span>
<a name="l01675"></a>01675 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
