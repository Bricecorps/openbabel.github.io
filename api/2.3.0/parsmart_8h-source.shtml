<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: parsmart.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>parsmart.h</h1><a href="parsmart_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">parsmart.h - Daylight SMARTS parser.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_PARSMART_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_PARSMART_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00025"></a>00025 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="comment">/*==========================*/</span>
<a name="l00030"></a>00030 <span class="comment">/*  SMARTS Data Structures  */</span>
<a name="l00031"></a>00031 <span class="comment">/*==========================*/</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="keyword">namespace </span>OpenBabel
<a name="l00034"></a>00034 {
<a name="l00035"></a>00035 
<a name="l00036"></a>00036   <span class="comment">// mark this so that SWIG will not attempt to wrap for scripting languages</span>
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="preprocessor">#ifndef SWIG</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span>
<a name="l00042"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">00042</a>   <span class="keyword">typedef</span> <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">_AtomExpr</a> {
<a name="l00043"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#d01840ec39b188dae6668c9b87360c23">00043</a>     <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#d01840ec39b188dae6668c9b87360c23">type</a>;
<a name="l00044"></a>00044     <span class="keyword">struct</span>
<a name="l00045"></a>00045 <span class="keyword">    </span>{
<a name="l00046"></a>00046       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#d01840ec39b188dae6668c9b87360c23">type</a>;
<a name="l00047"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#9f693b64d1ac75dceaa723909f920b08">00047</a>       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#9f693b64d1ac75dceaa723909f920b08">prop</a>;
<a name="l00048"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#3a854ec7158af45f1a96232fa42bab2a">00048</a>       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#3a854ec7158af45f1a96232fa42bab2a">value</a>;
<a name="l00049"></a>00049     }
<a name="l00050"></a>00050       <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#5c4acdf18879b4b046fe215a79d29952">leaf</a>;
<a name="l00051"></a>00051     <span class="keyword">struct</span>
<a name="l00052"></a>00052 <span class="keyword">    </span>{
<a name="l00053"></a>00053       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#d01840ec39b188dae6668c9b87360c23">type</a>;
<a name="l00054"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#b5ea6dcdf2edf823b35a67fa78d85272">00054</a>       <span class="keywordtype">void</span> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#b5ea6dcdf2edf823b35a67fa78d85272">recur</a>;
<a name="l00055"></a>00055     }
<a name="l00056"></a>00056       <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#b5ea6dcdf2edf823b35a67fa78d85272">recur</a>;
<a name="l00057"></a>00057     <span class="keyword">struct</span>
<a name="l00058"></a>00058 <span class="keyword">    </span>{
<a name="l00059"></a>00059       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#d01840ec39b188dae6668c9b87360c23">type</a>;
<a name="l00060"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#c0f5cb735515f456b450300d3826b008">00060</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">_AtomExpr</a> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#c0f5cb735515f456b450300d3826b008">arg</a>;
<a name="l00061"></a>00061     }
<a name="l00062"></a>00062       <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#d36908ad569c4480981cce1c6c9765d4">mon</a>;
<a name="l00063"></a>00063     <span class="keyword">struct</span>
<a name="l00064"></a>00064 <span class="keyword">    </span>{
<a name="l00065"></a>00065       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#d01840ec39b188dae6668c9b87360c23">type</a>;
<a name="l00066"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#92411ce94667169bfcff2acdb56e6149">00066</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">_AtomExpr</a> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#92411ce94667169bfcff2acdb56e6149">lft</a>;
<a name="l00067"></a><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#3b78858a1f98b559fa4db968a42431f3">00067</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">_AtomExpr</a> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#3b78858a1f98b559fa4db968a42431f3">rgt</a>;
<a name="l00068"></a>00068     }
<a name="l00069"></a>00069       <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#3fc562b06625d89d1e78cfc6ff624f41">bin</a>;
<a name="l00070"></a>00070   } <a class="code" href="namespaceOpenBabel.shtml#b1e1c431850e7fa21641794e0cce7156">AtomExpr</a>;
<a name="l00071"></a>00071 
<a name="l00072"></a><a class="code" href="parsmart_8h.shtml#0bc05b3b51d5e4265a8c68557ecd3ad1">00072</a> <span class="preprocessor">#define BE_LEAF      0x01</span>
<a name="l00073"></a><a class="code" href="parsmart_8h.shtml#2b1b20cb02b99cae7844e8b7b6c78332">00073</a> <span class="preprocessor"></span><span class="preprocessor">#define BE_ANDHI     0x02</span>
<a name="l00074"></a><a class="code" href="parsmart_8h.shtml#77ce6a3fe66c5c6944d09615838c4ac5">00074</a> <span class="preprocessor"></span><span class="preprocessor">#define BE_ANDLO     0x03</span>
<a name="l00075"></a><a class="code" href="parsmart_8h.shtml#6f766dfb2794d10ea4160a01de85ce88">00075</a> <span class="preprocessor"></span><span class="preprocessor">#define BE_NOT       0x04</span>
<a name="l00076"></a><a class="code" href="parsmart_8h.shtml#eaf744a5ffd58e0be43199b4ac5a312c">00076</a> <span class="preprocessor"></span><span class="preprocessor">#define BE_OR        0x05</span>
<a name="l00077"></a>00077 <span class="preprocessor"></span>
<a name="l00078"></a><a class="code" href="parsmart_8h.shtml#bb65973faca8b92c2617c65e1fd683e8">00078</a> <span class="preprocessor">#define BL_CONST     0x01</span>
<a name="l00079"></a><a class="code" href="parsmart_8h.shtml#3a3fb000e6d7f2287997fe31b76e7da9">00079</a> <span class="preprocessor"></span><span class="preprocessor">#define BL_TYPE      0x02</span>
<a name="l00080"></a>00080 <span class="preprocessor"></span>
<a name="l00081"></a><a class="code" href="parsmart_8h.shtml#b7b610b1f31af7c93c4d747930d7ed41">00081</a> <span class="preprocessor">#define BT_SINGLE     0x01</span>
<a name="l00082"></a><a class="code" href="parsmart_8h.shtml#7ba2f0c9d3b88243f10db9faf8a48572">00082</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_DOUBLE     0x02</span>
<a name="l00083"></a><a class="code" href="parsmart_8h.shtml#445f9e5188bacb86312fe76f39ef04f6">00083</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_TRIPLE     0x03</span>
<a name="l00084"></a><a class="code" href="parsmart_8h.shtml#3d03353f6b64a59561c6a56f45342287">00084</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_AROM       0x04</span>
<a name="l00085"></a><a class="code" href="parsmart_8h.shtml#f5267292245190988be88266fb553bf6">00085</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_UP         0x05</span>
<a name="l00086"></a><a class="code" href="parsmart_8h.shtml#09de2e4e940f85f775d24fa7657dc7ee">00086</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_DOWN       0x06</span>
<a name="l00087"></a><a class="code" href="parsmart_8h.shtml#3f3dc9476c27586d4abf53b72ec6932f">00087</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_UPUNSPEC   0x07</span>
<a name="l00088"></a><a class="code" href="parsmart_8h.shtml#f34109ae8ff021d6bb30589f5f72d656">00088</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_DOWNUNSPEC 0x08</span>
<a name="l00089"></a><a class="code" href="parsmart_8h.shtml#111b74d1fab825f6b4bd30a70b49d836">00089</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_RING       0x09</span>
<a name="l00090"></a><a class="code" href="parsmart_8h.shtml#46ad8d71b84d3230048470f9c4bb3019">00090</a> <span class="preprocessor"></span><span class="preprocessor">#define BT_QUAD       0x0A //quadruple bond $</span>
<a name="l00091"></a>00091 <span class="preprocessor"></span>
<a name="l00094"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">00094</a>   <span class="keyword">typedef</span> <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">_BondExpr</a> {
<a name="l00095"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#d01840ec39b188dae6668c9b87360c23">00095</a>     <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#d01840ec39b188dae6668c9b87360c23">type</a>;
<a name="l00096"></a>00096     <span class="keyword">struct</span>
<a name="l00097"></a>00097 <span class="keyword">    </span>{
<a name="l00098"></a>00098       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#d01840ec39b188dae6668c9b87360c23">type</a>;
<a name="l00099"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#9f693b64d1ac75dceaa723909f920b08">00099</a>       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#9f693b64d1ac75dceaa723909f920b08">prop</a>;
<a name="l00100"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#3a854ec7158af45f1a96232fa42bab2a">00100</a>       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#3a854ec7158af45f1a96232fa42bab2a">value</a>;
<a name="l00101"></a>00101     }
<a name="l00102"></a>00102       <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#d2a944ad77803128d87a79532a59314e">leaf</a>;
<a name="l00103"></a>00103     <span class="keyword">struct</span>
<a name="l00104"></a>00104 <span class="keyword">    </span>{
<a name="l00105"></a>00105       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#d01840ec39b188dae6668c9b87360c23">type</a>;
<a name="l00106"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#fa22a662c6a2b42737c57e27fba986a3">00106</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">_BondExpr</a> *<a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#fa22a662c6a2b42737c57e27fba986a3">arg</a>;
<a name="l00107"></a>00107     }
<a name="l00108"></a>00108       <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#14ef8b2946c91d24481039ced7ff786e">mon</a>;
<a name="l00109"></a>00109     <span class="keyword">struct</span>
<a name="l00110"></a>00110 <span class="keyword">    </span>{
<a name="l00111"></a>00111       <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#d01840ec39b188dae6668c9b87360c23">type</a>;
<a name="l00112"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#f7beae2e2faf952a9aa6db5529cf5bd7">00112</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">_BondExpr</a> *<a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#f7beae2e2faf952a9aa6db5529cf5bd7">lft</a>;
<a name="l00113"></a><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#f65d596cc3b25ad956eca582dc8b3afd">00113</a>       <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">_BondExpr</a> *<a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#f65d596cc3b25ad956eca582dc8b3afd">rgt</a>;
<a name="l00114"></a>00114     }
<a name="l00115"></a>00115       <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#c1103200ad650575235c6662fcc0ea25">bin</a>;
<a name="l00116"></a>00116   } <a class="code" href="namespaceOpenBabel.shtml#39ce4a5cdb8e96b07721b22b64d737e9">BondExpr</a>;
<a name="l00117"></a>00117 
<a name="l00120"></a><a class="code" href="structOpenBabel_1_1BondSpec.shtml">00120</a>   <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00121"></a>00121 <span class="keyword">  </span>{
<a name="l00122"></a><a class="code" href="structOpenBabel_1_1BondSpec.shtml#c14a9e94285757f3c3a38bad7498663d">00122</a>     <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr;
<a name="l00123"></a><a class="code" href="structOpenBabel_1_1BondSpec.shtml#ae7b385f85dc5a77ad4a5b220025e307">00123</a>     <span class="keywordtype">int</span> src,dst;
<a name="l00124"></a><a class="code" href="structOpenBabel_1_1BondSpec.shtml#01e0b05421b9f2e108837d6fc9101eed">00124</a>     <span class="keywordtype">int</span> visit;
<a name="l00125"></a><a class="code" href="structOpenBabel_1_1BondSpec.shtml#d809f5070c72c546234ec5f7ad17deab">00125</a>     <span class="keywordtype">bool</span> grow;
<a name="l00126"></a>00126   }
<a name="l00127"></a>00127   <a class="code" href="structOpenBabel_1_1BondSpec.shtml">BondSpec</a>;
<a name="l00128"></a>00128 
<a name="l00131"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml">00131</a>   <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00132"></a>00132 <span class="keyword">  </span>{
<a name="l00133"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml#3e3f9575a316b8b50b775726bdfc819e">00133</a>     <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *expr;
<a name="l00134"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml#01e0b05421b9f2e108837d6fc9101eed">00134</a>     <span class="keywordtype">int</span> visit;
<a name="l00135"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml#0471d65b4387cf7bb5cfce240ca083f4">00135</a>     <span class="keywordtype">int</span> part;
<a name="l00136"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml#9bc8e3104e6ebd3b0d7d692f98f670b7">00136</a>     <span class="keywordtype">int</span> chiral_flag;
<a name="l00137"></a><a class="code" href="structOpenBabel_1_1AtomSpec.shtml#a2fc6b03dbe41e500cac20fbf42b99fa">00137</a>     <span class="keywordtype">int</span> vb;
<a name="l00138"></a>00138   }
<a name="l00139"></a>00139   <a class="code" href="structOpenBabel_1_1AtomSpec.shtml">AtomSpec</a>;
<a name="l00140"></a>00140 
<a name="l00143"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml">00143</a>   <span class="keyword">typedef</span> <span class="keyword">struct</span>
<a name="l00144"></a>00144 <span class="keyword">  </span>{
<a name="l00145"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#704f90d19ead2d57b4a43e41003f0cd6">00145</a>     <span class="keywordtype">int</span> aalloc,acount;
<a name="l00146"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#668e20f872833d3a6b67ace3735ea59c">00146</a>     <span class="keywordtype">int</span> balloc,bcount;
<a name="l00147"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#7138ad4567343348f8df38251d68f2ec">00147</a>     <span class="keywordtype">bool</span> ischiral;
<a name="l00148"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#f80a0397ec488b1b9d1297c547faef3d">00148</a>     <a class="code" href="structOpenBabel_1_1AtomSpec.shtml">AtomSpec</a> *atom;
<a name="l00149"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#7335b223c39f27bc235a2165920e9b3c">00149</a>     <a class="code" href="structOpenBabel_1_1BondSpec.shtml">BondSpec</a> *bond;
<a name="l00150"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#6686fc3a85d2c8b7b039d8e14c15e05b">00150</a>     <span class="keywordtype">int</span> parts;
<a name="l00151"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#20f1f0487ec56ca387f8615cfe12dadf">00151</a>     <span class="keywordtype">bool</span> hasExplicitH;
<a name="l00152"></a><a class="code" href="structOpenBabel_1_1Pattern.shtml#8d82e9e383a56a0260222d0c8b53c688">00152</a>     std::vector&lt;int&gt; bond_parse_order; <span class="comment">// Used to recover the order in which bonds were parsed</span>
<a name="l00153"></a>00153   }
<a name="l00154"></a>00154   <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>;
<a name="l00155"></a>00155 <span class="preprocessor">#else</span>
<a name="l00156"></a>00156 <span class="preprocessor"></span>  <span class="comment">// for SWIG, just forward declare that we have some Pattern struct</span>
<a name="l00157"></a>00157   <span class="comment">// (but this is private and not wrapped for scripting languages)</span>
<a name="l00158"></a>00158   <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>;
<a name="l00159"></a>00159 <span class="preprocessor">#endif</span>
<a name="l00160"></a>00160 <span class="preprocessor"></span>
<a name="l00161"></a>00161   <span class="comment">// class introduction in parsmart.cpp</span>
<a name="l00163"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">00163</a> <span class="comment"></span>  <span class="keyword">class </span>OBAPI OBSmartsPattern
<a name="l00164"></a>00164   {
<a name="l00165"></a>00165   <span class="keyword">protected</span>:
<a name="l00166"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#fbb9921cca925fb8276767610de8dfd8">00166</a>     std::vector&lt;bool&gt;                     _growbond; 
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#027cd45dc954c5a9d1b4be6a9c6bb6e6">00167</a>     std::vector&lt;std::vector&lt;int&gt; &gt;      _mlist;    
<a name="l00168"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#e0ae1205d270aa244fb42516f5de9e99">00168</a>     <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>                        *_pat;      
<a name="l00169"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#007d167d913b5aff4df565ad5e87e624">00169</a>     std::string                                       _str;      
<a name="l00170"></a>00170 
<a name="l00171"></a>00171   <span class="keyword">public</span>:
<a name="l00172"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#e5760c3e1b14bc3907bbe8e3d997625e">00172</a>     OBSmartsPattern() : _pat(NULL) { }
<a name="l00173"></a>00173     <span class="keyword">virtual</span> ~OBSmartsPattern();
<a name="l00174"></a>00174 
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#4acea9e622a416ab00b640b827b8c2b3">00175</a>   OBSmartsPattern(<span class="keyword">const</span> OBSmartsPattern&amp; cp): _pat(NULL)
<a name="l00176"></a>00176       {
<a name="l00177"></a>00177         *<span class="keyword">this</span> = cp;
<a name="l00178"></a>00178       }
<a name="l00179"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#fd7728fe7f007ce35366708d4357f396">00179</a>     OBSmartsPattern&amp; operator=(<span class="keyword">const</span> OBSmartsPattern&amp; cp)
<a name="l00180"></a>00180       {
<a name="l00181"></a>00181         <span class="keywordflow">if</span> (_pat)
<a name="l00182"></a>00182           <span class="keyword">delete</span> [] _pat;
<a name="l00183"></a>00183         _pat = NULL;
<a name="l00184"></a>00184         std::string s = cp.<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#007d167d913b5aff4df565ad5e87e624">_str</a>;
<a name="l00185"></a>00185         Init(s);
<a name="l00186"></a>00186         <span class="keywordflow">return</span> (*<span class="keyword">this</span>);
<a name="l00187"></a>00187       }
<a name="l00188"></a>00188     
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 
<a name="l00192"></a>00192 
<a name="l00193"></a>00193     <span class="keywordtype">bool</span>         Init(<span class="keyword">const</span> <span class="keywordtype">char</span>* pattern);
<a name="l00196"></a>00196     <span class="keywordtype">bool</span>         Init(<span class="keyword">const</span> std::string&amp; pattern);
<a name="l00198"></a>00198 
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 
<a name="l00202"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#5186ffe586381b890a151a14e717da8c">00202</a>     <span class="keyword">const</span> std::string &amp;GetSMARTS()<span class="keyword"> const    </span>{      <span class="keywordflow">return</span> _str;    }
<a name="l00204"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#6257ec70c14c7d50546d2304c13314d1">00204</a>     std::string  &amp;GetSMARTS()               {      <span class="keywordflow">return</span> _str;    }
<a name="l00205"></a>00205 
<a name="l00207"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#b9cc40052eeb2cec92042c9594fa94ad">00207</a>     <span class="keywordtype">bool</span>         Empty()<span class="keyword"> const     </span>{      <span class="keywordflow">return</span>(_pat == NULL);    }
<a name="l00209"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#c1c76cfcdb46f33259eb66751cb3fe04">00209</a>     <span class="keywordtype">bool</span>         IsValid()<span class="keyword"> const   </span>{      <span class="keywordflow">return</span>(_pat != NULL);    }
<a name="l00210"></a>00210 
<a name="l00212"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#b0959888c92257aedf7f05580193ff30">00212</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumAtoms()<span class="keyword">   const</span>
<a name="l00213"></a>00213 <span class="keyword">    </span>{
<a name="l00214"></a>00214       <span class="keywordflow">return</span> _pat ? _pat-&gt;acount : 0;
<a name="l00215"></a>00215     }
<a name="l00217"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#489459e39cf9b0d9e706a183b1b4445b">00217</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumBonds()<span class="keyword">   const</span>
<a name="l00218"></a>00218 <span class="keyword">    </span>{
<a name="l00219"></a>00219       <span class="keywordflow">return</span> _pat ? _pat-&gt;bcount : 0;
<a name="l00220"></a>00220     }
<a name="l00221"></a>00221 
<a name="l00227"></a>00227     <span class="keywordtype">void</span>         GetBond(<span class="keywordtype">int</span>&amp; src,<span class="keywordtype">int</span>&amp; dst,<span class="keywordtype">int</span>&amp; ord,<span class="keywordtype">int</span> idx);
<a name="l00229"></a>00229     <span class="keywordtype">int</span>          GetAtomicNum(<span class="keywordtype">int</span> idx);
<a name="l00231"></a>00231     <span class="keywordtype">int</span>          GetCharge(<span class="keywordtype">int</span> idx);
<a name="l00232"></a>00232 
<a name="l00234"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#69ab72b00f9e7924996872ce61ac4e52">00234</a>     <span class="keywordtype">int</span>          <a class="code" href="namespaceOpenBabel.shtml#336205ad03654179b83e48420fd9e9f3">GetVectorBinding</a>(<span class="keywordtype">int</span> idx)<span class="keyword"> const</span>
<a name="l00235"></a>00235 <span class="keyword">    </span>{
<a name="l00236"></a>00236       <span class="keywordflow">return</span>(_pat-&gt;atom[idx].vb);
<a name="l00237"></a>00237     }
<a name="l00239"></a>00239 
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 
<a name="l00246"></a>00246     <span class="keywordtype">bool</span> Match(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">bool</span> single=<span class="keyword">false</span>);
<a name="l00247"></a>00247 
<a name="l00248"></a>00248     <span class="keywordtype">bool</span> RestrictedMatch(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt;std::pair&lt;int,int&gt; &gt; &amp;pairs, <span class="keywordtype">bool</span> single=<span class="keyword">false</span>);
<a name="l00249"></a>00249 
<a name="l00250"></a>00250     <span class="keywordtype">bool</span> RestrictedMatch(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv, <span class="keywordtype">bool</span> single=<span class="keyword">false</span>);
<a name="l00253"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#e017ac5c11f94ade505f3b89b8459505">00253</a>     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumMatches()<span class="keyword"> const</span>
<a name="l00254"></a>00254 <span class="keyword">    </span>{
<a name="l00255"></a>00255       <span class="keywordflow">return</span> static_cast&lt;unsigned int&gt;(_mlist.size());
<a name="l00256"></a>00256     }
<a name="l00257"></a>00257 
<a name="l00260"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#b1a54e91e90e23298594b0784a50ba11">00260</a>     std::vector&lt;std::vector&lt;int&gt; &gt; &amp;GetMapList()
<a name="l00261"></a>00261       {
<a name="l00262"></a>00262         <span class="keywordflow">return</span>(_mlist);
<a name="l00263"></a>00263       }
<a name="l00265"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab5eb766d97db003072ac8bac569e9eb">00265</a>     std::vector&lt;std::vector&lt;int&gt; &gt;::iterator BeginMList()
<a name="l00266"></a>00266       {
<a name="l00267"></a>00267         <span class="keywordflow">return</span>(_mlist.begin());
<a name="l00268"></a>00268       }
<a name="l00270"></a><a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#3f0bd47593e4b5904a5c3bf10f887e93">00270</a>     std::vector&lt;std::vector&lt;int&gt; &gt;::iterator EndMList()
<a name="l00271"></a>00271       {
<a name="l00272"></a>00272         <span class="keywordflow">return</span>(_mlist.end());
<a name="l00273"></a>00273       }
<a name="l00274"></a>00274 
<a name="l00276"></a>00276 
<a name="l00286"></a>00286     std::vector&lt;std::vector&lt;int&gt; &gt; &amp;GetUMapList();
<a name="l00288"></a>00288 
<a name="l00290"></a>00290     <span class="keywordtype">void</span>         WriteMapList(std::ostream&amp;);
<a name="l00291"></a>00291   };
<a name="l00292"></a>00292 
<a name="l00296"></a><a class="code" href="classOpenBabel_1_1OBSSMatch.shtml">00296</a>   <span class="keyword">class </span>OBAPI OBSSMatch
<a name="l00297"></a>00297   {
<a name="l00298"></a>00298   <span class="keyword">protected</span>:
<a name="l00299"></a><a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#737d1cb2729773d2bb27b7a1da2ed139">00299</a>     <span class="keywordtype">bool</span>        *_uatoms;
<a name="l00300"></a><a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#792cd40eede9d6257af9d1ce2b32b9a6">00300</a>     <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>       *_mol;
<a name="l00301"></a><a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#e0ae1205d270aa244fb42516f5de9e99">00301</a>     <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>     *_pat;
<a name="l00302"></a><a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#1962dea000325128e06c4dfa8c93c995">00302</a>     std::vector&lt;int&gt;  _map;
<a name="l00303"></a>00303 
<a name="l00304"></a>00304   <span class="keyword">public</span>:
<a name="l00305"></a>00305     OBSSMatch(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;,<a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>*);
<a name="l00306"></a>00306     ~OBSSMatch();
<a name="l00307"></a>00307     <span class="keywordtype">void</span> Match(std::vector&lt;std::vector&lt;int&gt; &gt; &amp;v, <span class="keywordtype">int</span> bidx=-1);
<a name="l00308"></a>00308   };
<a name="l00309"></a>00309 
<a name="l00310"></a>00310   OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#959402d337dea7ec88f5322b6ad02b29">SmartsLexReplace</a>(std::string &amp;,
<a name="l00311"></a>00311                               std::vector&lt;std::pair&lt;std::string,std::string&gt; &gt; &amp;);
<a name="l00312"></a>00312 
<a name="l00313"></a>00313 } <span class="comment">// end namespace OpenBabel</span>
<a name="l00314"></a>00314 
<a name="l00315"></a>00315 <span class="preprocessor">#endif // OB_PARSMART_H</span>
<a name="l00316"></a>00316 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
