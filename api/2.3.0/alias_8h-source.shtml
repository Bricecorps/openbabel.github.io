<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: alias.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>alias.h</h1><a href="alias_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">alias.h - OBGenericData class to hold alias information on atoms</span>
<a name="l00003"></a>00003 <span class="comment">Copyright (C) Copyright (C) 2007 by Chris Morley</span>
<a name="l00004"></a>00004 <span class="comment"> </span>
<a name="l00005"></a>00005 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00006"></a>00006 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00007"></a>00007 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00008"></a>00008 <span class="comment"> </span>
<a name="l00009"></a>00009 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00010"></a>00010 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00011"></a>00011 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00012"></a>00012 <span class="comment">GNU General Public License for more details.</span>
<a name="l00013"></a>00013 <span class="comment">***********************************************************************/</span>
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 <span class="preprocessor">#ifndef OB_ALIAS_H</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span><span class="preprocessor">#define OB_ALIAS_H</span>
<a name="l00017"></a>00017 <span class="preprocessor"></span>
<a name="l00018"></a>00018 <span class="preprocessor">#ifdef USE_BOOST</span>
<a name="l00019"></a>00019 <span class="preprocessor"></span><span class="preprocessor">  #include &lt;boost/shared_ptr.hpp&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">  #define shared_ptr boost::shared_ptr</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#else</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">  #include &lt;memory&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">  #if __GNUC__ == 4  //&amp;&amp; __GNUC_MINOR__ &lt; 3  removed at the suggestion of Konstantin Tokarev</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span><span class="preprocessor">    #include &lt;tr1/memory&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">  #endif</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span>  <span class="keyword">using</span> std::tr1::shared_ptr;
<a name="l00027"></a>00027 <span class="preprocessor">#endif</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a><a class="code" href="namespaceOpenBabel.shtml">00032</a> <span class="keyword">namespace </span>OpenBabel
<a name="l00033"></a>00033 {
<a name="l00034"></a>00034 <span class="comment">// This macro is used in DLL builds. If it has not</span>
<a name="l00035"></a>00035 <span class="comment">// been set in babelconfig.h, define it as nothing.</span>
<a name="l00036"></a>00036 <span class="preprocessor">#ifndef OBCOMMON</span>
<a name="l00037"></a>00037 <span class="preprocessor"></span><span class="preprocessor">  #define OBCOMMON</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span>
<a name="l00040"></a><a class="code" href="namespaceOpenBabel.shtml#d5e3ae0f5cc4707af7f89bacbf8498a8">00040</a> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#d5e3ae0f5cc4707af7f89bacbf8498a8">AliasDataType</a> = 0x7883;
<a name="l00041"></a>00041 
<a name="l00059"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml">00059</a> <span class="keyword">class </span>OBCOMMON AliasData : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061 <span class="keyword">protected</span>:
<a name="l00062"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#090eeb4a19373ef15efd35a0d5b2afeb">00062</a>   std::string _alias;
<a name="l00063"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#76acc59ff15dd107c601d130dbc16c28">00063</a>   std::string _right_form;
<a name="l00064"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#28a6220f2fcddf7659a0e223954c5caf">00064</a>   std::vector&lt;unsigned long&gt; _expandedatoms; <span class="comment">//atom ids (not idxs)</span>
<a name="l00065"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#4b041d34f0ab2bd8c1c1e622c7336a9c">00065</a>   std::string _color;
<a name="l00066"></a>00066 <span class="keyword">public</span>:
<a name="l00067"></a>00067 
<a name="l00068"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#ef725a66d047986e0005c89bcf9d47c3">00068</a>   AliasData(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">"Alias"</span>, <a class="code" href="namespaceOpenBabel.shtml#d5e3ae0f5cc4707af7f89bacbf8498a8">AliasDataType</a>){ }
<a name="l00069"></a>00069 
<a name="l00070"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#5fa180b15907b8a5630da957ef8f3dd2">00070</a>   <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> AliasData(*<span class="keyword">this</span>);}
<a name="l00071"></a>00071   
<a name="l00073"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#a1500009b620bdf7edd7b4a81efe2cb0">00073</a>   <span class="keywordtype">void</span> SetAlias(<span class="keyword">const</span> std::string&amp; alias) {_alias = alias;}
<a name="l00074"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#1d4e046855883bc49bc705968878d18e">00074</a>   <span class="keywordtype">void</span> SetAlias(<span class="keyword">const</span> <span class="keywordtype">char</span>* alias) {_alias = alias;}
<a name="l00075"></a>00075 
<a name="l00077"></a>00077   std::string GetAlias(<span class="keywordtype">bool</span> rightAligned = <span class="keyword">false</span>) <span class="keyword">const</span>;
<a name="l00078"></a>00078 
<a name="l00080"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#626312af34d9250e9dd518b70589a232">00080</a>   std::string GetColor()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _color; }
<a name="l00081"></a>00081 
<a name="l00083"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#1f744b21aa23679ae28b554f0e51f120">00083</a>   <span class="keywordtype">void</span> SetColor(std::string color){ _color = color; }
<a name="l00084"></a>00084 
<a name="l00085"></a><a class="code" href="classOpenBabel_1_1AliasData.shtml#f4f2ce13fb409c1f7b9194105c0abca9">00085</a>   <span class="keywordtype">bool</span> IsExpanded()<span class="keyword">const </span>{ <span class="keywordflow">return</span> !_expandedatoms.empty(); }
<a name="l00086"></a>00086 
<a name="l00089"></a>00089   <span class="keyword">static</span> <span class="keywordtype">void</span> RevertToAliasForm(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol);
<a name="l00090"></a>00090 
<a name="l00092"></a>00092   <span class="keywordtype">bool</span> Expand(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomindex);
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 <span class="preprocessor"> #ifdef HAVE_SHARED_POINTER</span>
<a name="l00097"></a>00097 <span class="preprocessor">  static bool AddAliases(OBMol* pmol);</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span><span class="preprocessor"> #endif</span>
<a name="l00099"></a>00099 <span class="preprocessor"></span>
<a name="l00100"></a>00100 <span class="keyword">private</span>:
<a name="l00102"></a>00102   <span class="keywordtype">bool</span> FormulaParse(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> atomindex);
<a name="l00103"></a>00103 
<a name="l00105"></a>00105   <span class="keywordtype">void</span> AddExpandedAtom(<span class="keywordtype">int</span> <span class="keywordtype">id</span>);
<a name="l00106"></a>00106 
<a name="l00108"></a>00108   <span class="keywordtype">void</span> DeleteExpandedAtoms(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol);
<a name="l00109"></a>00109   
<a name="l00110"></a>00110   <span class="keyword">struct </span>AliasItem
<a name="l00111"></a>00111   {
<a name="l00112"></a>00112     std::string right_form;
<a name="l00113"></a>00113     std::string smiles;
<a name="l00114"></a>00114     std::string color;
<a name="l00115"></a>00115   };
<a name="l00116"></a>00116   <span class="keyword">typedef</span> std::map&lt;std::string, AliasItem&gt; SuperAtomTable; <span class="comment">//key=alias left-form</span>
<a name="l00117"></a>00117 
<a name="l00118"></a>00118   <span class="keyword">static</span> <span class="keywordtype">bool</span> LoadFile(SuperAtomTable&amp; table);
<a name="l00119"></a>00119   <span class="keyword">static</span> SuperAtomTable&amp; table()
<a name="l00120"></a>00120   {
<a name="l00121"></a>00121     <span class="keyword">static</span> SuperAtomTable t;
<a name="l00122"></a>00122     <span class="keywordflow">if</span>(t.empty())
<a name="l00123"></a>00123       LoadFile(t);
<a name="l00124"></a>00124     <span class="keywordflow">return</span> t;
<a name="l00125"></a>00125   }
<a name="l00126"></a>00126   <span class="keywordtype">bool</span>        FromNameLookup(OBMol&amp; mol, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomindex);
<a name="l00127"></a>00127 <span class="preprocessor">#ifdef HAVE_SHARED_POINTER  </span>
<a name="l00128"></a>00128 <span class="preprocessor"></span>  <span class="keyword">typedef</span> std::vector&lt; std::pair&lt;std::string, shared_ptr&lt;OBSmartsPattern&gt; &gt; &gt; SmartsTable;
<a name="l00129"></a>00129   <span class="keyword">static</span> <span class="keywordtype">bool</span> LoadFile(SmartsTable&amp; smtable);
<a name="l00130"></a>00130 <span class="preprocessor">#endif</span>
<a name="l00131"></a>00131 <span class="preprocessor"></span>};
<a name="l00132"></a>00132 } <span class="comment">//namespace</span>
<a name="l00133"></a>00133 
<a name="l00134"></a>00134 <span class="preprocessor">#endif // OB_ALIAS_H</span>
<a name="l00135"></a>00135 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
