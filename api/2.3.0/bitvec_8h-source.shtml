<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: bitvec.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>bitvec.h</h1><a href="bitvec_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">bitvec.h - Vector of bits.</span>
<a name="l00003"></a>00003 <span class="comment"> </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span>
<a name="l00005"></a>00005 <span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span>
<a name="l00006"></a>00006 <span class="comment"> </span>
<a name="l00007"></a>00007 <span class="comment">This file is part of the Open Babel project.</span>
<a name="l00008"></a>00008 <span class="comment">For more information, see &lt;http://openbabel.sourceforge.net/&gt;</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00011"></a>00011 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00012"></a>00012 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00013"></a>00013 <span class="comment"> </span>
<a name="l00014"></a>00014 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00015"></a>00015 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00016"></a>00016 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00017"></a>00017 <span class="comment">GNU General Public License for more details.</span>
<a name="l00018"></a>00018 <span class="comment">***********************************************************************/</span>
<a name="l00019"></a>00019 
<a name="l00020"></a>00020 <span class="preprocessor">#ifndef OB_BITVEC_H</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#define OB_BITVEC_H</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#ifndef USE_64BIT_INTEGER</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span><span class="comment">// For 32-bit architecture</span>
<a name="l00030"></a><a class="code" href="bitvec_8h.shtml#76161d2caf665c9fc06b884cede601d4">00030</a> <span class="preprocessor">#define SETWORD 32</span>
<a name="l00031"></a>00031 <span class="preprocessor"></span><span class="comment">// SETWORD = 2 ^ WORDROLL</span>
<a name="l00032"></a><a class="code" href="bitvec_8h.shtml#54cacf5a77e60ae8306542d29434bc83">00032</a> <span class="preprocessor">#define WORDROLL 5</span>
<a name="l00033"></a>00033 <span class="preprocessor"></span><span class="comment">// WORDMASK = SETWORD - 1</span>
<a name="l00034"></a><a class="code" href="bitvec_8h.shtml#3309177dc11dafea4261223c52189cd3">00034</a> <span class="preprocessor">#define WORDMASK 31</span>
<a name="l00035"></a>00035 <span class="preprocessor"></span><span class="preprocessor">#else </span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="comment">// For 64-bit architecture</span>
<a name="l00037"></a>00037 <span class="preprocessor">#define SETWORD 64</span>
<a name="l00038"></a>00038 <span class="preprocessor"></span><span class="comment">// SETWORD = 2 ^ WORDROLL</span>
<a name="l00039"></a>00039 <span class="preprocessor">#define WORDROLL 6</span>
<a name="l00040"></a>00040 <span class="preprocessor"></span><span class="comment">// WORDMASK = SETWORD - 1</span>
<a name="l00041"></a>00041 <span class="preprocessor">#define WORDMASK 63</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="preprocessor">#endif // 64 bit</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span>
<a name="l00044"></a><a class="code" href="bitvec_8h.shtml#f3d2326c83f514b152e91d7a85bd1d04">00044</a> <span class="preprocessor">#define WORDSIZE_OF_BITSIZE( bit_size ) ( ( bit_size &gt;&gt; WORDROLL ) + (( bit_size &amp; WORDMASK ) ? 1 : 0) )</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a>00046 <span class="preprocessor">#ifndef STARTWORDS</span>
<a name="l00047"></a><a class="code" href="bitvec_8h.shtml#5e661bb207fb404dd4e24c877b6e064f">00047</a> <span class="preprocessor"></span><span class="preprocessor">#define STARTWORDS 10</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span><span class="preprocessor">#endif // STARTWORDS</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span>
<a name="l00050"></a>00050 <span class="keyword">namespace </span>OpenBabel
<a name="l00051"></a>00051   {
<a name="l00053"></a>00053 
<a name="l00061"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml">00061</a>   <span class="keyword">class </span>OBERROR OBBitVec
<a name="l00062"></a>00062     {
<a name="l00063"></a>00063     <span class="keyword">public</span>:
<a name="l00064"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#f4fc5384bb4238749c41b69fc54b3c28">00064</a>           <span class="keyword">typedef</span> std::vector&lt;unsigned&gt; <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#f4fc5384bb4238749c41b69fc54b3c28">word_vector</a>;
<a name="l00065"></a>00065           
<a name="l00066"></a>00066         <span class="keyword">private</span>:
<a name="l00068"></a>00068       size_t _size; <span class="comment">//was unsigned</span>
<a name="l00070"></a>00070 <span class="comment"></span>      <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#f4fc5384bb4238749c41b69fc54b3c28">word_vector</a>       _set;
<a name="l00071"></a>00071           
<a name="l00072"></a>00072     <span class="keyword">public</span>:
<a name="l00074"></a>00074 
<a name="l00077"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#d2a656e00a16aed8b2e64a8592cdc204">00077</a>       OBBitVec()
<a name="l00078"></a>00078           :_set(<a class="code" href="bitvec_8h.shtml#5e661bb207fb404dd4e24c877b6e064f">STARTWORDS</a>, 0)
<a name="l00079"></a>00079         { _size = _set.size(); }
<a name="l00081"></a>00081 
<a name="l00086"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#ec13682ce2031624290b850d661c15d1">00086</a>       OBBitVec(<span class="keywordtype">unsigned</span> size_in_bits)
<a name="l00087"></a>00087           :_set(<a class="code" href="bitvec_8h.shtml#f3d2326c83f514b152e91d7a85bd1d04">WORDSIZE_OF_BITSIZE</a>(size_in_bits), 0)
<a name="l00088"></a>00088         { _size = _set.size(); }
<a name="l00090"></a>00090 
<a name="l00094"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#f3277a8d3759141bcc4509e41fd65666">00094</a>       OBBitVec(<span class="keyword">const</span> OBBitVec &amp; bv)
<a name="l00095"></a>00095           :_size(0)
<a name="l00096"></a>00096                 { (*this) = bv; }
<a name="l00098"></a>00098       <span class="keywordtype">void</span> SetBitOn(<span class="keywordtype">unsigned</span> bit_offset);
<a name="l00100"></a>00100       <span class="keywordtype">void</span> SetBitOff(<span class="keywordtype">unsigned</span> bit_offset);
<a name="l00102"></a>00102       <span class="keywordtype">void</span> SetRangeOn(<span class="keywordtype">unsigned</span> lo_bit_offset, <span class="keywordtype">unsigned</span> hi_bit_offset);
<a name="l00104"></a>00104       <span class="keywordtype">void</span> SetRangeOff(<span class="keywordtype">unsigned</span> lo_bit_offset, <span class="keywordtype">unsigned</span> hi_bit_offset);
<a name="l00106"></a>00106       <span class="keywordtype">void</span> Fold(<span class="keywordtype">unsigned</span> new_bit_size);
<a name="l00108"></a>00108 
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#0b727d1fdc0aef5a6f0f1105e4a04886">00112</a>       <span class="keywordtype">int</span> FirstBit(<span class="keywordtype">unsigned</span> bit_offset = 0)<span class="keyword"> const</span>
<a name="l00113"></a>00113 <span class="keyword">        </span>{
<a name="l00114"></a>00114           <span class="keywordflow">return</span> (BitIsSet(bit_offset) ? 0  : NextBit(bit_offset));
<a name="l00115"></a>00115         }
<a name="l00117"></a>00117       <span class="keywordtype">int</span> NextBit(<span class="keywordtype">int</span> last_bit_offset) <span class="keyword">const</span>;
<a name="l00119"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#2708ab4d83252a8ec1d7793b4d90f7b2">00119</a>       <span class="keywordtype">int</span> EndBit()<span class="keyword"> const </span>{  <span class="keywordflow">return</span> -1; }
<a name="l00121"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#ea1a6543dfaaaafd6680aaa61941329e">00121</a>       size_t GetSize()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_size);    }
<a name="l00123"></a>00123       <span class="keywordtype">unsigned</span> CountBits() <span class="keyword">const</span>;
<a name="l00124"></a>00124 
<a name="l00126"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#b9cc40052eeb2cec92042c9594fa94ad">00126</a>       <span class="keywordtype">bool</span> Empty()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span>(IsEmpty()); }
<a name="l00128"></a>00128       <span class="keywordtype">bool</span> IsEmpty() <span class="keyword">const</span>;
<a name="l00130"></a>00130 
<a name="l00134"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#7fb6b46dee1d4ad36556798e32e71546">00134</a>       <span class="keywordtype">bool</span> Resize(<span class="keywordtype">unsigned</span> size_in_bits)
<a name="l00135"></a>00135                 {
<a name="l00136"></a>00136                 <span class="keywordflow">return</span> ResizeWords( <a class="code" href="bitvec_8h.shtml#f3d2326c83f514b152e91d7a85bd1d04">WORDSIZE_OF_BITSIZE</a>(size_in_bits) );
<a name="l00137"></a>00137                 }
<a name="l00139"></a>00139 
<a name="l00143"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#82c887f8563a65a47185927176725289">00143</a>           <span class="keywordtype">bool</span> ResizeWords(<span class="keywordtype">unsigned</span> size_in_words)
<a name="l00144"></a>00144                 {
<a name="l00145"></a>00145                 <span class="keywordflow">if</span> (size_in_words &lt;= _size)
<a name="l00146"></a>00146                   <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00147"></a>00147                 _set.resize(size_in_words, 0); <span class="comment">// increase the vector with zeroed bits</span>
<a name="l00148"></a>00148                 _size = _set.size();
<a name="l00149"></a>00149                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00150"></a>00150                 }
<a name="l00152"></a>00152 
<a name="l00156"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#e3c75bdf35b2454b84ae450e65884708">00156</a>       <span class="keywordtype">bool</span> BitIsSet(<span class="keywordtype">unsigned</span> bit_offset)<span class="keyword"> const</span>
<a name="l00157"></a>00157 <span class="keyword">        </span>{
<a name="l00158"></a>00158                   <span class="keywordtype">bool</span> rtn = <span class="keyword">false</span>;
<a name="l00159"></a>00159                   <span class="keywordtype">unsigned</span> word_offset = bit_offset &gt;&gt; <a class="code" href="bitvec_8h.shtml#54cacf5a77e60ae8306542d29434bc83">WORDROLL</a>;
<a name="l00160"></a>00160                   <span class="keywordflow">if</span> (word_offset &lt; GetSize())
<a name="l00161"></a>00161                         {
<a name="l00162"></a>00162                           bit_offset &amp;= <a class="code" href="bitvec_8h.shtml#3309177dc11dafea4261223c52189cd3">WORDMASK</a>;
<a name="l00163"></a>00163                           rtn = (( _set[word_offset] &gt;&gt; bit_offset ) &amp; 1);
<a name="l00164"></a>00164                         }
<a name="l00165"></a>00165           <span class="keywordflow">return</span> rtn;
<a name="l00166"></a>00166         }
<a name="l00168"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a5da83cbb2de56c6c5a4a26f02892f73">00168</a>       <span class="keywordtype">bool</span> BitIsOn(<span class="keywordtype">int</span> bit_offset)<span class="keyword"> const</span>
<a name="l00169"></a>00169 <span class="keyword">        </span>{ <span class="keywordflow">return</span> BitIsSet((<span class="keywordtype">unsigned</span>)bit_offset); }
<a name="l00170"></a>00170 
<a name="l00172"></a>00172           <span class="keywordtype">void</span> FromVecInt(<span class="keyword">const</span> std::vector&lt;int&gt; &amp; bit_offsets);
<a name="l00174"></a>00174           <span class="keywordtype">void</span> FromString(<span class="keyword">const</span> std::string &amp; line, <span class="keywordtype">int</span> bits);
<a name="l00176"></a>00176           <span class="keywordtype">void</span> ToVecInt(std::vector&lt;int&gt; &amp; bit_offsets) <span class="keyword">const</span>;
<a name="l00178"></a>00178       <span class="keywordtype">void</span> Clear();
<a name="l00180"></a>00180 
<a name="l00184"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#ac60241b02c378810c36049b4243cd2a">00184</a>       <span class="keywordtype">void</span> Negate()
<a name="l00185"></a>00185         {
<a name="l00186"></a>00186                   <span class="keywordflow">for</span> (word_vector::iterator wx = _set.begin(), wy = _set.end(); wx != wy; ++wx)
<a name="l00187"></a>00187                     * wx = ~(* wx);
<a name="l00188"></a>00188         }
<a name="l00190"></a>00190 
<a name="l00194"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#4372a7e0dd4ad8e895432192afd0c0e3">00194</a>       <span class="keywordtype">void</span> GetWords(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml#f4fc5384bb4238749c41b69fc54b3c28">word_vector</a> &amp; vec)
<a name="l00195"></a>00195         {
<a name="l00196"></a>00196                 vec.insert(vec.end(), _set.begin(),_set.end());
<a name="l00197"></a>00197         }
<a name="l00198"></a>00198 
<a name="l00200"></a>00200       OBBitVec &amp; operator= (<span class="keyword">const</span> OBBitVec &amp; bv);
<a name="l00202"></a>00202       OBBitVec &amp; operator&amp;= (<span class="keyword">const</span> OBBitVec &amp; bv);
<a name="l00204"></a>00204       OBBitVec &amp; operator|= (<span class="keyword">const</span> OBBitVec &amp; bv);
<a name="l00206"></a>00206 
<a name="l00208"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#7d92cefb57cfc846e3ea771085a32790">00208</a>       OBBitVec &amp; operator|= (<span class="keywordtype">int</span> bit_offset)
<a name="l00209"></a>00209         {
<a name="l00210"></a>00210           SetBitOn(bit_offset);
<a name="l00211"></a>00211           <span class="keywordflow">return</span>(*<span class="keyword">this</span>);
<a name="l00212"></a>00212         }
<a name="l00214"></a>00214       OBBitVec &amp; operator^= (<span class="keyword">const</span> OBBitVec &amp; bv);
<a name="l00216"></a>00216       OBBitVec &amp; operator-= (<span class="keyword">const</span> OBBitVec &amp; bv);
<a name="l00218"></a>00218       OBBitVec &amp; operator+= (<span class="keyword">const</span> OBBitVec &amp; bv);
<a name="l00220"></a>00220 
<a name="l00224"></a><a class="code" href="classOpenBabel_1_1OBBitVec.shtml#b917eb9572b92cb9cde84ca4f487d61c">00224</a>       <span class="keywordtype">bool</span> operator[] (<span class="keywordtype">int</span> bit_offset)<span class="keyword"> const</span>
<a name="l00225"></a>00225 <span class="keyword">        </span>{ <span class="keywordflow">return</span> BitIsSet(bit_offset); }
<a name="l00226"></a>00226 
<a name="l00228"></a>00228       <span class="keyword">friend</span> OBERROR OBBitVec <a class="code" href="namespaceOpenBabel.shtml#589f57f86fbbbdd19d45f5b4c94d7756">operator| </a>(<span class="keyword">const</span> OBBitVec &amp; bv1, <span class="keyword">const</span> OBBitVec &amp; bv2);
<a name="l00230"></a>00230       <span class="keyword">friend</span> OBERROR OBBitVec <a class="code" href="namespaceOpenBabel.shtml#6970105796b4348f5881dfb8d6b699b5">operator&amp; </a>(<span class="keyword">const</span> OBBitVec &amp; bv1,<span class="keyword">const</span> OBBitVec &amp; bv2);
<a name="l00232"></a>00232       <span class="keyword">friend</span> OBERROR OBBitVec <a class="code" href="namespaceOpenBabel.shtml#958a63ed935aa96791a3f16d175a8d05">operator^ </a>(<span class="keyword">const</span> OBBitVec &amp; bv1,<span class="keyword">const</span> OBBitVec &amp; bv2);
<a name="l00234"></a>00234       <span class="keyword">friend</span> OBERROR OBBitVec <a class="code" href="namespaceOpenBabel.shtml#8fae3168c04f174bd8e5b48b95ddbc45">operator- </a>(<span class="keyword">const</span> OBBitVec &amp; bv1,<span class="keyword">const</span> OBBitVec &amp; bv2);
<a name="l00236"></a>00236       <span class="keyword">friend</span> OBERROR <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#e8a689b821c5b5e0b57dbc7b22b486af">operator== </a>(<span class="keyword">const</span> OBBitVec &amp; bv1,<span class="keyword">const</span> OBBitVec &amp; bv2);
<a name="l00238"></a>00238       <span class="keyword">friend</span> OBERROR <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#48d783b30a8244c0b5a9c073efc760cb">operator&lt; </a>(<span class="keyword">const</span> OBBitVec &amp; bv1, <span class="keyword">const</span> OBBitVec &amp; bv2);
<a name="l00239"></a>00239 
<a name="l00241"></a>00241       <span class="keyword">friend</span> OBERROR std::istream&amp; <a class="code" href="namespaceOpenBabel.shtml#d82daf2b8216ec9dc09ebc72577383ad">operator&gt;&gt; </a>( std::istream &amp; is, OBBitVec &amp; bv );
<a name="l00243"></a>00243       <span class="keyword">friend</span> OBERROR std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#6c74b3f189b23bb0ff9130679d210ce5">operator&lt;&lt; </a>( std::ostream &amp; os, <span class="keyword">const</span> OBBitVec &amp; bv ) ;
<a name="l00244"></a>00244     };
<a name="l00245"></a>00245 
<a name="l00247"></a>00247   OBERROR <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#31223bb78aa7a23c4816a3a523a18163">Tanimoto</a>(<span class="keyword">const</span> OBBitVec &amp; bv1, <span class="keyword">const</span> OBBitVec &amp; bv2);
<a name="l00248"></a>00248 
<a name="l00249"></a>00249   } <span class="comment">// end namespace OpenBabel</span>
<a name="l00250"></a>00250 
<a name="l00251"></a>00251 <span class="preprocessor">#endif // OB_BITVEC_H</span>
<a name="l00252"></a>00252 <span class="preprocessor"></span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
