<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Open Babel: xml.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="api-style.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head>

<body>

<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.4.7 -->
<div class="tabs">
  <ul>
    <li><a href="index.shtml"><span>Main&nbsp;Page</span></a></li>
    <li><a href="modules.shtml"><span>Modules</span></a></li>
    <li><a href="namespaces.shtml"><span>Namespaces</span></a></li>
    <li><a href="classes.shtml"><span>Classes</span></a></li>
    <li id="current"><a href="files.shtml"><span>Files</span></a></li>
    <li><a href="pages.shtml"><span>Related&nbsp;Pages</span></a></li>
    <li><a href="examples.shtml"><span>Examples</span></a></li>
  </ul></div>
<div class="tabs">
  <ul>
    <li><a href="files.shtml"><span>File&nbsp;List</span></a></li>
    <li><a href="globals.shtml"><span>File&nbsp;Members</span></a></li>
  </ul></div>
<h1>xml.h</h1><a href="xml_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/**********************************************************************</span>
<a name="l00002"></a>00002 <span class="comment">xml.h Declaration of XMLConversion, </span>
<a name="l00003"></a>00003 <span class="comment">declaration and definition of XMLBaseFormat and XMLMoleculeFormat </span>
<a name="l00004"></a>00004 <span class="comment">Copyright (C) 2005-2006 by Chris Morley</span>
<a name="l00005"></a>00005 <span class="comment"> </span>
<a name="l00006"></a>00006 <span class="comment">This program is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">the Free Software Foundation version 2 of the License.</span>
<a name="l00009"></a>00009 <span class="comment"> </span>
<a name="l00010"></a>00010 <span class="comment">This program is distributed in the hope that it will be useful,</span>
<a name="l00011"></a>00011 <span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00012"></a>00012 <span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
<a name="l00013"></a>00013 <span class="comment">GNU General Public License for more details.</span>
<a name="l00014"></a>00014 <span class="comment">***********************************************************************/</span>
<a name="l00015"></a>00015 
<a name="l00016"></a>00016 <span class="preprocessor">#ifndef OB_XML_H</span>
<a name="l00017"></a>00017 <span class="preprocessor"></span><span class="preprocessor">#define OB_XML_H</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;typeinfo&gt;</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &lt;<a class="code" href="obconversion_8h.shtml">openbabel/obconversion.h</a>&gt;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &lt;<a class="code" href="obmolecformat_8h.shtml">openbabel/obmolecformat.h</a>&gt;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;libxml/xmlreader.h&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;libxml/xmlwriter.h&gt;</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;typeinfo&gt;</span>
<a name="l00028"></a>00028 
<a name="l00029"></a>00029 <span class="keyword">namespace </span>OpenBabel
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 
<a name="l00033"></a>00033   <span class="comment">//forward declaration</span>
<a name="l00034"></a>00034   <span class="keyword">class </span>XMLBaseFormat;
<a name="l00035"></a>00035 
<a name="l00036"></a>00036   <span class="comment">//******************************************************</span>
<a name="l00053"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml">00053</a> <span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>
<a name="l00054"></a>00054     {
<a name="l00055"></a>00055     <span class="keyword">public</span>:
<a name="l00057"></a>00057       <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#deac7d07449ffc4ac7bc6a342dcd62ac">XMLConversion</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv);
<a name="l00058"></a>00058         
<a name="l00060"></a>00060       <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#18ac14adef41fc2d5c31005a5e288013">~XMLConversion</a>();
<a name="l00061"></a>00061 
<a name="l00062"></a>00062       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#3929dade944a01b7053b09681516b507">SetupReader</a>();
<a name="l00063"></a>00063       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a0f221004baa4cf757e846081712cfa1">SetupWriter</a>();
<a name="l00064"></a>00064 
<a name="l00066"></a>00066       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6e81ad4c00f3fcaca66eda1cd35995a4">ReadXML</a>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>* pFormat, <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb);
<a name="l00067"></a>00067 
<a name="l00070"></a>00070       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#4d42532af26db0074ba02827e75fc066">SkipXML</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* ctag);
<a name="l00071"></a>00071 
<a name="l00072"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#846e8faaac4edcdb8ef8279f30916a3d">00072</a>       <span class="keyword">typedef</span> std::map&lt;std::string, XMLBaseFormat*&gt; <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#846e8faaac4edcdb8ef8279f30916a3d">NsMapType</a>;
<a name="l00073"></a>00073 
<a name="l00076"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#121c83bcfeb620617e8de4d30f4b404d">00076</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#846e8faaac4edcdb8ef8279f30916a3d">NsMapType</a>&amp; <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#121c83bcfeb620617e8de4d30f4b404d">Namespaces</a>()
<a name="l00077"></a>00077         {
<a name="l00078"></a>00078           <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#846e8faaac4edcdb8ef8279f30916a3d">NsMapType</a> ns;
<a name="l00079"></a>00079           <span class="keywordflow">return</span> ns;
<a name="l00080"></a>00080 
<a name="l00081"></a>00081           <span class="comment">//static NsMapType* nsm = NULL;</span>
<a name="l00082"></a>00082           <span class="comment">//if (!nsm)</span>
<a name="l00083"></a>00083           <span class="comment">//  nsm = new NsMapType;</span>
<a name="l00084"></a>00084           <span class="comment">//return *nsm;</span>
<a name="l00085"></a>00085         };
<a name="l00086"></a>00086 
<a name="l00087"></a>00087       <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#8cd5fea48cacad22106a5980c8fa1f32">RegisterXMLFormat</a>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>* pFormat,
<a name="l00088"></a>00088                                     <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* uri=NULL);
<a name="l00089"></a>00089 
<a name="l00091"></a>00091       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a>* <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ef05e6fbdf79de7567a7263a1495b593">GetDerived</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv, <span class="keywordtype">bool</span> ForReading=<span class="keyword">true</span>);
<a name="l00092"></a>00092 
<a name="l00095"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#3f51649705ec09deef1635a85182d133">00095</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#3f51649705ec09deef1635a85182d133">IsLast</a>()
<a name="l00096"></a>00096         { <span class="keywordflow">return</span> _pConv-&gt;<a class="code" href="classOpenBabel_1_1OBConversion.shtml#3f51649705ec09deef1635a85182d133">IsLast</a>(); }
<a name="l00097"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#203563f0067b22dd21aa268ecd5a040d">00097</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#203563f0067b22dd21aa268ecd5a040d">GetOutputIndex</a>()
<a name="l00098"></a>00098         { <span class="keywordflow">return</span>  _pConv-&gt;<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a3e141342e3b49a3c747a78e870f23dd">GetOutputIndex</a>(); }
<a name="l00099"></a>00099 
<a name="l00100"></a>00100 
<a name="l00101"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#f2d2d1d85a3a8519f3fd1aca84bcb281">00101</a>       xmlTextReaderPtr <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#f2d2d1d85a3a8519f3fd1aca84bcb281">GetReader</a>()<span class="keyword"> const</span>
<a name="l00102"></a>00102 <span class="keyword">        </span>{ <span class="keywordflow">return</span> _reader;   };
<a name="l00103"></a>00103 
<a name="l00104"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#45664ea7f1f1e4eadd94e88f70133310">00104</a>       xmlTextWriterPtr <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#45664ea7f1f1e4eadd94e88f70133310">GetWriter</a>()<span class="keyword"> const</span>
<a name="l00105"></a>00105 <span class="keyword">        </span>{ <span class="keywordflow">return</span> _writer;   };
<a name="l00106"></a>00106 
<a name="l00107"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#8d8e72196913cb8f62cece8212bc5fc2">00107</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#8d8e72196913cb8f62cece8212bc5fc2">OutputToStream</a>()
<a name="l00108"></a>00108         {
<a name="l00109"></a>00109           xmlOutputBufferFlush(_buf);
<a name="l00110"></a>00110         }
<a name="l00111"></a>00111 
<a name="l00112"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#1f4e31c4ce4207bfe9c78db6eb141b6a">00112</a>       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>* <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#1f4e31c4ce4207bfe9c78db6eb141b6a">GetDefaultXMLClass</a>() <span class="comment">//TODO make dependent on object type</span>
<a name="l00113"></a>00113         { <span class="keywordflow">return</span> _pDefault;};
<a name="l00114"></a>00114 
<a name="l00115"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6e93ed570ec11dfeb3b526b12cc4a4ec">00115</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6e93ed570ec11dfeb3b526b12cc4a4ec">LookForNamespace</a>()
<a name="l00116"></a>00116         { _LookingForNamespace = <span class="keyword">true</span>; };
<a name="l00117"></a>00117 
<a name="l00119"></a>00119       <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#08c6aca3d7c0d09a4f990316142278ba">ReadStream</a>(<span class="keywordtype">void</span> * context, <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);
<a name="l00120"></a>00120       <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#f6cb1e58a4d1537d0bf417ba1bf6f354">WriteStream</a>(<span class="keywordtype">void</span> * context, <span class="keyword">const</span> <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);
<a name="l00121"></a>00121       <span class="comment">//static int CloseStream(void* context);</span>
<a name="l00122"></a>00122 
<a name="l00123"></a>00123       std::string <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ee2190c635bec5103f110300686d088c">GetAttribute</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* attrname);
<a name="l00124"></a>00124 
<a name="l00126"></a>00126       std::string <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#7fc81523c4e15ea2275b894bf5f70243">GetContent</a>();
<a name="l00127"></a>00127 
<a name="l00129"></a>00129       <span class="keywordtype">bool</span>    <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#41508bfcf5b1fcaa1f6dec8c4b5e6c24">GetContentInt</a>(<span class="keywordtype">int</span>&amp; value);
<a name="l00130"></a>00130 
<a name="l00132"></a>00132       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#0c94fef50b52f03b66b621a5cf82f91d">GetContentDouble</a>(<span class="keywordtype">double</span>&amp; value);
<a name="l00133"></a>00133 
<a name="l00134"></a>00134     <span class="keyword">private</span>:
<a name="l00135"></a>00135       <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>* _pDefault;
<a name="l00136"></a>00136       <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* _pConv;
<a name="l00137"></a>00137       std::streampos  _requestedpos, _lastpos;  
<a name="l00138"></a>00138       xmlTextReaderPtr _reader;
<a name="l00139"></a>00139       xmlTextWriterPtr _writer;
<a name="l00140"></a>00140       xmlOutputBufferPtr _buf;
<a name="l00141"></a>00141       <span class="comment">//    xmlBufferPtr _buf;</span>
<a name="l00142"></a>00142       <span class="keywordtype">bool</span> _LookingForNamespace;
<a name="l00143"></a>00143     <span class="keyword">public</span>: 
<a name="l00144"></a><a class="code" href="classOpenBabel_1_1XMLConversion.shtml#e371787284fac46f1a9f7061f17f6418">00144</a>       <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#e371787284fac46f1a9f7061f17f6418">_SkipNextRead</a>;
<a name="l00145"></a>00145     };
<a name="l00146"></a>00146 
<a name="l00147"></a>00147   <span class="comment">//*************************************************</span>
<a name="l00150"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">00150</a> <span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>
<a name="l00151"></a>00151     {
<a name="l00152"></a>00152     <span class="keyword">protected</span>:
<a name="l00153"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#316190563a5b53d629bd5885c55911bf">00153</a>       <a class="code" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a>* <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#316190563a5b53d629bd5885c55911bf">_pxmlConv</a>;
<a name="l00154"></a>00154     
<a name="l00155"></a>00155       <span class="comment">//formating for output</span>
<a name="l00156"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#f2940c08354f281e9aec1fd761c6df90">00156</a>       std::string <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#f2940c08354f281e9aec1fd761c6df90">_prefix</a>;
<a name="l00157"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#e31213c4c002a219eb838fc76d318e4b">00157</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#874813c6d505cfa0a075bd494c68362a">baseindent</a>, <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#e31213c4c002a219eb838fc76d318e4b">ind</a>;
<a name="l00158"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#05dc4164639e40b14f17867e8408170b">00158</a>       std::string <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#05dc4164639e40b14f17867e8408170b">nsdecl</a>;
<a name="l00159"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a468b69181d7a9942326e73dafd2a235">00159</a>       <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a468b69181d7a9942326e73dafd2a235">_embedlevel</a>;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     <span class="keyword">public</span>:
<a name="l00162"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#272c4b8a383e1768fabf0d135a0aa8ea">00162</a>       <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#272c4b8a383e1768fabf0d135a0aa8ea">~XMLBaseFormat</a>(){}
<a name="l00163"></a>00163       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#6281933a331636a3c11140166d8f7f99">NamespaceURI</a>()<span class="keyword">const</span>=0;
<a name="l00164"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#675b1a7f93de0a65f7b5a01e3f4665e0">00164</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#675b1a7f93de0a65f7b5a01e3f4665e0">DoElement</a>(<span class="keyword">const</span> std::string&amp; ElName){<span class="keywordflow">return</span> <span class="keyword">false</span>;};
<a name="l00165"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#08a83a3bab6682dcd972414dbde404d5">00165</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#08a83a3bab6682dcd972414dbde404d5">EndElement</a>(<span class="keyword">const</span> std::string&amp; ElName){<span class="keywordflow">return</span> <span class="keyword">false</span>;};
<a name="l00167"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#cdaa59871d15acabfe0a03e548d9066e">00167</a>       <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#cdaa59871d15acabfe0a03e548d9066e">EndTag</a>(){<span class="keywordflow">return</span> <span class="stringliteral">"&gt;"</span>;};
<a name="l00168"></a>00168     
<a name="l00169"></a>00169     <span class="keyword">protected</span>:
<a name="l00170"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#5014527ecb2c9eec31a4eea7a37e741f">00170</a>       xmlTextReaderPtr <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#5014527ecb2c9eec31a4eea7a37e741f">reader</a>()<span class="keyword"> const</span>
<a name="l00171"></a>00171 <span class="keyword">        </span>{
<a name="l00172"></a>00172           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#316190563a5b53d629bd5885c55911bf">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#f2d2d1d85a3a8519f3fd1aca84bcb281">GetReader</a>();
<a name="l00173"></a>00173         }
<a name="l00174"></a>00174 
<a name="l00175"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#e5a1413abac19f481c0e2342d3c39ae1">00175</a>       xmlTextWriterPtr <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#e5a1413abac19f481c0e2342d3c39ae1">writer</a>()<span class="keyword"> const</span>
<a name="l00176"></a>00176 <span class="keyword">        </span>{
<a name="l00177"></a>00177           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#316190563a5b53d629bd5885c55911bf">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#45664ea7f1f1e4eadd94e88f70133310">GetWriter</a>();
<a name="l00178"></a>00178         }
<a name="l00179"></a>00179     
<a name="l00180"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#8d8e72196913cb8f62cece8212bc5fc2">00180</a>       <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#8d8e72196913cb8f62cece8212bc5fc2">OutputToStream</a>()
<a name="l00181"></a>00181         {
<a name="l00182"></a>00182           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#316190563a5b53d629bd5885c55911bf">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#8d8e72196913cb8f62cece8212bc5fc2">OutputToStream</a>();
<a name="l00183"></a>00183         }
<a name="l00184"></a>00184     
<a name="l00187"></a><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4f1585b558e6f90fafec7442ce140d1">00187</a>       <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4f1585b558e6f90fafec7442ce140d1">SkipObjects</a>(<span class="keywordtype">int</span> n, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv)
<a name="l00188"></a>00188         {
<a name="l00189"></a>00189           <span class="comment">//don't implement on base class</span>
<a name="l00190"></a>00190           <span class="keywordflow">if</span>(*<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#cdaa59871d15acabfe0a03e548d9066e">EndTag</a>()==<span class="charliteral">'&gt;'</span>)
<a name="l00191"></a>00191             <span class="keywordflow">return</span> 0;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193           <span class="comment">//Set up XMLConversion class with reader </span>
<a name="l00194"></a>00194           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#316190563a5b53d629bd5885c55911bf">_pxmlConv</a> = <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ef05e6fbdf79de7567a7263a1495b593">XMLConversion::GetDerived</a>(pConv,<span class="keyword">true</span>);
<a name="l00195"></a>00195           <span class="keywordflow">if</span>(!<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#316190563a5b53d629bd5885c55911bf">_pxmlConv</a>)
<a name="l00196"></a>00196             <span class="keywordflow">return</span> -1;
<a name="l00197"></a>00197 
<a name="l00198"></a>00198           <span class="comment">//always find the end of at least 1 object</span>
<a name="l00199"></a>00199           <span class="keywordflow">if</span>(n==0)++n;
<a name="l00200"></a>00200         
<a name="l00201"></a>00201           <span class="comment">//Skip n objects, returning -1 if not successful</span>
<a name="l00202"></a>00202           <span class="keywordtype">int</span> i;
<a name="l00203"></a>00203           <span class="keywordflow">for</span>(i=0; i&lt;n; ++i)
<a name="l00204"></a>00204             <span class="keywordflow">if</span>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#316190563a5b53d629bd5885c55911bf">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#4d42532af26db0074ba02827e75fc066">SkipXML</a>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#cdaa59871d15acabfe0a03e548d9066e">EndTag</a>())!=1)
<a name="l00205"></a>00205               <span class="keywordflow">return</span> -1;
<a name="l00206"></a>00206         
<a name="l00207"></a>00207           <span class="keywordflow">return</span> 1;       
<a name="l00208"></a>00208         }
<a name="l00209"></a>00209 
<a name="l00210"></a>00210     };
<a name="l00211"></a>00211 
<a name="l00212"></a>00212   <span class="comment">//*************************************************</span>
<a name="l00215"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">00215</a> <span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">XMLMoleculeFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>
<a name="l00216"></a>00216     {
<a name="l00217"></a>00217     <span class="keyword">protected</span>:
<a name="l00218"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a121c68a5a76235ae85d435330406bb4">00218</a>       <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a121c68a5a76235ae85d435330406bb4">_pmol</a>;
<a name="l00219"></a>00219 
<a name="l00220"></a>00220     <span class="keyword">public</span>:
<a name="l00221"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#859b7a709d7ae8588893d333c77b4ff5">00221</a>       <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#859b7a709d7ae8588893d333c77b4ff5">~XMLMoleculeFormat</a>(){}
<a name="l00222"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#d3c223811e8af7e19f0d1230ef2b96b3">00222</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#d3c223811e8af7e19f0d1230ef2b96b3">ReadChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv)
<a name="l00223"></a>00223         {
<a name="l00224"></a>00224           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml#7074454d081490df62f0ed1daab929a1">OBMoleculeFormat::ReadChemObjectImpl</a>(pConv, <span class="keyword">this</span>);
<a name="l00225"></a>00225         };
<a name="l00226"></a>00226 
<a name="l00227"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#4d36e09813e2a9a264481f9cb5f28766">00227</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#4d36e09813e2a9a264481f9cb5f28766">WriteChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv)
<a name="l00228"></a>00228         {
<a name="l00229"></a>00229           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml#cacea0f27c01ecfb73016a6d9dd40383">OBMoleculeFormat::WriteChemObjectImpl</a>(pConv, <span class="keyword">this</span>);
<a name="l00230"></a>00230         };
<a name="l00231"></a>00231 
<a name="l00232"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#d23a1fca7e930ac0f435a432e3684b0e">00232</a>       <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#d23a1fca7e930ac0f435a432e3684b0e">ReadMolecule</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv)
<a name="l00233"></a>00233         {
<a name="l00234"></a>00234           <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a121c68a5a76235ae85d435330406bb4">_pmol</a> = dynamic_cast&lt;OBMol*&gt;(pOb);
<a name="l00235"></a>00235           <span class="keywordflow">if</span>(!<a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a121c68a5a76235ae85d435330406bb4">_pmol</a>)
<a name="l00236"></a>00236             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00237"></a>00237 
<a name="l00238"></a>00238           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#316190563a5b53d629bd5885c55911bf">_pxmlConv</a> = <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ef05e6fbdf79de7567a7263a1495b593">XMLConversion::GetDerived</a>(pConv,<span class="keyword">true</span>);
<a name="l00239"></a>00239           <span class="keywordflow">if</span>(!<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#316190563a5b53d629bd5885c55911bf">_pxmlConv</a>)
<a name="l00240"></a>00240             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00241"></a>00241           <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a468b69181d7a9942326e73dafd2a235">_embedlevel</a> = -1;
<a name="l00242"></a>00242           <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#316190563a5b53d629bd5885c55911bf">_pxmlConv</a>-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#6e81ad4c00f3fcaca66eda1cd35995a4">ReadXML</a>(<span class="keyword">this</span>,pOb);
<a name="l00243"></a>00243         };
<a name="l00244"></a>00244 
<a name="l00245"></a><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ced0e833bee98b9f2eb67f4c7dad52cc">00245</a>       <span class="keyword">const</span> std::type_info&amp; <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ced0e833bee98b9f2eb67f4c7dad52cc">GetType</a>()
<a name="l00246"></a>00246         {
<a name="l00247"></a>00247           <span class="keywordflow">return</span> <span class="keyword">typeid</span>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>*);
<a name="l00248"></a>00248         };
<a name="l00249"></a>00249 
<a name="l00250"></a>00250     };
<a name="l00251"></a>00251 
<a name="l00252"></a>00252 
<a name="l00253"></a>00253 }<span class="comment">//namespace</span>
<a name="l00254"></a>00254 
<a name="l00258"></a>00258 
<a name="l00259"></a>00259 <span class="preprocessor">#endif</span>
</pre></div></div><!-- end content -->

<!--#include file="footer.html" -->

<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.2.99.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Fri Jun 18 09:21:44 2010 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.7.
</div>

</body>
</html>
