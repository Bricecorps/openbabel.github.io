<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open Babel: rotor.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open Babel
   &#160;<span id="projectnumber">3.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">rotor.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="rotor_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">rotor.h - Rotate torsional according to rotor rules.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 1998-2000 by OpenEye Scientific Software, Inc.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifndef OB_ROTOR_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#define OB_ROTOR_H</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="parsmart_8h.shtml">openbabel/parsmart.h</a>&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="typer_8h.shtml">openbabel/typer.h</a>&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml">openbabel/bitvec.h</a>&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#ifdef UNUSED</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#elif (__GNUC__ == 4)</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor"># define UNUSED(x) UNUSED_ ## x __attribute__((unused))</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#elif defined(__LCLINT__)</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor"># define UNUSED(x) </span><span class="comment">/*@unused@*/</span><span class="preprocessor"> x</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor"># define UNUSED(x) x</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keyword">class </span>OBRing;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef SQUARE</span></div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="rotor_8h.shtml#aa1cf70a99e21bc2032e8867c6cafbb43">   41</a></span>&#160;<span class="preprocessor">#define SQUARE(x) ((x)*(x))</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml">   51</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml">OBRotorRule</a></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordtype">int</span>                 _ref[4]; </div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordtype">double</span>              _delta;  </div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    std::string         _s;      </div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>*    _sp;     </div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    std::vector&lt;double&gt; _vals;   </div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#ac65f277d7001f0b88bfeb47c25490995">   60</a></span>&#160;  <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#ac65f277d7001f0b88bfeb47c25490995">OBRotorRule</a>(<span class="keywordtype">char</span> *buffer,<span class="keywordtype">int</span> ref[4],std::vector&lt;double&gt; &amp;vals,<span class="keywordtype">double</span> d):</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    _delta(d), _s(buffer), _vals(vals)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      _sp = <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      _sp-&gt;<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab90ce667d180e55f26e7054ed1c6c8b1">Init</a>(buffer);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      memcpy(_ref,ref,<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)*4);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a236044823d65dffe4868c831e45a157b">   68</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a236044823d65dffe4868c831e45a157b">~OBRotorRule</a>()</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">if</span> (_sp)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;          {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keyword">delete</span> _sp;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            _sp = NULL;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;          }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a9dcb9b43a3d0fa9003d4c1c9d921f6b2">   78</a></span>&#160;    <span class="keywordtype">bool</span>    <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a9dcb9b43a3d0fa9003d4c1c9d921f6b2">IsValid</a>()    {        <span class="keywordflow">return</span>(_sp-&gt;<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>());       }</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a6583697916569d12c1a113b4ad4dbcc2">   82</a></span>&#160;    <span class="keywordtype">void</span>    <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a6583697916569d12c1a113b4ad4dbcc2">GetReferenceAtoms</a>(<span class="keywordtype">int</span> ref[4]) { memcpy(ref,_ref,<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)*4); }</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">   84</a></span>&#160;    <span class="keywordtype">void</span>    <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">SetDelta</a>(<span class="keywordtype">double</span> d)    {       _delta = d;           }</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#abaa1b786f36fb9bc98b5c46e74425056">   86</a></span>&#160;    <span class="keywordtype">double</span>  <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#abaa1b786f36fb9bc98b5c46e74425056">GetDelta</a>()            {       <span class="keywordflow">return</span>(_delta);       }</div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a111e26305dbd8f7c211cc259dff440e7">   88</a></span>&#160;    std::vector&lt;double&gt;   &amp;<a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a111e26305dbd8f7c211cc259dff440e7">GetTorsionVals</a>()    { <span class="keywordflow">return</span>(_vals); }</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a84366a387431ba9c8ed2f3813e60badd">   90</a></span>&#160;    std::string  &amp;<a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a84366a387431ba9c8ed2f3813e60badd">GetSmartsString</a>(){      <span class="keywordflow">return</span>(_s);           }</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a1b97208b08b2495efa0a4484b4d61938">   92</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> *<a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a1b97208b08b2495efa0a4484b4d61938">GetSmartsPattern</a>() {  <span class="keywordflow">return</span>(_sp);         }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  };</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRules.shtml">  101</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml">OBRotorRules</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml">OBGlobalDataBase</a></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">bool</span>                       _quiet;  </div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    std::vector&lt;OBRotorRule*&gt;  _vr;     </div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    std::vector&lt;double&gt;        _sp3sp3; </div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    std::vector&lt;double&gt;        _sp3sp2; </div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    std::vector&lt;double&gt;        _sp2sp2; </div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml">OBRotorRules</a>();</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    ~<a class="code" href="classOpenBabel_1_1OBRotorRules.shtml">OBRotorRules</a>();</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordtype">void</span> ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*);</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRules.shtml#aab7c531e5ffc5174e57a85e853931534">  114</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#aab7c531e5ffc5174e57a85e853931534">GetSize</a>()                 { <span class="keywordflow">return</span> _vr.size();}</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRules.shtml#adeb3abe4bd6c3443362068379a6b665e">  117</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#adeb3abe4bd6c3443362068379a6b665e">SetFilename</a>(std::string &amp;s)       { _filename = s;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">void</span> GetRotorIncrements(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol,<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* bond,<span class="keywordtype">int</span> refs[4],</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                            std::vector&lt;double&gt; &amp;vals,<span class="keywordtype">double</span> &amp;delta);</div><div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRules.shtml#a3bf46031273468cc23720df1c59d3e85">  128</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#a3bf46031273468cc23720df1c59d3e85">Quiet</a>()                           { _quiet=<span class="keyword">true</span>;      }</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  };</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml">  135</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordtype">int</span> _idx; </div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    std::vector&lt;int&gt; _rotatoms; </div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordtype">double</span> _imag, _refang; </div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *_bond; </div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    std::vector&lt;int&gt; _ref, _torsion; </div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> _fixedatoms,_fixedbonds, _evalatoms; </div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    std::vector&lt;double&gt; _torsionAngles;  </div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    std::vector&lt;double&gt; _invmag; </div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    std::vector&lt;std::vector&lt;double&gt; &gt; _sn,_cs,_t; </div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    std::vector&lt;OBRing *&gt; _rings; </div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a>();</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a6a1a300dca75a2089732a7a66f7e1234">  155</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a6a1a300dca75a2089732a7a66f7e1234">~OBRotor</a>()</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a75c73979e73fb44e48424150fa0208c7">  164</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a75c73979e73fb44e48424150fa0208c7">SetBond</a>(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      _bond = bond;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      SetRings();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordtype">void</span> SetRings();</div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#ab994a975e39f5c62288f4f972b6f90c9">  177</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#ab994a975e39f5c62288f4f972b6f90c9">SetIdx</a>(<span class="keywordtype">int</span> idx)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;      _idx = idx;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">void</span> SetDihedralAtoms(std::vector&lt;int&gt; &amp;ref);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordtype">void</span> SetDihedralAtoms(<span class="keywordtype">int</span> ref[4]);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordtype">void</span> SetRotAtoms(std::vector&lt;int&gt; &amp;atoms);</div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a0d37d5e994df8c97fe401ee821a3cbe7">  200</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a0d37d5e994df8c97fe401ee821a3cbe7">SetTorsionValues</a>(std::vector&lt;double&gt; &amp;angles)</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;      _torsionAngles = angles;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    }</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#ab263260a251aaa20610c7ca9dba31491">  207</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#ab263260a251aaa20610c7ca9dba31491">SetFixedBonds</a>(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      _fixedbonds = bv;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a00e2cf7f72570502a2e543e85499b1cc">  220</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a00e2cf7f72570502a2e543e85499b1cc">SetToAngle</a>(<span class="keywordtype">double</span> *coordinates, <span class="keywordtype">double</span> setang)</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    {</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      <span class="keywordtype">double</span> <span class="comment">/*dx,dy,dz,*/</span> sn,cs,t,ang,mag;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      <span class="comment">// compute the angle to rotate (radians)</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      ang = setang - CalcTorsion(coordinates);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      <span class="comment">// if the angle to rotate is too small, we&#39;re done</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      <span class="keywordflow">if</span> (fabs(ang) &lt; 1e-5)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      <span class="comment">// compute the bond length</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      mag = CalcBondLength(coordinates);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      <span class="comment">// compute some rotation matrix elements</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      sn = sin(ang);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      cs = cos(ang);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      t = 1 - cs;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      <span class="comment">// perform rotation</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      Set(coordinates, sn, cs, t, 1.0 / mag);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    }</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordtype">void</span> SetRotor(<span class="keywordtype">double</span> *coordinates, <span class="keywordtype">int</span> next, <span class="keywordtype">int</span> prev = -1);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordtype">void</span> Set(<span class="keywordtype">double</span> *coordinates, <span class="keywordtype">double</span> sine, <span class="keywordtype">double</span> cosine, <span class="keywordtype">double</span> translation, <span class="keywordtype">double</span> invmag);</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordtype">void</span> Precompute(<span class="keywordtype">double</span> *coordinates);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    <span class="keywordtype">void</span> Set(<span class="keywordtype">double</span> *coordinates, <span class="keywordtype">int</span> idx);</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordtype">void</span> Precalc(std::vector&lt;double*&gt; &amp;conformers);</div><div class="line"><a name="l00328"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a1ade9c212155ac04f25ddf32731657ea">  328</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a1ade9c212155ac04f25ddf32731657ea">Set</a>(<span class="keywordtype">double</span> *coordinates, <span class="keywordtype">int</span> conformer, <span class="keywordtype">int</span> idx)</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;      Set(coordinates, _sn[conformer][idx], _cs[conformer][idx], _t[conformer][idx], _invmag[conformer]);</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    }</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a1b723190c734e234d87398f8eb245a8e">  340</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *<a class="code" href="classOpenBabel_1_1OBRotor.shtml#a1b723190c734e234d87398f8eb245a8e">GetBond</a>()</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    {</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;      <span class="keywordflow">return</span>(_bond);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    }</div><div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a7b470b21b5807f0a9162bef72aebfef9">  348</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a7b470b21b5807f0a9162bef72aebfef9">Size</a>()</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;      <span class="keywordflow">return</span> _torsionAngles.size();</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    }</div><div class="line"><a name="l00355"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a141f8abda99de827deec22f935dc9e31">  355</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a141f8abda99de827deec22f935dc9e31">GetIdx</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;      <span class="keywordflow">return</span> _idx;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    }</div><div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a44db679688b64e9032ea9bf6def76315">  362</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a44db679688b64e9032ea9bf6def76315">GetDihedralAtoms</a>(<span class="keywordtype">int</span> ref[4])</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; ++i)</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        ref[i] = _ref[i];</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div><div class="line"><a name="l00370"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a75d6cacf7c1783272f74546387716902">  370</a></span>&#160;    std::vector&lt;int&gt; &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#a75d6cacf7c1783272f74546387716902">GetDihedralAtoms</a>()</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;      {</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordflow">return</span> _ref;</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;      }</div><div class="line"><a name="l00378"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a8041f518c97fbbb908c888f1c8309b27">  378</a></span>&#160;    <span class="keyword">const</span> std::vector&lt;int&gt;&amp; <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a8041f518c97fbbb908c888f1c8309b27">GetRotAtoms</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;      <span class="keywordflow">return</span> _rotatoms;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    }</div><div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">  385</a></span>&#160;    <span class="keyword">const</span> std::vector&lt;double&gt; &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">GetTorsionValues</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;      <span class="keywordflow">return</span> _torsionAngles;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    }</div><div class="line"><a name="l00393"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#ade5378a288a25258f4e3cc28a954bc2e">  393</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#ade5378a288a25258f4e3cc28a954bc2e">GetFixedBonds</a>()</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;      {</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="keywordflow">return</span> _fixedbonds;</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;      }</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordtype">double</span> CalcTorsion(<span class="keywordtype">double</span> *coordinates);</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordtype">double</span> CalcBondLength(<span class="keywordtype">double</span> *coordinates);</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a06d5fdac08688bdff198a92c78bdeb69">  413</a></span>&#160;    std::vector&lt;double&gt;::iterator <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a06d5fdac08688bdff198a92c78bdeb69">BeginTorIncrement</a>()</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;      {</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <span class="keywordflow">return</span> _torsionAngles.begin();</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;      }</div><div class="line"><a name="l00417"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#ac5857c1e09978240624038b2c6352dcc">  417</a></span>&#160;    std::vector&lt;double&gt;::iterator <a class="code" href="classOpenBabel_1_1OBRotor.shtml#ac5857c1e09978240624038b2c6352dcc">EndTorIncrement</a>()</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;      {</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <span class="keywordflow">return</span> _torsionAngles.end();</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;      }</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordtype">void</span> RemoveSymTorsionValues(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">  428</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">SetDelta</a>(<span class="keywordtype">double</span> UNUSED(d)) {}</div><div class="line"><a name="l00430"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#abaa1b786f36fb9bc98b5c46e74425056">  430</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#abaa1b786f36fb9bc98b5c46e74425056">GetDelta</a>() { <span class="keywordflow">return</span> 10.0; }</div><div class="line"><a name="l00432"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a937745b1178a21d8b223992d16d7d50a">  432</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#a937745b1178a21d8b223992d16d7d50a">GetFixedAtoms</a>() { <span class="keywordflow">return</span> _fixedatoms; }</div><div class="line"><a name="l00434"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a530a0fd1a1e312d489b367ac73e56bb7">  434</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a530a0fd1a1e312d489b367ac73e56bb7">SetFixedAtoms</a>(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv) { _fixedatoms = bv; }</div><div class="line"><a name="l00436"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#ab690ce98b2f06352f9079eeae94da3c4">  436</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#ab690ce98b2f06352f9079eeae94da3c4">GetEvalAtoms</a>() { <span class="keywordflow">return</span> _evalatoms; }</div><div class="line"><a name="l00438"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a33bdb71641015f05a632ffaf76e7672a">  438</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a33bdb71641015f05a632ffaf76e7672a">SetEvalAtoms</a>(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv) { _evalatoms = bv; }</div><div class="line"><a name="l00440"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#aa68d318d4f18049ca83fbbe8d1c5fa90">  440</a></span>&#160;    <span class="keywordtype">void</span>* <a class="code" href="classOpenBabel_1_1OBRotor.shtml#aa68d318d4f18049ca83fbbe8d1c5fa90">GetRotAtoms</a>() { <span class="keywordflow">return</span> &amp;_rotatoms; }</div><div class="line"><a name="l00442"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a8feebfa38afe9888e7a50e421b8f5243">  442</a></span>&#160;    std::vector&lt;double&gt; &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#a8feebfa38afe9888e7a50e421b8f5243">GetResolution</a>() { <span class="keywordflow">return</span> _torsionAngles; }</div><div class="line"><a name="l00444"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a4e82f80e2cd8faf3bce17c464ab1672c">  444</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a4e82f80e2cd8faf3bce17c464ab1672c">SetNumCoords</a>(<span class="keywordtype">int</span> UNUSED(nc)) {}</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;  };</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;</div><div class="line"><a name="l00451"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a434f394d0613a8ef6c119670ff49710f">  451</a></span>&#160;  <span class="keyword">typedef</span> std::vector&lt;OBRotor*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#a434f394d0613a8ef6c119670ff49710f">OBRotorIterator</a>;</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;</div><div class="line"><a name="l00457"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml">  457</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a></div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;  {</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    <span class="keywordtype">bool</span> _quiet;                    </div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordtype">bool</span> _removesym;                </div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordtype">bool</span> _ringRotors;               </div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> _fixedatoms, _fixedbonds; </div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml">OBRotorRules</a> _rr;               </div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;    std::vector&lt;int&gt; _dffv;         </div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    std::vector&lt;OBRotor*&gt; _rotor;   </div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    std::vector&lt;std::pair&lt;OBSmartsPattern*,std::pair&lt;int,int&gt; &gt; &gt; _vsym2;</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;    std::vector&lt;std::pair&lt;OBSmartsPattern*,std::pair&lt;int,int&gt; &gt; &gt; _vsym3;</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a>();</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;    ~<a class="code" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a>();</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keywordtype">void</span> Clear();</div><div class="line"><a name="l00487"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#a7b470b21b5807f0a9162bef72aebfef9">  487</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#a7b470b21b5807f0a9162bef72aebfef9">Size</a>()</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    {</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;      <span class="keywordflow">return</span> _rotor.size();</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    }</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordtype">bool</span> IsFixedBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*);</div><div class="line"><a name="l00501"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#aa0258fc5190b093eb234530b7e09f60f">  501</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#aa0258fc5190b093eb234530b7e09f60f">HasFixedBonds</a>()</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    {</div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;      <span class="keywordflow">return</span> !_fixedbonds.<a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a8e12342fc420701fbffd97025421575a">IsEmpty</a>();</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    }</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordtype">void</span> RemoveSymVals(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#aa9808cfa0495b4e2859ce504a1f6f117">  514</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#aa9808cfa0495b4e2859ce504a1f6f117">HasRingRotors</a>()</div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;    { <span class="keywordflow">return</span> _ringRotors; }</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordtype">bool</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">bool</span> sampleRings = <span class="keyword">false</span>);</div><div class="line"><a name="l00529"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#ade6c00d93af1e19168894486ad6cbdba">  529</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#ade6c00d93af1e19168894486ad6cbdba">SetFixedBonds</a>(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;fix)</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    {</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;      _fixedbonds = fix;</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;      _fixedatoms.<a class="code" href="classOpenBabel_1_1OBBitVec.shtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a>();</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;    }</div><div class="line"><a name="l00537"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#addb143a5ae2f64420fa692a14489288b">  537</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#addb143a5ae2f64420fa692a14489288b">Init</a>(std::string &amp;fname)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    {</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;      _rr.<a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#adeb3abe4bd6c3443362068379a6b665e">SetFilename</a>(fname);</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;      _rr.<a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a1e3b6d38df0786ccf7f938d60e386aae">Init</a>();</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    }</div><div class="line"><a name="l00545"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#a15266fb4e5ef334d0de47b203d420f22">  545</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#a15266fb4e5ef334d0de47b203d420f22">SetQuiet</a>() {</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;      _quiet=<span class="keyword">true</span>;</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;      _rr.<a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#a3bf46031273468cc23720df1c59d3e85">Quiet</a>();</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    }</div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="keywordtype">bool</span> SetRotAtoms(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <span class="keywordtype">bool</span> FindRotors(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">bool</span> sampleRingBonds = <span class="keyword">false</span>);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordtype">bool</span> SetEvalAtoms(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="keywordtype">bool</span> AssignTorVals(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00588"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#a0911c08e37e43925167a51149d143e3a">  588</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a> *<a class="code" href="classOpenBabel_1_1OBRotorList.shtml#a0911c08e37e43925167a51149d143e3a">BeginRotor</a>(OBRotorIterator &amp;i)</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;    {</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;      i = _rotor.begin();</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;      <span class="keywordflow">return</span>((i ==_rotor.end()) ? NULL:*i);</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    }</div><div class="line"><a name="l00597"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#a610d31fe22e09be685d1bc3e90584e56">  597</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a> *<a class="code" href="classOpenBabel_1_1OBRotorList.shtml#a610d31fe22e09be685d1bc3e90584e56">NextRotor</a>(OBRotorIterator &amp;i)</div><div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;    {</div><div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;      ++i;</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;      <span class="keywordflow">return</span>((i ==_rotor.end()) ? NULL:*i);</div><div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    }</div><div class="line"><a name="l00605"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#a9168b57d7fd7c6ac082ab7349e6c82df">  605</a></span>&#160;    OBRotorIterator <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#a9168b57d7fd7c6ac082ab7349e6c82df">BeginRotors</a>()   { <span class="keywordflow">return</span>(_rotor.begin()); }</div><div class="line"><a name="l00609"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#aac6c765496e1602cdf8a2160251cce9e">  609</a></span>&#160;    OBRotorIterator <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#aac6c765496e1602cdf8a2160251cce9e">EndRotors</a>()     { <span class="keywordflow">return</span>(_rotor.end());   }</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="comment">// Not declared</span></div><div class="line"><a name="l00616"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#af5b2891615e85e4fb9ff52d2931c6170">  616</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span>   <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#af5b2891615e85e4fb9ff52d2931c6170">IdentifyEvalAtoms</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol) { <span class="keywordflow">return</span> SetEvalAtoms(mol); }</div><div class="line"><a name="l00621"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#aaabb93aa1f24c335405418bfa3ead95b">  621</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#aaabb93aa1f24c335405418bfa3ead95b">SetFixAtoms</a>(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;fix)</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    {</div><div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;      _fixedatoms = fix;</div><div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;      _fixedbonds.<a class="code" href="classOpenBabel_1_1OBBitVec.shtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a>();</div><div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;    }</div><div class="line"><a name="l00630"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#acb5c0375aa5f28091792762a5f66f23e">  630</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#acb5c0375aa5f28091792762a5f66f23e">HasFixedAtoms</a>()</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    {</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;      <span class="keywordflow">return</span>(!_fixedatoms.<a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a8e12342fc420701fbffd97025421575a">IsEmpty</a>());</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;    }</div><div class="line"><a name="l00636"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#adbf9e2936af60825abb7f7812ba8fae8">  636</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#adbf9e2936af60825abb7f7812ba8fae8">IgnoreSymmetryRemoval</a>()    { _removesym = <span class="keyword">false</span>;}</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keywordtype">void</span> SetRotAtomsByFix(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;  };</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;  <span class="keyword">class </span>rotor_digit {</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    rotor_digit(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rs)</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;      {</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        resolution_size = rs;</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        state = 0;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;      }</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    rotor_digit()</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;      {</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        resolution_size = 0;</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        state = 0;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;      }</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keywordtype">void</span> set_size(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rs)</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    {</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;      resolution_size = rs;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;      state = 0;</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    }</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keywordtype">void</span> set_state(<span class="keywordtype">int</span> st)</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    {</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;      state = st;</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    }</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="keywordtype">int</span> get_state()</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    {</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;      <span class="keywordflow">return</span> state;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    }</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;</div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size()</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    {</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;      <span class="keywordflow">return</span> resolution_size;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    }</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordtype">bool</span> next()</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    {</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;      <span class="keywordflow">if</span> (state &lt; static_cast&lt;int&gt;(resolution_size - 1)) {</div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        ++state;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;      } <span class="keywordflow">else</span></div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;        state = 0;</div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    }</div><div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;  <span class="keyword">private</span>:</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> resolution_size;</div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    <span class="keywordtype">int</span> state;</div><div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;<span class="preprocessor">#ifndef SWIG</span></div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;  } <span class="keyword">typedef</span> rotor_digit;</div><div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;};</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;</div><div class="line"><a name="l00703"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml">  703</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml">OBRotorKeys</a></div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;  {</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00752"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#a1df6b471196fede2ca7816bdb48a55c4">  752</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#a1df6b471196fede2ca7816bdb48a55c4">OBRotorKeys</a>()</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;      {</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        _vr.clear();</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;      }</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div><div class="line"><a name="l00758"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#aa71d36872f416feaa853788a7a7a7ef8">  758</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a>(){</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        _vr.clear();</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;      }</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00763"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#a5e2ff872d231d1a136588edf2f214812">  763</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#a5e2ff872d231d1a136588edf2f214812">NumKeys</a>()</div><div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;      {</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numKeys = 0;</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <span class="keywordflow">while</span> (Next())</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;          numKeys++;</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        <span class="keywordflow">return</span> numKeys;</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;      }</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div><div class="line"><a name="l00775"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#a978846687be54138173a299d169bce37">  775</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#a978846687be54138173a299d169bce37">AddRotor</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size)</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;      {</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        rotor_digit rd(size);</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        _vr.push_back(rd);</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;      }</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;</div><div class="line"><a name="l00783"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#a3947d19ac087ef2cd68c2409920339c4">  783</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#a3947d19ac087ef2cd68c2409920339c4">Next</a>()</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;      {</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        <span class="keywordflow">if</span>(_vr.size() == 0)</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        <span class="keywordtype">bool</span> carry = _vr[0].next();</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 1;</div><div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;        <span class="keywordflow">while</span> (carry) {</div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;          <span class="keywordflow">if</span>(i == _vr.size())</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;          carry = _vr[i].next();</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;          i++;</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        }</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;      }</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div><div class="line"><a name="l00802"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#a0ea664b7db8e291318eda525a542aa7f">  802</a></span>&#160;      std::vector&lt;int&gt; <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#a0ea664b7db8e291318eda525a542aa7f">GetKey</a>()</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;      {</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        std::vector&lt;int&gt; rt;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        rt.clear();</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        rt.push_back(0);</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; _vr.size(); i++){</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;          rt.push_back(_vr[i].get_state());</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;        }</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;</div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        <span class="keywordflow">return</span> rt;</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;      }</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;      std::vector&lt;rotor_digit&gt; _vr;</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;  };</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;} <span class="comment">// end namespace OpenBabel</span></div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;<span class="preprocessor">#endif // OB_ROTOR_H</span></div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a1b97208b08b2495efa0a4484b4d61938"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a1b97208b08b2495efa0a4484b4d61938">OpenBabel::OBRotorRule::GetSmartsPattern</a></div><div class="ttdeci">OBSmartsPattern * GetSmartsPattern()</div><div class="ttdef"><b>Definition:</b> rotor.h:92</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_aa71d36872f416feaa853788a7a7a7ef8"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#aa71d36872f416feaa853788a7a7a7ef8">OpenBabel::OBRotorKeys::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clear all rotors. </div><div class="ttdef"><b>Definition:</b> rotor.h:758</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_acb5c0375aa5f28091792762a5f66f23e"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#acb5c0375aa5f28091792762a5f66f23e">OpenBabel::OBRotorList::HasFixedAtoms</a></div><div class="ttdeci">bool HasFixedAtoms()</div><div class="ttdef"><b>Definition:</b> rotor.h:630</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a75c73979e73fb44e48424150fa0208c7"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a75c73979e73fb44e48424150fa0208c7">OpenBabel::OBRotor::SetBond</a></div><div class="ttdeci">void SetBond(OBBond *bond)</div><div class="ttdef"><b>Definition:</b> rotor.h:164</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a6583697916569d12c1a113b4ad4dbcc2"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a6583697916569d12c1a113b4ad4dbcc2">OpenBabel::OBRotorRule::GetReferenceAtoms</a></div><div class="ttdeci">void GetReferenceAtoms(int ref[4])</div><div class="ttdef"><b>Definition:</b> rotor.h:82</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_a3947d19ac087ef2cd68c2409920339c4"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#a3947d19ac087ef2cd68c2409920339c4">OpenBabel::OBRotorKeys::Next</a></div><div class="ttdeci">bool Next()</div><div class="ttdef"><b>Definition:</b> rotor.h:783</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_aaabb93aa1f24c335405418bfa3ead95b"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#aaabb93aa1f24c335405418bfa3ead95b">OpenBabel::OBRotorList::SetFixAtoms</a></div><div class="ttdeci">void SetFixAtoms(OBBitVec &amp;fix)</div><div class="ttdef"><b>Definition:</b> rotor.h:621</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a1ade9c212155ac04f25ddf32731657ea"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a1ade9c212155ac04f25ddf32731657ea">OpenBabel::OBRotor::Set</a></div><div class="ttdeci">void Set(double *coordinates, int conformer, int idx)</div><div class="ttdef"><b>Definition:</b> rotor.h:328</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRules_shtml_aab7c531e5ffc5174e57a85e853931534"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRules.shtml#aab7c531e5ffc5174e57a85e853931534">OpenBabel::OBRotorRules::GetSize</a></div><div class="ttdeci">size_t GetSize()</div><div class="ttdef"><b>Definition:</b> rotor.h:114</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a7b470b21b5807f0a9162bef72aebfef9"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a7b470b21b5807f0a9162bef72aebfef9">OpenBabel::OBRotor::Size</a></div><div class="ttdeci">size_t Size()</div><div class="ttdef"><b>Definition:</b> rotor.h:348</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_ac532c4b500b1a85ea22217f2c65a70ed"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#ac532c4b500b1a85ea22217f2c65a70ed">OpenBabel::OBSmartsPattern::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdef"><b>Definition:</b> parsmart.h:229</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_ab994a975e39f5c62288f4f972b6f90c9"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#ab994a975e39f5c62288f4f972b6f90c9">OpenBabel::OBRotor::SetIdx</a></div><div class="ttdeci">void SetIdx(int idx)</div><div class="ttdef"><b>Definition:</b> rotor.h:177</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a6a1a300dca75a2089732a7a66f7e1234"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a6a1a300dca75a2089732a7a66f7e1234">OpenBabel::OBRotor::~OBRotor</a></div><div class="ttdeci">~OBRotor()</div><div class="ttdef"><b>Definition:</b> rotor.h:155</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_adbf9e2936af60825abb7f7812ba8fae8"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#adbf9e2936af60825abb7f7812ba8fae8">OpenBabel::OBRotorList::IgnoreSymmetryRemoval</a></div><div class="ttdeci">void IgnoreSymmetryRemoval()</div><div class="ttdef"><b>Definition:</b> rotor.h:636</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_ade5378a288a25258f4e3cc28a954bc2e"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#ade5378a288a25258f4e3cc28a954bc2e">OpenBabel::OBRotor::GetFixedBonds</a></div><div class="ttdeci">OBBitVec &amp; GetFixedBonds()</div><div class="ttdef"><b>Definition:</b> rotor.h:393</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a530a0fd1a1e312d489b367ac73e56bb7"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a530a0fd1a1e312d489b367ac73e56bb7">OpenBabel::OBRotor::SetFixedAtoms</a></div><div class="ttdeci">void SetFixedAtoms(OBBitVec &amp;bv)</div><div class="ttdef"><b>Definition:</b> rotor.h:434</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_aa0258fc5190b093eb234530b7e09f60f"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#aa0258fc5190b093eb234530b7e09f60f">OpenBabel::OBRotorList::HasFixedBonds</a></div><div class="ttdeci">bool HasFixedBonds()</div><div class="ttdef"><b>Definition:</b> rotor.h:501</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBond_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBond.shtml">OpenBabel::OBBond</a></div><div class="ttdoc">Bond class. </div><div class="ttdef"><b>Definition:</b> bond.h:58</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml">OpenBabel::OBRotorList</a></div><div class="ttdoc">Given an OBMol, set up a list of possibly rotatable torsions,. </div><div class="ttdef"><b>Definition:</b> rotor.h:457</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:118</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a75d6cacf7c1783272f74546387716902"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a75d6cacf7c1783272f74546387716902">OpenBabel::OBRotor::GetDihedralAtoms</a></div><div class="ttdeci">std::vector&lt; int &gt; &amp; GetDihedralAtoms()</div><div class="ttdef"><b>Definition:</b> rotor.h:370</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a44db679688b64e9032ea9bf6def76315"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a44db679688b64e9032ea9bf6def76315">OpenBabel::OBRotor::GetDihedralAtoms</a></div><div class="ttdeci">void GetDihedralAtoms(int ref[4])</div><div class="ttdef"><b>Definition:</b> rotor.h:362</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a33bdb71641015f05a632ffaf76e7672a"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a33bdb71641015f05a632ffaf76e7672a">OpenBabel::OBRotor::SetEvalAtoms</a></div><div class="ttdeci">void SetEvalAtoms(OBBitVec &amp;bv)</div><div class="ttdef"><b>Definition:</b> rotor.h:438</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a9dcb9b43a3d0fa9003d4c1c9d921f6b2"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a9dcb9b43a3d0fa9003d4c1c9d921f6b2">OpenBabel::OBRotorRule::IsValid</a></div><div class="ttdeci">bool IsValid()</div><div class="ttdef"><b>Definition:</b> rotor.h:78</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRules_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRules.shtml">OpenBabel::OBRotorRules</a></div><div class="ttdoc">Database of default hybridization torsional rules and SMARTS-defined OBRotorRule objects. </div><div class="ttdef"><b>Definition:</b> rotor.h:101</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a937745b1178a21d8b223992d16d7d50a"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a937745b1178a21d8b223992d16d7d50a">OpenBabel::OBRotor::GetFixedAtoms</a></div><div class="ttdeci">OBBitVec &amp; GetFixedAtoms()</div><div class="ttdef"><b>Definition:</b> rotor.h:432</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a8feebfa38afe9888e7a50e421b8f5243"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a8feebfa38afe9888e7a50e421b8f5243">OpenBabel::OBRotor::GetResolution</a></div><div class="ttdeci">std::vector&lt; double &gt; &amp; GetResolution()</div><div class="ttdef"><b>Definition:</b> rotor.h:442</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_abaa1b786f36fb9bc98b5c46e74425056"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#abaa1b786f36fb9bc98b5c46e74425056">OpenBabel::OBRotorRule::GetDelta</a></div><div class="ttdeci">double GetDelta()</div><div class="ttdef"><b>Definition:</b> rotor.h:86</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a800aee2a9873012ac7e2a1bcedd5c6ba"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">OpenBabel::OBRotorRule::SetDelta</a></div><div class="ttdeci">void SetDelta(double d)</div><div class="ttdoc">Set the resolution (delta) of a torsional step in degrees. </div><div class="ttdef"><b>Definition:</b> rotor.h:84</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a800aee2a9873012ac7e2a1bcedd5c6ba"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">OpenBabel::OBRotor::SetDelta</a></div><div class="ttdeci">void SetDelta(double d)</div><div class="ttdef"><b>Definition:</b> rotor.h:428</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_a610d31fe22e09be685d1bc3e90584e56"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#a610d31fe22e09be685d1bc3e90584e56">OpenBabel::OBRotorList::NextRotor</a></div><div class="ttdeci">OBRotor * NextRotor(OBRotorIterator &amp;i)</div><div class="ttdef"><b>Definition:</b> rotor.h:597</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml">OpenBabel::OBBitVec</a></div><div class="ttdoc">A speed-optimized vector of bits. </div><div class="ttdef"><b>Definition:</b> bitvec.h:57</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_ac65f277d7001f0b88bfeb47c25490995"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#ac65f277d7001f0b88bfeb47c25490995">OpenBabel::OBRotorRule::OBRotorRule</a></div><div class="ttdeci">OBRotorRule(char *buffer, int ref[4], std::vector&lt; double &gt; &amp;vals, double d)</div><div class="ttdef"><b>Definition:</b> rotor.h:60</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_a15266fb4e5ef334d0de47b203d420f22"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#a15266fb4e5ef334d0de47b203d420f22">OpenBabel::OBRotorList::SetQuiet</a></div><div class="ttdeci">void SetQuiet()</div><div class="ttdef"><b>Definition:</b> rotor.h:545</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_a7b470b21b5807f0a9162bef72aebfef9"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#a7b470b21b5807f0a9162bef72aebfef9">OpenBabel::OBRotorList::Size</a></div><div class="ttdeci">size_t Size()</div><div class="ttdef"><b>Definition:</b> rotor.h:487</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_a1df6b471196fede2ca7816bdb48a55c4"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#a1df6b471196fede2ca7816bdb48a55c4">OpenBabel::OBRotorKeys::OBRotorKeys</a></div><div class="ttdeci">OBRotorKeys()</div><div class="ttdoc">A class to generate all possible rotorKeys. </div><div class="ttdef"><b>Definition:</b> rotor.h:752</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a06d5fdac08688bdff198a92c78bdeb69"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a06d5fdac08688bdff198a92c78bdeb69">OpenBabel::OBRotor::BeginTorIncrement</a></div><div class="ttdeci">std::vector&lt; double &gt;::iterator BeginTorIncrement()</div><div class="ttdef"><b>Definition:</b> rotor.h:413</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_addb143a5ae2f64420fa692a14489288b"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#addb143a5ae2f64420fa692a14489288b">OpenBabel::OBRotorList::Init</a></div><div class="ttdeci">void Init(std::string &amp;fname)</div><div class="ttdef"><b>Definition:</b> rotor.h:537</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml">OpenBabel::OBSmartsPattern</a></div><div class="ttdoc">SMARTS (SMiles ARbitrary Target Specification) substructure searching. </div><div class="ttdef"><b>Definition:</b> parsmart.h:154</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_a0911c08e37e43925167a51149d143e3a"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#a0911c08e37e43925167a51149d143e3a">OpenBabel::OBRotorList::BeginRotor</a></div><div class="ttdeci">OBRotor * BeginRotor(OBRotorIterator &amp;i)</div><div class="ttdef"><b>Definition:</b> rotor.h:588</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_a0ea664b7db8e291318eda525a542aa7f"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#a0ea664b7db8e291318eda525a542aa7f">OpenBabel::OBRotorKeys::GetKey</a></div><div class="ttdeci">std::vector&lt; int &gt; GetKey()</div><div class="ttdef"><b>Definition:</b> rotor.h:802</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_a978846687be54138173a299d169bce37"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#a978846687be54138173a299d169bce37">OpenBabel::OBRotorKeys::AddRotor</a></div><div class="ttdeci">void AddRotor(unsigned int size)</div><div class="ttdef"><b>Definition:</b> rotor.h:775</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml">OpenBabel::OBRotorKeys</a></div><div class="ttdoc">A class to generate all possible rotorKeys. </div><div class="ttdef"><b>Definition:</b> rotor.h:703</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_af5b2891615e85e4fb9ff52d2931c6170"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#af5b2891615e85e4fb9ff52d2931c6170">OpenBabel::OBRotorList::IdentifyEvalAtoms</a></div><div class="ttdeci">bool IdentifyEvalAtoms(OBMol &amp;mol)</div><div class="ttdef"><b>Definition:</b> rotor.h:616</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_ab263260a251aaa20610c7ca9dba31491"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#ab263260a251aaa20610c7ca9dba31491">OpenBabel::OBRotor::SetFixedBonds</a></div><div class="ttdeci">void SetFixedBonds(OBBitVec &amp;bv)</div><div class="ttdef"><b>Definition:</b> rotor.h:207</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_aa68d318d4f18049ca83fbbe8d1c5fa90"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#aa68d318d4f18049ca83fbbe8d1c5fa90">OpenBabel::OBRotor::GetRotAtoms</a></div><div class="ttdeci">void * GetRotAtoms()</div><div class="ttdef"><b>Definition:</b> rotor.h:440</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_a5e2ff872d231d1a136588edf2f214812"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#a5e2ff872d231d1a136588edf2f214812">OpenBabel::OBRotorKeys::NumKeys</a></div><div class="ttdeci">unsigned int NumKeys()</div><div class="ttdoc">Number of rotor keys (= number of possible conformers) </div><div class="ttdef"><b>Definition:</b> rotor.h:763</div></div>
<div class="ttc" id="typer_8h_shtml"><div class="ttname"><a href="typer_8h.shtml">typer.h</a></div><div class="ttdoc">Open Babel atom and aromaticity typer. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a0d37d5e994df8c97fe401ee821a3cbe7"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a0d37d5e994df8c97fe401ee821a3cbe7">OpenBabel::OBRotor::SetTorsionValues</a></div><div class="ttdeci">void SetTorsionValues(std::vector&lt; double &gt; &amp;angles)</div><div class="ttdef"><b>Definition:</b> rotor.h:200</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_abaa1b786f36fb9bc98b5c46e74425056"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#abaa1b786f36fb9bc98b5c46e74425056">OpenBabel::OBRotor::GetDelta</a></div><div class="ttdeci">double GetDelta()</div><div class="ttdef"><b>Definition:</b> rotor.h:430</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a84366a387431ba9c8ed2f3813e60badd"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a84366a387431ba9c8ed2f3813e60badd">OpenBabel::OBRotorRule::GetSmartsString</a></div><div class="ttdeci">std::string &amp; GetSmartsString()</div><div class="ttdef"><b>Definition:</b> rotor.h:90</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a00e2cf7f72570502a2e543e85499b1cc"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a00e2cf7f72570502a2e543e85499b1cc">OpenBabel::OBRotor::SetToAngle</a></div><div class="ttdeci">void SetToAngle(double *coordinates, double setang)</div><div class="ttdef"><b>Definition:</b> rotor.h:220</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml">OpenBabel::OBRotor</a></div><div class="ttdoc">A single rotatable OBBond as part of rotamer searching. </div><div class="ttdef"><b>Definition:</b> rotor.h:135</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRules_shtml_a3bf46031273468cc23720df1c59d3e85"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRules.shtml#a3bf46031273468cc23720df1c59d3e85">OpenBabel::OBRotorRules::Quiet</a></div><div class="ttdeci">void Quiet()</div><div class="ttdoc">Turn off debugging output from GetRotorIncrements() </div><div class="ttdef"><b>Definition:</b> rotor.h:128</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml">OpenBabel::OBRotorRule</a></div><div class="ttdoc">A rule for torsional conformer searching, defined by a SMARTS pattern. </div><div class="ttdef"><b>Definition:</b> rotor.h:51</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a4e82f80e2cd8faf3bce17c464ab1672c"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a4e82f80e2cd8faf3bce17c464ab1672c">OpenBabel::OBRotor::SetNumCoords</a></div><div class="ttdeci">void SetNumCoords(int nc)</div><div class="ttdef"><b>Definition:</b> rotor.h:444</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a141f8abda99de827deec22f935dc9e31"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a141f8abda99de827deec22f935dc9e31">OpenBabel::OBRotor::GetIdx</a></div><div class="ttdeci">int GetIdx() const</div><div class="ttdef"><b>Definition:</b> rotor.h:355</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_aa71d36872f416feaa853788a7a7a7ef8"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#aa71d36872f416feaa853788a7a7a7ef8">OpenBabel::OBBitVec::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Set all bits to zero. </div><div class="ttdef"><b>Definition:</b> bitvec.cpp:381</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_aa9808cfa0495b4e2859ce504a1f6f117"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#aa9808cfa0495b4e2859ce504a1f6f117">OpenBabel::OBRotorList::HasRingRotors</a></div><div class="ttdeci">bool HasRingRotors()</div><div class="ttdef"><b>Definition:</b> rotor.h:514</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_a8e12342fc420701fbffd97025421575a"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#a8e12342fc420701fbffd97025421575a">OpenBabel::OBBitVec::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Are there no bits set to 1 in this vector? </div><div class="ttdef"><b>Definition:</b> bitvec.cpp:297</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a0595d2cb4644a0491448a4c001edbb71"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">OpenBabel::OBRotor::GetTorsionValues</a></div><div class="ttdeci">const std::vector&lt; double &gt; &amp; GetTorsionValues() const</div><div class="ttdef"><b>Definition:</b> rotor.h:385</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a434f394d0613a8ef6c119670ff49710f"><div class="ttname"><a href="namespaceOpenBabel.shtml#a434f394d0613a8ef6c119670ff49710f">OpenBabel::OBRotorIterator</a></div><div class="ttdeci">std::vector&lt; OBRotor * &gt;::iterator OBRotorIterator</div><div class="ttdoc">A standard iterator over a vector of rotors. </div><div class="ttdef"><b>Definition:</b> rotor.h:451</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_ab690ce98b2f06352f9079eeae94da3c4"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#ab690ce98b2f06352f9079eeae94da3c4">OpenBabel::OBRotor::GetEvalAtoms</a></div><div class="ttdeci">OBBitVec &amp; GetEvalAtoms()</div><div class="ttdef"><b>Definition:</b> rotor.h:436</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a111e26305dbd8f7c211cc259dff440e7"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a111e26305dbd8f7c211cc259dff440e7">OpenBabel::OBRotorRule::GetTorsionVals</a></div><div class="ttdeci">std::vector&lt; double &gt; &amp; GetTorsionVals()</div><div class="ttdef"><b>Definition:</b> rotor.h:88</div></div>
<div class="ttc" id="bitvec_8h_shtml"><div class="ttname"><a href="bitvec_8h.shtml">bitvec.h</a></div><div class="ttdoc">Fast and efficient bitstring class. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a8041f518c97fbbb908c888f1c8309b27"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a8041f518c97fbbb908c888f1c8309b27">OpenBabel::OBRotor::GetRotAtoms</a></div><div class="ttdeci">const std::vector&lt; int &gt; &amp; GetRotAtoms() const</div><div class="ttdef"><b>Definition:</b> rotor.h:378</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_ab90ce667d180e55f26e7054ed1c6c8b1"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#ab90ce667d180e55f26e7054ed1c6c8b1">OpenBabel::OBSmartsPattern::Init</a></div><div class="ttdeci">bool Init(const char *pattern)</div><div class="ttdef"><b>Definition:</b> parsmart.cpp:1712</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_a9168b57d7fd7c6ac082ab7349e6c82df"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#a9168b57d7fd7c6ac082ab7349e6c82df">OpenBabel::OBRotorList::BeginRotors</a></div><div class="ttdeci">OBRotorIterator BeginRotors()</div><div class="ttdef"><b>Definition:</b> rotor.h:605</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_ade6c00d93af1e19168894486ad6cbdba"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#ade6c00d93af1e19168894486ad6cbdba">OpenBabel::OBRotorList::SetFixedBonds</a></div><div class="ttdeci">void SetFixedBonds(OBBitVec &amp;fix)</div><div class="ttdef"><b>Definition:</b> rotor.h:529</div></div>
<div class="ttc" id="parsmart_8h_shtml"><div class="ttname"><a href="parsmart_8h.shtml">parsmart.h</a></div><div class="ttdoc">Daylight SMARTS parser. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_ac5857c1e09978240624038b2c6352dcc"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#ac5857c1e09978240624038b2c6352dcc">OpenBabel::OBRotor::EndTorIncrement</a></div><div class="ttdeci">std::vector&lt; double &gt;::iterator EndTorIncrement()</div><div class="ttdef"><b>Definition:</b> rotor.h:417</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRules_shtml_adeb3abe4bd6c3443362068379a6b665e"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRules.shtml#adeb3abe4bd6c3443362068379a6b665e">OpenBabel::OBRotorRules::SetFilename</a></div><div class="ttdeci">void SetFilename(std::string &amp;s)</div><div class="ttdoc">Set the filename to be used for the database. Default = torlib.txt. </div><div class="ttdef"><b>Definition:</b> rotor.h:117</div></div>
<div class="ttc" id="classOpenBabel_1_1OBGlobalDataBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBGlobalDataBase.shtml">OpenBabel::OBGlobalDataBase</a></div><div class="ttdoc">Base data table class, handles reading data files. </div><div class="ttdef"><b>Definition:</b> data.h:48</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_aac6c765496e1602cdf8a2160251cce9e"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#aac6c765496e1602cdf8a2160251cce9e">OpenBabel::OBRotorList::EndRotors</a></div><div class="ttdeci">OBRotorIterator EndRotors()</div><div class="ttdef"><b>Definition:</b> rotor.h:609</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
<div class="ttc" id="classOpenBabel_1_1OBGlobalDataBase_shtml_a1e3b6d38df0786ccf7f938d60e386aae"><div class="ttname"><a href="classOpenBabel_1_1OBGlobalDataBase.shtml#a1e3b6d38df0786ccf7f938d60e386aae">OpenBabel::OBGlobalDataBase::Init</a></div><div class="ttdeci">void Init()</div><div class="ttdoc">Read in the data file, falling back as needed. </div><div class="ttdef"><b>Definition:</b> data.cpp:666</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a236044823d65dffe4868c831e45a157b"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a236044823d65dffe4868c831e45a157b">OpenBabel::OBRotorRule::~OBRotorRule</a></div><div class="ttdeci">~OBRotorRule()</div><div class="ttdef"><b>Definition:</b> rotor.h:68</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a1b723190c734e234d87398f8eb245a8e"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a1b723190c734e234d87398f8eb245a8e">OpenBabel::OBRotor::GetBond</a></div><div class="ttdeci">OBBond * GetBond()</div><div class="ttdef"><b>Definition:</b> rotor.h:340</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Oct 15 2019 21:28:04 for Open Babel by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
