<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open Babel: obutil.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open Babel
   &#160;<span id="projectnumber">3.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">obutil.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="obutil_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">obutil.h - Various utility methods.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifndef OB_UTIL_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#define OB_UTIL_H</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;iosfwd&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#if TIME_WITH_SYS_TIME</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;sys/time.h&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;time.h&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#if HAVE_SYS_TIME_H</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;sys/time.h&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;time.h&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#include &lt;math.h&gt;</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#ifndef M_PI</span></div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="obutil_8h.shtml#ae71449b1cc6e6250b91f539153a7a0d3">   42</a></span>&#160;<span class="preprocessor">#define M_PI 3.14159265358979323846</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="comment">// class introduction in obutil.cpp</span></div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBStopwatch.shtml">   49</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBStopwatch.shtml">OBStopwatch</a></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#if HAVE_CLOCK_T</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    clock_t start; </div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    clock_t stop;  </div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    timeval start; </div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    timeval stop;  </div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">#if HAVE_CLOCK_T</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordtype">void</span>  Start()</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      start= clock();</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordtype">double</span> Lap()</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      stop= clock();</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      <span class="keywordflow">return</span>((stop - start) / (<span class="keywordtype">double</span>) CLOCKS_PER_SEC);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">void</span> Start()</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      gettimeofday(&amp;start, NULL);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBStopwatch.shtml#a594d12c3e3c5ff7b9903a4bdc24ea1b4">   80</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBStopwatch.shtml#a594d12c3e3c5ff7b9903a4bdc24ea1b4">Lap</a>()</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      gettimeofday(&amp;stop, NULL);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      <span class="keywordflow">return</span>((stop.tv_sec - start.tv_sec)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;             + (stop.tv_usec - start.tv_usec)/1000000.0);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBStopwatch.shtml#a9e01ac3f5e0f092b6dffe54421ce9c33">   89</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBStopwatch.shtml#a9e01ac3f5e0f092b6dffe54421ce9c33">Elapsed</a>()</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      <span class="keywordflow">return</span>(Lap());</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  };</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSqrtTbl.shtml">   98</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml">OBSqrtTbl</a></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  {</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordtype">double</span> _max,_incr,*_tbl;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSqrtTbl.shtml#af238629f406442e9c3e03aab5f92e5db">  102</a></span>&#160;  <a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#af238629f406442e9c3e03aab5f92e5db">OBSqrtTbl</a>():</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    _max(0.0), _incr(0.0),  _tbl(NULL)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      { }</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSqrtTbl.shtml#a9184aa6879afeed8d2b2e9bdc9331fce">  109</a></span>&#160;  <a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#a9184aa6879afeed8d2b2e9bdc9331fce">OBSqrtTbl</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> max, <span class="keyword">const</span> <span class="keywordtype">double</span> incr):</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    _max(max*max), _incr(incr), _tbl(NULL)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        Init(max,incr);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      }</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSqrtTbl.shtml#ac88c1cb13c0f062f244660ed46baea4d">  114</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#ac88c1cb13c0f062f244660ed46baea4d">~OBSqrtTbl</a>()</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">if</span> (_tbl)</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;          {</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keyword">delete</span> [] _tbl;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            _tbl = NULL;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;          }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      }</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSqrtTbl.shtml#aa6ee1e071d972c9705b60eadc3428c0b">  124</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#aa6ee1e071d972c9705b60eadc3428c0b">Sqrt</a>(<span class="keywordtype">double</span> d2)<span class="keyword"> const</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      <span class="keywordflow">if</span> (_tbl)</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">return</span>((d2 &lt; _max) ? _tbl[static_cast&lt;int&gt;(d2*_incr)]:sqrt(d2));</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      <span class="keywordflow">else</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">return</span> 0.0;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">  134</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">Init</a>(<span class="keywordtype">double</span> max,<span class="keywordtype">double</span> incr)</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      <span class="comment">// parameters are potentially unneeded, but let&#39;s do this until we can</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      <span class="comment">// deprecate them</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      _max = max * max;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      _incr = incr;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      <span class="comment">//array size needs to be large enough to account for fp error</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      <span class="keywordtype">int</span> i;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      <span class="keywordtype">double</span> r;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      _tbl = <span class="keyword">new</span> <span class="keywordtype">double</span> [<span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>((_max/_incr)+10)];</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      <span class="keywordflow">for</span> (r = (_incr/2.0),i=0;r &lt;= _max;r += _incr,++i)</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        _tbl[i] = sqrt(r);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      _incr = 1/_incr;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  };</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="comment">//***RMS helper methods***/</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#ifndef __KCC</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span> {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#a60625165cc16932d1c2f34976dbc54dd">rotate_coords</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span> m[3][3],<span class="keywordtype">unsigned</span>);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a25d610b9255993505f2dbdd9690d068f">calc_rms</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#a60625165cc16932d1c2f34976dbc54dd">rotate_coords</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span> m[3][3],<span class="keywordtype">unsigned</span>);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a25d610b9255993505f2dbdd9690d068f">calc_rms</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">#ifndef SWIG</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="comment">// Documentation in obutil.cpp</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#aae157b7c5a3145dff9e938888d41d46f">ToUpper</a>(std::string&amp;);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#aae157b7c5a3145dff9e938888d41d46f">ToUpper</a>(<span class="keywordtype">char</span>*);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a8e8df618618aa53bf4cf202b0230c7ac">ToLower</a>(std::string&amp;);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a8e8df618618aa53bf4cf202b0230c7ac">ToLower</a>(<span class="keywordtype">char</span> *);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#ae254bae8e13592739edfdf24b917a943">InvertCase</a>(std::string&amp;, <span class="keywordtype">int</span>);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#ae254bae8e13592739edfdf24b917a943">InvertCase</a>(<span class="keywordtype">char</span> *);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#ae7fd604c6cfd7cbb0067721106af8ca9">CleanAtomType</a>(<span class="keywordtype">char</span>*);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a4216f2e0672bf6a9ee72d3029838a213">OBCompareInt</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;a,<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;b);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#abb48ec7a1b3301248a1147cf2dbbe600">OBCompareUnsigned</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;a,<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;b);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a362770307f86a3b9acd494d9ccbbcf51">IsNear</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> epsilon=2e-6);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a29e51098e105d63b04b5517299d1b772">IsNearZero</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;, <span class="keyword">const</span> <span class="keywordtype">double</span> epsilon=2e-6);</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a227ab5b29e8122dd6d8ac76d2b58778a">IsNan</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;);</div><div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#ae3802301a4e7c389095313a77861a959">  204</a></span>&#160;  OBAPI <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#ae3802301a4e7c389095313a77861a959">IsNegligible</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp; a, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; b,</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">double</span> precision = 1e-11)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span>( fabs(a) &lt;= precision * fabs(b) );</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  }</div><div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">  226</a></span>&#160;  OBAPI <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">IsApprox</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp; a, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; b,</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                             <span class="keyword">const</span> <span class="keywordtype">double</span> precision = 1e-11)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">return</span>( fabs(a - b) &lt;= precision * std::min&lt;const double&gt;( fabs(a), fabs(b) ) );</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  }</div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a470b9e69978e49f27b85b48077bd7c72">  232</a></span>&#160;  OBAPI <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a470b9e69978e49f27b85b48077bd7c72">IsApprox_pos</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;a, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;b,</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                 <span class="keyword">const</span> <span class="keywordtype">double</span> precision = 1e-11)</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  {</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">return</span>( fabs(a - b) &lt;= precision * std::min&lt;const double&gt;( a, b ) );</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  }</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a95b1c21368d148cb45ac6f604984c357">CanBeSquared</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> &amp;);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a1e68658ca81568e214ebedb8f6c4bd10">SafeOpen</a>(std::ifstream &amp;fs, <span class="keyword">const</span> <span class="keywordtype">char</span> *filename);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a1e68658ca81568e214ebedb8f6c4bd10">SafeOpen</a>(std::ofstream &amp;fs, <span class="keyword">const</span> <span class="keywordtype">char</span> *filename);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  <span class="comment">// (end part to be skipped by SWIG)</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="comment">//******************triple template*************************</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2, <span class="keyword">class</span> T3&gt;</div><div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1triple.shtml">  251</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1triple.shtml">triple</a></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    {</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      <span class="comment">//type names for the values</span></div><div class="line"><a name="l00254"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1triple.shtml#a2ff1057d713f47338b9b6c4a60e5ab87">  254</a></span>&#160;      <span class="keyword">typedef</span> T1 <a class="code" href="structOpenBabel_1_1triple.shtml#a2ff1057d713f47338b9b6c4a60e5ab87">first_type</a>;</div><div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1triple.shtml#a75b41637f35c1f6bbf8ec5c0ebb79728">  255</a></span>&#160;      <span class="keyword">typedef</span> T2 <a class="code" href="structOpenBabel_1_1triple.shtml#a75b41637f35c1f6bbf8ec5c0ebb79728">second_type</a>;</div><div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1triple.shtml#a32442a804e500a7dc9ecb4a3feeb143d">  256</a></span>&#160;      <span class="keyword">typedef</span> T3 <a class="code" href="structOpenBabel_1_1triple.shtml#a32442a804e500a7dc9ecb4a3feeb143d">third_type</a>;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      <span class="comment">//member</span></div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1triple.shtml#ae885a6822c40e26649c9dd8b476942f8">  259</a></span>&#160;      T1 <a class="code" href="structOpenBabel_1_1triple.shtml#ae885a6822c40e26649c9dd8b476942f8">first</a>;</div><div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1triple.shtml#a9a8a97f32d498c09c0f1f82c8a67bd6f">  260</a></span>&#160;      T2 <a class="code" href="structOpenBabel_1_1triple.shtml#a9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>;</div><div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1triple.shtml#ab02b336e2ad870f773affd07b0f68ef8">  261</a></span>&#160;      T3 <a class="code" href="structOpenBabel_1_1triple.shtml#ab02b336e2ad870f773affd07b0f68ef8">third</a>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1triple.shtml#a87aa95191f543f716183080f7bfcbfd0">  266</a></span>&#160;    <a class="code" href="structOpenBabel_1_1triple.shtml#a87aa95191f543f716183080f7bfcbfd0">triple</a>():</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      first(T1()),second(T2()),third(T3())</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;      {}</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1triple.shtml#aa519d64ebe02cf77be9fce8401bbfc59">  271</a></span>&#160;    <a class="code" href="structOpenBabel_1_1triple.shtml#aa519d64ebe02cf77be9fce8401bbfc59">triple</a>(<span class="keyword">const</span> T1 &amp;a, <span class="keyword">const</span> T2 &amp;b, <span class="keyword">const</span> T3 &amp;c):</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      first(a), second(b), third(c)</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      {}</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">class</span> U, <span class="keyword">class</span> V, <span class="keyword">class</span> W&gt;</div><div class="line"><a name="l00277"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1triple.shtml#afee4dc46913f1067c86f65ac9de2886f">  277</a></span>&#160;        <a class="code" href="structOpenBabel_1_1triple.shtml#afee4dc46913f1067c86f65ac9de2886f">triple</a>(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1triple.shtml">triple&lt;U,V,W&gt;</a> &amp;t):</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        first(t.first), second(t.second), third(t.third)</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      {}</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    };</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="comment">//**************quad template********************</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2, <span class="keyword">class</span> T3, <span class="keyword">class</span> T4&gt;</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml">  287</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1quad.shtml">quad</a></div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;      <span class="comment">//type names for the values</span></div><div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml#a2ff1057d713f47338b9b6c4a60e5ab87">  290</a></span>&#160;      <span class="keyword">typedef</span> T1 <a class="code" href="structOpenBabel_1_1quad.shtml#a2ff1057d713f47338b9b6c4a60e5ab87">first_type</a>;</div><div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml#a75b41637f35c1f6bbf8ec5c0ebb79728">  291</a></span>&#160;      <span class="keyword">typedef</span> T2 <a class="code" href="structOpenBabel_1_1quad.shtml#a75b41637f35c1f6bbf8ec5c0ebb79728">second_type</a>;</div><div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml#a32442a804e500a7dc9ecb4a3feeb143d">  292</a></span>&#160;      <span class="keyword">typedef</span> T3 <a class="code" href="structOpenBabel_1_1quad.shtml#a32442a804e500a7dc9ecb4a3feeb143d">third_type</a>;</div><div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml#a003e496cf073cdc37c84c12aecee9605">  293</a></span>&#160;      <span class="keyword">typedef</span> T4 <a class="code" href="structOpenBabel_1_1quad.shtml#a003e496cf073cdc37c84c12aecee9605">fourth_type</a>;</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;      <span class="comment">//member</span></div><div class="line"><a name="l00296"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml#ae885a6822c40e26649c9dd8b476942f8">  296</a></span>&#160;      T1 <a class="code" href="structOpenBabel_1_1quad.shtml#ae885a6822c40e26649c9dd8b476942f8">first</a>;</div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml#a9a8a97f32d498c09c0f1f82c8a67bd6f">  297</a></span>&#160;      T2 <a class="code" href="structOpenBabel_1_1quad.shtml#a9a8a97f32d498c09c0f1f82c8a67bd6f">second</a>;</div><div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml#ab02b336e2ad870f773affd07b0f68ef8">  298</a></span>&#160;      T3 <a class="code" href="structOpenBabel_1_1quad.shtml#ab02b336e2ad870f773affd07b0f68ef8">third</a>;</div><div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml#a603db4ed74155df96d6d73e4287baf66">  299</a></span>&#160;      T4 <a class="code" href="structOpenBabel_1_1quad.shtml#a603db4ed74155df96d6d73e4287baf66">fourth</a>;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml#a2e71f961e39f3cad1898d5adee3ab328">  304</a></span>&#160;    <a class="code" href="structOpenBabel_1_1quad.shtml#a2e71f961e39f3cad1898d5adee3ab328">quad</a>():</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;      first(T1()),second(T2()),third(T3()),fourth(T4())</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;      {}</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml#abfcbd8a7eb6b09894cba7994ef1a3eac">  309</a></span>&#160;    <a class="code" href="structOpenBabel_1_1quad.shtml#abfcbd8a7eb6b09894cba7994ef1a3eac">quad</a>(<span class="keyword">const</span> T1 &amp;a, <span class="keyword">const</span> T2 &amp;b, <span class="keyword">const</span> T3 &amp;c, <span class="keyword">const</span> T4 &amp;d):</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;      first(a), second(b), third(c), fourth(d)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;      {}</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">class</span> U, <span class="keyword">class</span> V, <span class="keyword">class</span> W, <span class="keyword">class</span> X&gt;</div><div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1quad.shtml#afb54f6bdd9b1b58db2ca1b8adb78b16b">  315</a></span>&#160;        <a class="code" href="structOpenBabel_1_1quad.shtml#afb54f6bdd9b1b58db2ca1b8adb78b16b">quad</a>(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1quad.shtml">quad&lt;U,V,W,X&gt;</a> &amp;q):</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        first(q.first), second(q.second), third(q.third), fourth(q.fourth)</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;      {}</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    };</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;} <span class="comment">// end namespace OpenBabel</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="preprocessor">#endif // OBUTIL_H</span></div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="ttc" id="structOpenBabel_1_1quad_shtml_a32442a804e500a7dc9ecb4a3feeb143d"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml#a32442a804e500a7dc9ecb4a3feeb143d">OpenBabel::quad::third_type</a></div><div class="ttdeci">T3 third_type</div><div class="ttdef"><b>Definition:</b> obutil.h:292</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a362770307f86a3b9acd494d9ccbbcf51"><div class="ttname"><a href="namespaceOpenBabel.shtml#a362770307f86a3b9acd494d9ccbbcf51">OpenBabel::IsNear</a></div><div class="ttdeci">bool IsNear(const double &amp;, const double &amp;, const double epsilon=2e-6)</div><div class="ttdoc">Comparison for doubles: returns fabs(a - b) &lt; epsilon. </div><div class="ttdef"><b>Definition:</b> obutil.cpp:80</div></div>
<div class="ttc" id="structOpenBabel_1_1triple_shtml_a75b41637f35c1f6bbf8ec5c0ebb79728"><div class="ttname"><a href="structOpenBabel_1_1triple.shtml#a75b41637f35c1f6bbf8ec5c0ebb79728">OpenBabel::triple::second_type</a></div><div class="ttdeci">T2 second_type</div><div class="ttdef"><b>Definition:</b> obutil.h:255</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSqrtTbl_shtml_ac88c1cb13c0f062f244660ed46baea4d"><div class="ttname"><a href="classOpenBabel_1_1OBSqrtTbl.shtml#ac88c1cb13c0f062f244660ed46baea4d">OpenBabel::OBSqrtTbl::~OBSqrtTbl</a></div><div class="ttdeci">~OBSqrtTbl()</div><div class="ttdef"><b>Definition:</b> obutil.h:114</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a4216f2e0672bf6a9ee72d3029838a213"><div class="ttname"><a href="namespaceOpenBabel.shtml#a4216f2e0672bf6a9ee72d3029838a213">OpenBabel::OBCompareInt</a></div><div class="ttdeci">bool OBCompareInt(const int &amp;a, const int &amp;b)</div><div class="ttdef"><b>Definition:</b> obutil.cpp:68</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a227ab5b29e8122dd6d8ac76d2b58778a"><div class="ttname"><a href="namespaceOpenBabel.shtml#a227ab5b29e8122dd6d8ac76d2b58778a">OpenBabel::IsNan</a></div><div class="ttdeci">bool IsNan(const double &amp;)</div><div class="ttdoc">Comparison for nan (not a number) </div><div class="ttdef"><b>Definition:</b> obutil.cpp:92</div></div>
<div class="ttc" id="structOpenBabel_1_1quad_shtml_afb54f6bdd9b1b58db2ca1b8adb78b16b"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml#afb54f6bdd9b1b58db2ca1b8adb78b16b">OpenBabel::quad::quad</a></div><div class="ttdeci">quad(const quad&lt; U, V, W, X &gt; &amp;q)</div><div class="ttdoc">copy constructor with implicit conversions </div><div class="ttdef"><b>Definition:</b> obutil.h:315</div></div>
<div class="ttc" id="structOpenBabel_1_1triple_shtml_ae885a6822c40e26649c9dd8b476942f8"><div class="ttname"><a href="structOpenBabel_1_1triple.shtml#ae885a6822c40e26649c9dd8b476942f8">OpenBabel::triple::first</a></div><div class="ttdeci">T1 first</div><div class="ttdef"><b>Definition:</b> obutil.h:259</div></div>
<div class="ttc" id="structOpenBabel_1_1quad_shtml_a9a8a97f32d498c09c0f1f82c8a67bd6f"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml#a9a8a97f32d498c09c0f1f82c8a67bd6f">OpenBabel::quad::second</a></div><div class="ttdeci">T2 second</div><div class="ttdef"><b>Definition:</b> obutil.h:297</div></div>
<div class="ttc" id="structOpenBabel_1_1quad_shtml_a603db4ed74155df96d6d73e4287baf66"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml#a603db4ed74155df96d6d73e4287baf66">OpenBabel::quad::fourth</a></div><div class="ttdeci">T4 fourth</div><div class="ttdef"><b>Definition:</b> obutil.h:299</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSqrtTbl_shtml_af238629f406442e9c3e03aab5f92e5db"><div class="ttname"><a href="classOpenBabel_1_1OBSqrtTbl.shtml#af238629f406442e9c3e03aab5f92e5db">OpenBabel::OBSqrtTbl::OBSqrtTbl</a></div><div class="ttdeci">OBSqrtTbl()</div><div class="ttdef"><b>Definition:</b> obutil.h:102</div></div>
<div class="ttc" id="structOpenBabel_1_1quad_shtml_abfcbd8a7eb6b09894cba7994ef1a3eac"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml#abfcbd8a7eb6b09894cba7994ef1a3eac">OpenBabel::quad::quad</a></div><div class="ttdeci">quad(const T1 &amp;a, const T2 &amp;b, const T3 &amp;c, const T4 &amp;d)</div><div class="ttdoc">constructor for 3 values </div><div class="ttdef"><b>Definition:</b> obutil.h:309</div></div>
<div class="ttc" id="structOpenBabel_1_1triple_shtml_a9a8a97f32d498c09c0f1f82c8a67bd6f"><div class="ttname"><a href="structOpenBabel_1_1triple.shtml#a9a8a97f32d498c09c0f1f82c8a67bd6f">OpenBabel::triple::second</a></div><div class="ttdeci">T2 second</div><div class="ttdef"><b>Definition:</b> obutil.h:260</div></div>
<div class="ttc" id="structOpenBabel_1_1quad_shtml"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml">OpenBabel::quad</a></div><div class="ttdoc">A 4-element templated, based on the design of the STL pair&lt;&gt; </div><div class="ttdef"><b>Definition:</b> obutil.h:287</div></div>
<div class="ttc" id="structOpenBabel_1_1triple_shtml_a32442a804e500a7dc9ecb4a3feeb143d"><div class="ttname"><a href="structOpenBabel_1_1triple.shtml#a32442a804e500a7dc9ecb4a3feeb143d">OpenBabel::triple::third_type</a></div><div class="ttdeci">T3 third_type</div><div class="ttdef"><b>Definition:</b> obutil.h:256</div></div>
<div class="ttc" id="structOpenBabel_1_1triple_shtml_ab02b336e2ad870f773affd07b0f68ef8"><div class="ttname"><a href="structOpenBabel_1_1triple.shtml#ab02b336e2ad870f773affd07b0f68ef8">OpenBabel::triple::third</a></div><div class="ttdeci">T3 third</div><div class="ttdef"><b>Definition:</b> obutil.h:261</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_af464b3279bc3db8c58ca552ddb0e8e79"><div class="ttname"><a href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">OpenBabel::IsApprox</a></div><div class="ttdeci">bool IsApprox(const double &amp;a, const double &amp;b, const double precision=1e-11)</div><div class="ttdef"><b>Definition:</b> obutil.h:226</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSqrtTbl_shtml_aa6ee1e071d972c9705b60eadc3428c0b"><div class="ttname"><a href="classOpenBabel_1_1OBSqrtTbl.shtml#aa6ee1e071d972c9705b60eadc3428c0b">OpenBabel::OBSqrtTbl::Sqrt</a></div><div class="ttdeci">double Sqrt(double d2) const</div><div class="ttdoc">Fast square root calculation using a lookup table. </div><div class="ttdef"><b>Definition:</b> obutil.h:124</div></div>
<div class="ttc" id="structOpenBabel_1_1triple_shtml_a87aa95191f543f716183080f7bfcbfd0"><div class="ttname"><a href="structOpenBabel_1_1triple.shtml#a87aa95191f543f716183080f7bfcbfd0">OpenBabel::triple::triple</a></div><div class="ttdeci">triple()</div><div class="ttdef"><b>Definition:</b> obutil.h:266</div></div>
<div class="ttc" id="structOpenBabel_1_1triple_shtml"><div class="ttname"><a href="structOpenBabel_1_1triple.shtml">OpenBabel::triple</a></div><div class="ttdoc">A 3-element templated, based on the design of the STL pair&lt;&gt; </div><div class="ttdef"><b>Definition:</b> obutil.h:251</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a60625165cc16932d1c2f34976dbc54dd"><div class="ttname"><a href="namespaceOpenBabel.shtml#a60625165cc16932d1c2f34976dbc54dd">OpenBabel::rotate_coords</a></div><div class="ttdeci">void rotate_coords(double *, double m[3][3], unsigned)</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSqrtTbl_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBSqrtTbl.shtml">OpenBabel::OBSqrtTbl</a></div><div class="ttdoc">Square Root lookup table - given a distance squared returns distance. </div><div class="ttdef"><b>Definition:</b> obutil.h:98</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a1e68658ca81568e214ebedb8f6c4bd10"><div class="ttname"><a href="namespaceOpenBabel.shtml#a1e68658ca81568e214ebedb8f6c4bd10">OpenBabel::SafeOpen</a></div><div class="ttdeci">bool SafeOpen(std::ifstream &amp;fs, const char *filename)</div><div class="ttdef"><b>Definition:</b> obutil.cpp:295</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a25d610b9255993505f2dbdd9690d068f"><div class="ttname"><a href="namespaceOpenBabel.shtml#a25d610b9255993505f2dbdd9690d068f">OpenBabel::calc_rms</a></div><div class="ttdeci">double calc_rms(double *, double *, unsigned int)</div><div class="ttdoc">Calculate the RMS deviation between the first N coordinates of *r and *f. </div><div class="ttdef"><b>Definition:</b> obutil.cpp:173</div></div>
<div class="ttc" id="classOpenBabel_1_1OBStopwatch_shtml_a9e01ac3f5e0f092b6dffe54421ce9c33"><div class="ttname"><a href="classOpenBabel_1_1OBStopwatch.shtml#a9e01ac3f5e0f092b6dffe54421ce9c33">OpenBabel::OBStopwatch::Elapsed</a></div><div class="ttdeci">double Elapsed()</div><div class="ttdef"><b>Definition:</b> obutil.h:89</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a29e51098e105d63b04b5517299d1b772"><div class="ttname"><a href="namespaceOpenBabel.shtml#a29e51098e105d63b04b5517299d1b772">OpenBabel::IsNearZero</a></div><div class="ttdeci">bool IsNearZero(const double &amp;, const double epsilon=2e-6)</div><div class="ttdoc">Comparison for doubles: returns fabs(a) &lt; epsilon. </div><div class="ttdef"><b>Definition:</b> obutil.cpp:86</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSqrtTbl_shtml_a01dd1b037ecbe7bd8d23b50689fa6b50"><div class="ttname"><a href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OpenBabel::OBSqrtTbl::Init</a></div><div class="ttdeci">void Init(double max, double incr)</div><div class="ttdoc">Initialize the square root lookup table. </div><div class="ttdef"><b>Definition:</b> obutil.h:134</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSqrtTbl_shtml_a9184aa6879afeed8d2b2e9bdc9331fce"><div class="ttname"><a href="classOpenBabel_1_1OBSqrtTbl.shtml#a9184aa6879afeed8d2b2e9bdc9331fce">OpenBabel::OBSqrtTbl::OBSqrtTbl</a></div><div class="ttdeci">OBSqrtTbl(const double max, const double incr)</div><div class="ttdoc">Create a square root table to handle up to the square root of max (e.g., if you want the square root ...</div><div class="ttdef"><b>Definition:</b> obutil.h:109</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ae3802301a4e7c389095313a77861a959"><div class="ttname"><a href="namespaceOpenBabel.shtml#ae3802301a4e7c389095313a77861a959">OpenBabel::IsNegligible</a></div><div class="ttdeci">bool IsNegligible(const double &amp;a, const double &amp;b, const double precision=1e-11)</div><div class="ttdef"><b>Definition:</b> obutil.h:204</div></div>
<div class="ttc" id="classOpenBabel_1_1OBStopwatch_shtml_a594d12c3e3c5ff7b9903a4bdc24ea1b4"><div class="ttname"><a href="classOpenBabel_1_1OBStopwatch.shtml#a594d12c3e3c5ff7b9903a4bdc24ea1b4">OpenBabel::OBStopwatch::Lap</a></div><div class="ttdeci">double Lap()</div><div class="ttdef"><b>Definition:</b> obutil.h:80</div></div>
<div class="ttc" id="structOpenBabel_1_1quad_shtml_a2e71f961e39f3cad1898d5adee3ab328"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml#a2e71f961e39f3cad1898d5adee3ab328">OpenBabel::quad::quad</a></div><div class="ttdeci">quad()</div><div class="ttdef"><b>Definition:</b> obutil.h:304</div></div>
<div class="ttc" id="structOpenBabel_1_1triple_shtml_aa519d64ebe02cf77be9fce8401bbfc59"><div class="ttname"><a href="structOpenBabel_1_1triple.shtml#aa519d64ebe02cf77be9fce8401bbfc59">OpenBabel::triple::triple</a></div><div class="ttdeci">triple(const T1 &amp;a, const T2 &amp;b, const T3 &amp;c)</div><div class="ttdoc">Constructor for 3 values. </div><div class="ttdef"><b>Definition:</b> obutil.h:271</div></div>
<div class="ttc" id="structOpenBabel_1_1quad_shtml_a2ff1057d713f47338b9b6c4a60e5ab87"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml#a2ff1057d713f47338b9b6c4a60e5ab87">OpenBabel::quad::first_type</a></div><div class="ttdeci">T1 first_type</div><div class="ttdef"><b>Definition:</b> obutil.h:290</div></div>
<div class="ttc" id="structOpenBabel_1_1quad_shtml_ab02b336e2ad870f773affd07b0f68ef8"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml#ab02b336e2ad870f773affd07b0f68ef8">OpenBabel::quad::third</a></div><div class="ttdeci">T3 third</div><div class="ttdef"><b>Definition:</b> obutil.h:298</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a470b9e69978e49f27b85b48077bd7c72"><div class="ttname"><a href="namespaceOpenBabel.shtml#a470b9e69978e49f27b85b48077bd7c72">OpenBabel::IsApprox_pos</a></div><div class="ttdeci">bool IsApprox_pos(const double &amp;a, const double &amp;b, const double precision=1e-11)</div><div class="ttdoc">Same as IsApprox(), but only for positive numbers. Faster. </div><div class="ttdef"><b>Definition:</b> obutil.h:232</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ae7fd604c6cfd7cbb0067721106af8ca9"><div class="ttname"><a href="namespaceOpenBabel.shtml#ae7fd604c6cfd7cbb0067721106af8ca9">OpenBabel::CleanAtomType</a></div><div class="ttdeci">void CleanAtomType(char *)</div><div class="ttdoc">&quot;Clean&quot; the supplied atom type </div><div class="ttdef"><b>Definition:</b> obutil.cpp:427</div></div>
<div class="ttc" id="structOpenBabel_1_1quad_shtml_ae885a6822c40e26649c9dd8b476942f8"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml#ae885a6822c40e26649c9dd8b476942f8">OpenBabel::quad::first</a></div><div class="ttdeci">T1 first</div><div class="ttdef"><b>Definition:</b> obutil.h:296</div></div>
<div class="ttc" id="classOpenBabel_1_1OBStopwatch_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBStopwatch.shtml">OpenBabel::OBStopwatch</a></div><div class="ttdoc">Stopwatch class used for timing length of execution. </div><div class="ttdef"><b>Definition:</b> obutil.h:49</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a8e8df618618aa53bf4cf202b0230c7ac"><div class="ttname"><a href="namespaceOpenBabel.shtml#a8e8df618618aa53bf4cf202b0230c7ac">OpenBabel::ToLower</a></div><div class="ttdeci">void ToLower(std::string &amp;)</div><div class="ttdoc">Shift the supplied string to lowercase. </div><div class="ttdef"><b>Definition:</b> obutil.cpp:379</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ae254bae8e13592739edfdf24b917a943"><div class="ttname"><a href="namespaceOpenBabel.shtml#ae254bae8e13592739edfdf24b917a943">OpenBabel::InvertCase</a></div><div class="ttdeci">void InvertCase(std::string &amp;, int)</div></div>
<div class="ttc" id="structOpenBabel_1_1quad_shtml_a003e496cf073cdc37c84c12aecee9605"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml#a003e496cf073cdc37c84c12aecee9605">OpenBabel::quad::fourth_type</a></div><div class="ttdeci">T4 fourth_type</div><div class="ttdef"><b>Definition:</b> obutil.h:293</div></div>
<div class="ttc" id="structOpenBabel_1_1quad_shtml_a75b41637f35c1f6bbf8ec5c0ebb79728"><div class="ttname"><a href="structOpenBabel_1_1quad.shtml#a75b41637f35c1f6bbf8ec5c0ebb79728">OpenBabel::quad::second_type</a></div><div class="ttdeci">T2 second_type</div><div class="ttdef"><b>Definition:</b> obutil.h:291</div></div>
<div class="ttc" id="structOpenBabel_1_1triple_shtml_afee4dc46913f1067c86f65ac9de2886f"><div class="ttname"><a href="structOpenBabel_1_1triple.shtml#afee4dc46913f1067c86f65ac9de2886f">OpenBabel::triple::triple</a></div><div class="ttdeci">triple(const triple&lt; U, V, W &gt; &amp;t)</div><div class="ttdoc">Copy constructor with implicit conversions. </div><div class="ttdef"><b>Definition:</b> obutil.h:277</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a95b1c21368d148cb45ac6f604984c357"><div class="ttname"><a href="namespaceOpenBabel.shtml#a95b1c21368d148cb45ac6f604984c357">OpenBabel::CanBeSquared</a></div><div class="ttdeci">bool CanBeSquared(const double &amp;)</div><div class="ttdoc">Tests whether its argument can be squared without triggering an overflow or underflow. </div><div class="ttdef"><b>Definition:</b> obutil.cpp:99</div></div>
<div class="ttc" id="structOpenBabel_1_1triple_shtml_a2ff1057d713f47338b9b6c4a60e5ab87"><div class="ttname"><a href="structOpenBabel_1_1triple.shtml#a2ff1057d713f47338b9b6c4a60e5ab87">OpenBabel::triple::first_type</a></div><div class="ttdeci">T1 first_type</div><div class="ttdef"><b>Definition:</b> obutil.h:254</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_abb48ec7a1b3301248a1147cf2dbbe600"><div class="ttname"><a href="namespaceOpenBabel.shtml#abb48ec7a1b3301248a1147cf2dbbe600">OpenBabel::OBCompareUnsigned</a></div><div class="ttdeci">bool OBCompareUnsigned(const unsigned int &amp;a, const unsigned int &amp;b)</div><div class="ttdef"><b>Definition:</b> obutil.cpp:74</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aae157b7c5a3145dff9e938888d41d46f"><div class="ttname"><a href="namespaceOpenBabel.shtml#aae157b7c5a3145dff9e938888d41d46f">OpenBabel::ToUpper</a></div><div class="ttdeci">void ToUpper(std::string &amp;)</div><div class="ttdoc">Shift the supplied string to uppercase. </div><div class="ttdef"><b>Definition:</b> obutil.cpp:359</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Oct 15 2019 21:28:04 for Open Babel by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
