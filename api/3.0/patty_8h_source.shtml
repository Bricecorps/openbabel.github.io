<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Open Babel: patty.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Open Babel
   &#160;<span id="projectnumber">3.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">patty.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="patty_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">patty.h - Programmable atom typer.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifndef OB_PATTY_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#define OB_PATTY_H</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="parsmart_8h.shtml">openbabel/parsmart.h</a>&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="patty_8h.shtml#a2a2286006e4671f9e83d0dafedc66084">   27</a></span>&#160;<span class="preprocessor">#define PT_CATION      1</span></div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="patty_8h.shtml#ae5a129598c2245d32f734eb3d5706f1c">   28</a></span>&#160;<span class="preprocessor">#define PT_ANION       2</span></div><div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="patty_8h.shtml#a924c4b6cc41fb6b4a6b644d2f6d7629b">   29</a></span>&#160;<span class="preprocessor">#define PT_ACCEPTOR    3</span></div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="patty_8h.shtml#a3ff047ed46dc33b4198f54b03e12a943">   30</a></span>&#160;<span class="preprocessor">#define PT_POLAR       4</span></div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="patty_8h.shtml#ad1e98d373b6f8d8011a96c0f8292d6c8">   31</a></span>&#160;<span class="preprocessor">#define PT_DONOR       5</span></div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="patty_8h.shtml#a13c623cd8f81001954f19e7b578e1915">   32</a></span>&#160;<span class="preprocessor">#define PT_HYDROPHOBIC 6</span></div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="patty_8h.shtml#a2d27e913cc25b872557aae97750d9667">   33</a></span>&#160;<span class="preprocessor">#define PT_OTHER       7</span></div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="patty_8h.shtml#ab9387da40d787d377d059e9ef7de77be">   34</a></span>&#160;<span class="preprocessor">#define PT_METAL           8</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">// class introduction in patty.cpp</span></div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1patty.shtml">   37</a></span>&#160;<span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1patty.shtml">patty</a></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    std::vector&lt;OBSmartsPattern*&gt; _sp;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    std::vector&lt;std::string&gt; smarts;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    std::vector&lt;std::string&gt; typ;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordtype">bool</span> debug;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;public :</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1patty.shtml#aaaee844f53e42a1ee6223ddb8beb89a0">   46</a></span>&#160;    <a class="code" href="classOpenBabel_1_1patty.shtml#aaaee844f53e42a1ee6223ddb8beb89a0">patty</a>()</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        debug = <span class="keyword">false</span>;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    }</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1patty.shtml#a102e2b842e9f4ba368beb179887a9372">   50</a></span>&#160;    <a class="code" href="classOpenBabel_1_1patty.shtml#a102e2b842e9f4ba368beb179887a9372">patty</a>(<span class="keywordtype">char</span> *s)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        debug = <span class="keyword">false</span>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        read_rules(std::string(s));</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1patty.shtml#ac13d841afa2efae018835cc11f8cdb3a">   56</a></span>&#160;    <a class="code" href="classOpenBabel_1_1patty.shtml#ac13d841afa2efae018835cc11f8cdb3a">patty</a>(<span class="keyword">const</span> std::string &amp;s)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        debug = <span class="keyword">false</span>;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        read_rules(s);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1patty.shtml#a1a77bb5fc8ac4b4bf97ebdd3515dc4f3">   62</a></span>&#160;    <a class="code" href="classOpenBabel_1_1patty.shtml#a1a77bb5fc8ac4b4bf97ebdd3515dc4f3">~patty</a>()</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        std::vector&lt;OBSmartsPattern*&gt;::iterator i;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">for</span> (i = _sp.begin();i != _sp.end();++i)</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            <span class="keyword">delete</span> *i;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1patty.shtml#a6a15f87df6da0fd11ee2dac41405607a">   68</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1patty.shtml#a6a15f87df6da0fd11ee2dac41405607a">debug_on</a>()</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        debug = <span class="keyword">true</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1patty.shtml#a313a1354a1326f8be596ee56189314e6">   72</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1patty.shtml#a313a1354a1326f8be596ee56189314e6">debug_off</a>()</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        debug = <span class="keyword">false</span>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">void</span> read_rules(<span class="keyword">const</span> std::string &amp;infile);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordtype">void</span> assign_rules(std::vector&lt;std::string&gt; &amp;rules);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">void</span> assign_types(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol,std::vector&lt;std::string&gt; &amp;atm_typ);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">void</span> assign_types(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol,std::vector&lt;int&gt; &amp;atm_typ);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">int</span> type_to_int(<span class="keyword">const</span> std::string &amp;type, <span class="keywordtype">bool</span> failOnUndefined= <span class="keyword">false</span>);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">int</span> Istype(<span class="keyword">const</span> std::string &amp;type);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;};</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;} <span class="comment">// end namespace OpenBabel</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor">#endif // OB_PATTY_H</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:118</div></div>
<div class="ttc" id="classOpenBabel_1_1patty_shtml"><div class="ttname"><a href="classOpenBabel_1_1patty.shtml">OpenBabel::patty</a></div><div class="ttdoc">Programmable Atom Typer. </div><div class="ttdef"><b>Definition:</b> patty.h:37</div></div>
<div class="ttc" id="classOpenBabel_1_1patty_shtml_a102e2b842e9f4ba368beb179887a9372"><div class="ttname"><a href="classOpenBabel_1_1patty.shtml#a102e2b842e9f4ba368beb179887a9372">OpenBabel::patty::patty</a></div><div class="ttdeci">patty(char *s)</div><div class="ttdef"><b>Definition:</b> patty.h:50</div></div>
<div class="ttc" id="classOpenBabel_1_1patty_shtml_a313a1354a1326f8be596ee56189314e6"><div class="ttname"><a href="classOpenBabel_1_1patty.shtml#a313a1354a1326f8be596ee56189314e6">OpenBabel::patty::debug_off</a></div><div class="ttdeci">void debug_off()</div><div class="ttdef"><b>Definition:</b> patty.h:72</div></div>
<div class="ttc" id="classOpenBabel_1_1patty_shtml_a1a77bb5fc8ac4b4bf97ebdd3515dc4f3"><div class="ttname"><a href="classOpenBabel_1_1patty.shtml#a1a77bb5fc8ac4b4bf97ebdd3515dc4f3">OpenBabel::patty::~patty</a></div><div class="ttdeci">~patty()</div><div class="ttdef"><b>Definition:</b> patty.h:62</div></div>
<div class="ttc" id="classOpenBabel_1_1patty_shtml_aaaee844f53e42a1ee6223ddb8beb89a0"><div class="ttname"><a href="classOpenBabel_1_1patty.shtml#aaaee844f53e42a1ee6223ddb8beb89a0">OpenBabel::patty::patty</a></div><div class="ttdeci">patty()</div><div class="ttdef"><b>Definition:</b> patty.h:46</div></div>
<div class="ttc" id="classOpenBabel_1_1patty_shtml_a6a15f87df6da0fd11ee2dac41405607a"><div class="ttname"><a href="classOpenBabel_1_1patty.shtml#a6a15f87df6da0fd11ee2dac41405607a">OpenBabel::patty::debug_on</a></div><div class="ttdeci">void debug_on()</div><div class="ttdef"><b>Definition:</b> patty.h:68</div></div>
<div class="ttc" id="parsmart_8h_shtml"><div class="ttname"><a href="parsmart_8h.shtml">parsmart.h</a></div><div class="ttdoc">Daylight SMARTS parser. </div></div>
<div class="ttc" id="classOpenBabel_1_1patty_shtml_ac13d841afa2efae018835cc11f8cdb3a"><div class="ttname"><a href="classOpenBabel_1_1patty.shtml#ac13d841afa2efae018835cc11f8cdb3a">OpenBabel::patty::patty</a></div><div class="ttdeci">patty(const std::string &amp;s)</div><div class="ttdef"><b>Definition:</b> patty.h:56</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Oct 15 2019 21:28:04 for Open Babel by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.13
</small></address>
</body>
</html>
